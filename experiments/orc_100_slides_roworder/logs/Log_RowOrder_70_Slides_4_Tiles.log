Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 00:19:56 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:20:10 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:20:10 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:20:10 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 00:20:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:20:23 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530002012-0701).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.335381854 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:====>                                                 (10 + 105) / 115][Stage 0:========================>                              (51 + 64) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:=====================================================> (111 + 4) / 115]                                                                                [Stage 1:=========================>                             (54 + 62) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 13.362809524 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 158  OR  partitionIndex = 159 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:========================>                              (51 + 64) / 115][Stage 2:==============================>                        (64 + 51) / 115][Stage 2:===============================>                       (66 + 49) / 115][Stage 2:================================>                      (67 + 48) / 115][Stage 2:===================================>                   (75 + 40) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:==========================================>            (89 + 26) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:================================>                      (68 + 48) / 116][Stage 3:==================================>                    (72 + 44) / 116][Stage 3:=====================================>                 (79 + 37) / 116][Stage 3:=======================================>               (83 + 33) / 116][Stage 3:============================================>          (93 + 23) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:==================================================>    (107 + 9) / 116][Stage 3:====================================================>  (111 + 5) / 116][Stage 3:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.828422401 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.655754508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=========================>                             (53 + 62) / 115][Stage 4:===========================>                           (58 + 57) / 115][Stage 4:================================>                      (67 + 48) / 115][Stage 4:==================================>                    (72 + 43) / 115][Stage 4:========================================>              (84 + 31) / 115][Stage 4:============================================>          (94 + 21) / 115][Stage 4:===============================================>      (101 + 14) / 115][Stage 4:=================================================>    (105 + 10) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:======================================================>(113 + 2) / 115]                                                                                [Stage 5:================================>                      (69 + 47) / 116][Stage 5:==================================>                    (72 + 44) / 116][Stage 5:==================================>                    (73 + 43) / 116][Stage 5:======================================>                (81 + 35) / 116][Stage 5:===========================================>           (92 + 24) / 116][Stage 5:==============================================>       (100 + 16) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.164776833 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR   partitionIndex = 241  OR  partitionIndex = 242 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 241  OR  partitionIndex = 242 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.620172967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (70 + 47) / 117][Stage 6:===================================>                   (75 + 42) / 117][Stage 6:========================================>              (86 + 31) / 117][Stage 6:=============================================>         (96 + 21) / 117][Stage 6:==============================================>       (101 + 16) / 117][Stage 6:===================================================>   (110 + 7) / 117]                                                                                [Stage 7:=================================>                     (72 + 46) / 118][Stage 7:===================================>                   (77 + 41) / 118][Stage 7:=========================================>             (89 + 29) / 118][Stage 7:===============================================>      (103 + 15) / 118][Stage 7:=================================================>    (108 + 10) / 118][Stage 7:=====================================================> (115 + 3) / 118][Stage 7:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.350012305 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.655592042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:================================>                      (67 + 48) / 115][Stage 8:=================================>                     (71 + 44) / 115][Stage 8:====================================>                  (76 + 39) / 115][Stage 8:============================================>          (92 + 23) / 115][Stage 8:==================================================>    (106 + 9) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:====================================>                  (76 + 40) / 116][Stage 9:===========================================>           (91 + 25) / 116][Stage 9:==============================================>       (100 + 16) / 116][Stage 9:================================================>     (104 + 12) / 116][Stage 9:=====================================================> (112 + 4) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.114811928 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 18  OR  partitionIndex = 19 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==============================>                       (65 + 50) / 115][Stage 10:================================>                     (70 + 45) / 115][Stage 10:======================================>               (83 + 32) / 115][Stage 10:==========================================>           (91 + 24) / 115][Stage 10:============================================>         (94 + 21) / 115][Stage 10:===============================================>     (104 + 11) / 115][Stage 10:====================================================> (112 + 3) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:===============================>                      (67 + 49) / 116][Stage 11:=====================================>                (80 + 36) / 116][Stage 11:========================================>             (87 + 29) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:=============================================>        (98 + 18) / 116][Stage 11:=================================================>    (107 + 9) / 116][Stage 11:====================================================> (112 + 4) / 116][Stage 11:=====================================================>(114 + 2) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.407376029 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 248  OR  partitionIndex = 249 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.765498843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:===========================>                          (61 + 60) / 121][Stage 12:==================================>                   (78 + 43) / 121][Stage 12:===========================================>         (100 + 21) / 121][Stage 12:=====================================================>(119 + 2) / 121]                                                                                [Stage 13:===========================>                          (62 + 60) / 122][Stage 13:==============================>                       (70 + 52) / 122][Stage 13:==================================>                   (79 + 43) / 122][Stage 13:=======================================>              (90 + 32) / 122][Stage 13:==============================================>      (106 + 16) / 122][Stage 13:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.119252495 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 171  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563644568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (70 + 45) / 115][Stage 14:========================================>             (87 + 28) / 115][Stage 14:=============================================>        (96 + 19) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:===================================================>  (109 + 6) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:================================>                     (70 + 46) / 116][Stage 15:=====================================>                (81 + 35) / 116][Stage 15:=============================================>        (97 + 19) / 116][Stage 15:==============================================>      (101 + 15) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.062894653 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.609107067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:============================>                         (63 + 58) / 121][Stage 16:====================================>                 (81 + 40) / 121][Stage 16:============================================>        (101 + 20) / 121][Stage 16:====================================================> (118 + 3) / 121]                                                                                [Stage 17:============================>                         (64 + 58) / 122][Stage 17:=================================>                    (76 + 46) / 122][Stage 17:========================================>             (92 + 30) / 122][Stage 17:============================================>        (102 + 20) / 122][Stage 17:================================================>    (112 + 10) / 122][Stage 17:===================================================>  (117 + 5) / 122][Stage 17:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.042159989 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.569815433 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (61 + 61) / 122][Stage 18:============================>                         (65 + 57) / 122][Stage 18:================================>                     (74 + 48) / 122][Stage 18:=========================================>            (93 + 29) / 122][Stage 18:===============================================>     (109 + 13) / 122][Stage 18:===================================================>  (116 + 6) / 122]                                                                                [Stage 19:===========================>                          (62 + 61) / 123][Stage 19:================================>                     (73 + 50) / 123][Stage 19:==========================================>           (96 + 27) / 123][Stage 19:===================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.610945236 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86  OR  pa rtitionIndex = 87  OR  partitionIndex = 100 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531553022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (61 + 60) / 121][Stage 20:===========================>                          (62 + 59) / 121][Stage 20:=================================>                    (74 + 47) / 121][Stage 20:==============================================>      (107 + 14) / 121][Stage 20:=====================================================>(119 + 2) / 121][Stage 20:=====================================================>(120 + 1) / 121]                                                                                [Stage 21:===========================>                          (61 + 61) / 122][Stage 21:=============================>                        (66 + 56) / 122][Stage 21:====================================>                 (83 + 39) / 122][Stage 21:==============================================>      (106 + 16) / 122][Stage 21:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.749782976 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443754054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=====================================>                (79 + 36) / 115][Stage 22:======================================>               (82 + 33) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:===================================================>  (109 + 6) / 115]                                                                                [Stage 23:======================================>               (83 + 33) / 116][Stage 23:===========================================>          (94 + 22) / 116][Stage 23:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.691186106 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  pa rtitionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (80 + 35) / 115][Stage 24:=======================================>              (85 + 30) / 115][Stage 24:=============================================>        (97 + 18) / 115][Stage 24:====================================================> (112 + 3) / 115][Stage 24:=====================================================>(113 + 2) / 115]                                                                                [Stage 25:=======================================>              (85 + 31) / 116][Stage 25:=============================================>       (100 + 16) / 116][Stage 25:===================================================>  (111 + 5) / 116][Stage 25:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.226979592 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.565770988 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:>                                                       (0 + 0) / 122][Stage 26:==========================>                           (60 + 62) / 122][Stage 26:=============================>                        (67 + 55) / 122][Stage 26:===================================>                  (81 + 41) / 122][Stage 26:==============================================>      (107 + 15) / 122][Stage 26:===================================================>  (117 + 5) / 122]                                                                                [Stage 27:===========================>                          (62 + 61) / 123][Stage 27:================================>                     (73 + 50) / 123][Stage 27:======================================>               (88 + 35) / 123][Stage 27:================================================>    (113 + 10) / 123][Stage 27:===================================================>  (117 + 6) / 123][Stage 27:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.714387146 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107  OR   partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482429559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=================================>                    (72 + 43) / 115][Stage 28:======================================>               (83 + 32) / 115][Stage 28:=============================================>        (97 + 18) / 115][Stage 28:================================================>    (105 + 10) / 115][Stage 28:====================================================> (112 + 3) / 115]                                                                                [Stage 29:================================>                     (70 + 46) / 116][Stage 29:=====================================>                (80 + 36) / 116][Stage 29:==============================================>       (99 + 17) / 116][Stage 29:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.10284997 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 57  OR  partitionIndex = 58 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481308894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (71 + 46) / 117][Stage 30:==================================>                   (75 + 42) / 117][Stage 30:========================================>             (88 + 29) / 117][Stage 30:==================================================>   (110 + 7) / 117]                                                                                [Stage 31:==============================>                       (67 + 51) / 118][Stage 31:=====================================>                (82 + 36) / 118][Stage 31:=============================================>        (99 + 19) / 118][Stage 31:================================================>    (108 + 10) / 118][Stage 31:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.327025266 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126  OR   partitionIndex = 127  OR  partitionIndex = 128 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499585432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (61 + 60) / 121][Stage 32:==============================>                       (68 + 53) / 121][Stage 32:======================================>               (87 + 34) / 121][Stage 32:=================================================>    (112 + 9) / 121][Stage 32:====================================================> (117 + 4) / 121][Stage 32:=====================================================>(120 + 1) / 121]                                                                                [Stage 33:===========================>                          (62 + 60) / 122][Stage 33:===============================>                      (72 + 50) / 122][Stage 33:====================================>                 (83 + 39) / 122][Stage 33:===========================================>          (99 + 23) / 122][Stage 33:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.598088726 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 22  OR  partitionIndex = 23 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504667074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (61 + 60) / 121][Stage 34:================================>                     (72 + 49) / 121][Stage 34:======================================>               (87 + 34) / 121][Stage 34:================================================>    (111 + 10) / 121]                                                                                [Stage 35:==============================>                       (68 + 54) / 122][Stage 35:==================================>                   (78 + 44) / 122][Stage 35:============================================>        (103 + 19) / 122][Stage 35:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.169622757 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454548673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (71 + 46) / 117][Stage 36:====================================>                 (78 + 39) / 117][Stage 36:=============================================>        (99 + 18) / 117][Stage 36:====================================================> (113 + 4) / 117]                                                                                [Stage 37:================================>                     (72 + 46) / 118][Stage 37:==================================>                   (76 + 42) / 118][Stage 37:=======================================>              (86 + 32) / 118][Stage 37:===========================================>          (95 + 23) / 118][Stage 37:================================================>    (108 + 10) / 118][Stage 37:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.409261699 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 214  OR  partitionIndex = 215 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43842868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==================================>                   (72 + 42) / 114][Stage 38:========================================>             (85 + 29) / 114][Stage 38:==============================================>      (101 + 13) / 114][Stage 38:==================================================>   (107 + 7) / 114][Stage 38:=====================================================>(112 + 2) / 114][Stage 38:=====================================================>(113 + 1) / 114]                                                                                [Stage 39:=====================================>                (79 + 36) / 115][Stage 39:===========================================>          (92 + 23) / 115][Stage 39:===============================================>     (102 + 13) / 115][Stage 39:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.044930054 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488710239 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===============================>                      (68 + 47) / 115][Stage 40:======================================>               (81 + 34) / 115][Stage 40:=========================================>            (89 + 26) / 115][Stage 40:====================================================> (111 + 4) / 115]                                                                                [Stage 41:================================>                     (69 + 47) / 116][Stage 41:====================================>                 (79 + 37) / 116][Stage 41:========================================>             (88 + 28) / 116][Stage 41:=============================================>       (100 + 16) / 116][Stage 41:=================================================>    (107 + 9) / 116][Stage 41:====================================================> (113 + 3) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.461450101 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  pa rtitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505515131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (61 + 60) / 121][Stage 42:============================>                         (64 + 57) / 121][Stage 42:=================================>                    (75 + 46) / 121][Stage 42:===========================================>          (98 + 23) / 121][Stage 42:===============================================>     (109 + 12) / 121][Stage 42:=====================================================>(120 + 1) / 121]                                                                                [Stage 43:===========================>                          (62 + 60) / 122][Stage 43:============================>                         (65 + 57) / 122][Stage 43:=====================================>                (85 + 37) / 122][Stage 43:==============================================>      (108 + 14) / 122][Stage 43:===================================================>  (117 + 5) / 122][Stage 43:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.689961776 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 242  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 242  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513871527 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 60) / 121][Stage 44:==============================>                       (68 + 53) / 121][Stage 44:=====================================>                (85 + 36) / 121][Stage 44:================================================>    (110 + 11) / 121][Stage 44:====================================================> (117 + 4) / 121]                                                                                [Stage 45:============================>                         (64 + 58) / 122][Stage 45:================================>                     (74 + 48) / 122][Stage 45:==============================================>      (106 + 16) / 122][Stage 45:==================================================>   (115 + 7) / 122][Stage 45:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.432856223 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:==============================>                       (69 + 52) / 121][Stage 46:==========================================>           (95 + 26) / 121][Stage 46:==================================================>   (113 + 8) / 121][Stage 46:=====================================================>(120 + 1) / 121]                                                                                [Stage 47:===========================>                          (62 + 60) / 122][Stage 47:==============================>                       (69 + 53) / 122][Stage 47:========================================>             (91 + 31) / 122][Stage 47:===============================================>     (110 + 12) / 122][Stage 47:====================================================> (119 + 3) / 122][Stage 47:=====================================================>(120 + 2) / 122][Stage 47:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.757235389 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR   partitionIndex = 232  OR  partitionIndex = 233 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484332234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===============================>                      (68 + 47) / 115][Stage 48:=====================================>                (80 + 35) / 115][Stage 48:==============================================>      (100 + 15) / 115][Stage 48:====================================================> (111 + 4) / 115]                                                                                [Stage 49:===================================>                  (77 + 39) / 116][Stage 49:===========================================>          (93 + 23) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.817484458 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429877536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==============================>                       (66 + 49) / 115][Stage 50:==================================>                   (74 + 41) / 115][Stage 50:========================================>             (86 + 29) / 115][Stage 50:==============================================>       (98 + 17) / 115][Stage 50:=====================================================>(113 + 2) / 115]                                                                                [Stage 51:=================================>                    (73 + 43) / 116][Stage 51:=====================================>                (81 + 35) / 116][Stage 51:=============================================>        (98 + 18) / 116][Stage 51:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.016010938 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  pa rtitionIndex = 64  OR  partitionIndex = 65 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437144767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:============================>                         (60 + 53) / 113][Stage 52:================================>                     (67 + 46) / 113][Stage 52:========================================>             (85 + 28) / 113][Stage 52:===============================================>     (102 + 11) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:================================>                     (68 + 46) / 114][Stage 53:===========================================>          (91 + 23) / 114][Stage 53:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.410206628 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 126  OR  partitionIndex = 127 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 126  OR  partitionIndex = 127 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457239733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:============================>                         (64 + 57) / 121][Stage 54:===================================>                  (79 + 42) / 121][Stage 54:=============================================>       (103 + 18) / 121][Stage 54:=====================================================>(119 + 2) / 121][Stage 54:=====================================================>(120 + 1) / 121]                                                                                [Stage 55:===========================>                          (61 + 61) / 122][Stage 55:================================>                     (73 + 49) / 122][Stage 55:======================================>               (86 + 36) / 122][Stage 55:===============================================>     (110 + 12) / 122][Stage 55:====================================================> (118 + 4) / 122][Stage 55:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.575402399 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR   partitionIndex = 172  OR  partitionIndex = 173 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (61 + 60) / 121][Stage 56:=================================>                    (75 + 46) / 121][Stage 56:=========================================>            (93 + 28) / 121][Stage 56:====================================================> (117 + 4) / 121][Stage 56:=====================================================>(119 + 2) / 121]                                                                                [Stage 57:===========================>                          (62 + 60) / 122][Stage 57:============================>                         (65 + 57) / 122][Stage 57:==================================>                   (79 + 43) / 122][Stage 57:==============================================>      (106 + 16) / 122][Stage 57:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.37785965 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 148  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 148  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467734576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 60) / 121][Stage 58:=============================>                        (65 + 56) / 121][Stage 58:====================================>                 (81 + 40) / 121][Stage 58:=============================================>       (103 + 18) / 121][Stage 58:===================================================>  (116 + 5) / 121]                                                                                [Stage 59:============================>                         (65 + 57) / 122][Stage 59:================================>                     (73 + 49) / 122][Stage 59:===========================================>          (99 + 23) / 122][Stage 59:===================================================>  (117 + 5) / 122][Stage 59:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.528450575 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 149  OR  partitionIndex = 150 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418071119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (70 + 45) / 115][Stage 60:======================================>               (81 + 34) / 115][Stage 60:=============================================>        (97 + 18) / 115][Stage 60:==================================================>   (108 + 7) / 115][Stage 60:=====================================================>(114 + 1) / 115]                                                                                [Stage 61:=================================>                    (73 + 43) / 116][Stage 61:=======================================>              (84 + 32) / 116][Stage 61:=============================================>        (98 + 18) / 116][Stage 61:===============================================>     (105 + 11) / 116][Stage 61:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.04193327 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410298804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (72 + 42) / 114][Stage 62:======================================>               (82 + 32) / 114][Stage 62:============================================>         (94 + 20) / 114][Stage 62:==================================================>   (106 + 8) / 114][Stage 62:====================================================> (111 + 3) / 114]                                                                                [Stage 63:========================================>             (86 + 29) / 115][Stage 63:===============================================>     (103 + 12) / 115][Stage 63:===================================================>  (109 + 6) / 115][Stage 63:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.065218884 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR   partitionIndex = 229  OR  partitionIndex = 244 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456772225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==========================>                           (60 + 61) / 121][Stage 64:============================>                         (64 + 57) / 121][Stage 64:==================================>                   (77 + 44) / 121][Stage 64:=============================================>       (103 + 18) / 121][Stage 64:=====================================================>(120 + 1) / 121]                                                                                [Stage 65:===========================>                          (62 + 60) / 122][Stage 65:=============================>                        (66 + 56) / 122][Stage 65:=====================================>                (85 + 37) / 122][Stage 65:============================================>        (103 + 19) / 122]                                                                                Time elapsed: 3.043209262 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  pa rtitionIndex = 112  OR  partitionIndex = 113 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 112  OR  partitionIndex = 113 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (62 + 59) / 121][Stage 66:==============================>                       (69 + 52) / 121][Stage 66:==========================================>           (96 + 25) / 121][Stage 66:================================================>    (111 + 10) / 121]                                                                                [Stage 67:===========================>                          (62 + 60) / 122][Stage 67:==============================>                       (70 + 52) / 122][Stage 67:========================================>             (91 + 31) / 122][Stage 67:==============================================>      (107 + 15) / 122][Stage 67:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.193357446 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 30  OR  partitionIndex = 31 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416431408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==================================>                   (74 + 41) / 115][Stage 68:==========================================>           (91 + 24) / 115][Stage 68:==============================================>      (100 + 15) / 115][Stage 68:==================================================>   (108 + 7) / 115]                                                                                [Stage 69:=================================>                    (72 + 44) / 116][Stage 69:=========================================>            (90 + 26) / 116][Stage 69:==============================================>      (101 + 15) / 116][Stage 69:=================================================>    (107 + 9) / 116][Stage 69:===================================================>  (110 + 6) / 116][Stage 69:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 5.406731661 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR   partitionIndex = 201  OR  partitionIndex = 216 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (69 + 46) / 115][Stage 70:=====================================>                (80 + 35) / 115][Stage 70:===========================================>          (93 + 22) / 115][Stage 70:===============================================>     (103 + 12) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:=====================================>                (81 + 35) / 116][Stage 71:============================================>         (95 + 21) / 116][Stage 71:==================================================>   (108 + 8) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.234876326 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  pa rtitionIndex = 91  OR  partitionIndex = 104 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387809681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:>                                                       (0 + 0) / 114][Stage 72:==================================>                   (72 + 42) / 114][Stage 72:======================================>               (81 + 33) / 114][Stage 72:============================================>         (94 + 20) / 114][Stage 72:===============================================>     (103 + 11) / 114][Stage 72:===================================================>  (108 + 6) / 114]                                                                                [Stage 73:=======================================>              (84 + 31) / 115][Stage 73:===========================================>          (92 + 23) / 115][Stage 73:==============================================>      (101 + 14) / 115][Stage 73:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.130744127 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72  OR  pa rtitionIndex = 73  OR  partitionIndex = 88 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===================================>                  (74 + 40) / 114][Stage 74:=========================================>            (87 + 27) / 114][Stage 74:==============================================>      (101 + 13) / 114][Stage 74:===================================================>  (109 + 5) / 114]                                                                                [Stage 75:======================================>               (81 + 34) / 115][Stage 75:==========================================>           (91 + 24) / 115][Stage 75:===============================================>     (102 + 13) / 115][Stage 75:==================================================>   (108 + 7) / 115][Stage 75:=====================================================>(113 + 2) / 115][Stage 75:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.376292843 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 153  OR  partitionIndex = 154 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 153  OR  partitionIndex = 154 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413965052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (71 + 46) / 117][Stage 76:===================================>                  (77 + 40) / 117][Stage 76:========================================>             (87 + 30) / 117][Stage 76:============================================>         (96 + 21) / 117][Stage 76:==================================================>   (109 + 8) / 117]                                                                                [Stage 77:=================================>                    (73 + 45) / 118][Stage 77:==================================>                   (75 + 43) / 118][Stage 77:========================================>             (89 + 29) / 118][Stage 77:=============================================>        (99 + 19) / 118][Stage 77:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.791825933 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 80  OR  partitionIndex = 81 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404146109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===============================>                      (67 + 48) / 115][Stage 78:====================================>                 (78 + 37) / 115][Stage 78:===========================================>          (93 + 22) / 115][Stage 78:==================================================>   (107 + 8) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:================================>                     (69 + 47) / 116][Stage 79:===================================>                  (77 + 39) / 116][Stage 79:============================================>         (95 + 21) / 116][Stage 79:===============================================>     (103 + 13) / 116][Stage 79:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.950705924 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455074028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:==========================>                           (60 + 62) / 122][Stage 80:===============================>                      (71 + 51) / 122][Stage 80:=====================================>                (85 + 37) / 122][Stage 80:=============================================>       (105 + 17) / 122][Stage 80:=====================================================>(121 + 1) / 122]                                                                                [Stage 81:===========================>                          (62 + 61) / 123][Stage 81:=================================>                    (76 + 47) / 123][Stage 81:===========================================>         (100 + 23) / 123][Stage 81:================================================>    (113 + 10) / 123]                                                                                Time elapsed: 3.377587623 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 189  OR  partitionIndex = 190 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 189  OR  partitionIndex = 190 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454361664 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==========================>                           (60 + 62) / 122][Stage 82:==============================>                       (69 + 53) / 122][Stage 82:======================================>               (86 + 36) / 122][Stage 82:==============================================>      (106 + 16) / 122]                                                                                [Stage 83:===========================>                          (62 + 61) / 123][Stage 83:=============================>                        (67 + 56) / 123][Stage 83:====================================>                 (84 + 39) / 123][Stage 83:===========================================>         (102 + 21) / 123][Stage 83:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.389304286 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455093766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 61) / 122][Stage 84:=============================>                        (67 + 55) / 122][Stage 84:====================================>                 (83 + 39) / 122][Stage 84:===============================================>     (110 + 12) / 122]                                                                                [Stage 85:===========================>                          (62 + 61) / 123][Stage 85:==============================>                       (70 + 53) / 123][Stage 85:=========================================>            (94 + 29) / 123][Stage 85:==================================================>   (114 + 9) / 123][Stage 85:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.314118132 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR   partitionIndex = 228  OR  partitionIndex = 229 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398682041 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (71 + 43) / 114][Stage 86:=====================================>                (80 + 34) / 114][Stage 86:===========================================>          (91 + 23) / 114][Stage 86:==============================================>       (99 + 15) / 114][Stage 86:===================================================>  (108 + 6) / 114]                                                                                [Stage 87:========================================>             (86 + 29) / 115][Stage 87:=============================================>        (96 + 19) / 115][Stage 87:===============================================>     (102 + 13) / 115][Stage 87:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.004441328 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:====================================>                 (78 + 36) / 114][Stage 88:===========================================>          (91 + 23) / 114][Stage 88:==============================================>      (100 + 14) / 114][Stage 88:===================================================>  (109 + 5) / 114][Stage 88:=====================================================>(113 + 1) / 114]                                                                                [Stage 89:=====================================>                (79 + 36) / 115][Stage 89:=========================================>            (88 + 27) / 115][Stage 89:=============================================>        (96 + 19) / 115][Stage 89:==============================================>      (101 + 14) / 115][Stage 89:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 4.686707176 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443989914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==========================>                           (60 + 62) / 122][Stage 90:=============================>                        (67 + 55) / 122][Stage 90:====================================>                 (83 + 39) / 122][Stage 90:==============================================>      (108 + 14) / 122][Stage 90:=====================================================>(120 + 2) / 122]                                                                                [Stage 91:==========================>                           (61 + 62) / 123][Stage 91:=============================>                        (67 + 56) / 123][Stage 91:===================================>                  (80 + 43) / 123][Stage 91:===========================================>         (100 + 23) / 123][Stage 91:====================================================> (119 + 4) / 123][Stage 91:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.689678965 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 221 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 221 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380846001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (71 + 46) / 117][Stage 92:==================================>                   (74 + 43) / 117][Stage 92:========================================>             (87 + 30) / 117][Stage 92:===============================================>     (104 + 13) / 117][Stage 92:====================================================> (114 + 3) / 117]                                                                                [Stage 93:================================>                     (72 + 46) / 118][Stage 93:===================================>                  (78 + 40) / 118][Stage 93:=========================================>            (91 + 27) / 118][Stage 93:============================================>         (98 + 20) / 118][Stage 93:================================================>    (108 + 10) / 118][Stage 93:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.449095879 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 2  OR  part itionIndex = 16  OR  partitionIndex = 17 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 2  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441912523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 60) / 121][Stage 94:==============================>                       (68 + 53) / 121][Stage 94:===================================>                  (79 + 42) / 121][Stage 94:===========================================>          (98 + 23) / 121][Stage 94:=====================================================>(119 + 2) / 121]                                                                                [Stage 95:===========================>                          (61 + 61) / 122][Stage 95:==============================>                       (69 + 53) / 122][Stage 95:==================================>                   (79 + 43) / 122][Stage 95:===============================================>     (109 + 13) / 122][Stage 95:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.489215623 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26  OR  pa rtitionIndex = 27  OR  partitionIndex = 40 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391161703 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===============================>                      (67 + 48) / 115][Stage 96:====================================>                 (78 + 37) / 115][Stage 96:============================================>         (94 + 21) / 115][Stage 96:==============================================>      (101 + 14) / 115][Stage 96:====================================================> (111 + 4) / 115]                                                                                [Stage 97:===================================>                  (77 + 39) / 116][Stage 97:==========================================>           (92 + 24) / 116][Stage 97:===============================================>     (103 + 13) / 116][Stage 97:=================================================>    (107 + 9) / 116][Stage 97:====================================================> (112 + 4) / 116][Stage 97:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.577355215 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239  OR   partitionIndex = 253  OR  partitionIndex = 254 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239  OR  partitionIndex = 253  OR  partitionIndex = 254 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402599751 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===============================>                      (68 + 47) / 115][Stage 98:======================================>               (82 + 33) / 115][Stage 98:=========================================>            (89 + 26) / 115][Stage 98:==================================================>   (108 + 7) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:================================>                     (70 + 46) / 116][Stage 99:=====================================>                (80 + 36) / 116][Stage 99:===========================================>          (94 + 22) / 116][Stage 99:==============================================>      (102 + 14) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.9768991 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388869272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (71 + 46) / 117][Stage 100:=================================>                   (74 + 43) / 117][Stage 100:====================================>                (81 + 36) / 117][Stage 100:=============================================>      (103 + 14) / 117][Stage 100:==================================================>  (111 + 6) / 117][Stage 100:====================================================>(116 + 1) / 117]                                                                                [Stage 101:================================>                    (72 + 46) / 118][Stage 101:==================================>                  (76 + 42) / 118][Stage 101:==========================================>          (95 + 23) / 118][Stage 101:==============================================>     (106 + 12) / 118][Stage 101:==================================================>  (112 + 6) / 118][Stage 101:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.600066731 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 62  OR  partitionIndex = 63 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 62  OR  partitionIndex = 63 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421104849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=====================================>               (81 + 34) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:==================================================>  (109 + 6) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:=======================================>             (87 + 29) / 116][Stage 103:============================================>       (100 + 16) / 116][Stage 103:==================================================>  (110 + 6) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.842665743 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 29  OR  partitionIndex = 30 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414030357 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 46) / 117][Stage 104:=================================>                   (75 + 42) / 117][Stage 104:======================================>              (85 + 32) / 117][Stage 104:==============================================>     (104 + 13) / 117][Stage 104:====================================================>(115 + 2) / 117]                                                                                [Stage 105:================================>                    (72 + 46) / 118][Stage 105:==================================>                  (76 + 42) / 118][Stage 105:==========================================>          (94 + 24) / 118][Stage 105:=================================================>   (111 + 7) / 118][Stage 105:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.281813787 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  p artitionIndex = 101  OR  partitionIndex = 116 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372422618 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (71 + 46) / 117][Stage 106:=================================>                   (73 + 44) / 117][Stage 106:======================================>              (86 + 31) / 117][Stage 106:============================================>       (101 + 16) / 117][Stage 106:==================================================>  (112 + 5) / 117]                                                                                [Stage 107:================================>                    (72 + 46) / 118][Stage 107:================================>                    (73 + 45) / 118][Stage 107:======================================>              (85 + 33) / 118][Stage 107:============================================>       (100 + 18) / 118][Stage 107:=================================================>   (110 + 8) / 118][Stage 107:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.437470447 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386339917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (82 + 32) / 114][Stage 108:==========================================>          (92 + 22) / 114][Stage 108:==============================================>     (101 + 13) / 114][Stage 108:===================================================> (110 + 4) / 114][Stage 108:====================================================>(113 + 1) / 114]                                                                                [Stage 109:========================================>            (88 + 27) / 115][Stage 109:===========================================>         (95 + 20) / 115][Stage 109:=============================================>      (101 + 14) / 115][Stage 109:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.193585472 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR   partitionIndex = 129  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (80 + 34) / 114][Stage 110:==========================================>          (92 + 22) / 114][Stage 110:==============================================>     (102 + 12) / 114][Stage 110:====================================================>(113 + 1) / 114]                                                                                [Stage 111:======================================>              (84 + 31) / 115][Stage 111:===========================================>         (94 + 21) / 115][Stage 111:=============================================>       (99 + 16) / 115][Stage 111:===============================================>    (105 + 10) / 115][Stage 111:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.356539464 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  pa rtitionIndex = 95  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374039242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (71 + 46) / 117][Stage 112:=====================================>               (82 + 35) / 117][Stage 112:============================================>        (98 + 19) / 117][Stage 112:=================================================>   (110 + 7) / 117][Stage 112:====================================================>(116 + 1) / 117]                                                                                [Stage 113:================================>                    (72 + 46) / 118][Stage 113:=================================>                   (74 + 44) / 118][Stage 113:=========================================>           (92 + 26) / 118][Stage 113:============================================>       (102 + 16) / 118][Stage 113:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.31332577 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR   partitionIndex = 159  OR  partitionIndex = 172 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409433153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 61) / 122][Stage 114:==============================>                      (70 + 52) / 122][Stage 114:=======================================>             (91 + 31) / 122][Stage 114:===============================================>    (111 + 11) / 122]                                                                                [Stage 115:===========================>                         (64 + 59) / 123][Stage 115:================================>                    (76 + 47) / 123][Stage 115:==========================================>          (98 + 25) / 123][Stage 115:==============================================>     (110 + 13) / 123][Stage 115:===================================================> (119 + 4) / 123][Stage 115:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.405310636 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237  OR   partitionIndex = 252  OR  partitionIndex = 253 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 252  OR  partitionIndex = 253 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417291186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (63 + 59) / 122][Stage 116:=================================>                   (78 + 44) / 122][Stage 116:=============================================>      (106 + 16) / 122][Stage 116:====================================================>(120 + 2) / 122]                                                                                [Stage 117:==========================>                          (62 + 61) / 123][Stage 117:============================>                        (65 + 58) / 123][Stage 117:==================================>                  (81 + 42) / 123][Stage 117:========================================>            (94 + 29) / 123][Stage 117:==============================================>     (111 + 12) / 123]                                                                                Time elapsed: 3.208378966 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 213  OR  partitionIndex = 214 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 213  OR  partitionIndex = 214 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353655692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:=========================================>           (89 + 26) / 115][Stage 118:===============================================>    (105 + 10) / 115][Stage 118:====================================================>(113 + 2) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=====================================>               (81 + 35) / 116][Stage 119:=========================================>           (91 + 25) / 116][Stage 119:==============================================>     (104 + 12) / 116][Stage 119:===================================================> (113 + 3) / 116][Stage 119:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.106561722 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  pa rtitionIndex = 104  OR  partitionIndex = 105 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:====================================>                (80 + 35) / 115][Stage 120:======================================>              (84 + 31) / 115][Stage 120:==========================================>          (92 + 23) / 115][Stage 120:================================================>    (106 + 9) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:=====================================>               (83 + 33) / 116][Stage 121:==========================================>          (94 + 22) / 116][Stage 121:==================================================>  (111 + 5) / 116][Stage 121:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.983950472 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 42  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409905011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 61) / 122][Stage 122:=============================>                       (68 + 54) / 122][Stage 122:=====================================>               (87 + 35) / 122][Stage 122:=============================================>      (107 + 15) / 122]                                                                                [Stage 123:==========================>                          (62 + 61) / 123][Stage 123:=================================>                   (77 + 46) / 123][Stage 123:========================================>            (94 + 29) / 123][Stage 123:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.205384931 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  par titionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356736163 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:======================================>              (83 + 32) / 115][Stage 124:==========================================>          (93 + 22) / 115][Stage 124:============================================>        (97 + 18) / 115][Stage 124:================================================>    (106 + 9) / 115]                                                                                [Stage 125:=======================================>             (86 + 30) / 116][Stage 125:============================================>        (98 + 18) / 116][Stage 125:=================================================>   (108 + 8) / 116][Stage 125:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.623582529 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423010865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (62 + 60) / 122][Stage 126:===============================>                     (72 + 50) / 122][Stage 126:=======================================>             (92 + 30) / 122][Stage 126:=================================================>   (114 + 8) / 122][Stage 126:====================================================>(121 + 1) / 122]                                                                                [Stage 127:===========================>                         (63 + 60) / 123][Stage 127:==============================>                      (71 + 52) / 123][Stage 127:==================================>                  (80 + 43) / 123][Stage 127:==============================================>     (110 + 13) / 123][Stage 127:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.195467273 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358526769 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=================================>                   (71 + 43) / 114][Stage 128:=========================================>           (90 + 24) / 114][Stage 128:==============================================>     (101 + 13) / 114][Stage 128:================================================>    (105 + 9) / 114][Stage 128:===================================================> (111 + 3) / 114][Stage 128:====================================================>(113 + 1) / 114]                                                                                [Stage 129:=================================>                   (72 + 43) / 115][Stage 129:=====================================>               (82 + 33) / 115][Stage 129:==========================================>          (93 + 22) / 115][Stage 129:==============================================>     (102 + 13) / 115][Stage 129:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.205524288 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367971868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=================================>                   (72 + 43) / 115][Stage 130:=========================================>           (91 + 24) / 115][Stage 130:=============================================>       (99 + 16) / 115][Stage 130:=================================================>   (108 + 7) / 115][Stage 130:====================================================>(113 + 2) / 115]                                                                                [Stage 131:===============================>                     (68 + 48) / 116][Stage 131:====================================>                (79 + 37) / 116][Stage 131:==========================================>          (93 + 23) / 116][Stage 131:================================================>    (107 + 9) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.063995718 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405892189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 61) / 122][Stage 132:===========================>                         (64 + 58) / 122][Stage 132:===================================>                 (82 + 40) / 122][Stage 132:=============================================>      (107 + 15) / 122][Stage 132:====================================================>(120 + 2) / 122]                                                                                [Stage 133:==========================>                          (62 + 61) / 123][Stage 133:============================>                        (66 + 57) / 123][Stage 133:==================================>                  (79 + 44) / 123][Stage 133:=============================================>      (108 + 15) / 123][Stage 133:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.143047128 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354690571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==================================>                  (74 + 40) / 114][Stage 134:=======================================>             (84 + 30) / 114][Stage 134:===========================================>         (93 + 21) / 114][Stage 134:==============================================>     (103 + 11) / 114][Stage 134:===================================================> (111 + 3) / 114]                                                                                [Stage 135:===================================>                 (78 + 37) / 115][Stage 135:=======================================>             (86 + 29) / 115][Stage 135:============================================>        (96 + 19) / 115][Stage 135:=================================================>   (108 + 7) / 115][Stage 135:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.118558996 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR   partitionIndex = 117  OR  partitionIndex = 118 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375633319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===============================>                     (68 + 47) / 115][Stage 136:====================================>                (79 + 36) / 115][Stage 136:=========================================>           (91 + 24) / 115][Stage 136:===============================================>    (104 + 11) / 115][Stage 136:===================================================> (112 + 3) / 115]                                                                                [Stage 137:===============================>                     (69 + 47) / 116][Stage 137:====================================>                (79 + 37) / 116][Stage 137:=========================================>           (90 + 26) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:==================================================>  (111 + 5) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.152652435 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR   partitionIndex = 240  OR  partitionIndex = 241 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401244327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 61) / 122][Stage 138:============================>                        (65 + 57) / 122][Stage 138:==================================>                  (80 + 42) / 122][Stage 138:=============================================>      (107 + 15) / 122][Stage 138:====================================================>(120 + 2) / 122]                                                                                [Stage 139:============================>                        (66 + 57) / 123][Stage 139:================================>                    (76 + 47) / 123][Stage 139:===========================================>        (104 + 19) / 123][Stage 139:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.143674849 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  pa rtitionIndex = 48  OR  partitionIndex = 49 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:>                                                      (0 + 0) / 122][Stage 140:==========================>                          (60 + 62) / 122][Stage 140:===============================>                     (72 + 50) / 122][Stage 140:======================================>              (88 + 34) / 122][Stage 140:=============================================>      (107 + 15) / 122]                                                                                [Stage 141:==========================>                          (61 + 62) / 123][Stage 141:===============================>                     (72 + 51) / 123][Stage 141:=====================================>               (86 + 37) / 123][Stage 141:============================================>       (106 + 17) / 123][Stage 141:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.27251827 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 221  OR  partitionIndex = 222 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 221  OR  partitionIndex = 222 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366309016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (72 + 43) / 115][Stage 142:========================================>            (88 + 27) / 115][Stage 142:============================================>        (96 + 19) / 115][Stage 142:==============================================>     (103 + 12) / 115][Stage 142:====================================================>(113 + 2) / 115]                                                                                [Stage 143:====================================>                (79 + 37) / 116][Stage 143:========================================>            (89 + 27) / 116][Stage 143:=================================================>   (108 + 8) / 116][Stage 143:===================================================> (112 + 4) / 116][Stage 143:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.206698842 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 26  OR  partitionIndex = 27 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375166993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===============================>                     (68 + 47) / 115][Stage 144:===================================>                 (78 + 37) / 115][Stage 144:==========================================>          (92 + 23) / 115][Stage 144:==============================================>     (102 + 13) / 115][Stage 144:===================================================> (112 + 3) / 115]                                                                                [Stage 145:=================================>                   (74 + 42) / 116][Stage 145:======================================>              (84 + 32) / 116][Stage 145:=============================================>       (99 + 17) / 116][Stage 145:=================================================>   (109 + 7) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.037060964 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182  OR   partitionIndex = 183  OR  partitionIndex = 192 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361799175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:====================================>                (79 + 35) / 114][Stage 146:============================================>        (95 + 19) / 114][Stage 146:===============================================>    (104 + 10) / 114][Stage 146:==================================================>  (109 + 5) / 114][Stage 146:====================================================>(112 + 2) / 114]                                                                                [Stage 147:===================================>                 (77 + 38) / 115][Stage 147:=========================================>           (90 + 25) / 115][Stage 147:=============================================>      (100 + 15) / 115][Stage 147:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.172863882 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 86  OR  partitionIndex = 87 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 86  OR  partitionIndex = 87 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (71 + 43) / 114][Stage 148:=======================================>             (85 + 29) / 114][Stage 148:==========================================>          (92 + 22) / 114][Stage 148:==============================================>     (103 + 11) / 114][Stage 148:===================================================> (111 + 3) / 114]                                                                                [Stage 149:=========================================>           (89 + 26) / 115][Stage 149:============================================>        (96 + 19) / 115][Stage 149:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 2.842858495 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 125  OR  partitionIndex = 126 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 125  OR  partitionIndex = 126 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406171022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (61 + 61) / 122][Stage 150:============================>                        (65 + 57) / 122][Stage 150:====================================>                (85 + 37) / 122][Stage 150:==============================================>     (108 + 14) / 122]                                                                                [Stage 151:===========================>                         (63 + 60) / 123][Stage 151:===============================>                     (72 + 51) / 123][Stage 151:=========================================>           (97 + 26) / 123][Stage 151:=================================================>   (115 + 8) / 123][Stage 151:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.382873158 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 62) / 122][Stage 152:===============================>                     (72 + 50) / 122][Stage 152:=====================================>               (86 + 36) / 122][Stage 152:==============================================>     (108 + 14) / 122][Stage 152:====================================================>(121 + 1) / 122]                                                                                [Stage 153:==========================>                          (62 + 61) / 123][Stage 153:=============================>                       (68 + 55) / 123][Stage 153:======================================>              (90 + 33) / 123][Stage 153:===============================================>    (112 + 11) / 123][Stage 153:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.290026797 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369570005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (72 + 45) / 117][Stage 154:====================================>                (81 + 36) / 117][Stage 154:==========================================>          (93 + 24) / 117][Stage 154:====================================================>(115 + 2) / 117]                                                                                [Stage 155:================================>                    (72 + 46) / 118][Stage 155:=================================>                   (75 + 43) / 118][Stage 155:=========================================>           (92 + 26) / 118][Stage 155:================================================>    (109 + 9) / 118][Stage 155:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.313031726 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 235  OR   partitionIndex = 250  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370290187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (71 + 46) / 117][Stage 156:====================================>                (80 + 37) / 117][Stage 156:===========================================>         (95 + 22) / 117][Stage 156:=================================================>   (109 + 8) / 117][Stage 156:====================================================>(115 + 2) / 117]                                                                                [Stage 157:================================>                    (72 + 46) / 118][Stage 157:===================================>                 (79 + 39) / 118][Stage 157:===========================================>         (96 + 22) / 118][Stage 157:================================================>    (109 + 9) / 118][Stage 157:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.451693365 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  pa rtitionIndex = 40  OR  partitionIndex = 41 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371889993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (70 + 45) / 115][Stage 158:====================================>                (79 + 36) / 115][Stage 158:============================================>        (96 + 19) / 115][Stage 158:===================================================> (112 + 3) / 115]                                                                                [Stage 159:===============================>                     (68 + 48) / 116][Stage 159:=====================================>               (81 + 35) / 116][Stage 159:==========================================>          (93 + 23) / 116][Stage 159:===============================================>    (106 + 10) / 116][Stage 159:==================================================>  (111 + 5) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.805657902 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 102  OR   partitionIndex = 116  OR  partitionIndex = 117 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 116  OR  partitionIndex = 117 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373318258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==============================>                      (67 + 48) / 115][Stage 160:===================================>                 (78 + 37) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:================================================>    (106 + 9) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:=================================>                   (73 + 43) / 116][Stage 161:=======================================>             (87 + 29) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.836990209 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR   partitionIndex = 155  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393635283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (62 + 59) / 121][Stage 162:=============================>                       (68 + 53) / 121][Stage 162:========================================>            (92 + 29) / 121][Stage 162:=================================================>   (112 + 9) / 121][Stage 162:====================================================>(119 + 2) / 121]                                                                                [Stage 163:==========================>                          (62 + 60) / 122][Stage 163:=============================>                       (68 + 54) / 122][Stage 163:==================================>                  (80 + 42) / 122][Stage 163:===========================================>        (102 + 20) / 122][Stage 163:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.413398038 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99  OR  pa rtitionIndex = 112  OR  partitionIndex = 113 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374665682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==============================>                      (67 + 48) / 115][Stage 164:===================================>                 (78 + 37) / 115][Stage 164:========================================>            (88 + 27) / 115][Stage 164:=============================================>       (98 + 17) / 115][Stage 164:==================================================>  (109 + 6) / 115]                                                                                [Stage 165:===================================>                 (78 + 38) / 116][Stage 165:=========================================>           (90 + 26) / 116][Stage 165:===============================================>    (106 + 10) / 116][Stage 165:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.913890662 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  pa rtitionIndex = 72  OR  partitionIndex = 73 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395082308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 60) / 121][Stage 166:=============================>                       (68 + 53) / 121][Stage 166:=====================================>               (86 + 35) / 121][Stage 166:=================================================>   (112 + 9) / 121]                                                                                [Stage 167:============================>                        (65 + 57) / 122][Stage 167:=================================>                   (78 + 44) / 122][Stage 167:===========================================>        (102 + 20) / 122][Stage 167:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.060586954 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR   partitionIndex = 169  OR  partitionIndex = 184 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 184 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35800241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (71 + 46) / 117][Stage 168:=================================>                   (75 + 42) / 117][Stage 168:========================================>            (90 + 27) / 117][Stage 168:===============================================>    (106 + 11) / 117]                                                                                [Stage 169:================================>                    (72 + 46) / 118][Stage 169:===================================>                 (80 + 38) / 118][Stage 169:==========================================>          (94 + 24) / 118][Stage 169:==============================================>     (105 + 13) / 118][Stage 169:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.22955684 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 107  OR  p artitionIndex = 122  OR  partitionIndex = 123 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 107  OR  partitionIndex = 122  OR  partitionIndex = 123 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352828147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=======================================>             (85 + 29) / 114][Stage 170:===========================================>         (94 + 20) / 114][Stage 170:==============================================>     (103 + 11) / 114][Stage 170:===================================================> (110 + 4) / 114]                                                                                [Stage 171:========================================>            (87 + 28) / 115][Stage 171:===========================================>         (94 + 21) / 115][Stage 171:==============================================>     (103 + 12) / 115][Stage 171:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.921900716 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  pa rtitionIndex = 31  OR  partitionIndex = 44 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:====================================>                (79 + 35) / 114][Stage 172:========================================>            (88 + 26) / 114][Stage 172:================================================>    (105 + 9) / 114][Stage 172:===================================================> (111 + 3) / 114]                                                                                [Stage 173:==================================>                  (75 + 40) / 115][Stage 173:=======================================>             (86 + 29) / 115][Stage 173:===========================================>         (95 + 20) / 115][Stage 173:================================================>    (106 + 9) / 115][Stage 173:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.480114813 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361477142 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (70 + 44) / 114][Stage 174:=======================================>             (86 + 28) / 114][Stage 174:============================================>        (95 + 19) / 114][Stage 174:===============================================>    (104 + 10) / 114][Stage 174:===================================================> (111 + 3) / 114]                                                                                [Stage 175:======================================>              (83 + 32) / 115][Stage 175:===========================================>         (95 + 20) / 115][Stage 175:==============================================>     (102 + 13) / 115][Stage 175:==================================================>  (110 + 5) / 115][Stage 175:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.128764072 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (74 + 40) / 114][Stage 176:===========================================>         (94 + 20) / 114][Stage 176:=============================================>      (100 + 14) / 114][Stage 176:==================================================>  (108 + 6) / 114][Stage 176:====================================================>(113 + 1) / 114]                                                                                [Stage 177:==================================>                  (74 + 41) / 115][Stage 177:=========================================>           (91 + 24) / 115][Stage 177:============================================>        (97 + 18) / 115][Stage 177:==============================================>     (103 + 12) / 115][Stage 177:==================================================>  (109 + 6) / 115][Stage 177:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.06875522 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 157 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 157 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449885573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=================================>                   (71 + 43) / 114][Stage 178:======================================>              (82 + 32) / 114][Stage 178:===========================================>         (93 + 21) / 114][Stage 178:===============================================>    (104 + 10) / 114][Stage 178:===================================================> (110 + 4) / 114]                                                                                [Stage 179:====================================>                (80 + 35) / 115][Stage 179:=============================================>      (101 + 14) / 115][Stage 179:================================================>    (106 + 9) / 115][Stage 179:==================================================>  (109 + 6) / 115][Stage 179:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.093136267 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169  OR   partitionIndex = 184  OR  partitionIndex = 185 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 184  OR  partitionIndex = 185 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420433448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 60) / 121][Stage 180:==============================>                      (70 + 51) / 121][Stage 180:=========================================>           (95 + 26) / 121][Stage 180:===============================================>    (110 + 11) / 121]                                                                                [Stage 181:===========================>                         (64 + 58) / 122][Stage 181:=================================>                   (76 + 46) / 122][Stage 181:=========================================>           (96 + 26) / 122][Stage 181:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.270029763 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 25  OR  partitionIndex = 26 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356847379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (71 + 46) / 117][Stage 182:=====================================>               (83 + 34) / 117][Stage 182:=============================================>      (102 + 15) / 117]                                                                                [Stage 183:================================>                    (72 + 46) / 118][Stage 183:==================================>                  (77 + 41) / 118][Stage 183:==========================================>          (94 + 24) / 118][Stage 183:=================================================>   (111 + 7) / 118][Stage 183:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.02096295 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 92  OR  partitionIndex = 93 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332580437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:======================================>              (83 + 32) / 115][Stage 184:===========================================>         (95 + 20) / 115][Stage 184:=================================================>   (108 + 7) / 115]                                                                                [Stage 185:======================================>              (84 + 32) / 116][Stage 185:==============================================>     (104 + 12) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.49614452 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR   partitionIndex = 246  OR  partitionIndex = 247 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399628637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (62 + 60) / 122][Stage 186:===============================>                     (73 + 49) / 122][Stage 186:===========================================>        (101 + 21) / 122][Stage 186:====================================================>(120 + 2) / 122]                                                                                [Stage 187:==========================>                          (62 + 61) / 123][Stage 187:===============================>                     (72 + 51) / 123][Stage 187:=======================================>             (91 + 32) / 123][Stage 187:=================================================>   (114 + 9) / 123][Stage 187:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.433418547 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104  OR  p artitionIndex = 105  OR  partitionIndex = 120 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 120 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394525295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (61 + 61) / 122][Stage 188:=============================>                       (69 + 53) / 122][Stage 188:=====================================>               (86 + 36) / 122][Stage 188:==============================================>     (108 + 14) / 122][Stage 188:====================================================>(121 + 1) / 122]                                                                                [Stage 189:===========================>                         (64 + 59) / 123][Stage 189:==================================>                  (80 + 43) / 123][Stage 189:==========================================>         (100 + 23) / 123][Stage 189:==================================================>  (118 + 5) / 123][Stage 189:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.470091312 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32  OR  pa rtitionIndex = 33  OR  partitionIndex = 48 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 62) / 122][Stage 190:===========================>                         (63 + 59) / 122][Stage 190:=================================>                   (76 + 46) / 122][Stage 190:==============================================>     (108 + 14) / 122][Stage 190:====================================================>(121 + 1) / 122]                                                                                [Stage 191:==========================>                          (62 + 61) / 123][Stage 191:============================>                        (67 + 56) / 123][Stage 191:=====================================>               (88 + 35) / 123][Stage 191:=================================================>   (114 + 9) / 123][Stage 191:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.07794784 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR   partitionIndex = 173  OR  partitionIndex = 188 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366846037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (71 + 46) / 117][Stage 192:=================================>                   (75 + 42) / 117][Stage 192:==========================================>          (94 + 23) / 117][Stage 192:====================================================>(115 + 2) / 117][Stage 192:====================================================>(116 + 1) / 117]                                                                                [Stage 193:================================>                    (73 + 45) / 118][Stage 193:========================================>            (90 + 28) / 118][Stage 193:==============================================>     (106 + 12) / 118][Stage 193:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.261596943 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395659417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 62) / 122][Stage 194:===========================>                         (63 + 59) / 122][Stage 194:==================================>                  (80 + 42) / 122][Stage 194:============================================>       (105 + 17) / 122][Stage 194:===================================================> (119 + 3) / 122][Stage 194:====================================================>(121 + 1) / 122]                                                                                [Stage 195:==========================>                          (62 + 61) / 123][Stage 195:============================>                        (67 + 56) / 123][Stage 195:=======================================>             (91 + 32) / 123][Stage 195:===================================================> (119 + 4) / 123][Stage 195:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.404656415 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 217  OR  partitionIndex = 218 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 217  OR  partitionIndex = 218 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393579948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (62 + 59) / 121][Stage 196:==================================>                  (78 + 43) / 121][Stage 196:=========================================>           (94 + 27) / 121][Stage 196:===================================================> (118 + 3) / 121]                                                                                [Stage 197:==========================>                          (62 + 60) / 122][Stage 197:=============================>                       (68 + 54) / 122][Stage 197:====================================>                (84 + 38) / 122][Stage 197:=================================================>   (113 + 9) / 122][Stage 197:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.174992306 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 82  OR  partitionIndex = 83 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4110701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (61 + 61) / 122][Stage 198:=============================>                       (67 + 55) / 122][Stage 198:==================================>                  (79 + 43) / 122][Stage 198:===========================================>         (99 + 23) / 122][Stage 198:==================================================>  (117 + 5) / 122][Stage 198:====================================================>(120 + 2) / 122]                                                                                [Stage 199:==========================>                          (62 + 61) / 123][Stage 199:=============================>                       (68 + 55) / 123][Stage 199:=====================================>               (87 + 36) / 123][Stage 199:==============================================>     (109 + 14) / 123][Stage 199:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.518010093 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  part itionIndex = 16  OR  partitionIndex = 17 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368762462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==================================>                  (75 + 39) / 114][Stage 200:========================================>            (87 + 27) / 114][Stage 200:==============================================>     (102 + 12) / 114][Stage 200:==================================================>  (109 + 5) / 114][Stage 200:====================================================>(113 + 1) / 114]                                                                                [Stage 201:======================================>              (84 + 31) / 115][Stage 201:==========================================>          (93 + 22) / 115][Stage 201:================================================>    (106 + 9) / 115][Stage 201:==================================================>  (110 + 5) / 115][Stage 201:===================================================> (112 + 3) / 115][Stage 201:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 4.298767947 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m26.517s
user	11m53.728s
sys	0m57.636s
