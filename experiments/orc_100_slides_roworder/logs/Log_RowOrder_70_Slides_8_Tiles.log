Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 00:30:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:30:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:30:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:30:38 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 00:30:40 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:30:50 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530003039-0702).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.369278754 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (51 + 64) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:============================>                          (60 + 56) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:=========================================>             (88 + 28) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.968361884 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex =  65  OR  partitionIndex = 80 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 80 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:>                                                        (0 + 0) / 115][Stage 2:===========================>                           (57 + 58) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:===============================>                       (66 + 49) / 115][Stage 2:================================>                      (67 + 48) / 115][Stage 2:====================================>                  (76 + 39) / 115][Stage 2:=======================================>               (83 + 32) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:==========================================>            (89 + 26) / 115][Stage 2:===========================================>           (91 + 24) / 115][Stage 2:=============================================>         (95 + 20) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:===============================>                       (67 + 49) / 116][Stage 3:=================================>                     (70 + 46) / 116][Stage 3:==================================>                    (72 + 44) / 116][Stage 3:===================================>                   (75 + 41) / 116][Stage 3:========================================>              (86 + 30) / 116][Stage 3:=========================================>             (87 + 29) / 116][Stage 3:============================================>          (94 + 22) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:===================================================>   (109 + 7) / 116][Stage 3:====================================================>  (111 + 5) / 116][Stage 3:======================================================>(114 + 2) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 11.453378796 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 225  OR   partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:============================>                          (60 + 55) / 115][Stage 4:===============================>                       (66 + 49) / 115][Stage 4:=================================>                     (71 + 44) / 115][Stage 4:==================================>                    (72 + 43) / 115][Stage 4:=====================================>                 (79 + 36) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:==============================================>        (98 + 17) / 115][Stage 4:================================================>     (103 + 12) / 115][Stage 4:=================================================>    (105 + 10) / 115][Stage 4:===================================================>   (107 + 8) / 115][Stage 4:=====================================================> (112 + 3) / 115]                                                                                [Stage 5:===============================>                       (67 + 49) / 116][Stage 5:=================================>                     (71 + 45) / 116][Stage 5:====================================>                  (76 + 40) / 116][Stage 5:======================================>                (82 + 34) / 116][Stage 5:==========================================>            (89 + 27) / 116][Stage 5:==============================================>       (100 + 16) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.654443079 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150  OR   partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIn dex = 180  OR  partitionIndex = 181 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 180  OR  partitionIndex = 181 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.73455002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=======================>                               (52 + 70) / 122][Stage 6:=========================>                             (57 + 65) / 122][Stage 6:===============================>                       (69 + 53) / 122][Stage 6:====================================>                  (80 + 42) / 122][Stage 6:======================================>                (86 + 36) / 122][Stage 6:===========================================>           (97 + 25) / 122][Stage 6:==================================================>    (113 + 9) / 122]                                                                                [Stage 7:===========================>                           (62 + 61) / 123][Stage 7:=============================>                         (67 + 56) / 123][Stage 7:=====================================>                 (83 + 40) / 123][Stage 7:=========================================>             (93 + 30) / 123][Stage 7:===================================================>   (115 + 8) / 123][Stage 7:=====================================================> (120 + 3) / 123][Stage 7:======================================================>(122 + 1) / 123]                                                                                Time elapsed: 5.027845266 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex =  72  OR  partitionIndex = 73 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.694994674 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (61 + 61) / 122][Stage 8:===========================>                           (62 + 60) / 122][Stage 8:=================================>                     (74 + 48) / 122][Stage 8:=========================================>             (92 + 30) / 122][Stage 8:===================================================>   (114 + 8) / 122][Stage 8:======================================================>(120 + 2) / 122][Stage 8:======================================================>(121 + 1) / 122]                                                                                [Stage 9:===========================>                           (61 + 62) / 123][Stage 9:=============================>                         (66 + 57) / 123][Stage 9:===============================>                       (71 + 52) / 123][Stage 9:========================================>              (90 + 33) / 123][Stage 9:================================================>     (110 + 13) / 123][Stage 9:===================================================>   (116 + 7) / 123][Stage 9:======================================================>(121 + 2) / 123][Stage 9:======================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.79859606 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 28  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 28  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.623691238 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (71 + 46) / 117][Stage 10:====================================>                 (78 + 39) / 117][Stage 10:=======================================>              (85 + 32) / 117][Stage 10:==========================================>           (92 + 25) / 117][Stage 10:=============================================>        (98 + 19) / 117][Stage 10:===============================================>     (105 + 12) / 117][Stage 10:====================================================> (114 + 3) / 117]                                                                                [Stage 11:================================>                     (72 + 46) / 118][Stage 11:==================================>                   (76 + 42) / 118][Stage 11:=====================================>                (81 + 37) / 118][Stage 11:=========================================>            (91 + 27) / 118][Stage 11:=============================================>       (101 + 17) / 118][Stage 11:=================================================>    (109 + 9) / 118][Stage 11:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 5.292456765 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex =  118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524865008 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (80 + 35) / 115][Stage 12:========================================>             (86 + 29) / 115][Stage 12:============================================>         (95 + 20) / 115][Stage 12:====================================================> (111 + 4) / 115][Stage 12:=====================================================>(113 + 2) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=====================================>                (81 + 35) / 116][Stage 13:=======================================>              (85 + 31) / 116][Stage 13:===========================================>          (94 + 22) / 116][Stage 13:===============================================>     (105 + 11) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.356612783 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR   partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIn dex = 210  OR  partitionIndex = 211 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525816389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=================================>                    (70 + 44) / 114][Stage 14:======================================>               (81 + 33) / 114][Stage 14:==========================================>           (89 + 25) / 114][Stage 14:================================================>    (104 + 10) / 114][Stage 14:====================================================> (110 + 4) / 114]                                                                                [Stage 15:=====================================>                (80 + 35) / 115][Stage 15:========================================>             (87 + 28) / 115][Stage 15:==============================================>       (99 + 16) / 115][Stage 15:==================================================>   (107 + 8) / 115][Stage 15:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.272941801 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  pa rtitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex =  113  OR  partitionIndex = 114 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex = 114 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555403791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=================================>                    (70 + 44) / 114][Stage 16:=====================================>                (80 + 34) / 114][Stage 16:========================================>             (85 + 29) / 114][Stage 16:============================================>         (94 + 20) / 114][Stage 16:===================================================>  (108 + 6) / 114][Stage 16:====================================================> (110 + 4) / 114][Stage 16:=====================================================>(113 + 1) / 114]                                                                                [Stage 17:====================================>                 (77 + 38) / 115][Stage 17:==========================================>           (91 + 24) / 115][Stage 17:==============================================>      (101 + 14) / 115][Stage 17:=================================================>    (106 + 9) / 115][Stage 17:====================================================> (112 + 3) / 115][Stage 17:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.966661113 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR   partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIn dex = 188  OR  partitionIndex = 189 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 188  OR  partitionIndex = 189 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.645949021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==========================>                           (60 + 61) / 121][Stage 18:===========================>                          (62 + 59) / 121][Stage 18:====================================>                 (81 + 40) / 121][Stage 18:===============================================>     (109 + 12) / 121][Stage 18:===================================================>  (115 + 6) / 121][Stage 18:====================================================> (117 + 4) / 121]                                                                                [Stage 19:============================>                         (64 + 58) / 122][Stage 19:==============================>                       (69 + 53) / 122][Stage 19:=======================================>              (90 + 32) / 122][Stage 19:=============================================>       (105 + 17) / 122][Stage 19:==================================================>   (115 + 7) / 122][Stage 19:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.582952938 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  par titionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 2 7  OR  partitionIndex = 40 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493883413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=====================================>                (80 + 35) / 115][Stage 20:============================================>         (95 + 20) / 115][Stage 20:===============================================>     (104 + 11) / 115][Stage 20:====================================================> (111 + 4) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:======================================>               (82 + 34) / 116][Stage 21:========================================>             (88 + 28) / 116][Stage 21:===========================================>          (93 + 23) / 116][Stage 21:==================================================>   (109 + 7) / 116][Stage 21:====================================================> (113 + 3) / 116][Stage 21:=====================================================>(114 + 2) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.190743089 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 148  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 148  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563775739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (61 + 60) / 121][Stage 22:============================>                         (63 + 58) / 121][Stage 22:===================================>                  (80 + 41) / 121][Stage 22:===========================================>         (100 + 21) / 121][Stage 22:===================================================>  (115 + 6) / 121][Stage 22:=====================================================>(119 + 2) / 121]                                                                                [Stage 23:===========================>                          (62 + 60) / 122][Stage 23:============================>                         (64 + 58) / 122][Stage 23:===================================>                  (80 + 42) / 122][Stage 23:===========================================>         (100 + 22) / 122][Stage 23:==================================================>   (115 + 7) / 122][Stage 23:====================================================> (118 + 4) / 122][Stage 23:====================================================> (119 + 3) / 122][Stage 23:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.384244327 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex =  41  OR  partitionIndex = 56 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 61) / 121][Stage 24:===============================>                      (70 + 51) / 121][Stage 24:=========================================>            (92 + 29) / 121][Stage 24:================================================>    (111 + 10) / 121][Stage 24:=====================================================>(120 + 1) / 121]                                                                                [Stage 25:===========================>                          (61 + 61) / 122][Stage 25:==============================>                       (68 + 54) / 122][Stage 25:======================================>               (86 + 36) / 122][Stage 25:=============================================>       (104 + 18) / 122][Stage 25:==================================================>   (113 + 9) / 122][Stage 25:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.022433388 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  pa rtitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex =  54  OR  partitionIndex = 55 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488514687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (71 + 46) / 117][Stage 26:==================================>                   (75 + 42) / 117][Stage 26:========================================>             (88 + 29) / 117][Stage 26:==================================================>   (110 + 7) / 117]                                                                                [Stage 27:================================>                     (72 + 46) / 118][Stage 27:===================================>                  (78 + 40) / 118][Stage 27:===========================================>          (94 + 24) / 118][Stage 27:===================================================>  (112 + 6) / 118][Stage 27:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.457365337 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  par titionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 5 2  OR  partitionIndex = 53 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 52  OR  partitionIndex = 53 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454142024 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=================================>                    (70 + 44) / 114][Stage 28:====================================>                 (76 + 38) / 114][Stage 28:=========================================>            (88 + 26) / 114][Stage 28:=================================================>    (105 + 9) / 114][Stage 28:===================================================>  (108 + 6) / 114]                                                                                [Stage 29:===================================>                  (76 + 39) / 115][Stage 29:========================================>             (86 + 29) / 115][Stage 29:==============================================>       (98 + 17) / 115][Stage 29:==============================================>      (101 + 14) / 115][Stage 29:==================================================>   (108 + 7) / 115][Stage 29:===================================================>  (110 + 5) / 115][Stage 29:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.458160261 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146  OR   partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIn dex = 176  OR  partitionIndex = 177 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 176  OR  partitionIndex = 177 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481273294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (69 + 46) / 115][Stage 30:=======================================>              (85 + 30) / 115][Stage 30:==============================================>       (98 + 17) / 115][Stage 30:===================================================>  (109 + 6) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:=================================>                    (72 + 44) / 116][Stage 31:=====================================>                (80 + 36) / 116][Stage 31:=============================================>        (98 + 18) / 116][Stage 31:===================================================>  (111 + 5) / 116][Stage 31:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.378923071 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR   partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIn dex = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518044943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (65 + 50) / 115][Stage 32:=================================>                    (72 + 43) / 115][Stage 32:======================================>               (82 + 33) / 115][Stage 32:==============================================>      (100 + 15) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:===================================>                  (76 + 40) / 116][Stage 33:============================================>         (95 + 21) / 116][Stage 33:===============================================>     (103 + 13) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.952934539 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIn dex = 233  OR  partitionIndex = 248 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426585727 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (81 + 34) / 115][Stage 34:=========================================>            (88 + 27) / 115][Stage 34:==============================================>       (99 + 16) / 115][Stage 34:===================================================>  (109 + 6) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:======================================>               (82 + 34) / 116][Stage 35:=========================================>            (90 + 26) / 116][Stage 35:=============================================>       (100 + 16) / 116][Stage 35:=====================================================>(114 + 2) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.97921552 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIn dex = 161  OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493697042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 62) / 122][Stage 36:============================>                         (64 + 58) / 122][Stage 36:======================================>               (86 + 36) / 122][Stage 36:==============================================>      (107 + 15) / 122][Stage 36:===================================================>  (117 + 5) / 122]                                                                                [Stage 37:===========================>                          (62 + 61) / 123][Stage 37:===============================>                      (71 + 52) / 123][Stage 37:===================================>                  (81 + 42) / 123][Stage 37:============================================>        (103 + 20) / 123][Stage 37:====================================================> (120 + 3) / 123][Stage 37:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.2613018 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIn dex = 160  OR  partitionIndex = 161 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504789406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 60) / 121][Stage 38:==============================>                       (69 + 52) / 121][Stage 38:=======================================>              (89 + 32) / 121][Stage 38:=================================================>    (112 + 9) / 121]                                                                                [Stage 39:===========================>                          (62 + 60) / 122][Stage 39:===============================>                      (72 + 50) / 122][Stage 39:=====================================>                (85 + 37) / 122][Stage 39:=============================================>       (104 + 18) / 122][Stage 39:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.550799483 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  pa rtitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex =  112  OR  partitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45015666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=================================>                    (70 + 44) / 114][Stage 40:======================================>               (81 + 33) / 114][Stage 40:============================================>         (94 + 20) / 114][Stage 40:=================================================>    (105 + 9) / 114][Stage 40:====================================================> (111 + 3) / 114]                                                                                [Stage 41:===================================>                  (75 + 40) / 115][Stage 41:======================================>               (83 + 32) / 115][Stage 41:============================================>         (94 + 21) / 115][Stage 41:=================================================>    (106 + 9) / 115][Stage 41:====================================================> (112 + 3) / 115][Stage 41:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.119613452 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex =  97  OR  partitionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528448085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==========================>                           (60 + 62) / 122][Stage 42:=============================>                        (67 + 55) / 122][Stage 42:=================================>                    (75 + 47) / 122][Stage 42:=============================================>       (105 + 17) / 122][Stage 42:====================================================> (118 + 4) / 122][Stage 42:=====================================================>(121 + 1) / 122]                                                                                [Stage 43:==========================>                           (61 + 62) / 123][Stage 43:============================>                         (65 + 58) / 123][Stage 43:==================================>                   (79 + 44) / 123][Stage 43:=============================================>       (106 + 17) / 123][Stage 43:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.519886373 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIn dex = 172  OR  partitionIndex = 173 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384212368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (82 + 33) / 115][Stage 44:=========================================>            (89 + 26) / 115][Stage 44:==============================================>      (100 + 15) / 115][Stage 44:====================================================> (111 + 4) / 115]                                                                                [Stage 45:=======================================>              (84 + 32) / 116][Stage 45:=============================================>        (98 + 18) / 116][Stage 45:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.620191271 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR   partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIn dex = 240  OR  partitionIndex = 241 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483570552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (70 + 45) / 115][Stage 46:======================================>               (83 + 32) / 115][Stage 46:===========================================>          (93 + 22) / 115][Stage 46:===================================================>  (110 + 5) / 115]                                                                                [Stage 47:=================================>                    (73 + 43) / 116][Stage 47:=========================================>            (89 + 27) / 116][Stage 47:===============================================>     (103 + 13) / 116][Stage 47:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.905505802 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex =  64  OR  partitionIndex = 65 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==============================>                       (66 + 49) / 115][Stage 48:==================================>                   (74 + 41) / 115][Stage 48:========================================>             (87 + 28) / 115][Stage 48:==============================================>       (99 + 16) / 115][Stage 48:====================================================> (111 + 4) / 115]                                                                                [Stage 49:=================================>                    (73 + 43) / 116][Stage 49:=========================================>            (90 + 26) / 116][Stage 49:=============================================>        (98 + 18) / 116][Stage 49:===============================================>     (104 + 12) / 116][Stage 49:=================================================>    (107 + 9) / 116][Stage 49:====================================================> (112 + 4) / 116][Stage 49:=====================================================>(114 + 2) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.859618344 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 50   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421221669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==================================>                   (72 + 42) / 114][Stage 50:========================================>             (85 + 29) / 114][Stage 50:=============================================>        (97 + 17) / 114][Stage 50:================================================>    (104 + 10) / 114][Stage 50:==================================================>   (106 + 8) / 114][Stage 50:=====================================================>(112 + 2) / 114]                                                                                [Stage 51:======================================>               (83 + 32) / 115][Stage 51:============================================>         (95 + 20) / 115][Stage 51:===============================================>     (102 + 13) / 115][Stage 51:================================================>    (105 + 10) / 115][Stage 51:===================================================>  (109 + 6) / 115][Stage 51:====================================================> (112 + 3) / 115][Stage 51:=====================================================>(113 + 2) / 115][Stage 51:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 8.361526285 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  pa rtitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex =  80  OR  partitionIndex = 81 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 80  OR  partitionIndex = 81 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49724686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (62 + 59) / 121][Stage 52:================================>                     (73 + 48) / 121][Stage 52:=========================================>            (92 + 29) / 121][Stage 52:===================================================>  (116 + 5) / 121][Stage 52:=====================================================>(120 + 1) / 121]                                                                                [Stage 53:===========================>                          (62 + 60) / 122][Stage 53:==============================>                       (69 + 53) / 122][Stage 53:=====================================>                (85 + 37) / 122][Stage 53:============================================>        (102 + 20) / 122][Stage 53:==================================================>   (115 + 7) / 122][Stage 53:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.902893802 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 229  OR   partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454673619 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==========================>                           (60 + 62) / 122][Stage 54:==============================>                       (68 + 54) / 122][Stage 54:======================================>               (87 + 35) / 122][Stage 54:==============================================>      (106 + 16) / 122][Stage 54:=====================================================>(120 + 2) / 122]                                                                                [Stage 55:==========================>                           (61 + 62) / 123][Stage 55:============================>                         (65 + 58) / 123][Stage 55:==================================>                   (78 + 45) / 123][Stage 55:=============================================>       (105 + 18) / 123][Stage 55:==================================================>   (114 + 9) / 123][Stage 55:=====================================================>(121 + 2) / 123][Stage 55:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.977573117 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR   partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIn dex = 126  OR  partitionIndex = 127 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394252799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (81 + 33) / 114][Stage 56:==========================================>           (89 + 25) / 114][Stage 56:==============================================>       (98 + 16) / 114][Stage 56:==================================================>   (107 + 7) / 114]                                                                                [Stage 57:===================================>                  (76 + 39) / 115][Stage 57:===========================================>          (92 + 23) / 115][Stage 57:==============================================>      (100 + 15) / 115][Stage 57:====================================================> (111 + 4) / 115][Stage 57:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.071910857 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex =  56  OR  partitionIndex = 57 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56  OR  partitionIndex = 57 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==================================>                   (72 + 42) / 114][Stage 58:=========================================>            (88 + 26) / 114][Stage 58:============================================>         (94 + 20) / 114][Stage 58:================================================>    (104 + 10) / 114][Stage 58:====================================================> (110 + 4) / 114][Stage 58:=====================================================>(113 + 1) / 114]                                                                                [Stage 59:======================================>               (82 + 33) / 115][Stage 59:============================================>         (95 + 20) / 115][Stage 59:==============================================>       (99 + 16) / 115][Stage 59:==================================================>   (107 + 8) / 115][Stage 59:===================================================>  (110 + 5) / 115][Stage 59:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 6.703281668 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIn dex = 158  OR  partitionIndex = 159 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478414819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==========================>                           (60 + 62) / 122][Stage 60:=============================>                        (66 + 56) / 122][Stage 60:====================================>                 (83 + 39) / 122][Stage 60:===========================================>         (101 + 21) / 122]                                                                                [Stage 61:==========================>                           (61 + 62) / 123][Stage 61:=============================>                        (68 + 55) / 123][Stage 61:=======================================>              (89 + 34) / 123][Stage 61:===============================================>     (110 + 13) / 123][Stage 61:====================================================> (119 + 4) / 123][Stage 61:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.644296096 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIn dex = 164  OR  partitionIndex = 165 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (61 + 61) / 122][Stage 62:===============================>                      (72 + 50) / 122][Stage 62:=====================================>                (84 + 38) / 122][Stage 62:==============================================>      (107 + 15) / 122][Stage 62:=====================================================>(120 + 2) / 122]                                                                                [Stage 63:==========================>                           (61 + 62) / 123][Stage 63:===============================>                      (71 + 52) / 123][Stage 63:======================================>               (88 + 35) / 123][Stage 63:===============================================>     (110 + 13) / 123][Stage 63:=====================================================>(121 + 2) / 123][Stage 63:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.72408305 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  part itionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17  OR  partitionIndex = 18   OR  partitionIndex = 19 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 19 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45438726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (71 + 46) / 117][Stage 64:==================================>                   (75 + 42) / 117][Stage 64:========================================>             (88 + 29) / 117][Stage 64:================================================>    (106 + 11) / 117][Stage 64:=====================================================>(116 + 1) / 117]                                                                                [Stage 65:================================>                     (72 + 46) / 118][Stage 65:==================================>                   (75 + 43) / 118][Stage 65:=========================================>            (91 + 27) / 118][Stage 65:===============================================>     (105 + 13) / 118]                                                                                Time elapsed: 3.410033799 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex =  73  OR  partitionIndex = 88 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419774131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===============================>                      (67 + 48) / 115][Stage 66:====================================>                 (77 + 38) / 115][Stage 66:============================================>         (95 + 20) / 115][Stage 66:===============================================>     (102 + 13) / 115][Stage 66:===================================================>  (110 + 5) / 115][Stage 66:=====================================================>(114 + 1) / 115]                                                                                [Stage 67:=================================>                    (72 + 44) / 116][Stage 67:========================================>             (86 + 30) / 116][Stage 67:============================================>         (96 + 20) / 116][Stage 67:=================================================>    (107 + 9) / 116][Stage 67:===================================================>  (110 + 6) / 116][Stage 67:====================================================> (112 + 4) / 116][Stage 67:====================================================> (113 + 3) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.102548761 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 233  OR   partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=================================>                    (72 + 43) / 115][Stage 68:======================================>               (83 + 32) / 115][Stage 68:================================================>    (105 + 10) / 115][Stage 68:===================================================>  (110 + 5) / 115]                                                                                [Stage 69:==================================>                   (75 + 41) / 116][Stage 69:============================================>         (96 + 20) / 116][Stage 69:===============================================>     (105 + 11) / 116][Stage 69:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.84164657 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403981186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (71 + 46) / 117][Stage 70:====================================>                 (78 + 39) / 117][Stage 70:===========================================>          (94 + 23) / 117][Stage 70:=====================================================>(116 + 1) / 117]                                                                                [Stage 71:================================>                     (72 + 46) / 118][Stage 71:====================================>                 (80 + 38) / 118][Stage 71:===========================================>          (96 + 22) / 118][Stage 71:==================================================>   (110 + 8) / 118][Stage 71:=====================================================>(116 + 2) / 118][Stage 71:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.640950488 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex  = 116  OR  partitionIndex = 117 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 116  OR  partitionIndex = 117 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454171967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 60) / 121][Stage 72:============================>                         (64 + 57) / 121][Stage 72:===================================>                  (80 + 41) / 121][Stage 72:============================================>         (99 + 22) / 121][Stage 72:====================================================> (118 + 3) / 121][Stage 72:=====================================================>(120 + 1) / 121]                                                                                [Stage 73:===========================>                          (62 + 60) / 122][Stage 73:=============================>                        (66 + 56) / 122][Stage 73:===================================>                  (80 + 42) / 122][Stage 73:=========================================>            (93 + 29) / 122][Stage 73:====================================================> (119 + 3) / 122][Stage 73:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.698182066 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 84  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113  OR  partitionIndex =  114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 84  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417261618 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (71 + 44) / 115][Stage 74:==========================================>           (90 + 25) / 115][Stage 74:===============================================>     (103 + 12) / 115][Stage 74:====================================================> (112 + 3) / 115]                                                                                [Stage 75:=================================>                    (73 + 43) / 116][Stage 75:=========================================>            (89 + 27) / 116][Stage 75:===============================================>     (105 + 11) / 116][Stage 75:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.986720378 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436213242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==============================>                       (66 + 49) / 115][Stage 76:=================================>                    (71 + 44) / 115][Stage 76:======================================>               (81 + 34) / 115][Stage 76:==============================================>      (100 + 15) / 115][Stage 76:===================================================>  (110 + 5) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:================================>                     (69 + 47) / 116][Stage 77:======================================>               (82 + 34) / 116][Stage 77:==========================================>           (91 + 25) / 116][Stage 77:===============================================>     (104 + 12) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.057499326 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex =  30  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395648903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (71 + 43) / 114][Stage 78:======================================>               (82 + 32) / 114][Stage 78:============================================>         (93 + 21) / 114][Stage 78:===============================================>     (103 + 11) / 114][Stage 78:====================================================> (110 + 4) / 114][Stage 78:=====================================================>(113 + 1) / 114]                                                                                [Stage 79:====================================>                 (77 + 38) / 115][Stage 79:========================================>             (87 + 28) / 115][Stage 79:==============================================>      (100 + 15) / 115][Stage 79:================================================>    (105 + 10) / 115][Stage 79:===================================================>  (110 + 5) / 115][Stage 79:=====================================================>(113 + 2) / 115][Stage 79:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.332062876 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40715154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===============================>                      (68 + 47) / 115][Stage 80:====================================>                 (77 + 38) / 115][Stage 80:===========================================>          (92 + 23) / 115][Stage 80:==================================================>   (107 + 8) / 115][Stage 80:====================================================> (112 + 3) / 115]                                                                                [Stage 81:===================================>                  (76 + 40) / 116][Stage 81:============================================>         (95 + 21) / 116][Stage 81:===============================================>     (105 + 11) / 116][Stage 81:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.106149269 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  pa rtitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex =  61  OR  partitionIndex = 62 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386045493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (73 + 41) / 114][Stage 82:======================================>               (81 + 33) / 114][Stage 82:==========================================>           (89 + 25) / 114][Stage 82:==============================================>       (98 + 16) / 114][Stage 82:===================================================>  (108 + 6) / 114][Stage 82:=====================================================>(113 + 1) / 114]                                                                                [Stage 83:=====================================>                (80 + 35) / 115][Stage 83:==========================================>           (90 + 25) / 115][Stage 83:==============================================>      (100 + 15) / 115][Stage 83:==================================================>   (108 + 7) / 115][Stage 83:===================================================>  (110 + 5) / 115][Stage 83:=====================================================>(113 + 2) / 115][Stage 83:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.079797354 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  p artitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionInd ex = 117  OR  partitionIndex = 118 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionIndex = 118 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454032706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 60) / 121][Stage 84:=============================>                        (67 + 54) / 121][Stage 84:====================================>                 (82 + 39) / 121][Stage 84:============================================>         (99 + 22) / 121][Stage 84:=====================================================>(119 + 2) / 121]                                                                                [Stage 85:=============================>                        (66 + 56) / 122][Stage 85:===================================>                  (80 + 42) / 122][Stage 85:===========================================>         (100 + 22) / 122][Stage 85:====================================================> (118 + 4) / 122][Stage 85:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.856417882 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 33  OR  par titionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 5 0  OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40003973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=====================================>                (80 + 35) / 115][Stage 86:=======================================>              (84 + 31) / 115][Stage 86:==============================================>       (99 + 16) / 115][Stage 86:==================================================>   (108 + 7) / 115]                                                                                [Stage 87:========================================>             (87 + 29) / 116][Stage 87:===========================================>          (93 + 23) / 116][Stage 87:===============================================>     (105 + 11) / 116][Stage 87:===================================================>  (110 + 6) / 116][Stage 87:===================================================>  (111 + 5) / 116][Stage 87:=====================================================>(114 + 2) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.945282079 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR   partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 238  OR  partitionIn dex = 252  OR  partitionIndex = 253 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 238  OR  partitionIndex = 252  OR  partitionIndex = 253 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441748131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==========================>                           (60 + 62) / 122][Stage 88:==================================>                   (77 + 45) / 122][Stage 88:=========================================>            (94 + 28) / 122][Stage 88:================================================>    (112 + 10) / 122]                                                                                [Stage 89:===========================>                          (62 + 61) / 123][Stage 89:===============================>                      (72 + 51) / 123][Stage 89:========================================>             (92 + 31) / 123][Stage 89:===============================================>     (111 + 12) / 123][Stage 89:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.594047384 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIn dex = 252  OR  partitionIndex = 253 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 252  OR  partitionIndex = 253 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389831234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==================================>                   (73 + 41) / 114][Stage 90:=======================================>              (84 + 30) / 114][Stage 90:==============================================>       (99 + 15) / 114][Stage 90:===============================================>     (103 + 11) / 114][Stage 90:=====================================================>(113 + 1) / 114]                                                                                [Stage 91:======================================>               (82 + 33) / 115][Stage 91:==========================================>           (90 + 25) / 115][Stage 91:===============================================>     (104 + 11) / 115][Stage 91:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.98703057 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385396913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (72 + 45) / 117][Stage 92:======================================>               (83 + 34) / 117][Stage 92:=============================================>       (101 + 16) / 117][Stage 92:====================================================> (114 + 3) / 117]                                                                                [Stage 93:=================================>                    (74 + 44) / 118][Stage 93:======================================>               (85 + 33) / 118][Stage 93:=============================================>       (101 + 17) / 118][Stage 93:==================================================>   (111 + 7) / 118][Stage 93:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.371086575 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26   OR  partitionIndex = 27 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385123088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (71 + 46) / 117][Stage 94:===================================>                  (77 + 40) / 117][Stage 94:===========================================>          (94 + 23) / 117][Stage 94:===================================================>  (112 + 5) / 117]                                                                                [Stage 95:================================>                     (72 + 46) / 118][Stage 95:=====================================>                (81 + 37) / 118][Stage 95:==========================================>           (93 + 25) / 118][Stage 95:=============================================>       (102 + 16) / 118][Stage 95:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.503543395 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 20  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 20  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349887898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (83 + 32) / 115][Stage 96:===========================================>          (92 + 23) / 115][Stage 96:===============================================>     (104 + 11) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:======================================>               (83 + 33) / 116][Stage 97:========================================>             (87 + 29) / 116][Stage 97:===============================================>     (103 + 13) / 116][Stage 97:==================================================>   (109 + 7) / 116][Stage 97:====================================================> (113 + 3) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.033377729 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR   partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIn dex = 146  OR  partitionIndex = 147 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377164553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (71 + 46) / 117][Stage 98:==================================>                   (74 + 43) / 117][Stage 98:=========================================>            (89 + 28) / 117][Stage 98:==============================================>      (102 + 15) / 117][Stage 98:===================================================>  (112 + 5) / 117][Stage 98:=====================================================>(116 + 1) / 117]                                                                                [Stage 99:================================>                     (72 + 46) / 118][Stage 99:===================================>                  (78 + 40) / 118][Stage 99:=========================================>            (90 + 28) / 118][Stage 99:================================================>    (107 + 11) / 118][Stage 99:===================================================>  (112 + 6) / 118][Stage 99:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.82538065 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  pa rtitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex =  50  OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425427672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 60) / 121][Stage 100:=============================>                       (68 + 53) / 121][Stage 100:===================================>                 (82 + 39) / 121][Stage 100:=============================================>      (107 + 14) / 121][Stage 100:====================================================>(120 + 1) / 121]                                                                                [Stage 101:==========================>                          (61 + 61) / 122][Stage 101:=============================>                       (68 + 54) / 122][Stage 101:=======================================>             (91 + 31) / 122][Stage 101:==============================================>     (109 + 13) / 122][Stage 101:===================================================> (119 + 3) / 122][Stage 101:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.573143208 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex =  88  OR  partitionIndex = 89 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88  OR  partitionIndex = 89 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395333407 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==================================>                  (75 + 40) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:==================================>                  (76 + 40) / 116][Stage 103:=======================================>             (87 + 29) / 116][Stage 103:=============================================>      (101 + 15) / 116][Stage 103:==================================================>  (111 + 5) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.62543316 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex =  44  OR  partitionIndex = 45 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:===================================>                 (78 + 37) / 115][Stage 104:=========================================>           (89 + 26) / 115][Stage 104:===============================================>    (104 + 11) / 115][Stage 104:===================================================> (111 + 4) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:=================================>                   (73 + 43) / 116][Stage 105:=====================================>               (82 + 34) / 116][Stage 105:==========================================>          (94 + 22) / 116][Stage 105:==============================================>     (103 + 13) / 116][Stage 105:===============================================>    (106 + 10) / 116][Stage 105:================================================>    (107 + 9) / 116][Stage 105:=================================================>   (108 + 8) / 116][Stage 105:====================================================>(114 + 2) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.172544255 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  pa rtitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex  = 120  OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396686272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===============================>                     (69 + 46) / 115][Stage 106:====================================>                (79 + 36) / 115][Stage 106:===========================================>         (95 + 20) / 115][Stage 106:==============================================>     (103 + 12) / 115][Stage 106:====================================================>(113 + 2) / 115]                                                                                [Stage 107:================================>                    (72 + 44) / 116][Stage 107:======================================>              (84 + 32) / 116][Stage 107:==========================================>          (94 + 22) / 116][Stage 107:==============================================>     (103 + 13) / 116][Stage 107:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.056228428 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR   partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIn dex = 219  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379251198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (72 + 45) / 117][Stage 108:====================================>                (80 + 37) / 117][Stage 108:============================================>        (98 + 19) / 117][Stage 108:===================================================> (113 + 4) / 117]                                                                                [Stage 109:================================>                    (72 + 46) / 118][Stage 109:=================================>                   (75 + 43) / 118][Stage 109:=======================================>             (88 + 30) / 118][Stage 109:================================================>    (109 + 9) / 118][Stage 109:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.509537195 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  pa rtitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex =  56  OR  partitionIndex = 57 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406664395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (72 + 43) / 115][Stage 110:========================================>            (88 + 27) / 115][Stage 110:===============================================>    (104 + 11) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:===================================>                 (77 + 39) / 116][Stage 111:======================================>              (85 + 31) / 116][Stage 111:============================================>       (100 + 16) / 116][Stage 111:===================================================> (113 + 3) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.824711114 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182  OR   partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIn dex = 208  OR  partitionIndex = 209 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 208  OR  partitionIndex = 209 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435758963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 60) / 121][Stage 112:==============================>                      (70 + 51) / 121][Stage 112:=========================================>           (94 + 27) / 121][Stage 112:===============================================>    (111 + 10) / 121][Stage 112:====================================================>(120 + 1) / 121]                                                                                [Stage 113:==========================>                          (62 + 60) / 122][Stage 113:===============================>                     (72 + 50) / 122][Stage 113:======================================>              (88 + 34) / 122][Stage 113:===============================================>    (112 + 10) / 122][Stage 113:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.607117768 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386237291 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (70 + 45) / 115][Stage 114:======================================>              (84 + 31) / 115][Stage 114:=============================================>       (98 + 17) / 115][Stage 114:===================================================> (112 + 3) / 115]                                                                                [Stage 115:====================================>                (79 + 37) / 116][Stage 115:========================================>            (88 + 28) / 116][Stage 115:=============================================>      (102 + 14) / 116][Stage 115:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.853157329 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410838123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (62 + 59) / 121][Stage 116:================================>                    (74 + 47) / 121][Stage 116:======================================>              (88 + 33) / 121][Stage 116:=================================================>   (112 + 9) / 121]                                                                                [Stage 117:============================>                        (66 + 56) / 122][Stage 117:=================================>                   (78 + 44) / 122][Stage 117:===========================================>         (99 + 23) / 122][Stage 117:=================================================>   (114 + 8) / 122][Stage 117:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.236858569 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIn dex = 248  OR  partitionIndex = 249 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248  OR  partitionIndex = 249 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34504875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:====================================>                (80 + 35) / 115][Stage 118:=========================================>           (89 + 26) / 115][Stage 118:===============================================>    (104 + 11) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=======================================>             (86 + 30) / 116][Stage 119:=============================================>      (101 + 15) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.64094632 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  pa rtitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89  OR  partitionIndex =  90  OR  partitionIndex = 91 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 91 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373979419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=================================>                   (73 + 41) / 114][Stage 120:======================================>              (82 + 32) / 114][Stage 120:===========================================>         (93 + 21) / 114][Stage 120:=================================================>   (107 + 7) / 114][Stage 120:===================================================> (110 + 4) / 114]                                                                                [Stage 121:=====================================>               (82 + 33) / 115][Stage 121:===========================================>         (95 + 20) / 115][Stage 121:==============================================>     (103 + 12) / 115][Stage 121:=================================================>   (107 + 8) / 115][Stage 121:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.237811675 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIn dex = 211  OR  partitionIndex = 224 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42622621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 61) / 122][Stage 122:================================>                    (74 + 48) / 122][Stage 122:=======================================>             (92 + 30) / 122][Stage 122:===============================================>    (112 + 10) / 122][Stage 122:===================================================> (119 + 3) / 122]                                                                                [Stage 123:==========================>                          (62 + 61) / 123][Stage 123:==============================>                      (71 + 52) / 123][Stage 123:=======================================>             (91 + 32) / 123][Stage 123:==============================================>     (111 + 12) / 123][Stage 123:====================================================>(121 + 2) / 123][Stage 123:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.890606286 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex =  30  OR  partitionIndex = 31 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377195043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:=====================================>               (82 + 35) / 117][Stage 124:============================================>       (100 + 17) / 117][Stage 124:====================================================>(115 + 2) / 117]                                                                                [Stage 125:================================>                    (72 + 46) / 118][Stage 125:===================================>                 (79 + 39) / 118][Stage 125:===========================================>         (97 + 21) / 118][Stage 125:=================================================>   (110 + 8) / 118]                                                                                Time elapsed: 3.59978231 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403120185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:================================>                    (72 + 45) / 117][Stage 126:==================================>                  (77 + 40) / 117][Stage 126:==================================================>  (111 + 6) / 117]                                                                                [Stage 127:================================>                    (73 + 45) / 118][Stage 127:===================================>                 (80 + 38) / 118][Stage 127:==========================================>          (95 + 23) / 118][Stage 127:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.670615142 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex =  109  OR  partitionIndex = 124 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426766567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 60) / 121][Stage 128:==============================>                      (70 + 51) / 121][Stage 128:======================================>              (87 + 34) / 121][Stage 128:=================================================>   (112 + 9) / 121][Stage 128:====================================================>(120 + 1) / 121]                                                                                [Stage 129:==========================>                          (62 + 60) / 122][Stage 129:===============================>                     (73 + 49) / 122][Stage 129:======================================>              (89 + 33) / 122][Stage 129:===============================================>    (111 + 11) / 122][Stage 129:===================================================> (119 + 3) / 122][Stage 129:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.593651778 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR   partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIn dex = 189  OR  partitionIndex = 190 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396680005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 61) / 122][Stage 130:===========================>                         (63 + 59) / 122][Stage 130:=================================>                   (76 + 46) / 122][Stage 130:========================================>            (93 + 29) / 122][Stage 130:==================================================>  (116 + 6) / 122][Stage 130:====================================================>(121 + 1) / 122]                                                                                [Stage 131:===========================>                         (64 + 59) / 123][Stage 131:===============================>                     (74 + 49) / 123][Stage 131:========================================>            (94 + 29) / 123][Stage 131:=================================================>   (114 + 9) / 123][Stage 131:===================================================> (120 + 3) / 123][Stage 131:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.684588672 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 105  OR  p artitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionInd ex = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3732762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 44) / 115][Stage 132:=====================================>               (81 + 34) / 115][Stage 132:===============================================>    (105 + 10) / 115]                                                                                [Stage 133:===================================>                 (78 + 38) / 116][Stage 133:==========================================>          (92 + 24) / 116][Stage 133:=================================================>   (109 + 7) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.666422578 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  pa rtitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex  = 114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399215582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (62 + 59) / 121][Stage 134:===================================>                 (82 + 39) / 121][Stage 134:==========================================>          (96 + 25) / 121][Stage 134:====================================================>(119 + 2) / 121]                                                                                [Stage 135:==========================>                          (62 + 60) / 122][Stage 135:==============================>                      (70 + 52) / 122][Stage 135:=======================================>             (90 + 32) / 122][Stage 135:=================================================>   (114 + 8) / 122][Stage 135:===================================================> (119 + 3) / 122][Stage 135:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.612014335 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR   partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIn dex = 184  OR  partitionIndex = 185 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 184  OR  partitionIndex = 185 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368842538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (71 + 44) / 115][Stage 136:======================================>              (84 + 31) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:===============================================>    (104 + 11) / 115][Stage 136:===================================================> (112 + 3) / 115]                                                                                [Stage 137:==================================>                  (75 + 41) / 116][Stage 137:========================================>            (89 + 27) / 116][Stage 137:===============================================>    (105 + 11) / 116][Stage 137:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.271034915 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26  OR  pa rtitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex =  56  OR  partitionIndex = 57 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 56  OR  partitionIndex = 57 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39715278 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (62 + 59) / 121][Stage 138:=================================>                   (77 + 44) / 121][Stage 138:======================================>              (89 + 32) / 121][Stage 138:====================================================>(120 + 1) / 121]                                                                                [Stage 139:==========================>                          (62 + 60) / 122][Stage 139:=============================>                       (67 + 55) / 122][Stage 139:====================================>                (85 + 37) / 122][Stage 139:==========================================>          (98 + 24) / 122][Stage 139:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.256212571 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIn dex = 158  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365729628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (71 + 46) / 117][Stage 140:======================================>              (86 + 31) / 117][Stage 140:============================================>        (99 + 18) / 117][Stage 140:===================================================> (114 + 3) / 117]                                                                                [Stage 141:================================>                    (72 + 46) / 118][Stage 141:=================================>                   (74 + 44) / 118][Stage 141:=====================================>               (84 + 34) / 118][Stage 141:=============================================>      (103 + 15) / 118][Stage 141:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.218504971 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIn dex = 150  OR  partitionIndex = 151 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 151 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35810128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (71 + 43) / 114][Stage 142:=======================================>             (84 + 30) / 114][Stage 142:=============================================>       (98 + 16) / 114][Stage 142:=================================================>   (106 + 8) / 114][Stage 142:===================================================> (111 + 3) / 114][Stage 142:=====================================================(114 + 0) / 114]                                                                                [Stage 143:=====================================>               (81 + 34) / 115][Stage 143:========================================>            (88 + 27) / 115][Stage 143:=============================================>      (100 + 15) / 115][Stage 143:===================================================> (111 + 4) / 115][Stage 143:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.293805122 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23  OR  pa rtitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex =  52  OR  partitionIndex = 53 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369122593 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (71 + 46) / 117][Stage 144:==================================>                  (76 + 41) / 117][Stage 144:========================================>            (89 + 28) / 117][Stage 144:===============================================>    (106 + 11) / 117][Stage 144:===================================================> (114 + 3) / 117]                                                                                [Stage 145:================================>                    (72 + 46) / 118][Stage 145:=====================================>               (84 + 34) / 118][Stage 145:============================================>       (101 + 17) / 118][Stage 145:==================================================>  (112 + 6) / 118][Stage 145:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.483011131 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIn dex = 224  OR  partitionIndex = 225 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374389516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (73 + 42) / 115][Stage 146:=======================================>             (85 + 30) / 115][Stage 146:===============================================>    (105 + 10) / 115][Stage 146:====================================================>(113 + 2) / 115]                                                                                [Stage 147:===============================>                     (68 + 48) / 116][Stage 147:====================================>                (79 + 37) / 116][Stage 147:===========================================>         (96 + 20) / 116][Stage 147:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.672746036 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR   partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIn dex = 248  OR  partitionIndex = 249 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 248  OR  partitionIndex = 249 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397488212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (62 + 59) / 121][Stage 148:==============================>                      (69 + 52) / 121][Stage 148:======================================>              (89 + 32) / 121][Stage 148:=================================================>   (112 + 9) / 121]                                                                                [Stage 149:===========================>                         (64 + 58) / 122][Stage 149:===============================>                     (73 + 49) / 122][Stage 149:==========================================>          (98 + 24) / 122][Stage 149:=================================================>   (114 + 8) / 122][Stage 149:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.453746006 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  pa rtitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionInde x = 120  OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405053175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (61 + 61) / 122][Stage 150:=============================>                       (67 + 55) / 122][Stage 150:====================================>                (83 + 39) / 122][Stage 150:==============================================>     (109 + 13) / 122][Stage 150:====================================================>(120 + 2) / 122]                                                                                [Stage 151:============================>                        (67 + 56) / 123][Stage 151:==================================>                  (79 + 44) / 123][Stage 151:==========================================>          (99 + 24) / 123][Stage 151:============================================>       (106 + 17) / 123][Stage 151:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.583018194 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 99  OR  partitionIndex =  114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458460871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=================================>                   (72 + 42) / 114][Stage 152:=======================================>             (85 + 29) / 114][Stage 152:============================================>        (96 + 18) / 114][Stage 152:==================================================>  (109 + 5) / 114][Stage 152:===================================================> (110 + 4) / 114][Stage 152:====================================================>(113 + 1) / 114]                                                                                [Stage 153:==================================>                  (74 + 41) / 115][Stage 153:======================================>              (84 + 31) / 115][Stage 153:==============================================>     (102 + 13) / 115][Stage 153:=================================================>   (108 + 7) / 115][Stage 153:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.205319376 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151  OR   partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIn dex = 180  OR  partitionIndex = 181 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==================================>                  (74 + 40) / 114][Stage 154:=======================================>             (84 + 30) / 114][Stage 154:=============================================>       (98 + 16) / 114][Stage 154:=================================================>   (107 + 7) / 114][Stage 154:===================================================> (110 + 4) / 114][Stage 154:====================================================>(113 + 1) / 114]                                                                                [Stage 155:===================================>                 (78 + 37) / 115][Stage 155:=======================================>             (85 + 30) / 115][Stage 155:==============================================>     (103 + 12) / 115][Stage 155:==================================================>  (109 + 6) / 115][Stage 155:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.14445598 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIn dex = 154  OR  partitionIndex = 155 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393653551 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:============================>                        (65 + 56) / 121][Stage 156:=================================>                   (76 + 45) / 121][Stage 156:========================================>            (92 + 29) / 121][Stage 156:===============================================>    (111 + 10) / 121]                                                                                [Stage 157:===========================>                         (64 + 58) / 122][Stage 157:=================================>                   (76 + 46) / 122][Stage 157:=========================================>           (96 + 26) / 122][Stage 157:==================================================>  (116 + 6) / 122][Stage 157:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.666854337 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR   partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIn dex = 176  OR  partitionIndex = 177 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (61 + 60) / 121][Stage 158:===========================>                         (63 + 58) / 121][Stage 158:==================================>                  (79 + 42) / 121][Stage 158:==========================================>         (100 + 21) / 121][Stage 158:===================================================> (118 + 3) / 121]                                                                                [Stage 159:==========================>                          (62 + 60) / 122][Stage 159:=============================>                       (67 + 55) / 122][Stage 159:==================================>                  (79 + 43) / 122][Stage 159:============================================>       (104 + 18) / 122][Stage 159:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.492644904 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR   partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369353259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (69 + 46) / 115][Stage 160:======================================>              (84 + 31) / 115][Stage 160:============================================>        (96 + 19) / 115][Stage 160:==================================================>  (110 + 5) / 115]                                                                                [Stage 161:==================================>                  (76 + 40) / 116][Stage 161:=========================================>           (90 + 26) / 116][Stage 161:===============================================>    (106 + 10) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.755422523 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR   partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIn dex = 155  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397267996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (61 + 61) / 122][Stage 162:=============================>                       (69 + 53) / 122][Stage 162:=====================================>               (86 + 36) / 122][Stage 162:============================================>       (104 + 18) / 122][Stage 162:==================================================>  (116 + 6) / 122]                                                                                [Stage 163:==========================>                          (62 + 61) / 123][Stage 163:=================================>                   (77 + 46) / 123][Stage 163:========================================>            (94 + 29) / 123][Stage 163:=================================================>   (116 + 7) / 123][Stage 163:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.766193792 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108  OR  p artitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionInd ex = 125  OR  partitionIndex = 126 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394012746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 61) / 121][Stage 164:===========================>                         (62 + 59) / 121][Stage 164:===================================>                 (81 + 40) / 121][Stage 164:===========================================>         (99 + 22) / 121][Stage 164:===================================================> (117 + 4) / 121][Stage 164:====================================================>(120 + 1) / 121]                                                                                [Stage 165:==========================>                          (62 + 60) / 122][Stage 165:==============================>                      (70 + 52) / 122][Stage 165:======================================>              (89 + 33) / 122][Stage 165:==============================================>     (108 + 14) / 122][Stage 165:===================================================> (119 + 3) / 122][Stage 165:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.646026674 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex =  100  OR  partitionIndex = 101 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395462036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 61) / 122][Stage 166:============================>                        (66 + 56) / 122][Stage 166:====================================>                (85 + 37) / 122][Stage 166:=============================================>      (107 + 15) / 122][Stage 166:====================================================>(121 + 1) / 122]                                                                                [Stage 167:==========================>                          (62 + 61) / 123][Stage 167:============================>                        (65 + 58) / 123][Stage 167:=================================>                   (77 + 46) / 123][Stage 167:===========================================>        (102 + 21) / 123][Stage 167:==================================================>  (118 + 5) / 123][Stage 167:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.60098671 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex =  108  OR  partitionIndex = 109 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417966066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 60) / 121][Stage 168:===========================>                         (63 + 58) / 121][Stage 168:==================================>                  (79 + 42) / 121][Stage 168:============================================>       (103 + 18) / 121][Stage 168:===================================================> (117 + 4) / 121]                                                                                [Stage 169:==========================>                          (62 + 60) / 122][Stage 169:=============================>                       (68 + 54) / 122][Stage 169:====================================>                (84 + 38) / 122][Stage 169:==============================================>     (108 + 14) / 122][Stage 169:==================================================>  (116 + 6) / 122][Stage 169:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.444602397 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR   partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIn dex = 183  OR  partitionIndex = 192 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406003201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 61) / 122][Stage 170:============================>                        (65 + 57) / 122][Stage 170:==================================>                  (80 + 42) / 122][Stage 170:=============================================>      (107 + 15) / 122][Stage 170:==================================================>  (117 + 5) / 122]                                                                                [Stage 171:===========================>                         (63 + 60) / 123][Stage 171:===============================>                     (73 + 50) / 123][Stage 171:======================================>              (89 + 34) / 123][Stage 171:==========================================>         (101 + 22) / 123][Stage 171:=================================================>   (114 + 9) / 123]                                                                                Time elapsed: 4.140121806 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 161  OR   partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36622476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (71 + 46) / 117][Stage 172:=================================>                   (73 + 44) / 117][Stage 172:=====================================>               (83 + 34) / 117][Stage 172:============================================>       (101 + 16) / 117][Stage 172:====================================================>(115 + 2) / 117]                                                                                [Stage 173:================================>                    (72 + 46) / 118][Stage 173:=================================>                   (75 + 43) / 118][Stage 173:=======================================>             (89 + 29) / 118][Stage 173:=============================================>      (103 + 15) / 118][Stage 173:=================================================>   (110 + 8) / 118][Stage 173:=================================================>   (111 + 7) / 118][Stage 173:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.753056046 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359582562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (71 + 46) / 117][Stage 174:================================>                    (72 + 45) / 117][Stage 174:=======================================>             (87 + 30) / 117][Stage 174:==============================================>     (105 + 12) / 117][Stage 174:====================================================>(115 + 2) / 117]                                                                                [Stage 175:================================>                    (72 + 46) / 118][Stage 175:=================================>                   (75 + 43) / 118][Stage 175:=====================================>               (84 + 34) / 118][Stage 175:============================================>       (102 + 16) / 118][Stage 175:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.273255603 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR   partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIn dex = 185  OR  partitionIndex = 186 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.329410863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:======================================>              (84 + 31) / 115][Stage 176:=========================================>           (91 + 24) / 115][Stage 176:==============================================>     (102 + 13) / 115][Stage 176:===================================================> (111 + 4) / 115]                                                                                [Stage 177:========================================>            (89 + 27) / 116][Stage 177:============================================>        (97 + 19) / 116][Stage 177:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.707201432 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64  OR  pa rtitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex =  81  OR  partitionIndex = 82 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=====================================>               (82 + 33) / 115][Stage 178:=========================================>           (91 + 24) / 115][Stage 178:============================================>        (96 + 19) / 115][Stage 178:=================================================>   (108 + 7) / 115]                                                                                [Stage 179:========================================>            (89 + 27) / 116][Stage 179:===========================================>         (96 + 20) / 116][Stage 179:================================================>    (107 + 9) / 116][Stage 179:====================================================>(114 + 2) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.082491592 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIn dex = 200  OR  partitionIndex = 201 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331387897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:======================================>              (84 + 31) / 115][Stage 180:==========================================>          (92 + 23) / 115][Stage 180:===============================================>    (104 + 11) / 115][Stage 180:===================================================> (112 + 3) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:======================================>              (84 + 32) / 116][Stage 181:========================================>            (89 + 27) / 116][Stage 181:=============================================>       (99 + 17) / 116][Stage 181:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.902391307 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381493861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===============================>                     (68 + 47) / 115][Stage 182:======================================>              (83 + 32) / 115][Stage 182:=============================================>      (100 + 15) / 115][Stage 182:=================================================>   (108 + 7) / 115]                                                                                [Stage 183:==================================>                  (76 + 40) / 116][Stage 183:=========================================>           (91 + 25) / 116][Stage 183:============================================>       (100 + 16) / 116][Stage 183:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.059397666 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR   partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIn dex = 244  OR  partitionIndex = 245 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 244  OR  partitionIndex = 245 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366425831 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==================================>                  (75 + 40) / 115][Stage 184:======================================>              (84 + 31) / 115][Stage 184:==============================================>     (102 + 13) / 115]                                                                                [Stage 185:=================================>                   (74 + 42) / 116][Stage 185:=======================================>             (87 + 29) / 116][Stage 185:=============================================>      (101 + 15) / 116][Stage 185:=================================================>   (109 + 7) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.851952131 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIn dex = 188  OR  partitionIndex = 189 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188  OR  partitionIndex = 189 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403617225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:=============================>                       (63 + 50) / 113][Stage 186:====================================>                (78 + 35) / 113][Stage 186:=============================================>       (96 + 17) / 113][Stage 186:==================================================>  (107 + 6) / 113][Stage 186:====================================================>(112 + 1) / 113]                                                                                [Stage 187:===========================>                         (60 + 54) / 114][Stage 187:===============================>                     (68 + 46) / 114][Stage 187:=====================================>               (81 + 33) / 114][Stage 187:===============================================>    (104 + 10) / 114][Stage 187:===================================================> (111 + 3) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.739925332 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  pa rtitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex =  112  OR  partitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 112  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333935573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (83 + 32) / 115][Stage 188:==========================================>          (92 + 23) / 115][Stage 188:=================================================>   (107 + 8) / 115][Stage 188:===================================================> (111 + 4) / 115][Stage 188:====================================================>(113 + 2) / 115]                                                                                [Stage 189:=====================================>               (83 + 33) / 116][Stage 189:==========================================>          (93 + 23) / 116][Stage 189:===============================================>    (106 + 10) / 116][Stage 189:===================================================> (113 + 3) / 116][Stage 189:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.331606911 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR   partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIn dex = 144  OR  partitionIndex = 145 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374313473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (72 + 45) / 117][Stage 190:====================================>                (81 + 36) / 117][Stage 190:===========================================>         (95 + 22) / 117][Stage 190:==================================================>  (111 + 6) / 117]                                                                                [Stage 191:=================================>                   (74 + 44) / 118][Stage 191:=====================================>               (83 + 35) / 118][Stage 191:============================================>        (98 + 20) / 118][Stage 191:==================================================>  (113 + 5) / 118][Stage 191:====================================================>(116 + 2) / 118][Stage 191:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.572142152 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIn dex = 168  OR  partitionIndex = 169 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359588646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (71 + 46) / 117][Stage 192:====================================>                (81 + 36) / 117][Stage 192:===========================================>         (95 + 22) / 117][Stage 192:====================================================>(115 + 2) / 117]                                                                                [Stage 193:================================>                    (73 + 45) / 118][Stage 193:==================================>                  (77 + 41) / 118][Stage 193:===========================================>         (96 + 22) / 118][Stage 193:==================================================>  (112 + 6) / 118][Stage 193:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.17752794 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIn dex = 129  OR  partitionIndex = 144 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44520199 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:============================>                        (64 + 57) / 121][Stage 194:===============================>                     (71 + 50) / 121][Stage 194:========================================>            (92 + 29) / 121][Stage 194:=================================================>   (114 + 7) / 121][Stage 194:====================================================>(119 + 2) / 121]                                                                                [Stage 195:============================>                        (65 + 57) / 122][Stage 195:=================================>                   (77 + 45) / 122][Stage 195:========================================>            (94 + 28) / 122][Stage 195:=================================================>   (115 + 7) / 122][Stage 195:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.706850673 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224  OR   partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIn dex = 241  OR  partitionIndex = 242 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIndex = 242 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403689396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (61 + 61) / 122][Stage 196:=============================>                       (69 + 53) / 122][Stage 196:=====================================>               (86 + 36) / 122][Stage 196:=================================================>   (114 + 8) / 122]                                                                                [Stage 197:===========================>                         (63 + 60) / 123][Stage 197:===============================>                     (74 + 49) / 123][Stage 197:=========================================>           (96 + 27) / 123][Stage 197:===============================================>    (112 + 11) / 123][Stage 197:===================================================> (120 + 3) / 123][Stage 197:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.541432615 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  pa rtitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex =  80  OR  partitionIndex = 81 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360144186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:>                                                      (0 + 0) / 114][Stage 198:====================================>                (78 + 36) / 114][Stage 198:========================================>            (88 + 26) / 114][Stage 198:==============================================>     (103 + 11) / 114][Stage 198:=================================================>   (106 + 8) / 114][Stage 198:===================================================> (111 + 3) / 114]                                                                                [Stage 199:====================================>                (80 + 35) / 115][Stage 199:===========================================>         (95 + 20) / 115][Stage 199:==============================================>     (103 + 12) / 115][Stage 199:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 3.765553192 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  pa rtitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex =  31  OR  partitionIndex = 44 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33364152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (81 + 34) / 115][Stage 200:=========================================>           (89 + 26) / 115][Stage 200:=============================================>      (101 + 14) / 115][Stage 200:===================================================> (112 + 3) / 115][Stage 200:====================================================>(114 + 1) / 115]                                                                                [Stage 201:=====================================>               (81 + 35) / 116][Stage 201:==========================================>          (92 + 24) / 116][Stage 201:============================================>        (98 + 18) / 116][Stage 201:==============================================>     (104 + 12) / 116][Stage 201:=================================================>   (108 + 8) / 116][Stage 201:=================================================>   (109 + 7) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.245859085 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/30 00:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:51154) dropped. RpcEnv already stopped.
17/05/30 00:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:51154) dropped. RpcEnv already stopped.

real	11m48.529s
user	12m27.152s
sys	1m38.632s
