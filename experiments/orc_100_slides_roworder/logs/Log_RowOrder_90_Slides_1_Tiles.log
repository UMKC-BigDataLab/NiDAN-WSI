Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 01:24:14 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:24:29 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:24:29 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:24:29 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 01:24:32 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:24:42 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530012431-0707).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.307849601 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=============>                                         (29 + 86) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.723292993 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===========================>                           (58 + 57) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:=================================>                     (70 + 45) / 115][Stage 2:=================================>                     (71 + 44) / 115][Stage 2:===================================>                   (74 + 41) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:==========================================>            (88 + 27) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:===============================================>      (101 + 14) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:=====================================================> (111 + 4) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:===========================>                           (59 + 57) / 116][Stage 3:================================>                      (69 + 47) / 116][Stage 3:==================================>                    (72 + 44) / 116][Stage 3:======================================>                (81 + 35) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:============================================>          (94 + 22) / 116][Stage 3:==============================================>        (98 + 18) / 116][Stage 3:=================================================>    (106 + 10) / 116][Stage 3:======================================================>(114 + 2) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.032569432 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.748908467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=====================>                                 (47 + 74) / 121][Stage 4:=========================>                             (55 + 66) / 121][Stage 4:=============================>                         (64 + 57) / 121][Stage 4:================================>                      (72 + 49) / 121][Stage 4:===================================>                   (78 + 43) / 121][Stage 4:=======================================>               (86 + 35) / 121][Stage 4:==============================================>       (104 + 17) / 121][Stage 4:======================================================>(119 + 2) / 121]                                                                                [Stage 5:===========================>                           (61 + 61) / 122][Stage 5:=============================>                         (66 + 56) / 122][Stage 5:=================================>                     (75 + 47) / 122][Stage 5:======================================>                (86 + 36) / 122][Stage 5:=============================================>        (102 + 20) / 122][Stage 5:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.312814604 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.638329095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (70 + 44) / 114][Stage 6:====================================>                  (75 + 39) / 114][Stage 6:=========================================>             (85 + 29) / 114][Stage 6:============================================>          (93 + 21) / 114][Stage 6:===============================================>       (99 + 15) / 114][Stage 6:================================================>     (103 + 11) / 114][Stage 6:=====================================================> (110 + 4) / 114][Stage 6:======================================================>(112 + 2) / 114]                                                                                [Stage 7:==================================>                    (73 + 42) / 115][Stage 7:=====================================>                 (78 + 37) / 115][Stage 7:===========================================>           (91 + 24) / 115][Stage 7:==============================================>        (98 + 17) / 115][Stage 7:===================================================>   (107 + 8) / 115][Stage 7:=====================================================> (112 + 3) / 115][Stage 7:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.350027121 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (69 + 45) / 114][Stage 8:===================================>                   (74 + 40) / 114][Stage 8:========================================>              (83 + 31) / 114][Stage 8:===========================================>           (91 + 23) / 114][Stage 8:==============================================>        (96 + 18) / 114][Stage 8:===============================================>      (101 + 13) / 114][Stage 8:====================================================>  (108 + 6) / 114][Stage 8:====================================================>  (109 + 5) / 114][Stage 8:======================================================>(113 + 1) / 114]                                                                                [Stage 9:=================================>                     (71 + 44) / 115][Stage 9:======================================>                (80 + 35) / 115][Stage 9:==========================================>            (88 + 27) / 115][Stage 9:==============================================>        (98 + 17) / 115][Stage 9:================================================>     (103 + 12) / 115][Stage 9:================================================>     (104 + 11) / 115][Stage 9:===================================================>   (107 + 8) / 115][Stage 9:====================================================>  (110 + 5) / 115][Stage 9:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 5.038704108 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.654249294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=============================>                        (63 + 51) / 114][Stage 10:====================================>                 (77 + 37) / 114][Stage 10:==========================================>           (89 + 25) / 114][Stage 10:============================================>         (94 + 20) / 114][Stage 10:===============================================>     (102 + 12) / 114][Stage 10:=================================================>    (105 + 9) / 114][Stage 10:==================================================>   (107 + 7) / 114][Stage 10:=====================================================>(112 + 2) / 114][Stage 10:=====================================================>(113 + 1) / 114]                                                                                [Stage 11:=================================>                    (71 + 44) / 115][Stage 11:======================================>               (83 + 32) / 115][Stage 11:==========================================>           (91 + 24) / 115][Stage 11:============================================>         (95 + 20) / 115][Stage 11:===============================================>     (102 + 13) / 115][Stage 11:===================================================>  (109 + 6) / 115][Stage 11:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.498859411 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.596250043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 62) / 122][Stage 12:===========================>                          (61 + 61) / 122][Stage 12:=============================>                        (67 + 55) / 122][Stage 12:=================================>                    (75 + 47) / 122][Stage 12:======================================>               (88 + 34) / 122][Stage 12:===========================================>         (100 + 22) / 122][Stage 12:==============================================>      (107 + 15) / 122][Stage 12:=====================================================>(120 + 2) / 122]                                                                                [Stage 13:============================>                         (65 + 58) / 123][Stage 13:=================================>                    (77 + 46) / 123][Stage 13:=======================================>              (91 + 32) / 123][Stage 13:=============================================>       (106 + 17) / 123][Stage 13:==================================================>   (116 + 7) / 123][Stage 13:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.176607358 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (61 + 61) / 122][Stage 14:============================>                         (64 + 58) / 122][Stage 14:==================================>                   (78 + 44) / 122][Stage 14:==========================================>           (97 + 25) / 122][Stage 14:==================================================>   (115 + 7) / 122][Stage 14:=====================================================>(120 + 2) / 122]                                                                                [Stage 15:===========================>                          (63 + 60) / 123][Stage 15:===================================>                  (81 + 42) / 123][Stage 15:=========================================>            (95 + 28) / 123][Stage 15:================================================>    (113 + 10) / 123][Stage 15:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.588366274 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468380096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:======================================>               (82 + 33) / 115][Stage 16:==========================================>           (91 + 24) / 115][Stage 16:===============================================>     (104 + 11) / 115]                                                                                [Stage 17:=======================================>              (84 + 32) / 116][Stage 17:==========================================>           (92 + 24) / 116][Stage 17:==============================================>      (102 + 14) / 116][Stage 17:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.778608345 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.541694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (71 + 46) / 117][Stage 18:===================================>                  (76 + 41) / 117][Stage 18:=======================================>              (86 + 31) / 117][Stage 18:============================================>         (97 + 20) / 117][Stage 18:================================================>    (107 + 10) / 117][Stage 18:=====================================================>(115 + 2) / 117]                                                                                [Stage 19:================================>                     (70 + 48) / 118][Stage 19:===================================>                  (77 + 41) / 118][Stage 19:=======================================>              (87 + 31) / 118][Stage 19:============================================>         (97 + 21) / 118][Stage 19:===================================================>  (113 + 5) / 118][Stage 19:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.848195627 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.574911659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (61 + 61) / 122][Stage 20:=============================>                        (66 + 56) / 122][Stage 20:===================================>                  (80 + 42) / 122][Stage 20:============================================>        (102 + 20) / 122][Stage 20:===================================================>  (116 + 6) / 122]                                                                                [Stage 21:===========================>                          (62 + 61) / 123][Stage 21:================================>                     (73 + 50) / 123][Stage 21:===========================================>          (98 + 25) / 123][Stage 21:===================================================>  (117 + 6) / 123][Stage 21:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.450233439 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.595635605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==========================>                           (60 + 62) / 122][Stage 22:==============================>                       (68 + 54) / 122][Stage 22:=======================================>              (89 + 33) / 122][Stage 22:================================================>    (112 + 10) / 122][Stage 22:=====================================================>(121 + 1) / 122]                                                                                [Stage 23:==========================>                           (61 + 62) / 123][Stage 23:=============================>                        (68 + 55) / 123][Stage 23:==================================>                   (79 + 44) / 123][Stage 23:===========================================>         (102 + 21) / 123][Stage 23:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.329013226 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547965111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (61 + 61) / 122][Stage 24:===========================>                          (62 + 60) / 122][Stage 24:===============================>                      (72 + 50) / 122][Stage 24:==========================================>           (95 + 27) / 122][Stage 24:================================================>    (111 + 11) / 122][Stage 24:===================================================>  (116 + 6) / 122][Stage 24:=====================================================>(120 + 2) / 122]                                                                                [Stage 25:============================>                         (64 + 59) / 123][Stage 25:================================>                     (73 + 50) / 123][Stage 25:=========================================>            (95 + 28) / 123][Stage 25:===================================================>  (117 + 6) / 123][Stage 25:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.594123679 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444634672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=======================================>              (84 + 31) / 115][Stage 26:===========================================>          (93 + 22) / 115][Stage 26:==================================================>   (107 + 8) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:======================================>               (83 + 33) / 116][Stage 27:========================================>             (87 + 29) / 116][Stage 27:===============================================>     (104 + 12) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.666189532 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428114541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=====================================>                (79 + 36) / 115][Stage 28:======================================>               (82 + 33) / 115][Stage 28:=============================================>        (97 + 18) / 115][Stage 28:===================================================>  (109 + 6) / 115]                                                                                [Stage 29:======================================>               (83 + 33) / 116][Stage 29:============================================>         (95 + 21) / 116][Stage 29:=================================================>    (107 + 9) / 116][Stage 29:=====================================================>(114 + 2) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.000998278 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49327277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===================================>                  (74 + 40) / 114][Stage 30:=======================================>              (84 + 30) / 114][Stage 30:==============================================>      (101 + 13) / 114][Stage 30:==================================================>   (106 + 8) / 114][Stage 30:====================================================> (111 + 3) / 114]                                                                                [Stage 31:======================================>               (81 + 34) / 115][Stage 31:===========================================>          (93 + 22) / 115][Stage 31:===============================================>     (103 + 12) / 115][Stage 31:===================================================>  (109 + 6) / 115][Stage 31:===================================================>  (110 + 5) / 115][Stage 31:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.810568221 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503479661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==================================>                   (73 + 41) / 114][Stage 32:=========================================>            (87 + 27) / 114][Stage 32:===============================================>     (102 + 12) / 114][Stage 32:====================================================> (110 + 4) / 114][Stage 32:=====================================================>(113 + 1) / 114]                                                                                [Stage 33:=================================>                    (71 + 44) / 115][Stage 33:======================================>               (83 + 32) / 115][Stage 33:==============================================>      (100 + 15) / 115][Stage 33:===================================================>  (109 + 6) / 115][Stage 33:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.274738135 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==================================>                   (73 + 41) / 114][Stage 34:=========================================>            (88 + 26) / 114][Stage 34:=============================================>        (97 + 17) / 114][Stage 34:===================================================>  (108 + 6) / 114][Stage 34:====================================================> (111 + 3) / 114][Stage 34:=====================================================>(112 + 2) / 114]                                                                                [Stage 35:======================================>               (81 + 34) / 115][Stage 35:==========================================>           (90 + 25) / 115][Stage 35:===============================================>     (102 + 13) / 115][Stage 35:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.353002611 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507499893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 60) / 121][Stage 36:=============================>                        (66 + 55) / 121][Stage 36:===================================>                  (80 + 41) / 121][Stage 36:==============================================>      (107 + 14) / 121][Stage 36:====================================================> (118 + 3) / 121]                                                                                [Stage 37:===========================>                          (62 + 60) / 122][Stage 37:=============================>                        (67 + 55) / 122][Stage 37:====================================>                 (83 + 39) / 122][Stage 37:================================================>    (112 + 10) / 122][Stage 37:====================================================> (118 + 4) / 122][Stage 37:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.547951363 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45107826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (71 + 46) / 117][Stage 38:======================================>               (83 + 34) / 117][Stage 38:=============================================>        (99 + 18) / 117][Stage 38:==================================================>   (109 + 8) / 117][Stage 38:=====================================================>(115 + 2) / 117]                                                                                [Stage 39:================================>                     (72 + 46) / 118][Stage 39:======================================>               (85 + 33) / 118][Stage 39:=============================================>       (102 + 16) / 118][Stage 39:==================================================>   (111 + 7) / 118]                                                                                Time elapsed: 3.223748358 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405150803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=====================================>                (79 + 36) / 115][Stage 40:======================================>               (82 + 33) / 115][Stage 40:==============================================>       (98 + 17) / 115][Stage 40:===================================================>  (109 + 6) / 115]                                                                                [Stage 41:=========================================>            (90 + 26) / 116][Stage 41:================================================>    (106 + 10) / 116][Stage 41:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.704837175 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513014578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (61 + 60) / 121][Stage 42:================================>                     (73 + 48) / 121][Stage 42:==========================================>           (96 + 25) / 121][Stage 42:==================================================>   (113 + 8) / 121][Stage 42:====================================================> (117 + 4) / 121][Stage 42:=====================================================>(120 + 1) / 121]                                                                                [Stage 43:===========================>                          (62 + 60) / 122][Stage 43:=============================>                        (66 + 56) / 122][Stage 43:==================================>                   (79 + 43) / 122][Stage 43:==============================================>      (108 + 14) / 122][Stage 43:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.479681269 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507502606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:=============================>                        (66 + 55) / 121][Stage 44:==================================>                   (77 + 44) / 121][Stage 44:=============================================>       (103 + 18) / 121][Stage 44:=====================================================>(119 + 2) / 121]                                                                                [Stage 45:===========================>                          (62 + 60) / 122][Stage 45:================================>                     (74 + 48) / 122][Stage 45:=======================================>              (90 + 32) / 122][Stage 45:================================================>    (112 + 10) / 122]                                                                                Time elapsed: 2.977408339 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442270435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (65 + 50) / 115][Stage 46:================================>                     (70 + 45) / 115][Stage 46:=======================================>              (84 + 31) / 115][Stage 46:===========================================>          (93 + 22) / 115][Stage 46:==============================================>      (100 + 15) / 115][Stage 46:===================================================>  (109 + 6) / 115][Stage 46:====================================================> (111 + 4) / 115]                                                                                [Stage 47:===============================>                      (68 + 48) / 116][Stage 47:=====================================>                (81 + 35) / 116][Stage 47:===========================================>          (94 + 22) / 116][Stage 47:==============================================>      (102 + 14) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.559723288 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467559542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (71 + 46) / 117][Stage 48:=================================>                    (73 + 44) / 117][Stage 48:=========================================>            (89 + 28) / 117][Stage 48:==================================================>   (110 + 7) / 117][Stage 48:=====================================================>(116 + 1) / 117]                                                                                [Stage 49:=================================>                    (73 + 45) / 118][Stage 49:=======================================>              (86 + 32) / 118][Stage 49:============================================>         (98 + 20) / 118][Stage 49:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.11823869 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=================================>                    (72 + 45) / 117][Stage 50:======================================>               (84 + 33) / 117][Stage 50:===============================================>     (105 + 12) / 117][Stage 50:=====================================================>(115 + 2) / 117]                                                                                [Stage 51:================================>                     (72 + 46) / 118][Stage 51:===================================>                  (77 + 41) / 118][Stage 51:==========================================>           (92 + 26) / 118][Stage 51:================================================>    (108 + 10) / 118]                                                                                Time elapsed: 2.883082698 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512377563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (63 + 59) / 122][Stage 52:================================>                     (74 + 48) / 122][Stage 52:=========================================>            (93 + 29) / 122][Stage 52:==================================================>   (114 + 8) / 122][Stage 52:=====================================================>(120 + 2) / 122]                                                                                [Stage 53:============================>                         (64 + 59) / 123][Stage 53:==================================>                   (78 + 45) / 123][Stage 53:============================================>        (104 + 19) / 123][Stage 53:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.213830932 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 249 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 249 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448362404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (71 + 46) / 117][Stage 54:=================================>                    (73 + 44) / 117][Stage 54:==========================================>           (92 + 25) / 117][Stage 54:==================================================>   (110 + 7) / 117]                                                                                [Stage 55:=================================>                    (73 + 45) / 118][Stage 55:======================================>               (84 + 34) / 118][Stage 55:=============================================>       (102 + 16) / 118][Stage 55:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 2.877632149 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460177869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==========================>                           (60 + 62) / 122][Stage 56:=============================>                        (66 + 56) / 122][Stage 56:===================================>                  (81 + 41) / 122][Stage 56:============================================>        (103 + 19) / 122][Stage 56:====================================================> (119 + 3) / 122]                                                                                [Stage 57:============================>                         (65 + 58) / 123][Stage 57:================================>                     (75 + 48) / 123][Stage 57:==========================================>           (97 + 26) / 123][Stage 57:==============================================>      (108 + 15) / 123]                                                                                Time elapsed: 3.199226799 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465776898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 60) / 121][Stage 58:================================>                     (73 + 48) / 121][Stage 58:========================================>             (90 + 31) / 121][Stage 58:===============================================>     (108 + 13) / 121][Stage 58:=====================================================>(120 + 1) / 121]                                                                                [Stage 59:============================>                         (64 + 58) / 122][Stage 59:==================================>                   (78 + 44) / 122][Stage 59:===========================================>         (100 + 22) / 122][Stage 59:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.117017688 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide85;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==========================>                           (60 + 61) / 121][Stage 60:===========================>                          (61 + 60) / 121][Stage 60:===============================>                      (70 + 51) / 121][Stage 60:======================================>               (87 + 34) / 121][Stage 60:===============================================>     (109 + 12) / 121]                                                                                [Stage 61:===========================>                          (62 + 60) / 122][Stage 61:================================>                     (74 + 48) / 122][Stage 61:======================================>               (88 + 34) / 122][Stage 61:==============================================>      (108 + 14) / 122][Stage 61:===================================================>  (116 + 6) / 122][Stage 61:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.415881189 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (61 + 60) / 121][Stage 62:==============================>                       (68 + 53) / 121][Stage 62:======================================>               (87 + 34) / 121][Stage 62:==============================================>      (106 + 15) / 121][Stage 62:=====================================================>(119 + 2) / 121]                                                                                [Stage 63:============================>                         (64 + 58) / 122][Stage 63:=================================>                    (76 + 46) / 122][Stage 63:==========================================>           (96 + 26) / 122][Stage 63:================================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.17730441 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424446321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===================================>                  (75 + 39) / 114][Stage 64:========================================>             (86 + 28) / 114][Stage 64:===========================================>          (92 + 22) / 114][Stage 64:==============================================>      (100 + 14) / 114][Stage 64:====================================================> (111 + 3) / 114][Stage 64:=====================================================>(113 + 1) / 114]                                                                                [Stage 65:======================================>               (83 + 32) / 115][Stage 65:==========================================>           (91 + 24) / 115][Stage 65:==============================================>       (98 + 17) / 115][Stage 65:===================================================>  (110 + 5) / 115][Stage 65:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.454431093 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43447287 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:======================================>               (82 + 32) / 114][Stage 66:=============================================>        (96 + 18) / 114][Stage 66:===================================================>  (109 + 5) / 114][Stage 66:=====================================================>(113 + 1) / 114]                                                                                [Stage 67:====================================>                 (78 + 37) / 115][Stage 67:=========================================>            (89 + 26) / 115][Stage 67:==============================================>      (101 + 14) / 115][Stage 67:===================================================>  (109 + 6) / 115][Stage 67:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.05853326 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.570659834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==================================>                   (73 + 42) / 115][Stage 68:==========================================>           (90 + 25) / 115][Stage 68:==============================================>      (100 + 15) / 115][Stage 68:================================================>    (105 + 10) / 115][Stage 68:===================================================>  (109 + 6) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:================================>                     (69 + 47) / 116][Stage 69:=====================================>                (80 + 36) / 116][Stage 69:==========================================>           (91 + 25) / 116][Stage 69:===============================================>     (105 + 11) / 116][Stage 69:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.328863241 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45148914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==========================>                           (60 + 62) / 122][Stage 70:===========================>                          (63 + 59) / 122][Stage 70:=================================>                    (76 + 46) / 122][Stage 70:===========================================>         (101 + 21) / 122][Stage 70:=====================================================>(120 + 2) / 122]                                                                                [Stage 71:============================>                         (64 + 59) / 123][Stage 71:================================>                     (75 + 48) / 123][Stage 71:=========================================>            (95 + 28) / 123][Stage 71:==================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.118080294 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==========================>                           (60 + 62) / 122][Stage 72:==============================>                       (69 + 53) / 122][Stage 72:====================================>                 (83 + 39) / 122][Stage 72:==============================================>      (106 + 16) / 122][Stage 72:===================================================>  (116 + 6) / 122]                                                                                [Stage 73:============================>                         (65 + 58) / 123][Stage 73:==================================>                   (79 + 44) / 123][Stage 73:===========================================>         (100 + 23) / 123][Stage 73:==================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.157015434 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41738525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:====================================>                 (77 + 38) / 115][Stage 74:=========================================>            (89 + 26) / 115][Stage 74:=================================================>    (106 + 9) / 115]                                                                                [Stage 75:=================================>                    (71 + 45) / 116][Stage 75:========================================>             (87 + 29) / 116][Stage 75:=============================================>       (100 + 16) / 116][Stage 75:===================================================>  (110 + 6) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.810601732 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382672377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=====================================>                (80 + 35) / 115][Stage 76:============================================>         (95 + 20) / 115][Stage 76:===============================================>     (102 + 13) / 115][Stage 76:=====================================================>(113 + 2) / 115]                                                                                [Stage 77:======================================>               (83 + 33) / 116][Stage 77:=========================================>            (89 + 27) / 116][Stage 77:===============================================>     (103 + 13) / 116][Stage 77:====================================================> (112 + 4) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.884328886 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=======================================>              (84 + 31) / 115][Stage 78:============================================>         (94 + 21) / 115][Stage 78:=================================================>    (106 + 9) / 115][Stage 78:=====================================================>(113 + 2) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:======================================>               (83 + 33) / 116][Stage 79:==========================================>           (92 + 24) / 116][Stage 79:================================================>    (106 + 10) / 116][Stage 79:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.930854994 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492960445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (61 + 61) / 122][Stage 80:==============================>                       (70 + 52) / 122][Stage 80:========================================>             (91 + 31) / 122][Stage 80:================================================>    (112 + 10) / 122][Stage 80:=====================================================>(121 + 1) / 122]                                                                                [Stage 81:============================>                         (65 + 58) / 123][Stage 81:===================================>                  (81 + 42) / 123][Stage 81:===========================================>          (99 + 24) / 123][Stage 81:===================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.212613714 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449671835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (61 + 61) / 122][Stage 82:==============================>                       (68 + 54) / 122][Stage 82:======================================>               (88 + 34) / 122][Stage 82:==================================================>   (113 + 9) / 122]                                                                                [Stage 83:===========================>                          (62 + 61) / 123][Stage 83:================================>                     (73 + 50) / 123][Stage 83:=======================================>              (91 + 32) / 123][Stage 83:==================================================>   (115 + 8) / 123][Stage 83:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.007856206 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446850549 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 61) / 122][Stage 84:============================>                         (64 + 58) / 122][Stage 84:==================================>                   (77 + 45) / 122][Stage 84:==========================================>           (95 + 27) / 122][Stage 84:==================================================>   (115 + 7) / 122]                                                                                [Stage 85:============================>                         (64 + 59) / 123][Stage 85:==================================>                   (78 + 45) / 123][Stage 85:============================================>        (103 + 20) / 123][Stage 85:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.012896122 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429098847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===============================>                      (68 + 47) / 115][Stage 86:===================================>                  (76 + 39) / 115][Stage 86:========================================>             (86 + 29) / 115][Stage 86:===============================================>     (104 + 11) / 115][Stage 86:=====================================================>(113 + 2) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:================================>                     (69 + 47) / 116][Stage 87:=================================>                    (73 + 43) / 116][Stage 87:========================================>             (87 + 29) / 116][Stage 87:=============================================>        (98 + 18) / 116][Stage 87:====================================================> (112 + 4) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.298069289 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43286746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==========================>                           (60 + 61) / 121][Stage 88:=================================>                    (75 + 46) / 121][Stage 88:=========================================>            (93 + 28) / 121][Stage 88:================================================>    (111 + 10) / 121][Stage 88:=====================================================>(120 + 1) / 121]                                                                                [Stage 89:===========================>                          (62 + 60) / 122][Stage 89:==============================>                       (70 + 52) / 122][Stage 89:=========================================>            (94 + 28) / 122][Stage 89:===============================================>     (110 + 12) / 122][Stage 89:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.241274309 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==========================>                           (60 + 61) / 121][Stage 90:===========================>                          (62 + 59) / 121][Stage 90:=================================>                    (74 + 47) / 121][Stage 90:============================================>         (99 + 22) / 121][Stage 90:=====================================================>(119 + 2) / 121][Stage 90:=====================================================>(120 + 1) / 121]                                                                                [Stage 91:=============================>                        (66 + 56) / 122][Stage 91:===================================>                  (80 + 42) / 122][Stage 91:==============================================>      (107 + 15) / 122]                                                                                Time elapsed: 3.184584451 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412980679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (72 + 43) / 115][Stage 92:=========================================>            (88 + 27) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:================================>                     (69 + 47) / 116][Stage 93:===================================>                  (77 + 39) / 116][Stage 93:============================================>         (95 + 21) / 116][Stage 93:==================================================>   (108 + 8) / 116][Stage 93:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.826594515 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390595718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (73 + 44) / 117][Stage 94:====================================>                 (80 + 37) / 117][Stage 94:========================================>             (88 + 29) / 117][Stage 94:==============================================>      (102 + 15) / 117][Stage 94:=====================================================>(116 + 1) / 117]                                                                                [Stage 95:================================>                     (72 + 46) / 118][Stage 95:=================================>                    (74 + 44) / 118][Stage 95:=====================================>                (81 + 37) / 118][Stage 95:==========================================>           (93 + 25) / 118][Stage 95:==================================================>   (111 + 7) / 118][Stage 95:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.346512161 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425404428 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:===============================>                      (70 + 51) / 121][Stage 96:====================================>                 (82 + 39) / 121][Stage 96:============================================>        (101 + 20) / 121][Stage 96:===================================================>  (116 + 5) / 121]                                                                                [Stage 97:===========================>                          (62 + 60) / 122][Stage 97:===============================>                      (71 + 51) / 122][Stage 97:====================================>                 (83 + 39) / 122][Stage 97:=============================================>       (105 + 17) / 122][Stage 97:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.951927619 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520302435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (70 + 45) / 115][Stage 98:===================================>                  (76 + 39) / 115][Stage 98:=============================================>        (96 + 19) / 115][Stage 98:===================================================>  (110 + 5) / 115][Stage 98:=====================================================>(113 + 2) / 115]                                                                                [Stage 99:=================================>                    (71 + 45) / 116][Stage 99:======================================>               (83 + 33) / 116][Stage 99:=============================================>        (97 + 19) / 116][Stage 99:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.853014225 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381090309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (71 + 46) / 117][Stage 100:===================================>                 (79 + 38) / 117][Stage 100:==========================================>          (93 + 24) / 117][Stage 100:=================================================>   (109 + 8) / 117][Stage 100:====================================================>(116 + 1) / 117]                                                                                [Stage 101:================================>                    (72 + 46) / 118][Stage 101:=================================>                   (75 + 43) / 118][Stage 101:=======================================>             (88 + 30) / 118][Stage 101:=============================================>      (103 + 15) / 118][Stage 101:===================================================> (115 + 3) / 118][Stage 101:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.226333475 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390721734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==============================>                      (66 + 49) / 115][Stage 102:====================================>                (80 + 35) / 115][Stage 102:=========================================>           (91 + 24) / 115][Stage 102:=================================================>   (108 + 7) / 115]                                                                                [Stage 103:================================>                    (72 + 44) / 116][Stage 103:==========================================>          (94 + 22) / 116][Stage 103:===============================================>    (106 + 10) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.690017431 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431919481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:============================>                        (65 + 57) / 122][Stage 104:===================================>                 (82 + 40) / 122][Stage 104:==========================================>         (100 + 22) / 122][Stage 104:=================================================>   (114 + 8) / 122][Stage 104:====================================================>(121 + 1) / 122]                                                                                [Stage 105:==========================>                          (61 + 62) / 123][Stage 105:============================>                        (67 + 56) / 123][Stage 105:===================================>                 (83 + 40) / 123][Stage 105:===========================================>        (103 + 20) / 123][Stage 105:===================================================> (120 + 3) / 123][Stage 105:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.308058026 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485191375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (67 + 48) / 115][Stage 106:===================================>                 (77 + 38) / 115][Stage 106:==========================================>          (92 + 23) / 115][Stage 106:==============================================>     (102 + 13) / 115][Stage 106:====================================================>(113 + 2) / 115]                                                                                [Stage 107:================================>                    (72 + 44) / 116][Stage 107:=====================================>               (83 + 33) / 116][Stage 107:============================================>        (98 + 18) / 116][Stage 107:=================================================>   (108 + 8) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.192695064 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 247 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 247 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==============================>                      (66 + 49) / 115][Stage 108:==================================>                  (74 + 41) / 115][Stage 108:========================================>            (87 + 28) / 115][Stage 108:=============================================>      (101 + 14) / 115][Stage 108:==================================================>  (109 + 6) / 115][Stage 108:==================================================>  (110 + 5) / 115]                                                                                [Stage 109:=================================>                   (73 + 43) / 116][Stage 109:======================================>              (84 + 32) / 116][Stage 109:============================================>       (100 + 16) / 116][Stage 109:=================================================>   (108 + 8) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.283560245 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426174925 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (64 + 58) / 122][Stage 110:=================================>                   (76 + 46) / 122][Stage 110:==========================================>         (100 + 22) / 122][Stage 110:====================================================>(121 + 1) / 122]                                                                                [Stage 111:===========================>                         (63 + 60) / 123][Stage 111:==============================>                      (71 + 52) / 123][Stage 111:======================================>              (90 + 33) / 123][Stage 111:===============================================>    (113 + 10) / 123][Stage 111:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 2.945755819 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385845744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (71 + 46) / 117][Stage 112:===================================>                 (79 + 38) / 117][Stage 112:===========================================>         (96 + 21) / 117][Stage 112:=================================================>   (110 + 7) / 117]                                                                                [Stage 113:================================>                    (73 + 45) / 118][Stage 113:=====================================>               (84 + 34) / 118][Stage 113:============================================>        (98 + 20) / 118][Stage 113:===================================================> (114 + 4) / 118][Stage 113:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.985760448 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359608029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=======================================>             (85 + 30) / 115][Stage 114:===========================================>         (95 + 20) / 115][Stage 114:=================================================>   (107 + 8) / 115][Stage 114:====================================================>(113 + 2) / 115]                                                                                [Stage 115:=====================================>               (82 + 34) / 116][Stage 115:=========================================>           (91 + 25) / 116][Stage 115:============================================>       (100 + 16) / 116][Stage 115:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.846183573 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410591942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:=============================>                       (68 + 53) / 121][Stage 116:=====================================>               (85 + 36) / 121][Stage 116:===============================================>    (110 + 11) / 121][Stage 116:====================================================>(120 + 1) / 121]                                                                                [Stage 117:===========================>                         (63 + 59) / 122][Stage 117:=============================>                       (69 + 53) / 122][Stage 117:=========================================>           (96 + 26) / 122][Stage 117:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 2.934920777 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363055377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==================================>                  (74 + 40) / 114][Stage 118:=======================================>             (85 + 29) / 114][Stage 118:=============================================>      (100 + 14) / 114][Stage 118:=================================================>   (107 + 7) / 114][Stage 118:===================================================> (110 + 4) / 114]                                                                                [Stage 119:======================================>              (84 + 31) / 115][Stage 119:============================================>        (97 + 18) / 115][Stage 119:=================================================>   (107 + 8) / 115][Stage 119:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.087887432 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413076462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 60) / 121][Stage 120:=============================>                       (68 + 53) / 121][Stage 120:===================================>                 (82 + 39) / 121][Stage 120:===============================================>    (111 + 10) / 121][Stage 120:====================================================>(119 + 2) / 121]                                                                                [Stage 121:==========================>                          (62 + 60) / 122][Stage 121:==============================>                      (70 + 52) / 122][Stage 121:=======================================>             (92 + 30) / 122][Stage 121:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.922122485 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353136347 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=====================================>               (82 + 33) / 115][Stage 122:=========================================>           (90 + 25) / 115][Stage 122:==============================================>     (102 + 13) / 115][Stage 122:==================================================>  (109 + 6) / 115]                                                                                [Stage 123:========================================>            (88 + 28) / 116][Stage 123:=============================================>       (99 + 17) / 116][Stage 123:==================================================>  (111 + 5) / 116][Stage 123:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.818969838 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382134225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==================================>                  (74 + 41) / 115][Stage 124:======================================>              (83 + 32) / 115][Stage 124:============================================>        (96 + 19) / 115][Stage 124:=================================================>   (107 + 8) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:================================>                    (72 + 44) / 116][Stage 125:=====================================>               (82 + 34) / 116][Stage 125:============================================>        (97 + 19) / 116][Stage 125:=================================================>   (108 + 8) / 116][Stage 125:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.166614086 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395832245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (67 + 48) / 115][Stage 126:======================================>              (84 + 31) / 115][Stage 126:============================================>        (97 + 18) / 115][Stage 126:===============================================>    (105 + 10) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:==============================>                      (67 + 49) / 116][Stage 127:====================================>                (80 + 36) / 116][Stage 127:==========================================>          (92 + 24) / 116][Stage 127:=============================================>      (101 + 15) / 116][Stage 127:====================================================>(114 + 2) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.136970491 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375551344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===============================>                     (68 + 47) / 115][Stage 128:====================================>                (79 + 36) / 115][Stage 128:==========================================>          (93 + 22) / 115][Stage 128:===============================================>    (104 + 11) / 115][Stage 128:====================================================>(113 + 2) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:================================>                    (72 + 44) / 116][Stage 129:=========================================>           (90 + 26) / 116][Stage 129:============================================>       (100 + 16) / 116][Stage 129:==================================================>  (111 + 5) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.216840873 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408953639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (62 + 59) / 121][Stage 130:=============================>                       (67 + 54) / 121][Stage 130:======================================>              (89 + 32) / 121][Stage 130:===============================================>    (110 + 11) / 121][Stage 130:=====================================================(121 + 0) / 121]                                                                                [Stage 131:==========================>                          (62 + 60) / 122][Stage 131:================================>                    (75 + 47) / 122][Stage 131:====================================>                (85 + 37) / 122][Stage 131:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.003645486 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide85;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 61) / 121][Stage 132:===============================>                     (73 + 48) / 121][Stage 132:====================================>                (83 + 38) / 121][Stage 132:=============================================>      (105 + 16) / 121]                                                                                [Stage 133:===========================>                         (63 + 59) / 122][Stage 133:=================================>                   (76 + 46) / 122][Stage 133:===========================================>         (99 + 23) / 122][Stage 133:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.888744535 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380598744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=================================>                   (72 + 43) / 115][Stage 134:======================================>              (83 + 32) / 115][Stage 134:=============================================>      (100 + 15) / 115][Stage 134:================================================>    (106 + 9) / 115][Stage 134:==================================================>  (110 + 5) / 115]                                                                                [Stage 135:=================================>                   (73 + 43) / 116][Stage 135:========================================>            (89 + 27) / 116][Stage 135:===============================================>    (105 + 11) / 116][Stage 135:===================================================> (113 + 3) / 116][Stage 135:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.491190663 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===================================>                 (77 + 38) / 115][Stage 136:==========================================>          (93 + 22) / 115][Stage 136:=================================================>   (107 + 8) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:=================================>                   (73 + 43) / 116][Stage 137:=======================================>             (86 + 30) / 116][Stage 137:============================================>        (98 + 18) / 116][Stage 137:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.78321384 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340798609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (81 + 34) / 115][Stage 138:==========================================>          (92 + 23) / 115][Stage 138:==============================================>     (103 + 12) / 115][Stage 138:===================================================> (112 + 3) / 115]                                                                                [Stage 139:======================================>              (85 + 31) / 116][Stage 139:==========================================>          (94 + 22) / 116][Stage 139:===================================================> (112 + 4) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.891947518 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366131933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=======================================>             (85 + 29) / 114][Stage 140:===========================================>         (94 + 20) / 114][Stage 140:=================================================>   (106 + 8) / 114][Stage 140:====================================================>(113 + 1) / 114]                                                                                [Stage 141:===================================>                 (77 + 38) / 115][Stage 141:=======================================>             (86 + 29) / 115][Stage 141:==============================================>     (102 + 13) / 115][Stage 141:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 2.780462219 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400244335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (62 + 60) / 122][Stage 142:=============================>                       (69 + 53) / 122][Stage 142:========================================>            (94 + 28) / 122][Stage 142:=================================================>   (114 + 8) / 122]                                                                                [Stage 143:===========================>                         (63 + 60) / 123][Stage 143:=================================>                   (77 + 46) / 123][Stage 143:========================================>            (94 + 29) / 123][Stage 143:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 2.955147123 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358624624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (71 + 46) / 117][Stage 144:==================================>                  (77 + 40) / 117][Stage 144:========================================>            (90 + 27) / 117][Stage 144:==================================================>  (111 + 6) / 117]                                                                                [Stage 145:================================>                    (72 + 46) / 118][Stage 145:===================================>                 (79 + 39) / 118][Stage 145:============================================>       (102 + 16) / 118][Stage 145:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.781387572 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342987185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:========================================>            (88 + 27) / 115][Stage 146:===========================================>         (95 + 20) / 115][Stage 146:==================================================>  (109 + 6) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:=====================================>               (83 + 33) / 116][Stage 147:===========================================>         (95 + 21) / 116][Stage 147:=================================================>   (109 + 7) / 116][Stage 147:===================================================> (113 + 3) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.966822409 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333917943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=====================================>               (82 + 33) / 115][Stage 148:=========================================>           (91 + 24) / 115][Stage 148:==================================================>  (110 + 5) / 115]                                                                                [Stage 149:=====================================>               (83 + 33) / 116][Stage 149:========================================>            (88 + 28) / 116][Stage 149:==============================================>     (104 + 12) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.986808317 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40692653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (61 + 60) / 121][Stage 150:=============================>                       (67 + 54) / 121][Stage 150:=======================================>             (90 + 31) / 121][Stage 150:============================================>       (104 + 17) / 121][Stage 150:====================================================>(119 + 2) / 121]                                                                                [Stage 151:==========================>                          (61 + 61) / 122][Stage 151:=============================>                       (68 + 54) / 122][Stage 151:======================================>              (88 + 34) / 122][Stage 151:==============================================>     (110 + 12) / 122][Stage 151:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.014163932 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343159563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=======================================>             (86 + 29) / 115][Stage 152:===========================================>         (94 + 21) / 115][Stage 152:==================================================>  (109 + 6) / 115][Stage 152:===================================================> (112 + 3) / 115]                                                                                [Stage 153:========================================>            (89 + 27) / 116][Stage 153:===========================================>         (96 + 20) / 116][Stage 153:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.662573646 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359054782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=================================>                   (73 + 41) / 114][Stage 154:=======================================>             (84 + 30) / 114][Stage 154:==============================================>      (99 + 15) / 114][Stage 154:=================================================>   (107 + 7) / 114]                                                                                [Stage 155:=====================================>               (81 + 34) / 115][Stage 155:=========================================>           (90 + 25) / 115][Stage 155:=============================================>      (101 + 14) / 115][Stage 155:==================================================>  (109 + 6) / 115][Stage 155:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.923105648 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405062929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (61 + 60) / 121][Stage 156:==============================>                      (70 + 51) / 121][Stage 156:==========================================>          (97 + 24) / 121][Stage 156:==================================================>  (115 + 6) / 121]                                                                                [Stage 157:===========================>                         (64 + 58) / 122][Stage 157:================================>                    (74 + 48) / 122][Stage 157:=========================================>           (96 + 26) / 122][Stage 157:===============================================>    (111 + 11) / 122][Stage 157:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.108371161 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377477604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (71 + 46) / 117][Stage 158:==================================>                  (76 + 41) / 117][Stage 158:=========================================>           (91 + 26) / 117][Stage 158:==================================================>  (111 + 6) / 117]                                                                                [Stage 159:================================>                    (72 + 46) / 118][Stage 159:=====================================>               (83 + 35) / 118][Stage 159:===========================================>         (97 + 21) / 118][Stage 159:==================================================>  (113 + 5) / 118][Stage 159:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.05413749 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344607592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=======================================>             (85 + 30) / 115][Stage 160:==============================================>     (102 + 13) / 115][Stage 160:==================================================>  (110 + 5) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:=====================================>               (83 + 33) / 116][Stage 161:==========================================>          (94 + 22) / 116][Stage 161:===============================================>    (106 + 10) / 116][Stage 161:===================================================> (112 + 4) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.287870331 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377529542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (71 + 46) / 117][Stage 162:================================>                    (72 + 45) / 117][Stage 162:======================================>              (86 + 31) / 117][Stage 162:=============================================>      (102 + 15) / 117][Stage 162:==================================================>  (111 + 6) / 117]                                                                                [Stage 163:================================>                    (72 + 46) / 118][Stage 163:=================================>                   (74 + 44) / 118][Stage 163:======================================>              (86 + 32) / 118][Stage 163:============================================>       (101 + 17) / 118][Stage 163:==================================================>  (113 + 5) / 118][Stage 163:====================================================>(116 + 2) / 118][Stage 163:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.543437383 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361287758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (73 + 41) / 114][Stage 164:======================================>              (82 + 32) / 114][Stage 164:===========================================>         (93 + 21) / 114][Stage 164:===============================================>    (104 + 10) / 114][Stage 164:=================================================>   (107 + 7) / 114][Stage 164:===================================================> (111 + 3) / 114]                                                                                [Stage 165:====================================>                (80 + 35) / 115][Stage 165:============================================>        (97 + 18) / 115][Stage 165:================================================>    (106 + 9) / 115][Stage 165:===================================================> (112 + 3) / 115][Stage 165:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.52637836 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341744463 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (81 + 34) / 115][Stage 166:======================================>              (84 + 31) / 115][Stage 166:=============================================>      (100 + 15) / 115][Stage 166:==================================================>  (109 + 6) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:=====================================>               (82 + 34) / 116][Stage 167:=========================================>           (90 + 26) / 116][Stage 167:=============================================>      (102 + 14) / 116][Stage 167:===================================================> (113 + 3) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.165502598 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356404511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=================================>                   (73 + 41) / 114][Stage 168:======================================>              (82 + 32) / 114][Stage 168:============================================>        (95 + 19) / 114][Stage 168:=================================================>   (106 + 8) / 114][Stage 168:==================================================>  (109 + 5) / 114]                                                                                [Stage 169:=======================================>             (86 + 29) / 115][Stage 169:==============================================>     (102 + 13) / 115][Stage 169:==================================================>  (109 + 6) / 115][Stage 169:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.030049091 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464375445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (72 + 43) / 115][Stage 170:======================================>              (83 + 32) / 115][Stage 170:===========================================>         (94 + 21) / 115][Stage 170:=================================================>   (108 + 7) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:=================================>                   (73 + 43) / 116][Stage 171:=====================================>               (83 + 33) / 116][Stage 171:===========================================>         (96 + 20) / 116][Stage 171:==============================================>     (103 + 13) / 116][Stage 171:==================================================>  (110 + 6) / 116][Stage 171:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.254616346 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330798743 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (81 + 34) / 115][Stage 172:========================================>            (88 + 27) / 115][Stage 172:=============================================>       (99 + 16) / 115][Stage 172:==================================================>  (110 + 5) / 115]                                                                                [Stage 173:======================================>              (84 + 32) / 116][Stage 173:===========================================>         (95 + 21) / 116][Stage 173:===============================================>    (106 + 10) / 116][Stage 173:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.7977831 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366182915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (71 + 46) / 117][Stage 174:=================================>                   (74 + 43) / 117][Stage 174:=======================================>             (87 + 30) / 117][Stage 174:===========================================>         (97 + 20) / 117][Stage 174:================================================>    (108 + 9) / 117]                                                                                [Stage 175:================================>                    (72 + 46) / 118][Stage 175:=================================>                   (74 + 44) / 118][Stage 175:========================================>            (91 + 27) / 118][Stage 175:============================================>       (102 + 16) / 118][Stage 175:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.437934886 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386565974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=============================>                       (65 + 50) / 115][Stage 176:==================================>                  (75 + 40) / 115][Stage 176:==========================================>          (92 + 23) / 115][Stage 176:================================================>    (106 + 9) / 115]                                                                                [Stage 177:==================================>                  (76 + 40) / 116][Stage 177:=======================================>             (86 + 30) / 116][Stage 177:=============================================>       (99 + 17) / 116][Stage 177:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.655456826 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379847114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (71 + 46) / 117][Stage 178:==================================>                  (76 + 41) / 117][Stage 178:=======================================>             (88 + 29) / 117][Stage 178:===============================================>    (106 + 11) / 117]                                                                                [Stage 179:================================>                    (72 + 46) / 118][Stage 179:==================================>                  (77 + 41) / 118][Stage 179:======================================>              (85 + 33) / 118][Stage 179:=========================================>           (92 + 26) / 118][Stage 179:==============================================>     (105 + 13) / 118]                                                                                Time elapsed: 3.263764428 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373779379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (70 + 45) / 115][Stage 180:======================================>              (84 + 31) / 115][Stage 180:============================================>        (96 + 19) / 115][Stage 180:=================================================>   (108 + 7) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:==================================>                  (75 + 41) / 116][Stage 181:======================================>              (84 + 32) / 116][Stage 181:============================================>       (100 + 16) / 116][Stage 181:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.789546874 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide85;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (72 + 43) / 115][Stage 182:======================================>              (84 + 31) / 115][Stage 182:=============================================>      (101 + 14) / 115][Stage 182:====================================================>(113 + 2) / 115]                                                                                [Stage 183:===============================>                     (69 + 47) / 116][Stage 183:=====================================>               (83 + 33) / 116][Stage 183:============================================>        (98 + 18) / 116][Stage 183:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.619073724 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402326048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (63 + 59) / 122][Stage 184:=================================>                   (76 + 46) / 122][Stage 184:==========================================>          (98 + 24) / 122][Stage 184:==================================================>  (117 + 5) / 122]                                                                                [Stage 185:==========================>                          (62 + 61) / 123][Stage 185:=============================>                       (69 + 54) / 123][Stage 185:=======================================>             (91 + 32) / 123][Stage 185:=================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.028851109 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371036012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (71 + 44) / 115][Stage 186:======================================>              (84 + 31) / 115][Stage 186:===========================================>         (95 + 20) / 115][Stage 186:================================================>    (106 + 9) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:===============================>                     (68 + 48) / 116][Stage 187:=====================================>               (82 + 34) / 116][Stage 187:==========================================>          (92 + 24) / 116][Stage 187:=================================================>   (108 + 8) / 116][Stage 187:====================================================>(114 + 2) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.385749107 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (72 + 43) / 115][Stage 188:=========================================>           (90 + 25) / 115][Stage 188:===============================================>    (104 + 11) / 115][Stage 188:=================================================>   (108 + 7) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:====================================>                (80 + 36) / 116][Stage 189:===========================================>         (95 + 21) / 116][Stage 189:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.926273267 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362167992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=================================>                   (73 + 41) / 114][Stage 190:=======================================>             (85 + 29) / 114][Stage 190:=============================================>       (98 + 16) / 114][Stage 190:================================================>    (105 + 9) / 114][Stage 190:===================================================> (111 + 3) / 114]                                                                                [Stage 191:=================================>                   (72 + 43) / 115][Stage 191:=======================================>             (86 + 29) / 115][Stage 191:============================================>        (96 + 19) / 115][Stage 191:===============================================>    (105 + 10) / 115][Stage 191:===================================================> (112 + 3) / 115][Stage 191:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.182281295 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350661848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===================================>                 (77 + 37) / 114][Stage 192:========================================>            (87 + 27) / 114][Stage 192:============================================>        (96 + 18) / 114][Stage 192:================================================>    (105 + 9) / 114][Stage 192:====================================================>(113 + 1) / 114]                                                                                [Stage 193:======================================>              (83 + 32) / 115][Stage 193:=========================================>           (90 + 25) / 115][Stage 193:=================================================>   (107 + 8) / 115][Stage 193:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.255823853 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368826327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==============================>                      (66 + 49) / 115][Stage 194:=====================================>               (82 + 33) / 115][Stage 194:==========================================>          (93 + 22) / 115][Stage 194:=================================================>   (108 + 7) / 115]                                                                                [Stage 195:==================================>                  (75 + 41) / 116][Stage 195:=====================================>               (81 + 35) / 116][Stage 195:=============================================>      (102 + 14) / 116][Stage 195:===================================================> (112 + 4) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.13843569 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332035483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:======================================>              (83 + 32) / 115][Stage 196:============================================>        (96 + 19) / 115][Stage 196:=================================================>   (108 + 7) / 115][Stage 196:====================================================>(113 + 2) / 115]                                                                                [Stage 197:=====================================>               (83 + 33) / 116][Stage 197:===========================================>         (96 + 20) / 116][Stage 197:=================================================>   (108 + 8) / 116][Stage 197:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.961902367 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374509115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (82 + 33) / 115][Stage 198:=========================================>           (90 + 25) / 115][Stage 198:==============================================>     (103 + 12) / 115][Stage 198:===================================================> (111 + 4) / 115][Stage 198:====================================================>(113 + 2) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:======================================>              (84 + 32) / 116][Stage 199:=========================================>           (90 + 26) / 116][Stage 199:==============================================>     (104 + 12) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.093776459 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.599706835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (71 + 46) / 117][Stage 200:================================>                    (72 + 45) / 117][Stage 200:====================================>                (81 + 36) / 117][Stage 200:============================================>        (98 + 19) / 117][Stage 200:====================================================>(115 + 2) / 117][Stage 200:====================================================>(116 + 1) / 117]                                                                                [Stage 201:================================>                    (72 + 46) / 118][Stage 201:===================================>                 (78 + 40) / 118][Stage 201:==========================================>          (94 + 24) / 118][Stage 201:=================================================>   (110 + 8) / 118][Stage 201:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.115903503 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/30 01:34:05 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:46100) dropped. RpcEnv already stopped.
17/05/30 01:34:05 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:46100) dropped. RpcEnv already stopped.

real	9m53.756s
user	11m30.368s
sys	0m28.772s
