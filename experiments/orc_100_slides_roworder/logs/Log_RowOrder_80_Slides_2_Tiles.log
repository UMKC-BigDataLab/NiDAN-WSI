Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 00:51:58 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:52:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:52:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:52:13 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 00:52:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:52:26 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530005215-0704).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@158cb50a

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.391611379 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 115) / 115][Stage 0:=======================>                               (49 + 66) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 13.776114961 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.870900141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=========================>                             (56 + 65) / 121][Stage 2:===========================>                           (60 + 61) / 121][Stage 2:=============================>                         (64 + 57) / 121][Stage 2:=============================>                         (65 + 56) / 121][Stage 2:================================>                      (71 + 50) / 121][Stage 2:=====================================>                 (83 + 38) / 121][Stage 2:============================================>         (100 + 21) / 121][Stage 2:=================================================>    (111 + 10) / 121]                                                                                [Stage 3:===========================>                           (60 + 62) / 122][Stage 3:============================>                          (64 + 58) / 122][Stage 3:==============================>                        (67 + 55) / 122][Stage 3:==================================>                    (76 + 46) / 122][Stage 3:======================================>                (85 + 37) / 122][Stage 3:=============================================>        (103 + 19) / 122][Stage 3:====================================================>  (117 + 5) / 122]                                                                                Time elapsed: 4.684993015 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=========================>                             (56 + 65) / 121][Stage 4:===========================>                           (60 + 61) / 121][Stage 4:============================>                          (63 + 58) / 121][Stage 4:===============================>                       (70 + 51) / 121][Stage 4:==================================>                    (76 + 45) / 121][Stage 4:============================================>          (98 + 23) / 121][Stage 4:======================================================>(119 + 2) / 121]                                                                                [Stage 5:===========================>                           (61 + 61) / 122][Stage 5:============================>                          (63 + 59) / 122][Stage 5:=================================>                     (75 + 47) / 122][Stage 5:=======================================>               (87 + 35) / 122][Stage 5:=============================================>        (102 + 20) / 122][Stage 5:=====================================================> (118 + 4) / 122][Stage 5:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.402971365 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.615190438 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (70 + 47) / 117][Stage 6:==================================>                    (73 + 44) / 117][Stage 6:======================================>                (81 + 36) / 117][Stage 6:===========================================>           (92 + 25) / 117][Stage 6:=============================================>         (97 + 20) / 117]                                                                                [Stage 7:=================================>                     (72 + 46) / 118][Stage 7:==================================>                    (75 + 43) / 118][Stage 7:========================================>              (86 + 32) / 118][Stage 7:=============================================>         (98 + 20) / 118][Stage 7:=================================================>    (108 + 10) / 118][Stage 7:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.818727167 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 122 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 122 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.609356949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===============================>                       (66 + 49) / 115][Stage 8:=================================>                     (71 + 44) / 115][Stage 8:========================================>              (84 + 31) / 115][Stage 8:============================================>          (94 + 21) / 115][Stage 8:==============================================>       (100 + 15) / 115][Stage 8:====================================================>  (110 + 5) / 115][Stage 8:=====================================================> (111 + 4) / 115]                                                                                [Stage 9:================================>                      (68 + 48) / 116][Stage 9:====================================>                  (76 + 40) / 116][Stage 9:======================================>                (82 + 34) / 116][Stage 9:===========================================>           (91 + 25) / 116][Stage 9:================================================>     (104 + 12) / 116][Stage 9:====================================================>  (110 + 6) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.098738665 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.60972559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:========================>                             (56 + 65) / 121][Stage 10:=========================>                            (57 + 64) / 121][Stage 10:==============================>                       (69 + 52) / 121][Stage 10:=======================================>              (88 + 33) / 121][Stage 10:==============================================>      (107 + 14) / 121][Stage 10:==================================================>   (114 + 7) / 121][Stage 10:=====================================================>(120 + 1) / 121]                                                                                [Stage 11:===========================>                          (62 + 60) / 122][Stage 11:==============================>                       (68 + 54) / 122][Stage 11:===================================>                  (81 + 41) / 122][Stage 11:==========================================>           (97 + 25) / 122][Stage 11:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.792267577 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556270886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (71 + 46) / 117][Stage 12:====================================>                 (78 + 39) / 117][Stage 12:=========================================>            (90 + 27) / 117][Stage 12:==============================================>      (103 + 14) / 117][Stage 12:================================================>    (106 + 11) / 117][Stage 12:====================================================> (114 + 3) / 117]                                                                                [Stage 13:================================>                     (72 + 46) / 118][Stage 13:===================================>                  (78 + 40) / 118][Stage 13:===========================================>          (94 + 24) / 118][Stage 13:==================================================>   (110 + 8) / 118][Stage 13:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.694041386 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 85 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 85 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.558202858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (71 + 46) / 117][Stage 14:=================================>                    (72 + 45) / 117][Stage 14:=====================================>                (82 + 35) / 117][Stage 14:=================================================>    (108 + 9) / 117][Stage 14:===================================================>  (112 + 5) / 117]                                                                                [Stage 15:================================>                     (72 + 46) / 118][Stage 15:=================================>                    (74 + 44) / 118][Stage 15:=======================================>              (86 + 32) / 118][Stage 15:===============================================>     (105 + 13) / 118][Stage 15:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.429283172 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490944829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (71 + 46) / 117][Stage 16:===================================>                  (77 + 40) / 117][Stage 16:=======================================>              (85 + 32) / 117][Stage 16:============================================>         (97 + 20) / 117][Stage 16:===================================================>  (112 + 5) / 117]                                                                                [Stage 17:================================>                     (72 + 46) / 118][Stage 17:==================================>                   (76 + 42) / 118][Stage 17:=====================================>                (83 + 35) / 118][Stage 17:========================================>             (89 + 29) / 118][Stage 17:==============================================>      (103 + 15) / 118][Stage 17:================================================>    (108 + 10) / 118][Stage 17:====================================================> (114 + 4) / 118][Stage 17:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.074365391 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (71 + 46) / 117][Stage 18:=======================================>              (85 + 32) / 117][Stage 18:===========================================>          (94 + 23) / 117][Stage 18:=============================================>       (101 + 16) / 117][Stage 18:================================================>    (107 + 10) / 117][Stage 18:===================================================>  (112 + 5) / 117]                                                                                [Stage 19:================================>                     (72 + 46) / 118][Stage 19:=================================>                    (74 + 44) / 118][Stage 19:===================================>                  (78 + 40) / 118][Stage 19:=========================================>            (90 + 28) / 118][Stage 19:=============================================>        (99 + 19) / 118][Stage 19:================================================>    (107 + 11) / 118][Stage 19:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.894190719 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.665733112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (60 + 62) / 122][Stage 20:===========================>                          (62 + 60) / 122][Stage 20:================================>                     (74 + 48) / 122][Stage 20:==========================================>           (97 + 25) / 122][Stage 20:================================================>    (111 + 11) / 122][Stage 20:=====================================================>(120 + 2) / 122]                                                                                [Stage 21:==========================>                           (61 + 62) / 123][Stage 21:=============================>                        (68 + 55) / 123][Stage 21:====================================>                 (84 + 39) / 123][Stage 21:===========================================>          (98 + 25) / 123][Stage 21:==================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.469086433 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48303052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:>                                                       (0 + 0) / 114][Stage 22:==================================>                   (72 + 42) / 114][Stage 22:=======================================>              (83 + 31) / 114][Stage 22:=============================================>        (97 + 17) / 114][Stage 22:==================================================>   (107 + 7) / 114][Stage 22:=====================================================>(113 + 1) / 114]                                                                                [Stage 23:====================================>                 (77 + 38) / 115][Stage 23:==========================================>           (90 + 25) / 115][Stage 23:==============================================>       (99 + 16) / 115][Stage 23:==================================================>   (108 + 7) / 115]                                                                                Time elapsed: 2.978667581 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457418937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (79 + 36) / 115][Stage 24:=======================================>              (84 + 31) / 115][Stage 24:==============================================>      (100 + 15) / 115][Stage 24:===============================================>     (104 + 11) / 115][Stage 24:===================================================>  (110 + 5) / 115]                                                                                [Stage 25:=====================================>                (80 + 36) / 116][Stage 25:========================================>             (86 + 30) / 116][Stage 25:==============================================>       (99 + 17) / 116][Stage 25:================================================>    (106 + 10) / 116][Stage 25:===================================================>  (111 + 5) / 116][Stage 25:====================================================> (112 + 4) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.938946035 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47225097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===================================>                  (74 + 40) / 114][Stage 26:===========================================>          (92 + 22) / 114][Stage 26:===============================================>     (103 + 11) / 114][Stage 26:====================================================> (111 + 3) / 114]                                                                                [Stage 27:====================================>                 (78 + 37) / 115][Stage 27:=========================================>            (89 + 26) / 115][Stage 27:================================================>    (105 + 10) / 115][Stage 27:==================================================>   (107 + 8) / 115][Stage 27:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.398393632 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===================================>                  (74 + 40) / 114][Stage 28:=========================================>            (87 + 27) / 114][Stage 28:==============================================>       (99 + 15) / 114][Stage 28:=================================================>    (105 + 9) / 114][Stage 28:====================================================> (110 + 4) / 114][Stage 28:=====================================================>(113 + 1) / 114]                                                                                [Stage 29:==================================>                   (74 + 41) / 115][Stage 29:========================================>             (86 + 29) / 115][Stage 29:===============================================>     (103 + 12) / 115][Stage 29:===================================================>  (110 + 5) / 115][Stage 29:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.435786668 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470654534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (71 + 46) / 117][Stage 30:=================================>                    (72 + 45) / 117][Stage 30:====================================>                 (79 + 38) / 117][Stage 30:==============================================>      (102 + 15) / 117][Stage 30:====================================================> (113 + 4) / 117][Stage 30:=====================================================>(116 + 1) / 117]                                                                                [Stage 31:================================>                     (72 + 46) / 118][Stage 31:===================================>                  (77 + 41) / 118][Stage 31:===========================================>          (96 + 22) / 118][Stage 31:===================================================>  (113 + 5) / 118][Stage 31:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.536963563 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410542243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (83 + 32) / 115][Stage 32:========================================>             (86 + 29) / 115][Stage 32:==============================================>      (101 + 14) / 115][Stage 32:==================================================>   (108 + 7) / 115][Stage 32:===================================================>  (109 + 6) / 115][Stage 32:====================================================> (112 + 3) / 115]                                                                                [Stage 33:========================================>             (88 + 28) / 116][Stage 33:==============================================>      (102 + 14) / 116][Stage 33:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.145275473 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510089678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==========================>                           (60 + 62) / 122][Stage 34:===========================>                          (62 + 60) / 122][Stage 34:==================================>                   (77 + 45) / 122][Stage 34:===========================================>          (98 + 24) / 122][Stage 34:===================================================>  (117 + 5) / 122]                                                                                [Stage 35:===========================>                          (62 + 61) / 123][Stage 35:=============================>                        (67 + 56) / 123][Stage 35:===================================>                  (80 + 43) / 123][Stage 35:============================================>        (104 + 19) / 123][Stage 35:===================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.192633348 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452257445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (71 + 46) / 117][Stage 36:===================================>                  (77 + 40) / 117][Stage 36:===========================================>          (95 + 22) / 117][Stage 36:==================================================>   (110 + 7) / 117]                                                                                [Stage 37:================================>                     (72 + 46) / 118][Stage 37:====================================>                 (80 + 38) / 118][Stage 37:============================================>         (98 + 20) / 118][Stage 37:===================================================>  (112 + 6) / 118][Stage 37:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.5244168 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239  OR  partitionIndex = 254 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239  OR  partitionIndex = 254 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (71 + 46) / 117][Stage 38:====================================>                 (78 + 39) / 117][Stage 38:===========================================>          (94 + 23) / 117][Stage 38:===================================================>  (112 + 5) / 117]                                                                                [Stage 39:================================>                     (72 + 46) / 118][Stage 39:======================================>               (85 + 33) / 118][Stage 39:=============================================>        (99 + 19) / 118][Stage 39:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.041220962 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459036274 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==============================>                       (66 + 49) / 115][Stage 40:====================================>                 (77 + 38) / 115][Stage 40:=========================================>            (88 + 27) / 115][Stage 40:=================================================>    (106 + 9) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:==================================>                   (74 + 42) / 116][Stage 41:========================================>             (87 + 29) / 116][Stage 41:============================================>         (96 + 20) / 116][Stage 41:=================================================>    (107 + 9) / 116][Stage 41:===================================================>  (111 + 5) / 116][Stage 41:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.420936485 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:>                                                       (0 + 0) / 115][Stage 42:================================>                     (69 + 46) / 115][Stage 42:====================================>                 (78 + 37) / 115][Stage 42:===========================================>          (92 + 23) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:====================================================> (112 + 3) / 115]                                                                                [Stage 43:==================================>                   (74 + 42) / 116][Stage 43:=======================================>              (85 + 31) / 116][Stage 43:=============================================>        (97 + 19) / 116][Stage 43:=================================================>    (107 + 9) / 116][Stage 43:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.323422232 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439960842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (72 + 45) / 117][Stage 44:====================================>                 (79 + 38) / 117][Stage 44:===========================================>          (95 + 22) / 117][Stage 44:===================================================>  (111 + 6) / 117]                                                                                [Stage 45:==================================>                   (75 + 43) / 118][Stage 45:=========================================>            (90 + 28) / 118][Stage 45:================================================>    (108 + 10) / 118][Stage 45:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.889233243 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 212 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 212 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46710305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (66 + 49) / 115][Stage 46:====================================>                 (77 + 38) / 115][Stage 46:===========================================>          (93 + 22) / 115][Stage 46:================================================>    (105 + 10) / 115][Stage 46:====================================================> (112 + 3) / 115]                                                                                [Stage 47:=================================>                    (73 + 43) / 116][Stage 47:=======================================>              (84 + 32) / 116][Stage 47:=============================================>        (98 + 18) / 116][Stage 47:====================================================> (113 + 3) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.196322178 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49817551 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==========================>                           (60 + 61) / 121][Stage 48:=============================>                        (66 + 55) / 121][Stage 48:=====================================>                (84 + 37) / 121][Stage 48:=============================================>       (105 + 16) / 121][Stage 48:====================================================> (118 + 3) / 121]                                                                                [Stage 49:=============================>                        (67 + 55) / 122][Stage 49:================================>                     (74 + 48) / 122][Stage 49:==========================================>           (95 + 27) / 122][Stage 49:===============================================>     (109 + 13) / 122][Stage 49:===================================================>  (116 + 6) / 122][Stage 49:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.786555048 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 245 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 245 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465369993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==============================>                       (66 + 49) / 115][Stage 50:======================================>               (82 + 33) / 115][Stage 50:==============================================>       (98 + 17) / 115][Stage 50:================================================>    (105 + 10) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:================================>                     (70 + 46) / 116][Stage 51:====================================>                 (79 + 37) / 116][Stage 51:==============================================>       (99 + 17) / 116][Stage 51:===================================================>  (110 + 6) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.943542488 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 209 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389040339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (79 + 36) / 115][Stage 52:=======================================>              (85 + 30) / 115][Stage 52:==============================================>       (98 + 17) / 115][Stage 52:====================================================> (111 + 4) / 115]                                                                                [Stage 53:=======================================>              (85 + 31) / 116][Stage 53:==========================================>           (91 + 25) / 116][Stage 53:==============================================>      (102 + 14) / 116]                                                                                Time elapsed: 2.667311314 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439794551 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:====================================>                 (77 + 37) / 114][Stage 54:=========================================>            (88 + 26) / 114][Stage 54:==============================================>       (99 + 15) / 114][Stage 54:==================================================>   (107 + 7) / 114][Stage 54:=====================================================>(112 + 2) / 114]                                                                                [Stage 55:======================================>               (82 + 33) / 115][Stage 55:==========================================>           (90 + 25) / 115][Stage 55:==============================================>      (101 + 14) / 115][Stage 55:===================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.093079145 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416276347 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (71 + 46) / 117][Stage 56:====================================>                 (80 + 37) / 117][Stage 56:==========================================>           (92 + 25) / 117][Stage 56:===============================================>     (105 + 12) / 117]                                                                                [Stage 57:================================>                     (72 + 46) / 118][Stage 57:=====================================>                (81 + 37) / 118][Stage 57:===========================================>          (96 + 22) / 118][Stage 57:==================================================>   (110 + 8) / 118][Stage 57:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.245893157 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.532777268 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=================================>                    (72 + 43) / 115][Stage 58:=======================================>              (85 + 30) / 115][Stage 58:==============================================>       (99 + 16) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:=====================================>                (81 + 35) / 116][Stage 59:=============================================>        (97 + 19) / 116][Stage 59:==================================================>   (109 + 7) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.910068702 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===============================>                      (67 + 48) / 115][Stage 60:==================================>                   (74 + 41) / 115][Stage 60:=========================================>            (89 + 26) / 115][Stage 60:===============================================>     (104 + 11) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:================================>                     (70 + 46) / 116][Stage 61:======================================>               (82 + 34) / 116][Stage 61:===========================================>          (94 + 22) / 116][Stage 61:================================================>    (106 + 10) / 116][Stage 61:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.106651213 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===================================>                  (76 + 39) / 115][Stage 62:========================================>             (87 + 28) / 115][Stage 62:==============================================>       (99 + 16) / 115][Stage 62:=================================================>    (106 + 9) / 115]                                                                                [Stage 63:=================================>                    (73 + 43) / 116][Stage 63:=========================================>            (89 + 27) / 116][Stage 63:===============================================>     (103 + 13) / 116][Stage 63:===================================================>  (111 + 5) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.47876284 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (71 + 46) / 117][Stage 64:====================================>                 (78 + 39) / 117][Stage 64:==========================================>           (91 + 26) / 117][Stage 64:=================================================>    (108 + 9) / 117]                                                                                [Stage 65:================================>                     (72 + 46) / 118][Stage 65:==================================>                   (76 + 42) / 118][Stage 65:=========================================>            (91 + 27) / 118][Stage 65:==============================================>      (104 + 14) / 118][Stage 65:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.23250124 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512597783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (61 + 61) / 122][Stage 66:================================>                     (73 + 49) / 122][Stage 66:=======================================>              (89 + 33) / 122][Stage 66:==============================================>      (108 + 14) / 122]                                                                                [Stage 67:===========================>                          (63 + 60) / 123][Stage 67:===================================>                  (81 + 42) / 123][Stage 67:=========================================>            (95 + 28) / 123][Stage 67:==================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.193846229 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367042016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (81 + 34) / 115][Stage 68:========================================>             (86 + 29) / 115][Stage 68:==============================================>      (101 + 14) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:=====================================>                (80 + 36) / 116][Stage 69:==========================================>           (91 + 25) / 116][Stage 69:===============================================>     (104 + 12) / 116][Stage 69:=====================================================>(114 + 2) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.079922376 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413141731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==================================>                   (72 + 42) / 114][Stage 70:=======================================>              (83 + 31) / 114][Stage 70:=============================================>        (97 + 17) / 114][Stage 70:==============================================>      (101 + 13) / 114][Stage 70:=====================================================>(112 + 2) / 114][Stage 70:=====================================================>(113 + 1) / 114]                                                                                [Stage 71:===================================>                  (76 + 39) / 115][Stage 71:========================================>             (87 + 28) / 115][Stage 71:==============================================>       (99 + 16) / 115][Stage 71:==================================================>   (108 + 7) / 115][Stage 71:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.658864174 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (81 + 33) / 114][Stage 72:=========================================>            (88 + 26) / 114][Stage 72:==============================================>      (100 + 14) / 114][Stage 72:=================================================>    (105 + 9) / 114][Stage 72:=====================================================>(112 + 2) / 114]                                                                                [Stage 73:=================================>                    (71 + 44) / 115][Stage 73:=======================================>              (84 + 31) / 115][Stage 73:=============================================>        (97 + 18) / 115][Stage 73:==================================================>   (107 + 8) / 115][Stage 73:====================================================> (111 + 4) / 115][Stage 73:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.464839901 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36030084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (81 + 34) / 115][Stage 74:=========================================>            (88 + 27) / 115][Stage 74:===============================================>     (102 + 13) / 115][Stage 74:====================================================> (112 + 3) / 115]                                                                                [Stage 75:=========================================>            (90 + 26) / 116][Stage 75:==============================================>       (99 + 17) / 116][Stage 75:====================================================> (113 + 3) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.795909227 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41754286 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:>                                                       (0 + 0) / 115][Stage 76:=================================>                    (72 + 43) / 115][Stage 76:======================================>               (83 + 32) / 115][Stage 76:============================================>         (94 + 21) / 115][Stage 76:=================================================>    (106 + 9) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:==================================>                   (74 + 42) / 116][Stage 77:========================================>             (86 + 30) / 116][Stage 77:=============================================>       (100 + 16) / 116][Stage 77:===================================================>  (110 + 6) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.988394381 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418446926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===============================>                      (67 + 48) / 115][Stage 78:=======================================>              (84 + 31) / 115][Stage 78:===============================================>     (104 + 11) / 115][Stage 78:====================================================> (111 + 4) / 115]                                                                                [Stage 79:================================>                     (69 + 47) / 116][Stage 79:========================================>             (86 + 30) / 116][Stage 79:==============================================>       (99 + 17) / 116][Stage 79:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.774520162 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===============================>                      (68 + 47) / 115][Stage 80:======================================>               (82 + 33) / 115][Stage 80:===========================================>          (92 + 23) / 115][Stage 80:===============================================>     (104 + 11) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:======================================>               (82 + 34) / 116][Stage 81:=============================================>        (98 + 18) / 116][Stage 81:===============================================>     (104 + 12) / 116][Stage 81:=====================================================>(114 + 2) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.965016281 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381676499 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=====================================>                (80 + 35) / 115][Stage 82:========================================>             (86 + 29) / 115][Stage 82:===========================================>          (93 + 22) / 115][Stage 82:=================================================>    (106 + 9) / 115][Stage 82:=====================================================>(113 + 2) / 115]                                                                                [Stage 83:=======================================>              (84 + 32) / 116][Stage 83:============================================>         (96 + 20) / 116][Stage 83:==================================================>   (108 + 8) / 116][Stage 83:=====================================================>(114 + 2) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.091234737 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416366265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (71 + 44) / 115][Stage 84:=======================================>              (84 + 31) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:=================================================>    (106 + 9) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:===============================>                      (67 + 49) / 116][Stage 85:====================================>                 (79 + 37) / 116][Stage 85:===========================================>          (94 + 22) / 116][Stage 85:===============================================>     (105 + 11) / 116]                                                                                Time elapsed: 2.927782009 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469922535 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (61 + 60) / 121][Stage 86:===============================>                      (70 + 51) / 121][Stage 86:=======================================>              (89 + 32) / 121][Stage 86:================================================>    (111 + 10) / 121][Stage 86:=====================================================>(119 + 2) / 121]                                                                                [Stage 87:===========================>                          (63 + 59) / 122][Stage 87:==================================>                   (77 + 45) / 122][Stage 87:===========================================>         (100 + 22) / 122][Stage 87:==================================================>   (115 + 7) / 122][Stage 87:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.342203064 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406749547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:================================>                     (71 + 46) / 117][Stage 88:=======================================>              (85 + 32) / 117][Stage 88:=============================================>       (100 + 17) / 117][Stage 88:===================================================>  (112 + 5) / 117]                                                                                [Stage 89:================================>                     (72 + 46) / 118][Stage 89:======================================>               (84 + 34) / 118][Stage 89:============================================>         (98 + 20) / 118][Stage 89:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.970525954 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459021707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==========================>                           (60 + 61) / 121][Stage 90:===========================>                          (61 + 60) / 121][Stage 90:===================================>                  (79 + 42) / 121][Stage 90:===========================================>         (100 + 21) / 121][Stage 90:==================================================>   (114 + 7) / 121][Stage 90:====================================================> (118 + 3) / 121]                                                                                [Stage 91:============================>                         (64 + 58) / 122][Stage 91:==============================>                       (70 + 52) / 122][Stage 91:==========================================>           (95 + 27) / 122][Stage 91:===============================================>     (110 + 12) / 122]                                                                                Time elapsed: 3.314536826 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392622695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (72 + 45) / 117][Stage 92:=====================================>                (81 + 36) / 117][Stage 92:===========================================>          (95 + 22) / 117][Stage 92:===================================================>  (112 + 5) / 117]                                                                                [Stage 93:=================================>                    (74 + 44) / 118][Stage 93:=====================================>                (82 + 36) / 118][Stage 93:=============================================>        (99 + 19) / 118][Stage 93:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.039271859 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361353675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=======================================>              (84 + 31) / 115][Stage 94:=============================================>        (97 + 18) / 115][Stage 94:====================================================> (111 + 4) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:======================================>               (83 + 33) / 116][Stage 95:===========================================>          (93 + 23) / 116][Stage 95:===============================================>     (105 + 11) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.697092002 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 241 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 241 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350150226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:===========================================>          (92 + 23) / 115][Stage 96:===============================================>     (102 + 13) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:======================================>               (83 + 33) / 116][Stage 97:============================================>         (95 + 21) / 116][Stage 97:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.732147682 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389235945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==============================>                       (66 + 49) / 115][Stage 98:==================================>                   (74 + 41) / 115][Stage 98:=======================================>              (84 + 31) / 115][Stage 98:=============================================>        (96 + 19) / 115][Stage 98:==================================================>   (108 + 7) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:===============================>                      (68 + 48) / 116][Stage 99:====================================>                 (79 + 37) / 116][Stage 99:=========================================>            (89 + 27) / 116][Stage 99:===============================================>     (103 + 13) / 116][Stage 99:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.140733304 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=============================>                       (65 + 50) / 115][Stage 100:===============================>                     (68 + 47) / 115][Stage 100:======================================>              (84 + 31) / 115][Stage 100:==============================================>     (103 + 12) / 115][Stage 100:===================================================> (112 + 3) / 115]                                                                                [Stage 101:==============================>                      (67 + 49) / 116][Stage 101:===================================>                 (78 + 38) / 116][Stage 101:========================================>            (89 + 27) / 116][Stage 101:==============================================>     (103 + 13) / 116][Stage 101:====================================================>(114 + 2) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.563278551 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39289613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=================================>                   (72 + 43) / 115][Stage 102:=======================================>             (86 + 29) / 115][Stage 102:==============================================>     (103 + 12) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:===============================>                     (70 + 46) / 116][Stage 103:======================================>              (85 + 31) / 116][Stage 103:==============================================>     (103 + 13) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.661914611 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 152 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 152 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347283479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=======================================>             (85 + 30) / 115][Stage 104:============================================>        (96 + 19) / 115][Stage 104:=================================================>   (108 + 7) / 115]                                                                                [Stage 105:=======================================>             (87 + 29) / 116][Stage 105:===========================================>         (96 + 20) / 116][Stage 105:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.525988122 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52656179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (61 + 60) / 121][Stage 106:=============================>                       (68 + 53) / 121][Stage 106:===================================>                 (82 + 39) / 121][Stage 106:=============================================>      (107 + 14) / 121][Stage 106:===================================================> (117 + 4) / 121]                                                                                [Stage 107:==========================>                          (62 + 60) / 122][Stage 107:============================>                        (65 + 57) / 122][Stage 107:======================================>              (89 + 33) / 122][Stage 107:==============================================>     (109 + 13) / 122][Stage 107:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.141618704 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431736264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (61 + 61) / 122][Stage 108:==============================>                      (70 + 52) / 122][Stage 108:===================================>                 (82 + 40) / 122][Stage 108:============================================>       (105 + 17) / 122][Stage 108:====================================================>(120 + 2) / 122]                                                                                [Stage 109:==========================>                          (62 + 61) / 123][Stage 109:=============================>                       (68 + 55) / 123][Stage 109:==================================>                  (81 + 42) / 123][Stage 109:==============================================>     (109 + 14) / 123]                                                                                Time elapsed: 3.043636123 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37913668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:======================================>              (82 + 32) / 114][Stage 110:=========================================>           (89 + 25) / 114][Stage 110:===============================================>    (104 + 10) / 114][Stage 110:====================================================>(113 + 1) / 114]                                                                                [Stage 111:=====================================>               (82 + 33) / 115][Stage 111:=========================================>           (91 + 24) / 115][Stage 111:============================================>        (96 + 19) / 115][Stage 111:==================================================>  (109 + 6) / 115][Stage 111:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.237866836 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417952295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 60) / 121][Stage 112:============================>                        (64 + 57) / 121][Stage 112:=====================================>               (85 + 36) / 121][Stage 112:=================================================>   (112 + 9) / 121][Stage 112:====================================================>(120 + 1) / 121]                                                                                [Stage 113:===========================>                         (63 + 59) / 122][Stage 113:===============================>                     (72 + 50) / 122][Stage 113:=====================================>               (86 + 36) / 122][Stage 113:=================================================>   (113 + 9) / 122][Stage 113:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.085518799 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396987273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===================================>                 (77 + 38) / 115][Stage 114:=========================================>           (91 + 24) / 115][Stage 114:==============================================>     (103 + 12) / 115][Stage 114:===================================================> (112 + 3) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:=================================>                   (73 + 43) / 116][Stage 115:======================================>              (85 + 31) / 116][Stage 115:============================================>        (98 + 18) / 116][Stage 115:=================================================>   (108 + 8) / 116][Stage 115:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.174749809 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434491498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:=============================>                       (67 + 54) / 121][Stage 116:===================================>                 (82 + 39) / 121][Stage 116:===========================================>        (101 + 20) / 121][Stage 116:===================================================> (118 + 3) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:=============================>                       (69 + 53) / 122][Stage 117:=======================================>             (90 + 32) / 122][Stage 117:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 2.918794823 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (61 + 60) / 121][Stage 118:============================>                        (66 + 55) / 121][Stage 118:===================================>                 (81 + 40) / 121][Stage 118:===========================================>        (102 + 19) / 121][Stage 118:==================================================>  (115 + 6) / 121]                                                                                [Stage 119:============================>                        (65 + 57) / 122][Stage 119:==================================>                  (80 + 42) / 122][Stage 119:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.024137096 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345291074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:======================================>              (83 + 32) / 115][Stage 120:=========================================>           (91 + 24) / 115][Stage 120:==============================================>     (102 + 13) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:=====================================>               (83 + 33) / 116][Stage 121:=========================================>           (91 + 25) / 116][Stage 121:============================================>       (100 + 16) / 116][Stage 121:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.654847928 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382627457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==============================>                      (66 + 49) / 115][Stage 122:===================================>                 (77 + 38) / 115][Stage 122:========================================>            (87 + 28) / 115][Stage 122:=============================================>       (98 + 17) / 115][Stage 122:===============================================>    (105 + 10) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:==================================>                  (75 + 41) / 116][Stage 123:=====================================>               (82 + 34) / 116][Stage 123:==========================================>          (92 + 24) / 116][Stage 123:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.210240873 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421804775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (61 + 61) / 122][Stage 124:============================>                        (66 + 56) / 122][Stage 124:==================================>                  (79 + 43) / 122][Stage 124:===========================================>         (99 + 23) / 122][Stage 124:==================================================>  (117 + 5) / 122]                                                                                [Stage 125:==========================>                          (62 + 61) / 123][Stage 125:==============================>                      (70 + 53) / 123][Stage 125:====================================>                (84 + 39) / 123][Stage 125:============================================>       (106 + 17) / 123][Stage 125:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 2.956139185 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 115 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350350048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=======================================>             (85 + 30) / 115][Stage 126:=========================================>           (91 + 24) / 115][Stage 126:===============================================>    (104 + 11) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:=====================================>               (83 + 33) / 116][Stage 127:==========================================>          (93 + 23) / 116][Stage 127:=============================================>      (101 + 15) / 116][Stage 127:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.652387941 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385556935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (83 + 31) / 114][Stage 128:===========================================>         (94 + 20) / 114][Stage 128:=============================================>       (98 + 16) / 114][Stage 128:==================================================>  (109 + 5) / 114][Stage 128:====================================================>(113 + 1) / 114]                                                                                [Stage 129:====================================>                (79 + 36) / 115][Stage 129:=========================================>           (91 + 24) / 115][Stage 129:=============================================>      (101 + 14) / 115][Stage 129:==================================================>  (110 + 5) / 115][Stage 129:====================================================>(113 + 2) / 115][Stage 129:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.010722051 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516198028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (63 + 58) / 121][Stage 130:================================>                    (74 + 47) / 121][Stage 130:==========================================>         (100 + 21) / 121][Stage 130:===================================================> (118 + 3) / 121]                                                                                [Stage 131:=============================>                       (67 + 55) / 122][Stage 131:===================================>                 (82 + 40) / 122][Stage 131:=============================================>      (106 + 16) / 122][Stage 131:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.125403657 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435652433 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 60) / 121][Stage 132:==============================>                      (70 + 51) / 121][Stage 132:======================================>              (87 + 34) / 121][Stage 132:=================================================>   (114 + 7) / 121][Stage 132:====================================================>(119 + 2) / 121]                                                                                [Stage 133:==========================>                          (61 + 61) / 122][Stage 133:=============================>                       (68 + 54) / 122][Stage 133:====================================>                (83 + 39) / 122][Stage 133:=============================================>      (106 + 16) / 122][Stage 133:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.262511409 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361102745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (78 + 36) / 114][Stage 134:==========================================>          (92 + 22) / 114][Stage 134:=============================================>       (98 + 16) / 114][Stage 134:=================================================>   (106 + 8) / 114][Stage 134:====================================================>(113 + 1) / 114]                                                                                [Stage 135:======================================>              (83 + 32) / 115][Stage 135:===========================================>         (95 + 20) / 115][Stage 135:==============================================>     (103 + 12) / 115][Stage 135:==================================================>  (110 + 5) / 115][Stage 135:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.241398896 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372015086 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (71 + 46) / 117][Stage 136:===================================>                 (78 + 39) / 117][Stage 136:=========================================>           (92 + 25) / 117][Stage 136:==============================================>     (105 + 12) / 117][Stage 136:====================================================>(116 + 1) / 117]                                                                                [Stage 137:================================>                    (72 + 46) / 118][Stage 137:=================================>                   (74 + 44) / 118][Stage 137:=======================================>             (89 + 29) / 118][Stage 137:=============================================>      (104 + 14) / 118][Stage 137:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.271347592 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (71 + 46) / 117][Stage 138:=================================>                   (73 + 44) / 117][Stage 138:=====================================>               (83 + 34) / 117][Stage 138:===========================================>         (95 + 22) / 117][Stage 138:====================================================>(115 + 2) / 117]                                                                                [Stage 139:================================>                    (72 + 46) / 118][Stage 139:=======================================>             (87 + 31) / 118][Stage 139:============================================>        (98 + 20) / 118][Stage 139:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.262843355 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374080799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (71 + 46) / 117][Stage 140:=================================>                   (75 + 42) / 117][Stage 140:===========================================>         (96 + 21) / 117][Stage 140:===================================================> (114 + 3) / 117]                                                                                [Stage 141:================================>                    (73 + 45) / 118][Stage 141:=======================================>             (89 + 29) / 118][Stage 141:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 2.802754312 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406919327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 61) / 122][Stage 142:============================>                        (65 + 57) / 122][Stage 142:===================================>                 (81 + 41) / 122][Stage 142:============================================>       (105 + 17) / 122][Stage 142:====================================================>(121 + 1) / 122]                                                                                [Stage 143:===========================>                         (64 + 59) / 123][Stage 143:=================================>                   (78 + 45) / 123][Stage 143:===========================================>        (104 + 19) / 123][Stage 143:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.255477196 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354361648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (73 + 41) / 114][Stage 144:=======================================>             (84 + 30) / 114][Stage 144:============================================>        (95 + 19) / 114][Stage 144:=============================================>       (98 + 16) / 114][Stage 144:==================================================>  (109 + 5) / 114][Stage 144:====================================================>(113 + 1) / 114]                                                                                [Stage 145:====================================>                (79 + 36) / 115][Stage 145:=========================================>           (91 + 24) / 115][Stage 145:=============================================>      (101 + 14) / 115][Stage 145:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.056202152 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3719713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===============================>                     (69 + 46) / 115][Stage 146:===================================>                 (78 + 37) / 115][Stage 146:=========================================>           (89 + 26) / 115][Stage 146:================================================>    (106 + 9) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:===============================>                     (68 + 48) / 116][Stage 147:====================================>                (80 + 36) / 116][Stage 147:==========================================>          (92 + 24) / 116][Stage 147:================================================>    (107 + 9) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.956330205 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==============================>                      (67 + 48) / 115][Stage 148:====================================>                (80 + 35) / 115][Stage 148:=========================================>           (91 + 24) / 115][Stage 148:===============================================>    (105 + 10) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:===================================>                 (77 + 39) / 116][Stage 149:========================================>            (88 + 28) / 116][Stage 149:==============================================>     (104 + 12) / 116][Stage 149:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.082579891 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39881094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 62) / 122][Stage 150:==========================>                          (62 + 60) / 122][Stage 150:================================>                    (75 + 47) / 122][Stage 150:=========================================>           (96 + 26) / 122][Stage 150:==================================================>  (116 + 6) / 122]                                                                                [Stage 151:==========================>                          (62 + 61) / 123][Stage 151:=============================>                       (68 + 55) / 123][Stage 151:===================================>                 (82 + 41) / 123][Stage 151:===========================================>        (104 + 19) / 123][Stage 151:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.170862548 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405038405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (61 + 61) / 122][Stage 152:===========================>                         (63 + 59) / 122][Stage 152:=============================>                       (68 + 54) / 122][Stage 152:====================================>                (84 + 38) / 122][Stage 152:===============================================>    (112 + 10) / 122]                                                                                [Stage 153:=============================>                       (68 + 55) / 123][Stage 153:==================================>                  (81 + 42) / 123][Stage 153:===============================================>    (112 + 11) / 123][Stage 153:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 2.932884375 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372193516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (70 + 45) / 115][Stage 154:====================================>                (79 + 36) / 115][Stage 154:===========================================>         (95 + 20) / 115][Stage 154:=================================================>   (108 + 7) / 115]                                                                                [Stage 155:================================>                    (72 + 44) / 116][Stage 155:======================================>              (85 + 31) / 116][Stage 155:==============================================>     (103 + 13) / 116][Stage 155:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.108191451 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440085568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (61 + 61) / 122][Stage 156:============================>                        (66 + 56) / 122][Stage 156:=================================>                   (78 + 44) / 122][Stage 156:===========================================>        (101 + 21) / 122][Stage 156:===================================================> (118 + 4) / 122][Stage 156:====================================================>(120 + 2) / 122]                                                                                [Stage 157:==========================>                          (62 + 61) / 123][Stage 157:============================>                        (67 + 56) / 123][Stage 157:======================================>              (89 + 34) / 123][Stage 157:===============================================>    (112 + 11) / 123]                                                                                Time elapsed: 3.149752354 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337455711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:==========================================>          (93 + 22) / 115][Stage 158:=================================================>   (108 + 7) / 115]                                                                                [Stage 159:========================================>            (88 + 28) / 116][Stage 159:=============================================>      (102 + 14) / 116]                                                                                Time elapsed: 2.370429673 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377970956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (68 + 47) / 115][Stage 160:====================================>                (79 + 36) / 115][Stage 160:==========================================>          (93 + 22) / 115][Stage 160:=================================================>   (108 + 7) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:===============================>                     (69 + 47) / 116][Stage 161:===================================>                 (77 + 39) / 116][Stage 161:============================================>        (97 + 19) / 116][Stage 161:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.794799751 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415727879 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (62 + 60) / 122][Stage 162:=================================>                   (76 + 46) / 122][Stage 162:========================================>            (94 + 28) / 122][Stage 162:=================================================>   (114 + 8) / 122]                                                                                [Stage 163:===========================>                         (63 + 60) / 123][Stage 163:=================================>                   (77 + 46) / 123][Stage 163:===========================================>        (104 + 19) / 123][Stage 163:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.068451248 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358832688 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (78 + 36) / 114][Stage 164:=========================================>           (90 + 24) / 114][Stage 164:=============================================>       (98 + 16) / 114][Stage 164:==================================================>  (108 + 6) / 114]                                                                                [Stage 165:===================================>                 (77 + 38) / 115][Stage 165:==========================================>          (92 + 23) / 115][Stage 165:=============================================>       (99 + 16) / 115][Stage 165:==================================================>  (110 + 5) / 115][Stage 165:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.007290696 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367302571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (71 + 46) / 117][Stage 166:================================>                    (72 + 45) / 117][Stage 166:======================================>              (85 + 32) / 117][Stage 166:==============================================>     (105 + 12) / 117][Stage 166:====================================================>(115 + 2) / 117]                                                                                [Stage 167:=================================>                   (74 + 44) / 118][Stage 167:======================================>              (85 + 33) / 118][Stage 167:=============================================>      (104 + 14) / 118][Stage 167:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.985646861 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354137871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:====================================>                (78 + 36) / 114][Stage 168:============================================>        (95 + 19) / 114][Stage 168:===============================================>    (104 + 10) / 114][Stage 168:===================================================> (111 + 3) / 114]                                                                                [Stage 169:===================================>                 (77 + 38) / 115][Stage 169:=======================================>             (86 + 29) / 115][Stage 169:============================================>        (97 + 18) / 115][Stage 169:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.087412418 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399505231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 60) / 121][Stage 170:===============================>                     (71 + 50) / 121][Stage 170:========================================>            (93 + 28) / 121][Stage 170:==============================================>     (109 + 12) / 121][Stage 170:====================================================>(120 + 1) / 121]                                                                                [Stage 171:==========================>                          (62 + 60) / 122][Stage 171:=============================>                       (68 + 54) / 122][Stage 171:==========================================>          (98 + 24) / 122][Stage 171:==============================================>     (108 + 14) / 122][Stage 171:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.127963393 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384539657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===============================>                     (68 + 47) / 115][Stage 172:=======================================>             (86 + 29) / 115][Stage 172:===============================================>    (104 + 11) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:================================>                    (72 + 44) / 116][Stage 173:=====================================>               (83 + 33) / 116][Stage 173:============================================>       (100 + 16) / 116][Stage 173:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.853119332 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367525548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (71 + 46) / 117][Stage 174:====================================>                (81 + 36) / 117][Stage 174:============================================>        (98 + 19) / 117][Stage 174:====================================================>(115 + 2) / 117]                                                                                [Stage 175:=================================>                   (74 + 44) / 118][Stage 175:======================================>              (86 + 32) / 118][Stage 175:================================================>    (109 + 9) / 118]                                                                                Time elapsed: 2.848829089 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33349883 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:====================================>                (80 + 35) / 115][Stage 176:========================================>            (88 + 27) / 115][Stage 176:=============================================>      (101 + 14) / 115][Stage 176:===================================================> (112 + 3) / 115]                                                                                [Stage 177:========================================>            (88 + 28) / 116][Stage 177:=============================================>      (102 + 14) / 116][Stage 177:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.580273 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394513528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==================================>                  (74 + 40) / 114][Stage 178:========================================>            (87 + 27) / 114][Stage 178:============================================>        (96 + 18) / 114][Stage 178:==============================================>     (102 + 12) / 114]                                                                                [Stage 179:=====================================>               (82 + 33) / 115][Stage 179:=========================================>           (90 + 25) / 115][Stage 179:=============================================>       (99 + 16) / 115][Stage 179:=================================================>   (107 + 8) / 115][Stage 179:==================================================>  (110 + 5) / 115][Stage 179:====================================================>(113 + 2) / 115][Stage 179:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.877624368 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (80 + 34) / 114][Stage 180:==========================================>          (91 + 23) / 114][Stage 180:=============================================>      (100 + 14) / 114][Stage 180:=================================================>   (107 + 7) / 114][Stage 180:==================================================>  (108 + 6) / 114][Stage 180:===================================================> (111 + 3) / 114][Stage 180:====================================================>(113 + 1) / 114]                                                                                [Stage 181:===================================>                 (77 + 38) / 115][Stage 181:=======================================>             (85 + 30) / 115][Stage 181:===========================================>         (95 + 20) / 115][Stage 181:================================================>    (106 + 9) / 115][Stage 181:===================================================> (112 + 3) / 115][Stage 181:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.847159104 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 120 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==================================>                  (75 + 39) / 114][Stage 182:=======================================>             (86 + 28) / 114][Stage 182:============================================>        (96 + 18) / 114][Stage 182:===============================================>    (104 + 10) / 114][Stage 182:====================================================>(112 + 2) / 114]                                                                                [Stage 183:=====================================>               (81 + 34) / 115][Stage 183:========================================>            (88 + 27) / 115][Stage 183:============================================>        (96 + 19) / 115][Stage 183:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.068395138 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 112 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412423258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (61 + 61) / 122][Stage 184:================================>                    (74 + 48) / 122][Stage 184:=========================================>           (96 + 26) / 122][Stage 184:====================================================>(120 + 2) / 122]                                                                                [Stage 185:==========================>                          (62 + 61) / 123][Stage 185:============================>                        (66 + 57) / 123][Stage 185:===================================>                 (82 + 41) / 123][Stage 185:============================================>       (106 + 17) / 123]                                                                                Time elapsed: 2.913469403 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354370621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=================================>                   (71 + 43) / 114][Stage 186:=======================================>             (84 + 30) / 114][Stage 186:===========================================>         (94 + 20) / 114][Stage 186:==============================================>     (103 + 11) / 114][Stage 186:===================================================> (111 + 3) / 114]                                                                                [Stage 187:===================================>                 (76 + 39) / 115][Stage 187:=========================================>           (91 + 24) / 115][Stage 187:=============================================>      (101 + 14) / 115][Stage 187:=================================================>   (107 + 8) / 115][Stage 187:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.196854101 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330050118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:========================================>            (87 + 28) / 115][Stage 188:=============================================>      (101 + 14) / 115][Stage 188:===================================================> (112 + 3) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:======================================>              (85 + 31) / 116][Stage 189:=========================================>           (91 + 25) / 116][Stage 189:===============================================>    (106 + 10) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.849529583 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361762394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (71 + 46) / 117][Stage 190:=================================>                   (75 + 42) / 117][Stage 190:=========================================>           (92 + 25) / 117][Stage 190:===============================================>    (107 + 10) / 117]                                                                                [Stage 191:===================================>                 (78 + 40) / 118][Stage 191:=======================================>             (87 + 31) / 118][Stage 191:==============================================>     (105 + 13) / 118]                                                                                Time elapsed: 2.756473976 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393827713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (62 + 59) / 121][Stage 192:=================================>                   (77 + 44) / 121][Stage 192:=========================================>           (95 + 26) / 121][Stage 192:=================================================>   (114 + 7) / 121]                                                                                [Stage 193:============================>                        (66 + 56) / 122][Stage 193:====================================>                (83 + 39) / 122][Stage 193:==========================================>          (97 + 25) / 122][Stage 193:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.013171751 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394597298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 61) / 121][Stage 194:============================>                        (65 + 56) / 121][Stage 194:=================================>                   (76 + 45) / 121][Stage 194:=============================================>      (106 + 15) / 121][Stage 194:====================================================>(119 + 2) / 121]                                                                                [Stage 195:==========================>                          (62 + 60) / 122][Stage 195:============================>                        (66 + 56) / 122][Stage 195:==================================>                  (80 + 42) / 122][Stage 195:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 2.876824059 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403407203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (61 + 60) / 121][Stage 196:==============================>                      (69 + 52) / 121][Stage 196:=======================================>             (90 + 31) / 121][Stage 196:=============================================>      (107 + 14) / 121]                                                                                [Stage 197:===========================>                         (63 + 59) / 122][Stage 197:==================================>                  (79 + 43) / 122][Stage 197:============================================>       (105 + 17) / 122][Stage 197:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.007143885 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379734863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:======================================>              (83 + 32) / 115][Stage 198:==============================================>     (102 + 13) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:=====================================>               (83 + 33) / 116][Stage 199:=========================================>           (90 + 26) / 116][Stage 199:==============================================>     (103 + 13) / 116][Stage 199:===================================================> (112 + 4) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.064225543 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52906784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (79 + 36) / 115][Stage 200:=======================================>             (85 + 30) / 115][Stage 200:=============================================>      (100 + 15) / 115][Stage 200:===================================================> (111 + 4) / 115][Stage 200:====================================================>(114 + 1) / 115]                                                                                [Stage 201:=====================================>               (81 + 35) / 116][Stage 201:========================================>            (88 + 28) / 116][Stage 201:==========================================>          (92 + 24) / 116][Stage 201:==================================================>  (111 + 5) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.880471756 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/30 01:01:54 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:50948) dropped. RpcEnv already stopped.
17/05/30 01:01:54 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:50948) dropped. RpcEnv already stopped.

real	9m58.692s
user	11m30.664s
sys	0m34.232s
