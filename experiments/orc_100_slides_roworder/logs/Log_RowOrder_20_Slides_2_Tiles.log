Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 20:40:54 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:41:09 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:41:09 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:41:10 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 20:41:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:41:23 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529204112-0680).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.381707802 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 115) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(113 + 2) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:========================>                              (52 + 64) / 116][Stage 1:==========================>                            (56 + 60) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 13.477013003 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.820733726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=====================>                                 (48 + 73) / 121][Stage 2:=======================>                               (51 + 70) / 121][Stage 2:==========================>                            (59 + 62) / 121][Stage 2:===========================>                           (61 + 60) / 121][Stage 2:============================>                          (62 + 59) / 121][Stage 2:===============================>                       (69 + 52) / 121][Stage 2:====================================>                  (80 + 41) / 121][Stage 2:===========================================>           (95 + 26) / 121][Stage 2:===================================================>   (113 + 8) / 121][Stage 2:======================================================>(119 + 2) / 121]                                                                                [Stage 3:==========================>                            (58 + 64) / 122][Stage 3:===========================>                           (60 + 62) / 122][Stage 3:============================>                          (64 + 58) / 122][Stage 3:==============================>                        (68 + 54) / 122][Stage 3:=================================>                     (75 + 47) / 122][Stage 3:======================================>                (85 + 37) / 122][Stage 3:===============================================>      (107 + 15) / 122][Stage 3:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.908474967 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.749127008 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=========================>                             (56 + 65) / 121][Stage 4:===========================>                           (60 + 61) / 121][Stage 4:============================>                          (62 + 59) / 121][Stage 4:================================>                      (72 + 49) / 121][Stage 4:===================================>                   (77 + 44) / 121][Stage 4:======================================>                (85 + 36) / 121][Stage 4:===============================================>      (107 + 14) / 121][Stage 4:======================================================>(120 + 1) / 121]                                                                                [Stage 5:===========================>                           (62 + 60) / 122][Stage 5:===============================>                       (70 + 52) / 122][Stage 5:======================================>                (85 + 37) / 122][Stage 5:============================================>         (100 + 22) / 122][Stage 5:===================================================>   (115 + 7) / 122][Stage 5:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.32041366 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 49 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.656597829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (56 + 66) / 122][Stage 6:===========================>                           (60 + 62) / 122][Stage 6:============================>                          (64 + 58) / 122][Stage 6:================================>                      (72 + 50) / 122][Stage 6:======================================>                (85 + 37) / 122][Stage 6:============================================>          (99 + 23) / 122][Stage 6:=================================================>    (112 + 10) / 122][Stage 6:======================================================>(121 + 1) / 122]                                                                                [Stage 7:============================>                          (63 + 60) / 123][Stage 7:===============================>                       (70 + 53) / 123][Stage 7:======================================>                (86 + 37) / 123][Stage 7:===========================================>           (97 + 26) / 123][Stage 7:===============================================>      (108 + 15) / 123][Stage 7:=====================================================> (119 + 4) / 123]                                                                                Time elapsed: 4.199857286 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.70121031 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 61) / 121][Stage 8:=============================>                         (65 + 56) / 121][Stage 8:======================================>                (85 + 36) / 121][Stage 8:===========================================>           (96 + 25) / 121][Stage 8:=================================================>    (110 + 11) / 121][Stage 8:======================================================>(119 + 2) / 121]                                                                                [Stage 9:===========================>                           (61 + 61) / 122][Stage 9:===============================>                       (70 + 52) / 122][Stage 9:=====================================>                 (83 + 39) / 122][Stage 9:============================================>         (100 + 22) / 122][Stage 9:=================================================>    (112 + 10) / 122][Stage 9:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.056700991 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.62087564 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (61 + 61) / 122][Stage 10:==============================>                       (70 + 52) / 122][Stage 10:======================================>               (88 + 34) / 122][Stage 10:===========================================>         (100 + 22) / 122][Stage 10:================================================>    (111 + 11) / 122][Stage 10:====================================================> (119 + 3) / 122]                                                                                [Stage 11:==========================>                           (61 + 62) / 123][Stage 11:=============================>                        (67 + 56) / 123][Stage 11:===================================>                  (81 + 42) / 123][Stage 11:===========================================>         (101 + 22) / 123][Stage 11:================================================>    (113 + 10) / 123][Stage 11:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.125601511 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509715557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (71 + 46) / 117][Stage 12:=====================================>                (81 + 36) / 117][Stage 12:===========================================>          (95 + 22) / 117][Stage 12:===============================================>     (105 + 12) / 117][Stage 12:====================================================> (114 + 3) / 117]                                                                                [Stage 13:================================>                     (72 + 46) / 118][Stage 13:====================================>                 (80 + 38) / 118][Stage 13:=========================================>            (91 + 27) / 118][Stage 13:=============================================>       (102 + 16) / 118][Stage 13:=================================================>    (109 + 9) / 118]                                                                                Time elapsed: 3.747225842 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (71 + 46) / 117][Stage 14:==================================>                   (74 + 43) / 117][Stage 14:=======================================>              (85 + 32) / 117][Stage 14:===============================================>     (104 + 13) / 117][Stage 14:=====================================================>(116 + 1) / 117]                                                                                [Stage 15:=================================>                    (73 + 45) / 118][Stage 15:===================================>                  (77 + 41) / 118][Stage 15:===========================================>          (94 + 24) / 118][Stage 15:=================================================>    (109 + 9) / 118][Stage 15:===================================================>  (113 + 5) / 118][Stage 15:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.724668001 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (71 + 46) / 117][Stage 16:==================================>                   (74 + 43) / 117][Stage 16:========================================>             (88 + 29) / 117][Stage 16:============================================>         (97 + 20) / 117][Stage 16:===================================================>  (112 + 5) / 117][Stage 16:====================================================> (113 + 4) / 117]                                                                                [Stage 17:================================>                     (72 + 46) / 118][Stage 17:====================================>                 (79 + 39) / 118][Stage 17:=======================================>              (87 + 31) / 118][Stage 17:==============================================>      (103 + 15) / 118][Stage 17:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.752045319 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.564993449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:============================>                         (59 + 54) / 113][Stage 18:==============================>                       (64 + 49) / 113][Stage 18:====================================>                 (76 + 37) / 113][Stage 18:===========================================>          (91 + 22) / 113][Stage 18:===============================================>     (101 + 12) / 113][Stage 18:===================================================>  (107 + 6) / 113]                                                                                [Stage 19:============================>                         (61 + 53) / 114][Stage 19:================================>                     (68 + 46) / 114][Stage 19:===========================================>          (91 + 23) / 114][Stage 19:=================================================>    (105 + 9) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.523858838 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422819753 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:======================================>               (81 + 34) / 115][Stage 20:=========================================>            (89 + 26) / 115][Stage 20:===============================================>     (102 + 13) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:========================================>             (88 + 28) / 116][Stage 21:===============================================>     (104 + 12) / 116][Stage 21:====================================================> (112 + 4) / 116][Stage 21:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.932065592 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.564590809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (61 + 60) / 121][Stage 22:================================>                     (73 + 48) / 121][Stage 22:=====================================>                (84 + 37) / 121][Stage 22:===============================================>     (108 + 13) / 121][Stage 22:=====================================================>(119 + 2) / 121]                                                                                [Stage 23:===========================>                          (61 + 61) / 122][Stage 23:===========================>                          (63 + 59) / 122][Stage 23:==================================>                   (79 + 43) / 122][Stage 23:===========================================>          (98 + 24) / 122][Stage 23:===============================================>     (110 + 12) / 122][Stage 23:==================================================>   (115 + 7) / 122][Stage 23:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.673565509 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526129503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 61) / 121][Stage 24:===============================>                      (70 + 51) / 121][Stage 24:=====================================>                (83 + 38) / 121][Stage 24:============================================>        (102 + 19) / 121][Stage 24:=====================================================>(119 + 2) / 121]                                                                                [Stage 25:===========================>                          (62 + 60) / 122][Stage 25:=============================>                        (67 + 55) / 122][Stage 25:==================================>                   (79 + 43) / 122][Stage 25:==========================================>           (97 + 25) / 122][Stage 25:===================================================>  (117 + 5) / 122][Stage 25:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.313248162 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 180 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (61 + 60) / 121][Stage 26:=================================>                    (74 + 47) / 121][Stage 26:=========================================>            (92 + 29) / 121][Stage 26:==================================================>   (113 + 8) / 121][Stage 26:=====================================================>(120 + 1) / 121]                                                                                [Stage 27:===========================>                          (62 + 60) / 122][Stage 27:=============================>                        (66 + 56) / 122][Stage 27:=====================================>                (84 + 38) / 122][Stage 27:===============================================>     (109 + 13) / 122][Stage 27:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.287522405 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450347709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=================================>                    (71 + 43) / 114][Stage 28:=======================================>              (83 + 31) / 114][Stage 28:===========================================>          (92 + 22) / 114][Stage 28:=============================================>        (97 + 17) / 114][Stage 28:================================================>    (104 + 10) / 114][Stage 28:===================================================>  (109 + 5) / 114][Stage 28:====================================================> (111 + 3) / 114]                                                                                [Stage 29:=========================================>            (89 + 26) / 115][Stage 29:==============================================>       (99 + 16) / 115][Stage 29:=================================================>    (106 + 9) / 115][Stage 29:====================================================> (111 + 4) / 115][Stage 29:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.5706595 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507857619 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:============================>                         (60 + 53) / 113][Stage 30:=================================>                    (70 + 43) / 113][Stage 30:========================================>             (85 + 28) / 113][Stage 30:===============================================>     (102 + 11) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:============================>                         (60 + 54) / 114][Stage 31:===============================>                      (66 + 48) / 114][Stage 31:=====================================>                (79 + 35) / 114][Stage 31:==============================================>       (98 + 16) / 114][Stage 31:==================================================>   (107 + 7) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.696029831 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46113754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (70 + 45) / 115][Stage 32:======================================>               (83 + 32) / 115][Stage 32:===============================================>     (102 + 13) / 115][Stage 32:==================================================>   (107 + 8) / 115][Stage 32:====================================================> (112 + 3) / 115]                                                                                [Stage 33:=================================>                    (73 + 43) / 116][Stage 33:=========================================>            (90 + 26) / 116][Stage 33:=============================================>       (100 + 16) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.610636206 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.534510636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==============================>                       (66 + 49) / 115][Stage 34:=================================>                    (72 + 43) / 115][Stage 34:=========================================>            (88 + 27) / 115][Stage 34:==============================================>      (100 + 15) / 115][Stage 34:=================================================>    (106 + 9) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:===============================>                      (68 + 48) / 116][Stage 35:=====================================>                (80 + 36) / 116][Stage 35:==============================================>      (101 + 15) / 116][Stage 35:==================================================>   (109 + 7) / 116][Stage 35:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.246427242 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409944485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=====================================>                (80 + 35) / 115][Stage 36:=========================================>            (88 + 27) / 115][Stage 36:=============================================>        (97 + 18) / 115][Stage 36:=================================================>    (106 + 9) / 115][Stage 36:=====================================================>(113 + 2) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:======================================>               (82 + 34) / 116][Stage 37:=========================================>            (89 + 27) / 116][Stage 37:===============================================>     (103 + 13) / 116][Stage 37:===================================================>  (110 + 6) / 116][Stage 37:====================================================> (113 + 3) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.693062695 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454697305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (71 + 46) / 117][Stage 38:=====================================>                (82 + 35) / 117][Stage 38:==============================================>      (102 + 15) / 117][Stage 38:===================================================>  (111 + 6) / 117]                                                                                [Stage 39:================================>                     (72 + 46) / 118][Stage 39:===================================>                  (77 + 41) / 118][Stage 39:==========================================>           (93 + 25) / 118][Stage 39:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.931051957 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.544643708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==========================>                           (60 + 62) / 122][Stage 40:===========================>                          (61 + 61) / 122][Stage 40:==============================>                       (69 + 53) / 122][Stage 40:==========================================>           (96 + 26) / 122][Stage 40:====================================================> (119 + 3) / 122]                                                                                [Stage 41:==========================>                           (61 + 62) / 123][Stage 41:===============================>                      (72 + 51) / 123][Stage 41:=======================================>              (91 + 32) / 123][Stage 41:==================================================>   (114 + 9) / 123][Stage 41:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.368076339 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510335537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (61 + 61) / 122][Stage 42:============================>                         (64 + 58) / 122][Stage 42:================================>                     (73 + 49) / 122][Stage 42:==========================================>           (96 + 26) / 122][Stage 42:==================================================>   (113 + 9) / 122]                                                                                [Stage 43:===========================>                          (63 + 60) / 123][Stage 43:==============================>                       (69 + 54) / 123][Stage 43:=======================================>              (89 + 34) / 123][Stage 43:================================================>    (112 + 11) / 123][Stage 43:====================================================> (120 + 3) / 123][Stage 43:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.407072685 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571280844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==============================>                       (66 + 49) / 115][Stage 44:====================================>                 (77 + 38) / 115][Stage 44:=========================================>            (89 + 26) / 115][Stage 44:=================================================>    (106 + 9) / 115]                                                                                [Stage 45:=================================>                    (73 + 43) / 116][Stage 45:========================================>             (88 + 28) / 116][Stage 45:================================================>    (106 + 10) / 116][Stage 45:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.74375834 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459356782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (71 + 46) / 117][Stage 46:===================================>                  (77 + 40) / 117][Stage 46:==========================================>           (93 + 24) / 117][Stage 46:================================================>    (107 + 10) / 117]                                                                                [Stage 47:=================================>                    (73 + 45) / 118][Stage 47:==================================>                   (76 + 42) / 118][Stage 47:========================================>             (88 + 30) / 118][Stage 47:===============================================>     (106 + 12) / 118][Stage 47:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.183995699 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420381555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:====================================>                 (76 + 38) / 114][Stage 48:========================================>             (85 + 29) / 114][Stage 48:=============================================>        (96 + 18) / 114][Stage 48:===============================================>     (102 + 12) / 114][Stage 48:==================================================>   (106 + 8) / 114][Stage 48:====================================================> (111 + 3) / 114][Stage 48:=====================================================>(112 + 2) / 114]                                                                                [Stage 49:=======================================>              (84 + 31) / 115][Stage 49:=========================================>            (89 + 26) / 115][Stage 49:==============================================>       (99 + 16) / 115][Stage 49:==================================================>   (108 + 7) / 115][Stage 49:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 4.236137208 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524974184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 60) / 121][Stage 50:============================>                         (63 + 58) / 121][Stage 50:=================================>                    (76 + 45) / 121][Stage 50:=============================================>       (105 + 16) / 121][Stage 50:=====================================================>(119 + 2) / 121]                                                                                [Stage 51:===========================>                          (63 + 59) / 122][Stage 51:=================================>                    (76 + 46) / 122][Stage 51:==========================================>           (96 + 26) / 122][Stage 51:==================================================>   (115 + 7) / 122][Stage 51:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.226774223 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47353853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (61 + 60) / 121][Stage 52:===============================>                      (70 + 51) / 121][Stage 52:======================================>               (86 + 35) / 121][Stage 52:================================================>    (110 + 11) / 121][Stage 52:=====================================================>(120 + 1) / 121]                                                                                [Stage 53:===========================>                          (62 + 60) / 122][Stage 53:==============================>                       (69 + 53) / 122][Stage 53:======================================>               (86 + 36) / 122][Stage 53:================================================>    (112 + 10) / 122][Stage 53:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.236501275 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 156 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 156 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428825068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (71 + 46) / 117][Stage 54:=================================>                    (72 + 45) / 117][Stage 54:========================================>             (88 + 29) / 117][Stage 54:==============================================>      (102 + 15) / 117][Stage 54:=====================================================>(115 + 2) / 117]                                                                                [Stage 55:================================>                     (72 + 46) / 118][Stage 55:=================================>                    (74 + 44) / 118][Stage 55:========================================>             (89 + 29) / 118][Stage 55:==================================================>   (110 + 8) / 118]                                                                                Time elapsed: 2.930054321 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467574335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (61 + 61) / 122][Stage 56:=================================>                    (75 + 47) / 122][Stage 56:===========================================>          (99 + 23) / 122][Stage 56:=====================================================>(120 + 2) / 122]                                                                                [Stage 57:============================>                         (65 + 58) / 123][Stage 57:===================================>                  (81 + 42) / 123][Stage 57:===========================================>          (98 + 25) / 123][Stage 57:================================================>    (113 + 10) / 123][Stage 57:====================================================> (119 + 4) / 123][Stage 57:====================================================> (120 + 3) / 123][Stage 57:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.659686569 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 188 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 188 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372426337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (83 + 32) / 115][Stage 58:=========================================>            (89 + 26) / 115][Stage 58:===============================================>     (102 + 13) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:=======================================>              (84 + 32) / 116][Stage 59:=============================================>        (98 + 18) / 116][Stage 59:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.432475293 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (81 + 34) / 115][Stage 60:===========================================>          (93 + 22) / 115][Stage 60:================================================>    (105 + 10) / 115][Stage 60:====================================================> (112 + 3) / 115]                                                                                [Stage 61:=======================================>              (84 + 32) / 116][Stage 61:============================================>         (95 + 21) / 116][Stage 61:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.661769015 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413249762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (72 + 42) / 114][Stage 62:=====================================>                (80 + 34) / 114][Stage 62:============================================>         (93 + 21) / 114][Stage 62:==============================================>      (100 + 14) / 114][Stage 62:====================================================> (110 + 4) / 114]                                                                                [Stage 63:==================================>                   (74 + 41) / 115][Stage 63:======================================>               (83 + 32) / 115][Stage 63:============================================>         (94 + 21) / 115][Stage 63:==============================================>      (100 + 15) / 115][Stage 63:==================================================>   (107 + 8) / 115][Stage 63:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.47567859 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454639026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=============================>                        (61 + 52) / 113][Stage 64:===============================>                      (65 + 48) / 113][Stage 64:==========================================>           (88 + 25) / 113][Stage 64:====================================================> (109 + 4) / 113]                                                                                [Stage 65:==============================>                       (64 + 50) / 114][Stage 65:====================================>                 (76 + 38) / 114][Stage 65:==============================================>       (99 + 15) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.953271343 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443975296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (63 + 59) / 122][Stage 66:===============================>                      (72 + 50) / 122][Stage 66:==========================================>           (97 + 25) / 122][Stage 66:==================================================>   (113 + 9) / 122][Stage 66:=====================================================>(121 + 1) / 122]                                                                                [Stage 67:===========================>                          (62 + 61) / 123][Stage 67:===============================>                      (72 + 51) / 123][Stage 67:=======================================>              (89 + 34) / 123][Stage 67:================================================>    (113 + 10) / 123][Stage 67:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.162538062 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==========================>                           (60 + 62) / 122][Stage 68:=============================>                        (66 + 56) / 122][Stage 68:===================================>                  (81 + 41) / 122][Stage 68:==============================================>      (108 + 14) / 122]                                                                                [Stage 69:===========================>                          (63 + 60) / 123][Stage 69:==============================>                       (69 + 54) / 123][Stage 69:======================================>               (88 + 35) / 123][Stage 69:================================================>    (113 + 10) / 123]                                                                                Time elapsed: 3.035155333 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411642523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:>                                                       (0 + 0) / 117][Stage 70:================================>                     (71 + 46) / 117][Stage 70:===================================>                  (76 + 41) / 117][Stage 70:===========================================>          (94 + 23) / 117][Stage 70:==================================================>   (110 + 7) / 117]                                                                                [Stage 71:=================================>                    (73 + 45) / 118][Stage 71:====================================>                 (79 + 39) / 118][Stage 71:===============================================>     (105 + 13) / 118][Stage 71:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.970546029 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408738707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (71 + 46) / 117][Stage 72:==================================>                   (74 + 43) / 117][Stage 72:=========================================>            (90 + 27) / 117][Stage 72:================================================>    (107 + 10) / 117][Stage 72:=====================================================>(116 + 1) / 117]                                                                                [Stage 73:================================>                     (72 + 46) / 118][Stage 73:==================================>                   (76 + 42) / 118][Stage 73:========================================>             (89 + 29) / 118][Stage 73:=============================================>       (101 + 17) / 118][Stage 73:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.222540151 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444270935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:==========================>                           (60 + 61) / 121][Stage 74:============================>                         (64 + 57) / 121][Stage 74:===================================>                  (80 + 41) / 121][Stage 74:============================================>        (102 + 19) / 121][Stage 74:====================================================> (117 + 4) / 121]                                                                                [Stage 75:===========================>                          (62 + 60) / 122][Stage 75:==============================>                       (70 + 52) / 122][Stage 75:====================================>                 (83 + 39) / 122][Stage 75:===========================================>         (101 + 21) / 122][Stage 75:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.095619282 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386959326 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (70 + 44) / 114][Stage 76:=========================================>            (87 + 27) / 114][Stage 76:==============================================>      (100 + 14) / 114][Stage 76:==================================================>   (107 + 7) / 114][Stage 76:====================================================> (111 + 3) / 114]                                                                                [Stage 77:======================================>               (82 + 33) / 115][Stage 77:===========================================>          (93 + 22) / 115][Stage 77:==================================================>   (107 + 8) / 115][Stage 77:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.046463945 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370592119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:======================================>               (83 + 32) / 115][Stage 78:==========================================>           (91 + 24) / 115][Stage 78:===================================================>  (110 + 5) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:========================================>             (87 + 29) / 116][Stage 79:===========================================>          (94 + 22) / 116][Stage 79:====================================================> (112 + 4) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.778483277 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363740146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=======================================>              (84 + 31) / 115][Stage 80:===========================================>          (93 + 22) / 115][Stage 80:===================================================>  (110 + 5) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:=======================================>              (84 + 32) / 116][Stage 81:===========================================>          (94 + 22) / 116][Stage 81:=================================================>    (107 + 9) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.704168502 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=====================================>                (79 + 36) / 115][Stage 82:=======================================>              (85 + 30) / 115][Stage 82:==============================================>      (100 + 15) / 115][Stage 82:===================================================>  (110 + 5) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:=====================================>                (81 + 35) / 116][Stage 83:========================================>             (87 + 29) / 116][Stage 83:=============================================>       (100 + 16) / 116][Stage 83:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.803276635 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417611899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (71 + 43) / 114][Stage 84:========================================>             (85 + 29) / 114][Stage 84:==============================================>       (98 + 16) / 114][Stage 84:==================================================>   (107 + 7) / 114][Stage 84:=====================================================>(112 + 2) / 114]                                                                                [Stage 85:======================================>               (81 + 34) / 115][Stage 85:=============================================>        (97 + 18) / 115][Stage 85:===============================================>     (104 + 11) / 115][Stage 85:===================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.084107833 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 252 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 252 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442210038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (61 + 60) / 121][Stage 86:================================>                     (72 + 49) / 121][Stage 86:===========================================>          (97 + 24) / 121][Stage 86:====================================================> (117 + 4) / 121]                                                                                [Stage 87:============================>                         (65 + 57) / 122][Stage 87:==================================>                   (77 + 45) / 122][Stage 87:===========================================>          (98 + 24) / 122][Stage 87:==================================================>   (115 + 7) / 122][Stage 87:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.15724389 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399849934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===============================>                      (68 + 47) / 115][Stage 88:====================================>                 (78 + 37) / 115][Stage 88:============================================>         (95 + 20) / 115][Stage 88:==================================================>   (107 + 8) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:================================>                     (69 + 47) / 116][Stage 89:=====================================>                (81 + 35) / 116][Stage 89:=============================================>        (98 + 18) / 116][Stage 89:=================================================>    (107 + 9) / 116][Stage 89:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.974209649 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386093106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:====================================>                 (76 + 38) / 114][Stage 90:==========================================>           (89 + 25) / 114][Stage 90:==============================================>      (100 + 14) / 114][Stage 90:===================================================>  (109 + 5) / 114][Stage 90:=====================================================>(112 + 2) / 114]                                                                                [Stage 91:===================================>                  (75 + 40) / 115][Stage 91:==========================================>           (90 + 25) / 115][Stage 91:==============================================>      (101 + 14) / 115][Stage 91:================================================>    (105 + 10) / 115][Stage 91:====================================================> (111 + 4) / 115][Stage 91:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.249637332 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240  OR  partitionIndex = 241 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240  OR  partitionIndex = 241 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39019138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (71 + 46) / 117][Stage 92:=================================>                    (72 + 45) / 117][Stage 92:========================================>             (87 + 30) / 117][Stage 92:=================================================>    (108 + 9) / 117][Stage 92:=====================================================>(116 + 1) / 117]                                                                                [Stage 93:================================>                     (72 + 46) / 118][Stage 93:=====================================>                (81 + 37) / 118][Stage 93:==========================================>           (92 + 26) / 118][Stage 93:==================================================>   (110 + 8) / 118][Stage 93:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.975688992 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41457853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:============================>                         (59 + 54) / 113][Stage 94:=================================>                    (71 + 42) / 113][Stage 94:===========================================>          (90 + 23) / 113][Stage 94:=====================================================>(111 + 2) / 113][Stage 94:=====================================================>(112 + 1) / 113]                                                                                [Stage 95:============================>                         (60 + 54) / 114][Stage 95:===============================>                      (66 + 48) / 114][Stage 95:=======================================>              (84 + 30) / 114][Stage 95:===============================================>     (102 + 12) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.088527341 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 80 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386500782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=================================>                    (72 + 45) / 117][Stage 96:====================================>                 (80 + 37) / 117][Stage 96:===========================================>          (95 + 22) / 117][Stage 96:=================================================>    (108 + 9) / 117][Stage 96:=====================================================>(116 + 1) / 117]                                                                                [Stage 97:==================================>                   (75 + 43) / 118][Stage 97:======================================>               (85 + 33) / 118][Stage 97:================================================>    (108 + 10) / 118][Stage 97:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.236902112 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 85 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 85 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391880979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:>                                                       (0 + 0) / 115][Stage 98:================================>                     (70 + 45) / 115][Stage 98:=====================================>                (79 + 36) / 115][Stage 98:===========================================>          (93 + 22) / 115][Stage 98:================================================>    (105 + 10) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=================================>                    (72 + 44) / 116][Stage 99:=====================================>                (81 + 35) / 116][Stage 99:===========================================>          (93 + 23) / 116][Stage 99:===============================================>     (104 + 12) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.287634807 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393619099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:>                                                      (0 + 0) / 115][Stage 100:===============================>                     (68 + 47) / 115][Stage 100:=======================================>             (85 + 30) / 115][Stage 100:============================================>        (96 + 19) / 115][Stage 100:==============================================>     (103 + 12) / 115][Stage 100:==================================================>  (110 + 5) / 115]                                                                                [Stage 101:===============================>                     (70 + 46) / 116][Stage 101:==========================================>          (92 + 24) / 116][Stage 101:=============================================>       (99 + 17) / 116][Stage 101:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.103532771 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399707115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (59 + 54) / 113][Stage 102:============================>                        (61 + 52) / 113][Stage 102:====================================>                (77 + 36) / 113][Stage 102:=============================================>       (96 + 17) / 113][Stage 102:===================================================> (110 + 3) / 113]                                                                                [Stage 103:============================>                        (62 + 52) / 114][Stage 103:==================================>                  (74 + 40) / 114][Stage 103:========================================>            (87 + 27) / 114][Stage 103:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.111179886 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 119 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444931654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (62 + 60) / 122][Stage 104:================================>                    (75 + 47) / 122][Stage 104:========================================>            (93 + 29) / 122][Stage 104:=================================================>   (113 + 9) / 122]                                                                                [Stage 105:==========================>                          (62 + 61) / 123][Stage 105:=================================>                   (77 + 46) / 123][Stage 105:========================================>            (95 + 28) / 123][Stage 105:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.152214686 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401996874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===============================>                     (69 + 46) / 115][Stage 106:=====================================>               (82 + 33) / 115][Stage 106:===========================================>         (94 + 21) / 115][Stage 106:=================================================>   (108 + 7) / 115][Stage 106:====================================================>(113 + 2) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:===============================>                     (69 + 47) / 116][Stage 107:=====================================>               (81 + 35) / 116][Stage 107:===========================================>         (96 + 20) / 116][Stage 107:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.121079899 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342192282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (81 + 34) / 115][Stage 108:=========================================>           (91 + 24) / 115][Stage 108:=================================================>   (108 + 7) / 115][Stage 108:===================================================> (112 + 3) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:========================================>            (89 + 27) / 116][Stage 109:================================================>    (107 + 9) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.632440383 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354291496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:======================================>              (83 + 32) / 115][Stage 110:============================================>        (96 + 19) / 115][Stage 110:==================================================>  (110 + 5) / 115]                                                                                [Stage 111:======================================>              (85 + 31) / 116][Stage 111:===========================================>         (95 + 21) / 116][Stage 111:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.564439814 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382130144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (71 + 46) / 117][Stage 112:==================================>                  (76 + 41) / 117][Stage 112:========================================>            (90 + 27) / 117][Stage 112:==============================================>     (104 + 13) / 117][Stage 112:====================================================>(116 + 1) / 117]                                                                                [Stage 113:================================>                    (73 + 45) / 118][Stage 113:====================================>                (82 + 36) / 118][Stage 113:============================================>       (100 + 18) / 118][Stage 113:====================================================>(116 + 2) / 118][Stage 113:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.24208974 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (71 + 46) / 117][Stage 114:=================================>                   (73 + 44) / 117][Stage 114:======================================>              (86 + 31) / 117][Stage 114:==============================================>     (104 + 13) / 117]                                                                                [Stage 115:================================>                    (72 + 46) / 118][Stage 115:===================================>                 (78 + 40) / 118][Stage 115:==========================================>          (94 + 24) / 118][Stage 115:===================================================> (114 + 4) / 118][Stage 115:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.043299231 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386943881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (71 + 46) / 117][Stage 116:===================================>                 (79 + 38) / 117][Stage 116:===========================================>         (97 + 20) / 117][Stage 116:===================================================> (113 + 4) / 117]                                                                                [Stage 117:================================>                    (72 + 46) / 118][Stage 117:=================================>                   (75 + 43) / 118][Stage 117:=======================================>             (89 + 29) / 118][Stage 117:=============================================>      (104 + 14) / 118]                                                                                Time elapsed: 2.854452257 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239  OR  partitionIndex = 254 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239  OR  partitionIndex = 254 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381116604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (71 + 46) / 117][Stage 118:==================================>                  (77 + 40) / 117][Stage 118:==========================================>          (93 + 24) / 117][Stage 118:===============================================>    (107 + 10) / 117][Stage 118:====================================================>(115 + 2) / 117]                                                                                [Stage 119:================================>                    (72 + 46) / 118][Stage 119:===================================>                 (79 + 39) / 118][Stage 119:==========================================>          (95 + 23) / 118][Stage 119:=================================================>   (110 + 8) / 118][Stage 119:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.339829571 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417739247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 61) / 122][Stage 120:===============================>                     (72 + 50) / 122][Stage 120:======================================>              (89 + 33) / 122][Stage 120:===============================================>    (111 + 11) / 122][Stage 120:====================================================>(121 + 1) / 122]                                                                                [Stage 121:===========================>                         (63 + 60) / 123][Stage 121:================================>                    (76 + 47) / 123][Stage 121:=========================================>           (96 + 27) / 123][Stage 121:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.181622024 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416987127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 61) / 122][Stage 122:===========================>                         (64 + 58) / 122][Stage 122:===============================>                     (72 + 50) / 122][Stage 122:========================================>            (94 + 28) / 122][Stage 122:=================================================>   (115 + 7) / 122]                                                                                [Stage 123:============================>                        (66 + 57) / 123][Stage 123:================================>                    (75 + 48) / 123][Stage 123:==========================================>          (98 + 25) / 123][Stage 123:=================================================>   (115 + 8) / 123][Stage 123:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.20776241 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413048968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (61 + 61) / 122][Stage 124:============================>                        (65 + 57) / 122][Stage 124:====================================>                (84 + 38) / 122][Stage 124:===========================================>         (99 + 23) / 122][Stage 124:===================================================> (119 + 3) / 122]                                                                                [Stage 125:==========================>                          (61 + 62) / 123][Stage 125:===============================>                     (72 + 51) / 123][Stage 125:========================================>            (95 + 28) / 123][Stage 125:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.251351489 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40981015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (62 + 59) / 121][Stage 126:==============================>                      (70 + 51) / 121][Stage 126:==========================================>          (96 + 25) / 121][Stage 126:=================================================>   (113 + 8) / 121][Stage 126:====================================================>(119 + 2) / 121]                                                                                [Stage 127:==========================>                          (62 + 60) / 122][Stage 127:=============================>                       (67 + 55) / 122][Stage 127:===================================>                 (82 + 40) / 122][Stage 127:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.064329215 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367989729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=================================>                   (71 + 43) / 114][Stage 128:=====================================>               (81 + 33) / 114][Stage 128:==========================================>          (92 + 22) / 114][Stage 128:================================================>    (105 + 9) / 114][Stage 128:====================================================>(113 + 1) / 114]                                                                                [Stage 129:=====================================>               (82 + 33) / 115][Stage 129:==========================================>          (92 + 23) / 115][Stage 129:============================================>        (96 + 19) / 115][Stage 129:================================================>    (106 + 9) / 115][Stage 129:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.498708311 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362582851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=================================>                   (72 + 42) / 114][Stage 130:=======================================>             (85 + 29) / 114][Stage 130:============================================>        (95 + 19) / 114][Stage 130:================================================>    (105 + 9) / 114][Stage 130:===================================================> (110 + 4) / 114]                                                                                [Stage 131:======================================>              (84 + 31) / 115][Stage 131:===========================================>         (94 + 21) / 115][Stage 131:==============================================>     (103 + 12) / 115][Stage 131:===================================================> (111 + 4) / 115][Stage 131:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.129372262 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361555911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 46) / 117][Stage 132:=================================>                   (75 + 42) / 117][Stage 132:==========================================>          (93 + 24) / 117][Stage 132:==================================================>  (111 + 6) / 117]                                                                                [Stage 133:================================>                    (72 + 46) / 118][Stage 133:======================================>              (86 + 32) / 118][Stage 133:==============================================>     (106 + 12) / 118]                                                                                Time elapsed: 2.858446907 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40714657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 60) / 121][Stage 134:==============================>                      (69 + 52) / 121][Stage 134:====================================>                (84 + 37) / 121][Stage 134:==============================================>     (109 + 12) / 121]                                                                                [Stage 135:============================>                        (66 + 56) / 122][Stage 135:================================>                    (74 + 48) / 122][Stage 135:=========================================>           (95 + 27) / 122][Stage 135:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.986858626 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433228517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (73 + 41) / 114][Stage 136:======================================>              (83 + 31) / 114][Stage 136:============================================>        (95 + 19) / 114][Stage 136:==============================================>      (99 + 15) / 114][Stage 136:==================================================>  (109 + 5) / 114][Stage 136:====================================================>(113 + 1) / 114]                                                                                [Stage 137:===================================>                 (77 + 38) / 115][Stage 137:========================================>            (87 + 28) / 115][Stage 137:============================================>        (96 + 19) / 115][Stage 137:===============================================>    (104 + 11) / 115][Stage 137:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.475104337 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336422422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:>                                                      (0 + 0) / 115][Stage 138:=====================================>               (82 + 33) / 115][Stage 138:==========================================>          (92 + 23) / 115][Stage 138:================================================>    (106 + 9) / 115]                                                                                [Stage 139:======================================>              (84 + 32) / 116][Stage 139:===========================================>         (96 + 20) / 116][Stage 139:================================================>    (107 + 9) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.562830042 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346818698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (81 + 34) / 115][Stage 140:=========================================>           (91 + 24) / 115][Stage 140:===============================================>    (105 + 10) / 115][Stage 140:===================================================> (112 + 3) / 115]                                                                                [Stage 141:=========================================>           (90 + 26) / 116][Stage 141:===============================================>    (105 + 11) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.578418274 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418055725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 60) / 121][Stage 142:===============================>                     (73 + 48) / 121][Stage 142:==========================================>         (100 + 21) / 121][Stage 142:==================================================>  (115 + 6) / 121]                                                                                [Stage 143:==========================>                          (61 + 61) / 122][Stage 143:===========================>                         (64 + 58) / 122][Stage 143:====================================>                (83 + 39) / 122][Stage 143:==============================================>     (108 + 14) / 122][Stage 143:=====================================================(122 + 0) / 122]                                                                                Time elapsed: 2.913738897 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421469803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (61 + 61) / 122][Stage 144:============================>                        (66 + 56) / 122][Stage 144:===================================>                 (82 + 40) / 122][Stage 144:==============================================>     (110 + 12) / 122][Stage 144:====================================================>(121 + 1) / 122]                                                                                [Stage 145:==========================>                          (62 + 61) / 123][Stage 145:==============================>                      (70 + 53) / 123][Stage 145:====================================>                (85 + 38) / 123][Stage 145:===============================================>    (112 + 11) / 123][Stage 145:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.036732558 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 52 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 52 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 62) / 122][Stage 146:===========================>                         (64 + 58) / 122][Stage 146:==================================>                  (79 + 43) / 122][Stage 146:===========================================>        (101 + 21) / 122][Stage 146:==================================================>  (117 + 5) / 122]                                                                                [Stage 147:==========================>                          (62 + 61) / 123][Stage 147:=============================>                       (68 + 55) / 123][Stage 147:========================================>            (93 + 30) / 123][Stage 147:===============================================>    (112 + 11) / 123][Stage 147:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.196939601 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374180004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==================================>                  (75 + 40) / 115][Stage 148:==========================================>          (93 + 22) / 115][Stage 148:=================================================>   (107 + 8) / 115]                                                                                [Stage 149:=================================>                   (73 + 43) / 116][Stage 149:======================================>              (85 + 31) / 116][Stage 149:==============================================>     (104 + 12) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.843761446 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 220 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 220 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410387047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 62) / 122][Stage 150:=============================>                       (69 + 53) / 122][Stage 150:===================================>                 (81 + 41) / 122][Stage 150:==============================================>     (110 + 12) / 122][Stage 150:===================================================> (118 + 4) / 122]                                                                                [Stage 151:============================>                        (65 + 58) / 123][Stage 151:=================================>                   (77 + 46) / 123][Stage 151:==========================================>         (101 + 22) / 123][Stage 151:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.232954882 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369034007 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==================================>                  (75 + 40) / 115][Stage 152:============================================>        (96 + 19) / 115][Stage 152:==============================================>     (103 + 12) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:=================================>                   (74 + 42) / 116][Stage 153:========================================>            (89 + 27) / 116][Stage 153:================================================>    (107 + 9) / 116][Stage 153:==================================================>  (111 + 5) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.388464109 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406726449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (61 + 60) / 121][Stage 154:================================>                    (74 + 47) / 121][Stage 154:=======================================>             (91 + 30) / 121][Stage 154:===================================================> (117 + 4) / 121]                                                                                [Stage 155:==========================>                          (62 + 60) / 122][Stage 155:=============================>                       (68 + 54) / 122][Stage 155:===================================>                 (81 + 41) / 122][Stage 155:============================================>       (105 + 17) / 122][Stage 155:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.910755772 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3837487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:================================>                    (69 + 44) / 113][Stage 156:=======================================>             (85 + 28) / 113][Stage 156:=================================================>   (105 + 8) / 113]                                                                                [Stage 157:=============================>                       (63 + 51) / 114][Stage 157:=================================>                   (72 + 42) / 114][Stage 157:===========================================>         (93 + 21) / 114][Stage 157:====================================================>(112 + 2) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.179056764 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366081507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==============================>                      (67 + 48) / 115][Stage 158:==================================>                  (75 + 40) / 115][Stage 158:===========================================>         (94 + 21) / 115][Stage 158:==================================================>  (110 + 5) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:=====================================>               (82 + 34) / 116][Stage 159:=========================================>           (90 + 26) / 116][Stage 159:==============================================>     (104 + 12) / 116]                                                                                Time elapsed: 2.839892343 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36221229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (71 + 46) / 117][Stage 160:================================>                    (72 + 45) / 117][Stage 160:======================================>              (85 + 32) / 117][Stage 160:==============================================>     (104 + 13) / 117][Stage 160:=================================================>   (110 + 7) / 117][Stage 160:====================================================>(116 + 1) / 117]                                                                                [Stage 161:================================>                    (72 + 46) / 118][Stage 161:======================================>              (85 + 33) / 118][Stage 161:============================================>        (99 + 19) / 118][Stage 161:=================================================>   (110 + 8) / 118][Stage 161:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.41673859 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365567308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=======================================>             (86 + 28) / 114][Stage 162:============================================>        (95 + 19) / 114][Stage 162:==============================================>     (103 + 11) / 114][Stage 162:===================================================> (111 + 3) / 114]                                                                                [Stage 163:=====================================>               (82 + 33) / 115][Stage 163:==========================================>          (93 + 22) / 115][Stage 163:===============================================>    (105 + 10) / 115][Stage 163:===================================================> (111 + 4) / 115][Stage 163:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.041746146 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344553357 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=====================================>               (82 + 33) / 115][Stage 164:==========================================>          (92 + 23) / 115][Stage 164:================================================>    (106 + 9) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:=====================================>               (82 + 34) / 116][Stage 165:==========================================>          (92 + 24) / 116][Stage 165:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.484529988 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373935423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==================================>                  (74 + 40) / 114][Stage 166:===========================================>         (93 + 21) / 114][Stage 166:==============================================>     (103 + 11) / 114][Stage 166:===================================================> (110 + 4) / 114][Stage 166:====================================================>(113 + 1) / 114]                                                                                [Stage 167:=======================================>             (85 + 30) / 115][Stage 167:============================================>        (96 + 19) / 115][Stage 167:=================================================>   (108 + 7) / 115][Stage 167:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.319710552 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346024097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (81 + 34) / 115][Stage 168:=========================================>           (90 + 25) / 115][Stage 168:=============================================>      (100 + 15) / 115][Stage 168:===================================================> (111 + 4) / 115]                                                                                [Stage 169:=====================================>               (83 + 33) / 116][Stage 169:===========================================>         (96 + 20) / 116][Stage 169:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.807088393 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336330481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:======================================>              (83 + 32) / 115][Stage 170:===========================================>         (94 + 21) / 115][Stage 170:==============================================>     (103 + 12) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:=====================================>               (81 + 35) / 116][Stage 171:=========================================>           (91 + 25) / 116][Stage 171:=============================================>      (102 + 14) / 116][Stage 171:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.936164492 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 92 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33765618 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:======================================>              (83 + 32) / 115][Stage 172:===========================================>         (95 + 20) / 115][Stage 172:===============================================>    (105 + 10) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:=====================================>               (81 + 35) / 116][Stage 173:=========================================>           (90 + 26) / 116][Stage 173:================================================>    (107 + 9) / 116][Stage 173:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.68419653 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400683711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 62) / 122][Stage 174:==========================>                          (62 + 60) / 122][Stage 174:=================================>                   (77 + 45) / 122][Stage 174:=============================================>      (107 + 15) / 122][Stage 174:===================================================> (119 + 3) / 122]                                                                                [Stage 175:==========================>                          (62 + 61) / 123][Stage 175:============================>                        (65 + 58) / 123][Stage 175:=====================================>               (88 + 35) / 123][Stage 175:=============================================>      (108 + 15) / 123][Stage 175:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.081577041 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38147544 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:============================>                        (61 + 52) / 113][Stage 176:================================>                    (69 + 44) / 113][Stage 176:==========================================>          (90 + 23) / 113][Stage 176:==================================================>  (107 + 6) / 113]                                                                                [Stage 177:=============================>                       (63 + 51) / 114][Stage 177:==================================>                  (75 + 39) / 114][Stage 177:==========================================>          (91 + 23) / 114][Stage 177:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.072841544 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371241244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===============================>                     (68 + 47) / 115][Stage 178:===================================>                 (77 + 38) / 115][Stage 178:=========================================>           (91 + 24) / 115][Stage 178:===============================================>    (105 + 10) / 115][Stage 178:==================================================>  (110 + 5) / 115]                                                                                [Stage 179:================================>                    (72 + 44) / 116][Stage 179:======================================>              (84 + 32) / 116][Stage 179:===========================================>         (96 + 20) / 116][Stage 179:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.065661086 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433014014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===============================>                     (68 + 47) / 115][Stage 180:=====================================>               (82 + 33) / 115][Stage 180:============================================>        (97 + 18) / 115][Stage 180:================================================>    (106 + 9) / 115]                                                                                [Stage 181:===================================>                 (77 + 39) / 116][Stage 181:=========================================>           (90 + 26) / 116][Stage 181:==============================================>     (104 + 12) / 116][Stage 181:===================================================> (113 + 3) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.22419671 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==================================>                  (75 + 40) / 115][Stage 182:=========================================>           (91 + 24) / 115][Stage 182:==================================================>  (110 + 5) / 115][Stage 182:===================================================> (112 + 3) / 115]                                                                                [Stage 183:================================>                    (72 + 44) / 116][Stage 183:======================================>              (84 + 32) / 116][Stage 183:============================================>        (98 + 18) / 116][Stage 183:==================================================>  (110 + 6) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.861224481 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352467033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:====================================>                (79 + 36) / 115][Stage 184:==========================================>          (92 + 23) / 115][Stage 184:==============================================>     (103 + 12) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:=======================================>             (86 + 30) / 116][Stage 185:==========================================>          (94 + 22) / 116][Stage 185:==================================================>  (110 + 6) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.707295434 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35734401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:====================================>                (79 + 35) / 114][Stage 186:===========================================>         (94 + 20) / 114][Stage 186:==============================================>     (101 + 13) / 114][Stage 186:================================================>    (105 + 9) / 114]                                                                                [Stage 187:====================================>                (79 + 36) / 115][Stage 187:=========================================>           (90 + 25) / 115][Stage 187:=============================================>      (100 + 15) / 115][Stage 187:=================================================>   (107 + 8) / 115][Stage 187:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.076286517 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400987169 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (61 + 60) / 121][Stage 188:============================>                        (66 + 55) / 121][Stage 188:====================================>                (84 + 37) / 121][Stage 188:===============================================>    (111 + 10) / 121]                                                                                [Stage 189:===========================>                         (63 + 59) / 122][Stage 189:=================================>                   (77 + 45) / 122][Stage 189:======================================>              (88 + 34) / 122][Stage 189:==============================================>     (109 + 13) / 122][Stage 189:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.118212756 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352878512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===================================>                 (77 + 37) / 114][Stage 190:========================================>            (88 + 26) / 114][Stage 190:================================================>    (105 + 9) / 114][Stage 190:===================================================> (111 + 3) / 114][Stage 190:====================================================>(113 + 1) / 114]                                                                                [Stage 191:=====================================>               (82 + 33) / 115][Stage 191:============================================>        (97 + 18) / 115][Stage 191:===============================================>    (105 + 10) / 115][Stage 191:====================================================>(113 + 2) / 115][Stage 191:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.265852705 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449686406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (61 + 61) / 122][Stage 192:================================>                    (75 + 47) / 122][Stage 192:======================================>              (89 + 33) / 122][Stage 192:=============================================>      (106 + 16) / 122]                                                                                [Stage 193:==========================>                          (61 + 62) / 123][Stage 193:=================================>                   (77 + 46) / 123][Stage 193:=========================================>           (96 + 27) / 123][Stage 193:===============================================>    (113 + 10) / 123][Stage 193:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.089152488 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385180896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (59 + 54) / 113][Stage 194:=============================>                       (63 + 50) / 113][Stage 194:===================================>                 (75 + 38) / 113][Stage 194:==============================================>      (99 + 14) / 113][Stage 194:===================================================> (109 + 4) / 113]                                                                                [Stage 195:=============================>                       (64 + 50) / 114][Stage 195:==================================>                  (74 + 40) / 114][Stage 195:==========================================>          (92 + 22) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.118951012 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (59 + 54) / 113][Stage 196:================================>                    (70 + 43) / 113][Stage 196:=============================================>       (96 + 17) / 113][Stage 196:===================================================> (110 + 3) / 113]                                                                                [Stage 197:=============================>                       (63 + 51) / 114][Stage 197:=================================>                   (73 + 41) / 114][Stage 197:========================================>            (88 + 26) / 114][Stage 197:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.043167988 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413229263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (61 + 61) / 122][Stage 198:===========================>                         (64 + 58) / 122][Stage 198:====================================>                (83 + 39) / 122][Stage 198:==============================================>     (108 + 14) / 122][Stage 198:===================================================> (118 + 4) / 122]                                                                                [Stage 199:==========================>                          (62 + 61) / 123][Stage 199:=============================>                       (68 + 55) / 123][Stage 199:==================================>                  (79 + 44) / 123][Stage 199:=============================================>      (107 + 16) / 123][Stage 199:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 2.97454366 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208  OR  partitionIndex = 209 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389348354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (61 + 60) / 121][Stage 200:=============================>                       (68 + 53) / 121][Stage 200:================================>                    (75 + 46) / 121][Stage 200:=============================================>      (105 + 16) / 121][Stage 200:====================================================>(119 + 2) / 121]                                                                                [Stage 201:==========================>                          (62 + 60) / 122][Stage 201:==============================>                      (71 + 51) / 122][Stage 201:======================================>              (88 + 34) / 122][Stage 201:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 2.84623476 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 20:50:42 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:48198) dropped. RpcEnv already stopped.
17/05/29 20:50:42 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:48198) dropped. RpcEnv already stopped.

real	9m51.367s
user	11m49.828s
sys	0m36.352s
