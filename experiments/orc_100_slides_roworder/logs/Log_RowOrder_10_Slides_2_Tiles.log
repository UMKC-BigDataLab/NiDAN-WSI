Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 19:59:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 19:59:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 19:59:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 19:59:24 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 19:59:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 19:59:36 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529195925-0676).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.488624767 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (1 + 113) / 115][Stage 0:======================>                                (47 + 68) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (62 + 54) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 13.671874098 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.667139096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===============================>                       (68 + 49) / 117][Stage 2:=================================>                     (71 + 46) / 117][Stage 2:==================================>                    (74 + 43) / 117][Stage 2:===================================>                   (76 + 41) / 117][Stage 2:=====================================>                 (80 + 37) / 117][Stage 2:==========================================>            (90 + 27) / 117][Stage 2:================================================>     (104 + 13) / 117][Stage 2:======================================================>(116 + 1) / 117]                                                                                [Stage 3:===============================>                       (68 + 50) / 118][Stage 3:=================================>                     (72 + 46) / 118][Stage 3:===================================>                   (76 + 42) / 118][Stage 3:=======================================>               (85 + 33) / 118][Stage 3:==========================================>            (92 + 26) / 118][Stage 3:================================================>     (107 + 11) / 118][Stage 3:=====================================================> (114 + 4) / 118]                                                                                Time elapsed: 4.467651868 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.74897907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (60 + 61) / 121][Stage 4:===========================>                           (61 + 60) / 121][Stage 4:=============================>                         (65 + 56) / 121][Stage 4:=================================>                     (73 + 48) / 121][Stage 4:=======================================>               (86 + 35) / 121][Stage 4:============================================>          (98 + 23) / 121][Stage 4:===================================================>   (113 + 8) / 121][Stage 4:======================================================>(119 + 2) / 121]                                                                                [Stage 5:===========================>                           (60 + 62) / 122][Stage 5:=============================>                         (65 + 57) / 122][Stage 5:================================>                      (71 + 51) / 122][Stage 5:====================================>                  (80 + 42) / 122][Stage 5:=========================================>             (92 + 30) / 122][Stage 5:================================================>     (110 + 12) / 122][Stage 5:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.324274452 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.679538474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==========================>                            (58 + 64) / 122][Stage 6:===========================>                           (61 + 61) / 122][Stage 6:=============================>                         (66 + 56) / 122][Stage 6:==================================>                    (77 + 45) / 122][Stage 6:=====================================>                 (84 + 38) / 122][Stage 6:===========================================>           (96 + 26) / 122][Stage 6:=================================================>    (112 + 10) / 122][Stage 6:======================================================>(121 + 1) / 122]                                                                                [Stage 7:===========================>                           (62 + 61) / 123][Stage 7:==============================>                        (68 + 55) / 123][Stage 7:===================================>                   (80 + 43) / 123][Stage 7:========================================>              (90 + 33) / 123][Stage 7:==============================================>       (105 + 18) / 123][Stage 7:=====================================================> (119 + 4) / 123]                                                                                Time elapsed: 4.039986703 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.566529506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (70 + 44) / 114][Stage 8:======================================>                (80 + 34) / 114][Stage 8:==========================================>            (88 + 26) / 114][Stage 8:=============================================>         (95 + 19) / 114][Stage 8:=================================================>    (104 + 10) / 114][Stage 8:====================================================>  (108 + 6) / 114][Stage 8:=====================================================> (111 + 3) / 114][Stage 8:======================================================>(113 + 1) / 114]                                                                                [Stage 9:=================================>                     (71 + 44) / 115][Stage 9:====================================>                  (77 + 38) / 115][Stage 9:===========================================>           (90 + 25) / 115][Stage 9:============================================>          (93 + 22) / 115][Stage 9:==============================================>        (98 + 17) / 115][Stage 9:================================================>     (104 + 11) / 115][Stage 9:======================================================>(113 + 2) / 115][Stage 9:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.702260744 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.749775834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=========================>                            (58 + 64) / 122][Stage 10:==========================>                           (59 + 63) / 122][Stage 10:===========================>                          (63 + 59) / 122][Stage 10:=================================>                    (75 + 47) / 122][Stage 10:===========================================>          (99 + 23) / 122][Stage 10:================================================>    (111 + 11) / 122][Stage 10:====================================================> (118 + 4) / 122]                                                                                [Stage 11:===========================>                          (62 + 61) / 123][Stage 11:============================>                         (65 + 58) / 123][Stage 11:====================================>                 (83 + 40) / 123][Stage 11:===========================================>          (99 + 24) / 123][Stage 11:==============================================>      (109 + 14) / 123][Stage 11:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.980902683 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.637791364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (61 + 60) / 121][Stage 12:===========================>                          (62 + 59) / 121][Stage 12:==================================>                   (78 + 43) / 121][Stage 12:===========================================>          (97 + 24) / 121][Stage 12:====================================================> (118 + 3) / 121]                                                                                [Stage 13:===========================>                          (62 + 60) / 122][Stage 13:============================>                         (64 + 58) / 122][Stage 13:==============================>                       (70 + 52) / 122][Stage 13:=========================================>            (93 + 29) / 122][Stage 13:=============================================>       (105 + 17) / 122][Stage 13:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.601153624 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432855701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (80 + 35) / 115][Stage 14:=======================================>              (85 + 30) / 115][Stage 14:===========================================>          (92 + 23) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:=======================================>              (84 + 32) / 116][Stage 15:============================================>         (95 + 21) / 116][Stage 15:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 3.017729794 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.577536608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:===========================>                          (62 + 59) / 121][Stage 16:==============================>                       (68 + 53) / 121][Stage 16:=====================================>                (84 + 37) / 121][Stage 16:=================================================>    (112 + 9) / 121][Stage 16:=====================================================>(120 + 1) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:============================>                         (65 + 57) / 122][Stage 17:==================================>                   (77 + 45) / 122][Stage 17:=========================================>            (94 + 28) / 122][Stage 17:==================================================>   (113 + 9) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.699652997 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562718819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==========================>                           (60 + 62) / 122][Stage 18:===========================>                          (62 + 60) / 122][Stage 18:================================>                     (73 + 49) / 122][Stage 18:======================================>               (86 + 36) / 122][Stage 18:==============================================>      (106 + 16) / 122][Stage 18:==================================================>   (115 + 7) / 122][Stage 18:=====================================================>(121 + 1) / 122]                                                                                [Stage 19:===========================>                          (62 + 61) / 123][Stage 19:=================================>                    (77 + 46) / 123][Stage 19:===========================================>          (98 + 25) / 123][Stage 19:==================================================>   (115 + 8) / 123][Stage 19:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.747874587 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 122 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 122 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.545872695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (62 + 59) / 121][Stage 20:===============================>                      (70 + 51) / 121][Stage 20:====================================>                 (81 + 40) / 121][Stage 20:=============================================>       (104 + 17) / 121][Stage 20:==================================================>   (114 + 7) / 121][Stage 20:=====================================================>(120 + 1) / 121]                                                                                [Stage 21:===========================>                          (62 + 60) / 122][Stage 21:===============================>                      (71 + 51) / 122][Stage 21:======================================>               (88 + 34) / 122][Stage 21:===============================================>     (110 + 12) / 122][Stage 21:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.88879303 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445936298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=================================>                    (71 + 43) / 114][Stage 22:=======================================>              (83 + 31) / 114][Stage 22:=============================================>        (96 + 18) / 114][Stage 22:================================================>    (104 + 10) / 114][Stage 22:====================================================> (110 + 4) / 114][Stage 22:=====================================================>(112 + 2) / 114]                                                                                [Stage 23:=====================================>                (80 + 35) / 115][Stage 23:=========================================>            (88 + 27) / 115][Stage 23:===========================================>          (92 + 23) / 115][Stage 23:===============================================>     (102 + 13) / 115][Stage 23:====================================================> (111 + 4) / 115][Stage 23:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 4.0264536 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513147443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (61 + 61) / 122][Stage 24:=============================>                        (67 + 55) / 122][Stage 24:=====================================>                (84 + 38) / 122][Stage 24:============================================>        (103 + 19) / 122][Stage 24:=====================================================>(120 + 2) / 122]                                                                                [Stage 25:============================>                         (65 + 58) / 123][Stage 25:==================================>                   (79 + 44) / 123][Stage 25:========================================>             (93 + 30) / 123][Stage 25:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.323235228 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409481653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:======================================>               (83 + 32) / 115][Stage 26:==============================================>      (100 + 15) / 115][Stage 26:==================================================>   (107 + 8) / 115][Stage 26:===================================================>  (109 + 6) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:=====================================>                (81 + 35) / 116][Stage 27:=========================================>            (90 + 26) / 116][Stage 27:===============================================>     (103 + 13) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.917795972 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404434544 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (81 + 34) / 115][Stage 28:===========================================>          (92 + 23) / 115][Stage 28:==================================================>   (108 + 7) / 115][Stage 28:=====================================================>(113 + 2) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:======================================>               (82 + 34) / 116][Stage 29:==========================================>           (92 + 24) / 116][Stage 29:===================================================>  (110 + 6) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.934586703 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505737421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (61 + 60) / 121][Stage 30:============================>                         (64 + 57) / 121][Stage 30:===================================>                  (79 + 42) / 121][Stage 30:==========================================>           (96 + 25) / 121][Stage 30:=================================================>    (112 + 9) / 121][Stage 30:=====================================================>(120 + 1) / 121]                                                                                [Stage 31:===========================>                          (62 + 60) / 122][Stage 31:============================>                         (64 + 58) / 122][Stage 31:=====================================>                (84 + 38) / 122][Stage 31:===============================================>     (109 + 13) / 122][Stage 31:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.314117363 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535546242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (61 + 60) / 121][Stage 32:=============================>                        (67 + 54) / 121][Stage 32:=======================================>              (88 + 33) / 121][Stage 32:==================================================>   (113 + 8) / 121][Stage 32:=====================================================>(120 + 1) / 121]                                                                                [Stage 33:===========================>                          (63 + 59) / 122][Stage 33:===============================>                      (72 + 50) / 122][Stage 33:=======================================>              (90 + 32) / 122][Stage 33:===============================================>     (109 + 13) / 122][Stage 33:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.365968504 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488721796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (71 + 46) / 117][Stage 34:==================================>                   (75 + 42) / 117][Stage 34:=========================================>            (89 + 28) / 117][Stage 34:===============================================>     (104 + 13) / 117][Stage 34:====================================================> (114 + 3) / 117]                                                                                [Stage 35:=================================>                    (73 + 45) / 118][Stage 35:=====================================>                (83 + 35) / 118][Stage 35:==============================================>      (104 + 14) / 118][Stage 35:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.208421748 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.59652338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==============================>                       (66 + 49) / 115][Stage 36:=================================>                    (72 + 43) / 115][Stage 36:=======================================>              (85 + 30) / 115][Stage 36:=============================================>        (96 + 19) / 115][Stage 36:================================================>    (105 + 10) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:===============================>                      (68 + 48) / 116][Stage 37:=====================================>                (80 + 36) / 116][Stage 37:=========================================>            (90 + 26) / 116][Stage 37:=============================================>        (97 + 19) / 116][Stage 37:==============================================>      (102 + 14) / 116][Stage 37:==================================================>   (108 + 8) / 116][Stage 37:====================================================> (113 + 3) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.824797715 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437895541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===================================>                  (74 + 40) / 114][Stage 38:=========================================>            (88 + 26) / 114][Stage 38:===============================================>     (102 + 12) / 114][Stage 38:===============================================>     (103 + 11) / 114][Stage 38:===================================================>  (109 + 5) / 114]                                                                                [Stage 39:=====================================>                (80 + 35) / 115][Stage 39:==============================================>      (100 + 15) / 115][Stage 39:===============================================>     (103 + 12) / 115][Stage 39:==================================================>   (107 + 8) / 115][Stage 39:==================================================>   (108 + 7) / 115][Stage 39:===================================================>  (110 + 5) / 115][Stage 39:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.720543871 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:====================================>                 (76 + 38) / 114][Stage 40:=========================================>            (88 + 26) / 114][Stage 40:==============================================>       (99 + 15) / 114][Stage 40:===================================================>  (108 + 6) / 114][Stage 40:===================================================>  (109 + 5) / 114][Stage 40:====================================================> (111 + 3) / 114][Stage 40:=====================================================>(112 + 2) / 114][Stage 40:=====================================================>(113 + 1) / 114]                                                                                [Stage 41:======================================>               (81 + 34) / 115][Stage 41:==============================================>       (99 + 16) / 115][Stage 41:==================================================>   (107 + 8) / 115][Stage 41:===================================================>  (110 + 5) / 115][Stage 41:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.966124145 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 40 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 40 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459369259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (80 + 34) / 114][Stage 42:===========================================>          (92 + 22) / 114][Stage 42:===============================================>     (103 + 11) / 114][Stage 42:===================================================>  (108 + 6) / 114][Stage 42:===================================================>  (109 + 5) / 114][Stage 42:=====================================================>(112 + 2) / 114]                                                                                [Stage 43:=====================================>                (80 + 35) / 115][Stage 43:==========================================>           (90 + 25) / 115][Stage 43:==============================================>      (100 + 15) / 115][Stage 43:==================================================>   (107 + 8) / 115][Stage 43:=====================================================>(113 + 2) / 115][Stage 43:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.021234923 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445375668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (71 + 46) / 117][Stage 44:==================================>                   (74 + 43) / 117][Stage 44:======================================>               (84 + 33) / 117][Stage 44:===============================================>     (105 + 12) / 117][Stage 44:=====================================================>(115 + 2) / 117]                                                                                [Stage 45:=================================>                    (73 + 45) / 118][Stage 45:===================================>                  (78 + 40) / 118][Stage 45:===========================================>          (96 + 22) / 118][Stage 45:===================================================>  (112 + 6) / 118][Stage 45:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.440801213 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381922436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=======================================>              (85 + 30) / 115][Stage 46:=============================================>        (96 + 19) / 115][Stage 46:=====================================================>(113 + 2) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:========================================>             (86 + 30) / 116][Stage 47:==============================================>      (102 + 14) / 116][Stage 47:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.757649125 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448797283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:==============================>                       (64 + 49) / 113][Stage 48:====================================>                 (76 + 37) / 113][Stage 48:============================================>         (93 + 20) / 113][Stage 48:==================================================>   (105 + 8) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:============================>                         (60 + 54) / 114][Stage 49:==============================>                       (65 + 49) / 114][Stage 49:========================================>             (86 + 28) / 114][Stage 49:===============================================>     (102 + 12) / 114][Stage 49:=====================================================>(112 + 2) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.482434441 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (59 + 54) / 113][Stage 50:===============================>                      (66 + 47) / 113][Stage 50:========================================>             (84 + 29) / 113][Stage 50:==================================================>   (106 + 7) / 113][Stage 50:=====================================================>(111 + 2) / 113]                                                                                [Stage 51:============================>                         (60 + 54) / 114][Stage 51:===============================>                      (67 + 47) / 114][Stage 51:====================================>                 (76 + 38) / 114][Stage 51:=============================================>        (96 + 18) / 114][Stage 51:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.10498504 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40559675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (71 + 46) / 117][Stage 52:==================================>                   (75 + 42) / 117][Stage 52:=======================================>              (86 + 31) / 117][Stage 52:==============================================>      (102 + 15) / 117][Stage 52:====================================================> (113 + 4) / 117][Stage 52:=====================================================>(116 + 1) / 117]                                                                                [Stage 53:================================>                     (72 + 46) / 118][Stage 53:=================================>                    (74 + 44) / 118][Stage 53:=========================================>            (90 + 28) / 118][Stage 53:=================================================>    (109 + 9) / 118][Stage 53:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.228970078 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48108378 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (61 + 60) / 121][Stage 54:==============================>                       (69 + 52) / 121][Stage 54:=========================================>            (93 + 28) / 121][Stage 54:===============================================>     (109 + 12) / 121][Stage 54:=====================================================>(119 + 2) / 121]                                                                                [Stage 55:===========================>                          (62 + 60) / 122][Stage 55:==============================>                       (69 + 53) / 122][Stage 55:===================================>                  (81 + 41) / 122][Stage 55:============================================>        (102 + 20) / 122][Stage 55:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.121496138 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461972299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:============================>                         (59 + 54) / 113][Stage 56:==================================>                   (72 + 41) / 113][Stage 56:===========================================>          (90 + 23) / 113][Stage 56:===================================================>  (107 + 6) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:============================>                         (60 + 54) / 114][Stage 57:==================================>                   (73 + 41) / 114][Stage 57:============================================>         (93 + 21) / 114][Stage 57:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.310304967 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453502777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==========================>                           (60 + 62) / 122][Stage 58:==============================>                       (70 + 52) / 122][Stage 58:====================================>                 (83 + 39) / 122][Stage 58:===============================================>     (109 + 13) / 122]                                                                                [Stage 59:===========================>                          (63 + 60) / 123][Stage 59:================================>                     (73 + 50) / 123][Stage 59:=====================================>                (86 + 37) / 123][Stage 59:============================================>        (104 + 19) / 123][Stage 59:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.27135479 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401648041 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:====================================>                 (77 + 37) / 114][Stage 60:===========================================>          (92 + 22) / 114][Stage 60:================================================>    (104 + 10) / 114][Stage 60:===================================================>  (109 + 5) / 114][Stage 60:=====================================================>(112 + 2) / 114]                                                                                [Stage 61:===================================>                  (75 + 40) / 115][Stage 61:===========================================>          (92 + 23) / 115][Stage 61:=================================================>    (106 + 9) / 115][Stage 61:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.237711083 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461524363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (61 + 60) / 121][Stage 62:=============================>                        (66 + 55) / 121][Stage 62:=====================================>                (84 + 37) / 121][Stage 62:===========================================>         (100 + 21) / 121][Stage 62:===================================================>  (116 + 5) / 121]                                                                                [Stage 63:===========================>                          (62 + 60) / 122][Stage 63:================================>                     (73 + 49) / 122][Stage 63:==========================================>           (95 + 27) / 122][Stage 63:===============================================>     (109 + 13) / 122][Stage 63:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.370542464 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405907394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==============================>                       (66 + 49) / 115][Stage 64:=================================>                    (72 + 43) / 115][Stage 64:========================================>             (87 + 28) / 115][Stage 64:=============================================>        (97 + 18) / 115][Stage 64:================================================>    (105 + 10) / 115][Stage 64:==================================================>   (108 + 7) / 115][Stage 64:===================================================>  (109 + 6) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:=================================>                    (73 + 43) / 116][Stage 65:=======================================>              (85 + 31) / 116][Stage 65:===========================================>          (94 + 22) / 116][Stage 65:==============================================>      (102 + 14) / 116][Stage 65:====================================================> (112 + 4) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.916500486 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41812555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:====================================>                 (78 + 36) / 114][Stage 66:===========================================>          (91 + 23) / 114][Stage 66:==============================================>       (99 + 15) / 114][Stage 66:==================================================>   (107 + 7) / 114][Stage 66:=====================================================>(112 + 2) / 114]                                                                                [Stage 67:=========================================>            (88 + 27) / 115][Stage 67:=============================================>        (96 + 19) / 115][Stage 67:===============================================>     (103 + 12) / 115][Stage 67:===================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.038036396 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471537426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (61 + 61) / 122][Stage 68:===========================>                          (63 + 59) / 122][Stage 68:=================================>                    (76 + 46) / 122][Stage 68:===========================================>          (99 + 23) / 122][Stage 68:====================================================> (119 + 3) / 122]                                                                                [Stage 69:==========================>                           (61 + 62) / 123][Stage 69:============================>                         (66 + 57) / 123][Stage 69:====================================>                 (84 + 39) / 123][Stage 69:============================================>        (104 + 19) / 123][Stage 69:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.003572168 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355522415 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (82 + 33) / 115][Stage 70:============================================>         (95 + 20) / 115][Stage 70:==================================================>   (108 + 7) / 115][Stage 70:=====================================================>(113 + 2) / 115]                                                                                [Stage 71:========================================>             (87 + 29) / 116][Stage 71:===============================================>     (104 + 12) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.649203354 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454069481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 61) / 122][Stage 72:============================>                         (65 + 57) / 122][Stage 72:==================================>                   (77 + 45) / 122][Stage 72:===========================================>         (101 + 21) / 122][Stage 72:===================================================>  (117 + 5) / 122][Stage 72:=====================================================>(121 + 1) / 122]                                                                                [Stage 73:==========================>                           (61 + 62) / 123][Stage 73:============================>                         (66 + 57) / 123][Stage 73:========================================>             (93 + 30) / 123][Stage 73:==================================================>   (115 + 8) / 123][Stage 73:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.393380186 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408944371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===============================>                      (68 + 47) / 115][Stage 74:===================================>                  (75 + 40) / 115][Stage 74:========================================>             (87 + 28) / 115][Stage 74:===============================================>     (102 + 13) / 115][Stage 74:=====================================================>(113 + 2) / 115][Stage 74:=====================================================>(114 + 1) / 115]                                                                                [Stage 75:=================================>                    (71 + 45) / 116][Stage 75:=====================================>                (80 + 36) / 116][Stage 75:==========================================>           (92 + 24) / 116][Stage 75:===============================================>     (104 + 12) / 116][Stage 75:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.356240786 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39969775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (71 + 43) / 114][Stage 76:=======================================>              (84 + 30) / 114][Stage 76:============================================>         (94 + 20) / 114][Stage 76:===============================================>     (103 + 11) / 114][Stage 76:===================================================>  (108 + 6) / 114][Stage 76:====================================================> (110 + 4) / 114]                                                                                [Stage 77:====================================>                 (77 + 38) / 115][Stage 77:===========================================>          (93 + 22) / 115][Stage 77:===============================================>     (103 + 12) / 115][Stage 77:==================================================>   (108 + 7) / 115][Stage 77:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.37179062 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393909382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===============================>                      (68 + 47) / 115][Stage 78:=======================================>              (85 + 30) / 115][Stage 78:==============================================>       (98 + 17) / 115][Stage 78:=================================================>    (106 + 9) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:=================================>                    (73 + 43) / 116][Stage 79:========================================>             (87 + 29) / 116][Stage 79:=============================================>        (98 + 18) / 116][Stage 79:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.511857609 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446550099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (61 + 60) / 121][Stage 80:============================>                         (63 + 58) / 121][Stage 80:==================================>                   (77 + 44) / 121][Stage 80:=============================================>       (103 + 18) / 121][Stage 80:=====================================================>(119 + 2) / 121]                                                                                [Stage 81:===========================>                          (62 + 60) / 122][Stage 81:=============================>                        (67 + 55) / 122][Stage 81:======================================>               (88 + 34) / 122][Stage 81:===========================================>          (99 + 23) / 122][Stage 81:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.115411317 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382005328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (71 + 46) / 117][Stage 82:=================================>                    (72 + 45) / 117][Stage 82:=====================================>                (81 + 36) / 117][Stage 82:=============================================>       (100 + 17) / 117][Stage 82:===================================================>  (112 + 5) / 117]                                                                                [Stage 83:================================>                     (72 + 46) / 118][Stage 83:==================================>                   (75 + 43) / 118][Stage 83:=========================================>            (90 + 28) / 118][Stage 83:==================================================>   (110 + 8) / 118][Stage 83:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.098198696 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408170976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=============================>                        (61 + 52) / 113][Stage 84:================================>                     (68 + 45) / 113][Stage 84:=======================================>              (83 + 30) / 113][Stage 84:=================================================>    (104 + 9) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:============================>                         (60 + 54) / 114][Stage 85:================================>                     (69 + 45) / 114][Stage 85:=======================================>              (83 + 31) / 114][Stage 85:==================================================>   (107 + 7) / 114][Stage 85:=====================================================>(112 + 2) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.412176322 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 208 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394548884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (70 + 44) / 114][Stage 86:======================================>               (81 + 33) / 114][Stage 86:============================================>         (93 + 21) / 114][Stage 86:=================================================>    (105 + 9) / 114][Stage 86:====================================================> (111 + 3) / 114]                                                                                [Stage 87:====================================>                 (78 + 37) / 115][Stage 87:===========================================>          (92 + 23) / 115][Stage 87:================================================>    (105 + 10) / 115][Stage 87:====================================================> (112 + 3) / 115][Stage 87:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.097813206 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394957243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:================================>                     (69 + 46) / 115][Stage 88:======================================>               (82 + 33) / 115][Stage 88:===========================================>          (93 + 22) / 115][Stage 88:==============================================>      (100 + 15) / 115][Stage 88:=====================================================>(113 + 2) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:===============================>                      (68 + 48) / 116][Stage 89:===================================>                  (76 + 40) / 116][Stage 89:=======================================>              (85 + 31) / 116][Stage 89:===============================================>     (103 + 13) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.283027747 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406442842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=============================>                        (62 + 51) / 113][Stage 90:================================>                     (69 + 44) / 113][Stage 90:======================================>               (80 + 33) / 113][Stage 90:==============================================>      (100 + 13) / 113]                                                                                [Stage 91:============================>                         (61 + 53) / 114][Stage 91:================================>                     (69 + 45) / 114][Stage 91:======================================>               (82 + 32) / 114][Stage 91:==============================================>       (99 + 15) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.301075837 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38676018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:====================================>                 (78 + 36) / 114][Stage 92:=========================================>            (87 + 27) / 114][Stage 92:================================================>    (104 + 10) / 114][Stage 92:==================================================>   (107 + 7) / 114][Stage 92:=====================================================>(113 + 1) / 114]                                                                                [Stage 93:==================================>                   (74 + 41) / 115][Stage 93:========================================>             (86 + 29) / 115][Stage 93:===============================================>     (102 + 13) / 115][Stage 93:=================================================>    (106 + 9) / 115][Stage 93:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.029061796 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416571642 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:============================>                         (63 + 58) / 121][Stage 94:================================>                     (73 + 48) / 121][Stage 94:===========================================>          (98 + 23) / 121][Stage 94:================================================>    (110 + 11) / 121]                                                                                [Stage 95:===========================>                          (62 + 60) / 122][Stage 95:=================================>                    (76 + 46) / 122][Stage 95:============================================>        (103 + 19) / 122][Stage 95:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.024925669 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:============================>                         (63 + 58) / 121][Stage 96:=================================>                    (76 + 45) / 121][Stage 96:==========================================>           (96 + 25) / 121][Stage 96:===================================================>  (116 + 5) / 121]                                                                                [Stage 97:============================>                         (64 + 58) / 122][Stage 97:===============================>                      (72 + 50) / 122][Stage 97:============================================>        (102 + 20) / 122][Stage 97:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.033983436 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394458428 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (69 + 46) / 115][Stage 98:====================================>                 (77 + 38) / 115][Stage 98:========================================>             (87 + 28) / 115][Stage 98:===============================================>     (103 + 12) / 115][Stage 98:=====================================================>(113 + 2) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:===================================>                  (76 + 40) / 116][Stage 99:=========================================>            (90 + 26) / 116][Stage 99:==============================================>      (101 + 15) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.219850656 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343064349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:====================================>                (79 + 36) / 115][Stage 100:=======================================>             (86 + 29) / 115][Stage 100:=============================================>      (101 + 14) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:========================================>            (89 + 27) / 116][Stage 101:=============================================>      (102 + 14) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.627882179 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=======================================>             (85 + 30) / 115][Stage 102:==============================================>     (102 + 13) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:=====================================>               (83 + 33) / 116][Stage 103:===========================================>         (95 + 21) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.512173489 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344973326 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=====================================>               (82 + 33) / 115][Stage 104:=========================================>           (91 + 24) / 115][Stage 104:===============================================>    (104 + 11) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:========================================>            (88 + 28) / 116][Stage 105:=============================================>      (102 + 14) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.536814444 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=======================================>             (85 + 30) / 115][Stage 106:==============================================>     (102 + 13) / 115][Stage 106:===================================================> (111 + 4) / 115]                                                                                [Stage 107:======================================>              (84 + 32) / 116][Stage 107:=============================================>      (101 + 15) / 116][Stage 107:===================================================> (112 + 4) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.633799519 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (81 + 34) / 115][Stage 108:===========================================>         (94 + 21) / 115][Stage 108:==================================================>  (110 + 5) / 115]                                                                                [Stage 109:=======================================>             (86 + 30) / 116][Stage 109:===========================================>         (96 + 20) / 116][Stage 109:================================================>    (107 + 9) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.663507884 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380876058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (73 + 44) / 117][Stage 110:======================================>              (85 + 32) / 117][Stage 110:================================================>    (108 + 9) / 117][Stage 110:==================================================>  (112 + 5) / 117]                                                                                [Stage 111:================================>                    (72 + 46) / 118][Stage 111:=================================>                   (74 + 44) / 118][Stage 111:========================================>            (90 + 28) / 118][Stage 111:============================================>        (99 + 19) / 118][Stage 111:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.970881328 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368094943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:====================================>                (79 + 35) / 114][Stage 112:=========================================>           (89 + 25) / 114][Stage 112:=============================================>      (100 + 14) / 114][Stage 112:===================================================> (111 + 3) / 114]                                                                                [Stage 113:==================================>                  (75 + 40) / 115][Stage 113:========================================>            (87 + 28) / 115][Stage 113:===========================================>         (95 + 20) / 115][Stage 113:===============================================>    (104 + 11) / 115][Stage 113:===================================================> (111 + 4) / 115][Stage 113:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.014667748 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387385366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (71 + 46) / 117][Stage 114:=================================>                   (74 + 43) / 117][Stage 114:======================================>              (86 + 31) / 117][Stage 114:=============================================>      (103 + 14) / 117][Stage 114:===================================================> (114 + 3) / 117]                                                                                [Stage 115:================================>                    (72 + 46) / 118][Stage 115:==================================>                  (77 + 41) / 118][Stage 115:========================================>            (91 + 27) / 118][Stage 115:=================================================>   (110 + 8) / 118][Stage 115:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.033547355 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 92 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364071431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=======================================>             (85 + 29) / 114][Stage 116:=============================================>       (97 + 17) / 114][Stage 116:==============================================>     (103 + 11) / 114][Stage 116:===================================================> (110 + 4) / 114]                                                                                [Stage 117:======================================>              (83 + 32) / 115][Stage 117:=============================================>      (101 + 14) / 115][Stage 117:==================================================>  (109 + 6) / 115][Stage 117:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.941580699 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424562375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (62 + 59) / 121][Stage 118:================================>                    (75 + 46) / 121][Stage 118:=========================================>           (95 + 26) / 121][Stage 118:==================================================>  (115 + 6) / 121]                                                                                [Stage 119:===========================>                         (63 + 59) / 122][Stage 119:=================================>                   (77 + 45) / 122][Stage 119:==========================================>          (98 + 24) / 122][Stage 119:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.187405346 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45286998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 60) / 121][Stage 120:============================>                        (66 + 55) / 121][Stage 120:===================================>                 (81 + 40) / 121][Stage 120:===========================================>        (101 + 20) / 121][Stage 120:===================================================> (117 + 4) / 121]                                                                                [Stage 121:=============================>                       (67 + 55) / 122][Stage 121:==================================>                  (79 + 43) / 122][Stage 121:===========================================>        (102 + 20) / 122][Stage 121:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.16187992 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 241 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 241 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (63 + 58) / 121][Stage 122:===============================>                     (72 + 49) / 121][Stage 122:======================================>              (87 + 34) / 121][Stage 122:==============================================>     (108 + 13) / 121][Stage 122:====================================================>(120 + 1) / 121]                                                                                [Stage 123:==========================>                          (62 + 60) / 122][Stage 123:==============================>                      (70 + 52) / 122][Stage 123:=======================================>             (91 + 31) / 122][Stage 123:===============================================>    (111 + 11) / 122][Stage 123:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.221334189 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381375561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:=================================>                   (74 + 43) / 117][Stage 124:======================================>              (85 + 32) / 117][Stage 124:============================================>        (99 + 18) / 117][Stage 124:===================================================> (113 + 4) / 117]                                                                                [Stage 125:================================>                    (73 + 45) / 118][Stage 125:===================================>                 (80 + 38) / 118][Stage 125:=========================================>           (92 + 26) / 118][Stage 125:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.16687092 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 52 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 52 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375994411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (67 + 48) / 115][Stage 126:====================================>                (79 + 36) / 115][Stage 126:==========================================>          (93 + 22) / 115][Stage 126:================================================>    (106 + 9) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:==============================>                      (67 + 49) / 116][Stage 127:================================>                    (72 + 44) / 116][Stage 127:=======================================>             (86 + 30) / 116][Stage 127:============================================>        (98 + 18) / 116][Stage 127:==================================================>  (110 + 6) / 116][Stage 127:==================================================>  (111 + 5) / 116][Stage 127:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.98049379 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 119 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:================================>                    (71 + 44) / 115][Stage 128:======================================>              (84 + 31) / 115][Stage 128:==========================================>          (92 + 23) / 115][Stage 128:=================================================>   (107 + 8) / 115][Stage 128:====================================================>(113 + 2) / 115]                                                                                [Stage 129:==================================>                  (75 + 41) / 116][Stage 129:=========================================>           (90 + 26) / 116][Stage 129:=============================================>      (101 + 15) / 116][Stage 129:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.229329069 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 244 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 244 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369323026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===============================>                     (69 + 46) / 115][Stage 130:====================================>                (80 + 35) / 115][Stage 130:=========================================>           (90 + 25) / 115][Stage 130:==============================================>     (102 + 13) / 115][Stage 130:===================================================> (111 + 4) / 115]                                                                                [Stage 131:=================================>                   (74 + 42) / 116][Stage 131:======================================>              (84 + 32) / 116][Stage 131:=========================================>           (90 + 26) / 116][Stage 131:==============================================>     (104 + 12) / 116][Stage 131:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.254446446 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 117 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502344429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===================================>                 (77 + 37) / 114][Stage 132:=======================================>             (86 + 28) / 114][Stage 132:=============================================>      (100 + 14) / 114][Stage 132:================================================>    (105 + 9) / 114][Stage 132:==================================================>  (109 + 5) / 114]                                                                                [Stage 133:=====================================>               (81 + 34) / 115][Stage 133:==========================================>          (93 + 22) / 115][Stage 133:================================================>    (106 + 9) / 115][Stage 133:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.040794124 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40353638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (63 + 59) / 122][Stage 134:==============================>                      (70 + 52) / 122][Stage 134:=======================================>             (92 + 30) / 122][Stage 134:===================================================> (119 + 3) / 122]                                                                                [Stage 135:===========================>                         (64 + 59) / 123][Stage 135:=================================>                   (78 + 45) / 123][Stage 135:=============================================>      (107 + 16) / 123][Stage 135:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 2.99319788 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 61) / 122][Stage 136:===========================>                         (63 + 59) / 122][Stage 136:================================>                    (74 + 48) / 122][Stage 136:==========================================>          (97 + 25) / 122][Stage 136:===================================================> (118 + 4) / 122]                                                                                [Stage 137:==========================>                          (62 + 61) / 123][Stage 137:============================>                        (65 + 58) / 123][Stage 137:======================================>              (90 + 33) / 123][Stage 137:============================================>       (105 + 18) / 123][Stage 137:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.12552167 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357337951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==================================>                  (74 + 40) / 114][Stage 138:=======================================>             (86 + 28) / 114][Stage 138:=============================================>       (98 + 16) / 114][Stage 138:=================================================>   (106 + 8) / 114][Stage 138:===================================================> (110 + 4) / 114][Stage 138:====================================================>(113 + 1) / 114]                                                                                [Stage 139:===================================>                 (78 + 37) / 115][Stage 139:==========================================>          (93 + 22) / 115][Stage 139:=============================================>      (100 + 15) / 115][Stage 139:=================================================>   (108 + 7) / 115][Stage 139:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.191580387 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373154401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (67 + 48) / 115][Stage 140:===================================>                 (77 + 38) / 115][Stage 140:=======================================>             (86 + 29) / 115][Stage 140:=============================================>      (100 + 15) / 115][Stage 140:=================================================>   (108 + 7) / 115]                                                                                [Stage 141:================================>                    (71 + 45) / 116][Stage 141:====================================>                (79 + 37) / 116][Stage 141:==========================================>          (93 + 23) / 116][Stage 141:=================================================>   (109 + 7) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.476674263 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37407326 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===============================>                     (68 + 47) / 115][Stage 142:====================================>                (79 + 36) / 115][Stage 142:==========================================>          (92 + 23) / 115][Stage 142:=============================================>      (100 + 15) / 115][Stage 142:==================================================>  (110 + 5) / 115]                                                                                [Stage 143:===============================>                     (69 + 47) / 116][Stage 143:=====================================>               (83 + 33) / 116][Stage 143:==========================================>          (93 + 23) / 116][Stage 143:===============================================>    (105 + 11) / 116][Stage 143:==================================================>  (111 + 5) / 116][Stage 143:===================================================> (112 + 4) / 116][Stage 143:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.716401267 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377374914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===============================>                     (69 + 46) / 115][Stage 144:===================================>                 (77 + 38) / 115][Stage 144:=========================================>           (91 + 24) / 115][Stage 144:==============================================>     (103 + 12) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:==================================>                  (75 + 41) / 116][Stage 145:=====================================>               (81 + 35) / 116][Stage 145:============================================>        (98 + 18) / 116][Stage 145:==============================================>     (104 + 12) / 116][Stage 145:==================================================>  (110 + 6) / 116][Stage 145:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.475688514 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371093147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===================================>                 (76 + 38) / 114][Stage 146:==========================================>          (91 + 23) / 114][Stage 146:==============================================>     (103 + 11) / 114][Stage 146:===================================================> (111 + 3) / 114]                                                                                [Stage 147:====================================>                (80 + 35) / 115][Stage 147:=========================================>           (89 + 26) / 115][Stage 147:=============================================>      (101 + 14) / 115][Stage 147:=================================================>   (107 + 8) / 115][Stage 147:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.62242366 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414589744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (61 + 61) / 122][Stage 148:============================>                        (65 + 57) / 122][Stage 148:====================================>                (84 + 38) / 122][Stage 148:============================================>       (104 + 18) / 122][Stage 148:==================================================>  (117 + 5) / 122][Stage 148:===================================================> (118 + 4) / 122]                                                                                [Stage 149:===========================>                         (63 + 60) / 123][Stage 149:=============================>                       (68 + 55) / 123][Stage 149:=====================================>               (88 + 35) / 123][Stage 149:===================================================> (119 + 4) / 123][Stage 149:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.913230489 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390072191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (59 + 54) / 113][Stage 150:=============================>                       (63 + 50) / 113][Stage 150:=====================================>               (79 + 34) / 113][Stage 150:==============================================>     (102 + 11) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:=============================>                       (63 + 51) / 114][Stage 151:==================================>                  (75 + 39) / 114][Stage 151:=======================================>             (86 + 28) / 114][Stage 151:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.209678684 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406439421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (62 + 60) / 122][Stage 152:=================================>                   (76 + 46) / 122][Stage 152:========================================>            (94 + 28) / 122][Stage 152:=================================================>   (113 + 9) / 122]                                                                                [Stage 153:============================>                        (66 + 57) / 123][Stage 153:================================>                    (75 + 48) / 123][Stage 153:========================================>            (93 + 30) / 123][Stage 153:===============================================>    (113 + 10) / 123]                                                                                Time elapsed: 2.99518256 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33453412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:======================================>              (84 + 31) / 115][Stage 154:=============================================>       (98 + 17) / 115][Stage 154:===================================================> (112 + 3) / 115]                                                                                [Stage 155:=====================================>               (82 + 34) / 116][Stage 155:========================================>            (89 + 27) / 116][Stage 155:==============================================>     (103 + 13) / 116][Stage 155:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.816168248 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 185 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367006437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==================================>                  (75 + 39) / 114][Stage 156:========================================>            (88 + 26) / 114][Stage 156:==============================================>     (102 + 12) / 114][Stage 156:==================================================>  (109 + 5) / 114][Stage 156:===================================================> (111 + 3) / 114]                                                                                [Stage 157:======================================>              (83 + 32) / 115][Stage 157:============================================>        (96 + 19) / 115][Stage 157:=================================================>   (107 + 8) / 115][Stage 157:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.151180031 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394315046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (61 + 60) / 121][Stage 158:=============================>                       (68 + 53) / 121][Stage 158:======================================>              (89 + 32) / 121][Stage 158:==============================================>     (109 + 12) / 121]                                                                                [Stage 159:============================>                        (66 + 56) / 122][Stage 159:================================>                    (75 + 47) / 122][Stage 159:=========================================>           (96 + 26) / 122][Stage 159:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.375015588 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 209 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394718646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (59 + 54) / 113][Stage 160:============================>                        (61 + 52) / 113][Stage 160:===================================>                 (76 + 37) / 113][Stage 160:=============================================>       (96 + 17) / 113][Stage 160:==================================================>  (107 + 6) / 113]                                                                                [Stage 161:============================>                        (62 + 52) / 114][Stage 161:==================================>                  (74 + 40) / 114][Stage 161:=========================================>           (90 + 24) / 114][Stage 161:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.14603621 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363750385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (71 + 46) / 117][Stage 162:===================================>                 (79 + 38) / 117][Stage 162:==========================================>          (93 + 24) / 117][Stage 162:==============================================>     (104 + 13) / 117][Stage 162:====================================================>(116 + 1) / 117]                                                                                [Stage 163:================================>                    (72 + 46) / 118][Stage 163:==================================>                  (76 + 42) / 118][Stage 163:======================================>              (85 + 33) / 118][Stage 163:============================================>       (101 + 17) / 118][Stage 163:====================================================>(116 + 2) / 118][Stage 163:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.328398047 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379580956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (71 + 46) / 117][Stage 164:======================================>              (85 + 32) / 117][Stage 164:===========================================>         (96 + 21) / 117][Stage 164:=================================================>   (110 + 7) / 117]                                                                                [Stage 165:================================>                    (72 + 46) / 118][Stage 165:=====================================>               (84 + 34) / 118][Stage 165:===========================================>         (96 + 22) / 118][Stage 165:================================================>    (109 + 9) / 118][Stage 165:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.121356787 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399950677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:============================>                        (64 + 57) / 121][Stage 166:================================>                    (75 + 46) / 121][Stage 166:==========================================>         (100 + 21) / 121][Stage 166:===================================================> (117 + 4) / 121]                                                                                [Stage 167:============================>                        (66 + 56) / 122][Stage 167:===============================>                     (73 + 49) / 122][Stage 167:=======================================>             (92 + 30) / 122][Stage 167:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.172888513 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240  OR  partitionIndex = 241 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240  OR  partitionIndex = 241 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358607756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:====================================>                (78 + 36) / 114][Stage 168:============================================>        (95 + 19) / 114][Stage 168:================================================>    (105 + 9) / 114][Stage 168:====================================================>(113 + 1) / 114]                                                                                [Stage 169:===================================>                 (76 + 39) / 115][Stage 169:==========================================>          (93 + 22) / 115][Stage 169:===============================================>    (104 + 11) / 115][Stage 169:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.001224985 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376738023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (72 + 42) / 114][Stage 170:=========================================>           (89 + 25) / 114][Stage 170:==============================================>     (102 + 12) / 114][Stage 170:==================================================>  (109 + 5) / 114][Stage 170:====================================================>(113 + 1) / 114]                                                                                [Stage 171:========================================>            (87 + 28) / 115][Stage 171:=============================================>       (99 + 16) / 115][Stage 171:===============================================>    (105 + 10) / 115][Stage 171:==================================================>  (110 + 5) / 115][Stage 171:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.236131702 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349361016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=================================>                   (73 + 41) / 114][Stage 172:=====================================>               (81 + 33) / 114][Stage 172:==============================================>      (99 + 15) / 114][Stage 172:================================================>    (105 + 9) / 114][Stage 172:==================================================>  (108 + 6) / 114]                                                                                [Stage 173:=====================================>               (81 + 34) / 115][Stage 173:==========================================>          (92 + 23) / 115][Stage 173:===============================================>    (105 + 10) / 115][Stage 173:=================================================>   (108 + 7) / 115][Stage 173:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.414144229 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396497486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (62 + 60) / 122][Stage 174:================================>                    (74 + 48) / 122][Stage 174:======================================>              (89 + 33) / 122][Stage 174:=============================================>      (107 + 15) / 122]                                                                                [Stage 175:===========================>                         (63 + 60) / 123][Stage 175:================================>                    (76 + 47) / 123][Stage 175:========================================>            (95 + 28) / 123][Stage 175:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 2.97384747 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 245 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 245 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (61 + 61) / 122][Stage 176:=============================>                       (67 + 55) / 122][Stage 176:==================================>                  (80 + 42) / 122][Stage 176:============================================>       (104 + 18) / 122][Stage 176:===================================================> (118 + 4) / 122]                                                                                [Stage 177:==========================>                          (62 + 61) / 123][Stage 177:============================>                        (65 + 58) / 123][Stage 177:====================================>                (85 + 38) / 123][Stage 177:==============================================>     (110 + 13) / 123][Stage 177:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.172234058 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 252 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 252 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370352317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===============================>                     (68 + 47) / 115][Stage 178:===================================>                 (77 + 38) / 115][Stage 178:========================================>            (88 + 27) / 115][Stage 178:=============================================>       (98 + 17) / 115][Stage 178:==================================================>  (109 + 6) / 115][Stage 178:====================================================>(113 + 2) / 115]                                                                                [Stage 179:===================================>                 (78 + 38) / 116][Stage 179:=========================================>           (90 + 26) / 116][Stage 179:==============================================>     (103 + 13) / 116][Stage 179:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.179875428 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399475662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (62 + 59) / 121][Stage 180:=================================>                   (77 + 44) / 121][Stage 180:========================================>            (92 + 29) / 121][Stage 180:==================================================>  (115 + 6) / 121]                                                                                [Stage 181:==========================>                          (62 + 60) / 122][Stage 181:================================>                    (74 + 48) / 122][Stage 181:===========================================>        (103 + 19) / 122][Stage 181:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.089000805 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37470611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (59 + 54) / 113][Stage 182:=============================>                       (63 + 50) / 113][Stage 182:=================================>                   (72 + 41) / 113][Stage 182:===========================================>         (92 + 21) / 113][Stage 182:==================================================>  (108 + 5) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:===============================>                     (68 + 46) / 114][Stage 183:=======================================>             (85 + 29) / 114][Stage 183:==============================================>     (101 + 13) / 114][Stage 183:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.160268715 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34365571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=======================================>             (85 + 30) / 115][Stage 184:=============================================>      (100 + 15) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:=====================================>               (81 + 35) / 116][Stage 185:=========================================>           (90 + 26) / 116][Stage 185:===============================================>    (105 + 11) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.767484483 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401239421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 62) / 122][Stage 186:============================>                        (66 + 56) / 122][Stage 186:===================================>                 (81 + 41) / 122][Stage 186:===========================================>        (103 + 19) / 122][Stage 186:====================================================>(121 + 1) / 122]                                                                                [Stage 187:============================>                        (66 + 57) / 123][Stage 187:===================================>                 (83 + 40) / 123][Stage 187:==========================================>          (98 + 25) / 123][Stage 187:====================================================>(121 + 2) / 123][Stage 187:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.337866208 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398080427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (63 + 59) / 122][Stage 188:==============================>                      (71 + 51) / 122][Stage 188:=======================================>             (90 + 32) / 122][Stage 188:=================================================>   (115 + 7) / 122]                                                                                [Stage 189:===========================>                         (64 + 59) / 123][Stage 189:===================================>                 (83 + 40) / 123][Stage 189:===========================================>        (104 + 19) / 123][Stage 189:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.23387781 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353352833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==================================>                  (74 + 40) / 114][Stage 190:=======================================>             (85 + 29) / 114][Stage 190:=============================================>       (97 + 17) / 114][Stage 190:==================================================>  (109 + 5) / 114]                                                                                [Stage 191:=====================================>               (82 + 33) / 115][Stage 191:=========================================>           (91 + 24) / 115][Stage 191:=============================================>       (99 + 16) / 115][Stage 191:===================================================> (111 + 4) / 115][Stage 191:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.780593523 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41313902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:=============================>                       (62 + 51) / 113][Stage 192:===================================>                 (76 + 37) / 113][Stage 192:=============================================>       (97 + 16) / 113][Stage 192:===================================================> (110 + 3) / 113]                                                                                [Stage 193:============================>                        (61 + 53) / 114][Stage 193:==================================>                  (74 + 40) / 114][Stage 193:=========================================>           (90 + 24) / 114][Stage 193:==================================================>  (108 + 6) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.341521137 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338628201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:======================================>              (84 + 31) / 115][Stage 194:============================================>        (97 + 18) / 115][Stage 194:==================================================>  (109 + 6) / 115]                                                                                [Stage 195:======================================>              (84 + 32) / 116][Stage 195:=============================================>       (99 + 17) / 116][Stage 195:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.442913055 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 216 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 216 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367571207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===============================>                     (69 + 46) / 115][Stage 196:=====================================>               (81 + 34) / 115][Stage 196:===========================================>         (94 + 21) / 115][Stage 196:================================================>    (106 + 9) / 115]                                                                                [Stage 197:================================>                    (71 + 45) / 116][Stage 197:========================================>            (89 + 27) / 116][Stage 197:=============================================>      (102 + 14) / 116][Stage 197:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.759025723 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=================================>                   (72 + 43) / 115][Stage 198:=====================================>               (82 + 33) / 115][Stage 198:============================================>        (97 + 18) / 115][Stage 198:=================================================>   (107 + 8) / 115]                                                                                [Stage 199:================================>                    (71 + 45) / 116][Stage 199:=========================================>           (90 + 26) / 116][Stage 199:===============================================>    (105 + 11) / 116][Stage 199:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.953656 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 48 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402556762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (64 + 58) / 122][Stage 200:==================================>                  (79 + 43) / 122][Stage 200:=============================================>      (107 + 15) / 122][Stage 200:===================================================> (118 + 4) / 122]                                                                                [Stage 201:==========================>                          (61 + 62) / 123][Stage 201:============================>                        (67 + 56) / 123][Stage 201:====================================>                (84 + 39) / 123][Stage 201:==========================================>         (101 + 22) / 123][Stage 201:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 2.997938201 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m0.878s
user	11m34.308s
sys	0m37.252s
