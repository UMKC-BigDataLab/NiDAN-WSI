Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 21:22:33 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:22:48 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:22:48 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:22:48 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 21:22:51 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:23:01 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529212250-0684).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.358113343 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 13.455949423 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (46 + 69) / 115][Stage 2:============================>                          (59 + 56) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:================================>                      (68 + 47) / 115][Stage 2:===================================>                   (75 + 40) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:==========================================>            (88 + 27) / 115][Stage 2:===========================================>           (90 + 25) / 115][Stage 2:=============================================>         (96 + 19) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:====================================================>  (110 + 5) / 115]                                                                                [Stage 3:==============================>                        (64 + 52) / 116][Stage 3:================================>                      (69 + 47) / 116][Stage 3:===================================>                   (75 + 41) / 116][Stage 3:=======================================>               (83 + 33) / 116][Stage 3:=========================================>             (87 + 29) / 116][Stage 3:=============================================>         (95 + 21) / 116][Stage 3:=============================================>         (96 + 20) / 116][Stage 3:====================================================>  (110 + 6) / 116]                                                                                Time elapsed: 5.566257187 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.719508789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (58 + 57) / 115][Stage 4:==============================>                        (64 + 51) / 115][Stage 4:===============================>                       (66 + 49) / 115][Stage 4:=================================>                     (71 + 44) / 115][Stage 4:=====================================>                 (78 + 37) / 115][Stage 4:============================================>          (94 + 21) / 115][Stage 4:===============================================>       (99 + 16) / 115][Stage 4:===================================================>   (108 + 7) / 115][Stage 4:=====================================================> (112 + 3) / 115][Stage 4:======================================================>(113 + 2) / 115]                                                                                [Stage 5:===============================>                       (67 + 49) / 116][Stage 5:=====================================>                 (79 + 37) / 116][Stage 5:=======================================>               (83 + 33) / 116][Stage 5:==========================================>            (90 + 26) / 116][Stage 5:==============================================>       (100 + 16) / 116][Stage 5:=================================================>    (106 + 10) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.040568083 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 28  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 28  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.728068472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:====================>                                  (45 + 76) / 121][Stage 6:====================>                                  (46 + 75) / 121][Stage 6:===========================>                           (61 + 60) / 121][Stage 6:================================>                      (71 + 50) / 121][Stage 6:===================================>                   (79 + 42) / 121][Stage 6:=========================================>             (92 + 29) / 121][Stage 6:===================================================>   (113 + 8) / 121]                                                                                [Stage 7:===========================>                           (62 + 60) / 122][Stage 7:============================>                          (64 + 58) / 122][Stage 7:=================================>                     (74 + 48) / 122][Stage 7:======================================>                (86 + 36) / 122][Stage 7:===========================================>           (96 + 26) / 122][Stage 7:===================================================>   (115 + 7) / 122][Stage 7:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.366914669 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.678856307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 61) / 121][Stage 8:============================>                          (62 + 59) / 121][Stage 8:=================================>                     (73 + 48) / 121][Stage 8:========================================>              (90 + 31) / 121][Stage 8:=============================================>        (103 + 18) / 121][Stage 8:====================================================>  (116 + 5) / 121]                                                                                [Stage 9:===========================>                           (62 + 60) / 122][Stage 9:===============================>                       (70 + 52) / 122][Stage 9:=======================================>               (88 + 34) / 122][Stage 9:===============================================>      (108 + 14) / 122][Stage 9:=====================================================> (118 + 4) / 122][Stage 9:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.934759256 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 246 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 246 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.553289846 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===================================>                  (75 + 39) / 114][Stage 10:==========================================>           (89 + 25) / 114][Stage 10:=============================================>        (97 + 17) / 114][Stage 10:===============================================>     (103 + 11) / 114][Stage 10:==================================================>   (107 + 7) / 114][Stage 10:====================================================> (110 + 4) / 114][Stage 10:=====================================================>(112 + 2) / 114]                                                                                [Stage 11:====================================>                 (78 + 37) / 115][Stage 11:==========================================>           (91 + 24) / 115][Stage 11:==============================================>       (99 + 16) / 115][Stage 11:===================================================>  (109 + 6) / 115][Stage 11:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.822433795 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469361705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (79 + 36) / 115][Stage 12:=======================================>              (84 + 31) / 115][Stage 12:===========================================>          (92 + 23) / 115][Stage 12:==============================================>      (101 + 14) / 115][Stage 12:==================================================>   (108 + 7) / 115][Stage 12:====================================================> (111 + 4) / 115]                                                                                [Stage 13:=======================================>              (85 + 31) / 116][Stage 13:==============================================>       (99 + 17) / 116][Stage 13:================================================>    (106 + 10) / 116][Stage 13:==================================================>   (109 + 7) / 116][Stage 13:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.536740254 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52365541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:>                                                       (0 + 0) / 115][Stage 14:=====================================>                (80 + 35) / 115][Stage 14:=========================================>            (89 + 26) / 115][Stage 14:==============================================>      (101 + 14) / 115][Stage 14:===================================================>  (110 + 5) / 115]                                                                                [Stage 15:======================================>               (83 + 33) / 116][Stage 15:============================================>         (96 + 20) / 116][Stage 15:===============================================>     (103 + 13) / 116][Stage 15:==================================================>   (108 + 8) / 116][Stage 15:=====================================================>(114 + 2) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.251548314 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516725707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===============================>                      (67 + 48) / 115][Stage 16:======================================>               (81 + 34) / 115][Stage 16:========================================>             (87 + 28) / 115][Stage 16:============================================>         (95 + 20) / 115][Stage 16:=============================================>        (97 + 18) / 115][Stage 16:===============================================>     (103 + 12) / 115][Stage 16:=====================================================>(113 + 2) / 115]                                                                                [Stage 17:================================>                     (70 + 46) / 116][Stage 17:====================================>                 (79 + 37) / 116][Stage 17:============================================>         (96 + 20) / 116][Stage 17:================================================>    (106 + 10) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.69062718 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.581487617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==========================>                           (59 + 62) / 121][Stage 18:===========================>                          (61 + 60) / 121][Stage 18:===============================>                      (70 + 51) / 121][Stage 18:=====================================>                (84 + 37) / 121][Stage 18:=============================================>       (104 + 17) / 121][Stage 18:===============================================>     (108 + 13) / 121][Stage 18:==================================================>   (113 + 8) / 121][Stage 18:=====================================================>(120 + 1) / 121]                                                                                [Stage 19:==========================>                           (59 + 63) / 122][Stage 19:===========================>                          (63 + 59) / 122][Stage 19:================================>                     (74 + 48) / 122][Stage 19:===========================================>         (100 + 22) / 122][Stage 19:===============================================>     (110 + 12) / 122][Stage 19:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.071808396 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573490992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:====================================>                 (77 + 37) / 114][Stage 20:========================================>             (86 + 28) / 114][Stage 20:=============================================>        (96 + 18) / 114][Stage 20:================================================>    (104 + 10) / 114][Stage 20:=====================================================>(113 + 1) / 114]                                                                                [Stage 21:===================================>                  (75 + 40) / 115][Stage 21:========================================>             (86 + 29) / 115][Stage 21:============================================>         (94 + 21) / 115][Stage 21:================================================>    (105 + 10) / 115][Stage 21:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.199798137 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50604702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (70 + 47) / 117][Stage 22:================================>                     (71 + 46) / 117][Stage 22:====================================>                 (79 + 38) / 117][Stage 22:==========================================>           (92 + 25) / 117][Stage 22:================================================>    (106 + 11) / 117][Stage 22:====================================================> (113 + 4) / 117]                                                                                [Stage 23:================================>                     (72 + 46) / 118][Stage 23:=================================>                    (74 + 44) / 118][Stage 23:==========================================>           (93 + 25) / 118][Stage 23:==============================================>      (103 + 15) / 118][Stage 23:==================================================>   (111 + 7) / 118][Stage 23:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.682203622 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502065857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (71 + 46) / 117][Stage 24:========================================>             (87 + 30) / 117][Stage 24:=============================================>       (100 + 17) / 117][Stage 24:==================================================>   (109 + 8) / 117]                                                                                [Stage 25:================================>                     (72 + 46) / 118][Stage 25:==================================>                   (76 + 42) / 118][Stage 25:=========================================>            (90 + 28) / 118][Stage 25:==================================================>   (110 + 8) / 118][Stage 25:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.296476115 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 241 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 241 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.650810946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (61 + 60) / 121][Stage 26:=============================>                        (65 + 56) / 121][Stage 26:====================================>                 (82 + 39) / 121][Stage 26:===============================================>     (108 + 13) / 121][Stage 26:=====================================================>(119 + 2) / 121][Stage 26:=====================================================>(120 + 1) / 121]                                                                                [Stage 27:===========================>                          (63 + 59) / 122][Stage 27:=================================>                    (76 + 46) / 122][Stage 27:============================================>        (103 + 19) / 122][Stage 27:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.398118059 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46796632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===============================>                      (68 + 47) / 115][Stage 28:=======================================>              (84 + 31) / 115][Stage 28:==============================================>       (98 + 17) / 115][Stage 28:===============================================>     (104 + 11) / 115][Stage 28:===================================================>  (110 + 5) / 115][Stage 28:====================================================> (112 + 3) / 115]                                                                                [Stage 29:====================================>                 (78 + 38) / 116][Stage 29:========================================>             (88 + 28) / 116][Stage 29:==============================================>      (101 + 15) / 116][Stage 29:====================================================> (112 + 4) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.529859858 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449715211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==================================>                   (72 + 42) / 114][Stage 30:=====================================>                (80 + 34) / 114][Stage 30:=============================================>        (95 + 19) / 114][Stage 30:===============================================>     (103 + 11) / 114][Stage 30:==================================================>   (107 + 7) / 114][Stage 30:====================================================> (111 + 3) / 114][Stage 30:=====================================================>(112 + 2) / 114]                                                                                [Stage 31:=====================================>                (80 + 35) / 115][Stage 31:===========================================>          (93 + 22) / 115][Stage 31:==============================================>      (100 + 15) / 115][Stage 31:==================================================>   (107 + 8) / 115][Stage 31:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.71357068 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503402015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===============================>                      (67 + 48) / 115][Stage 32:==================================>                   (74 + 41) / 115][Stage 32:=======================================>              (85 + 30) / 115][Stage 32:==============================================>       (98 + 17) / 115][Stage 32:===============================================>     (102 + 13) / 115][Stage 32:===================================================>  (110 + 5) / 115]                                                                                [Stage 33:===============================>                      (67 + 49) / 116][Stage 33:====================================>                 (79 + 37) / 116][Stage 33:============================================>         (96 + 20) / 116][Stage 33:===============================================>     (105 + 11) / 116][Stage 33:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.319959552 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.626474573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==========================>                           (60 + 62) / 122][Stage 34:==============================>                       (68 + 54) / 122][Stage 34:=======================================>              (89 + 33) / 122][Stage 34:===============================================>     (110 + 12) / 122]                                                                                [Stage 35:===========================>                          (62 + 61) / 123][Stage 35:==============================>                       (69 + 54) / 123][Stage 35:======================================>               (87 + 36) / 123][Stage 35:============================================>        (104 + 19) / 123][Stage 35:================================================>    (113 + 10) / 123][Stage 35:====================================================> (120 + 3) / 123][Stage 35:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.552311396 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440495226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (72 + 42) / 114][Stage 36:======================================>               (82 + 32) / 114][Stage 36:===========================================>          (91 + 23) / 114][Stage 36:==============================================>      (101 + 13) / 114][Stage 36:===================================================>  (108 + 6) / 114][Stage 36:=====================================================>(112 + 2) / 114]                                                                                [Stage 37:======================================>               (83 + 32) / 115][Stage 37:============================================>         (95 + 20) / 115][Stage 37:=================================================>    (106 + 9) / 115][Stage 37:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.147845285 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454087251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (71 + 46) / 117][Stage 38:===================================>                  (76 + 41) / 117][Stage 38:==========================================>           (91 + 26) / 117][Stage 38:================================================>    (107 + 10) / 117][Stage 38:====================================================> (114 + 3) / 117]                                                                                [Stage 39:=================================>                    (74 + 44) / 118][Stage 39:========================================>             (88 + 30) / 118][Stage 39:==============================================>      (104 + 14) / 118][Stage 39:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.190541881 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467422097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:============================>                         (59 + 54) / 113][Stage 40:==============================>                       (64 + 49) / 113][Stage 40:=====================================>                (79 + 34) / 113][Stage 40:==============================================>       (97 + 16) / 113][Stage 40:====================================================> (109 + 4) / 113]                                                                                [Stage 41:============================>                         (61 + 53) / 114][Stage 41:===================================>                  (75 + 39) / 114][Stage 41:=============================================>        (96 + 18) / 114][Stage 41:==================================================>   (107 + 7) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.343606268 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496251929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (66 + 49) / 115][Stage 42:====================================>                 (78 + 37) / 115][Stage 42:=========================================>            (88 + 27) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:====================================================> (111 + 4) / 115]                                                                                [Stage 43:====================================>                 (78 + 38) / 116][Stage 43:============================================>         (95 + 21) / 116][Stage 43:===============================================>     (103 + 13) / 116]                                                                                Time elapsed: 3.113899639 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45443371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=====================================>                (80 + 35) / 115][Stage 44:==========================================>           (91 + 24) / 115][Stage 44:==============================================>      (101 + 14) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:======================================>               (82 + 34) / 116][Stage 45:=========================================>            (89 + 27) / 116][Stage 45:============================================>         (96 + 20) / 116][Stage 45:===================================================>  (111 + 5) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.898792197 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 117 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505493972 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:=============================>                        (65 + 56) / 121][Stage 46:===================================>                  (79 + 42) / 121][Stage 46:=============================================>       (104 + 17) / 121][Stage 46:====================================================> (118 + 3) / 121]                                                                                [Stage 47:===========================>                          (61 + 61) / 122][Stage 47:===========================>                          (63 + 59) / 122][Stage 47:===============================>                      (72 + 50) / 122][Stage 47:=========================================>            (93 + 29) / 122][Stage 47:================================================>    (112 + 10) / 122][Stage 47:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.378180134 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495394448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (72 + 45) / 117][Stage 48:===================================>                  (77 + 40) / 117][Stage 48:===========================================>          (94 + 23) / 117][Stage 48:=================================================>    (108 + 9) / 117][Stage 48:====================================================> (113 + 4) / 117]                                                                                [Stage 49:==================================>                   (75 + 43) / 118][Stage 49:=======================================>              (87 + 31) / 118][Stage 49:================================================>    (107 + 11) / 118][Stage 49:====================================================> (114 + 4) / 118][Stage 49:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.361306343 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381217254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:======================================>               (83 + 32) / 115][Stage 50:===========================================>          (93 + 22) / 115][Stage 50:==================================================>   (107 + 8) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:========================================>             (88 + 28) / 116][Stage 51:=============================================>        (98 + 18) / 116][Stage 51:================================================>    (106 + 10) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.778691353 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431470138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:====================================>                 (76 + 38) / 114][Stage 52:===========================================>          (91 + 23) / 114][Stage 52:==============================================>       (98 + 16) / 114][Stage 52:================================================>    (104 + 10) / 114][Stage 52:====================================================> (111 + 3) / 114]                                                                                [Stage 53:====================================>                 (78 + 37) / 115][Stage 53:==========================================>           (91 + 24) / 115][Stage 53:==============================================>      (100 + 15) / 115][Stage 53:==================================================>   (107 + 8) / 115][Stage 53:=====================================================>(113 + 2) / 115][Stage 53:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.647437067 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451851606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (71 + 46) / 117][Stage 54:=================================>                    (72 + 45) / 117][Stage 54:====================================>                 (80 + 37) / 117][Stage 54:================================================>    (106 + 11) / 117][Stage 54:=====================================================>(115 + 2) / 117]                                                                                [Stage 55:==================================>                   (75 + 43) / 118][Stage 55:=====================================>                (82 + 36) / 118][Stage 55:============================================>         (98 + 20) / 118][Stage 55:==================================================>   (110 + 8) / 118][Stage 55:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.296506543 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431014336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===================================>                  (75 + 39) / 114][Stage 56:========================================>             (86 + 28) / 114][Stage 56:===============================================>     (102 + 12) / 114][Stage 56:===================================================>  (108 + 6) / 114][Stage 56:=====================================================>(112 + 2) / 114]                                                                                [Stage 57:======================================>               (81 + 34) / 115][Stage 57:========================================>             (87 + 28) / 115][Stage 57:===============================================>     (104 + 11) / 115][Stage 57:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 2.952747543 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 212 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 212 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479858338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:============================>                         (59 + 54) / 113][Stage 58:============================>                         (60 + 53) / 113][Stage 58:===================================>                  (75 + 38) / 113][Stage 58:=============================================>        (96 + 17) / 113][Stage 58:====================================================> (110 + 3) / 113]                                                                                [Stage 59:=============================>                        (62 + 52) / 114][Stage 59:==================================>                   (72 + 42) / 114][Stage 59:==========================================>           (90 + 24) / 114][Stage 59:=================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.180045604 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377833132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (81 + 34) / 115][Stage 60:===========================================>          (92 + 23) / 115][Stage 60:===============================================>     (103 + 12) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:========================================>             (87 + 29) / 116][Stage 61:===============================================>     (103 + 13) / 116][Stage 61:===================================================>  (110 + 6) / 116][Stage 61:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.907538257 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433759516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==============================>                       (65 + 50) / 115][Stage 62:====================================>                 (77 + 38) / 115][Stage 62:=========================================>            (88 + 27) / 115][Stage 62:==============================================>       (99 + 16) / 115][Stage 62:==================================================>   (107 + 8) / 115][Stage 62:===================================================>  (110 + 5) / 115][Stage 62:====================================================> (111 + 4) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:=================================>                    (72 + 44) / 116][Stage 63:====================================>                 (79 + 37) / 116][Stage 63:==========================================>           (92 + 24) / 116][Stage 63:===============================================>     (104 + 12) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.590520743 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401437661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:======================================>               (83 + 32) / 115][Stage 64:=========================================>            (88 + 27) / 115][Stage 64:===============================================>     (103 + 12) / 115][Stage 64:====================================================> (112 + 3) / 115]                                                                                [Stage 65:========================================>             (87 + 29) / 116][Stage 65:=============================================>        (97 + 19) / 116][Stage 65:===================================================>  (111 + 5) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.81722447 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411116785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (72 + 42) / 114][Stage 66:============================================>         (94 + 20) / 114][Stage 66:===============================================>     (102 + 12) / 114][Stage 66:==================================================>   (106 + 8) / 114][Stage 66:====================================================> (111 + 3) / 114]                                                                                [Stage 67:======================================>               (82 + 33) / 115][Stage 67:==============================================>       (99 + 16) / 115][Stage 67:================================================>    (105 + 10) / 115][Stage 67:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.098770714 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376664049 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=======================================>              (85 + 30) / 115][Stage 68:==============================================>       (99 + 16) / 115][Stage 68:====================================================> (112 + 3) / 115]                                                                                [Stage 69:==========================================>           (92 + 24) / 116][Stage 69:==============================================>       (99 + 17) / 116][Stage 69:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.595639345 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403356541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:====================================>                 (78 + 36) / 114][Stage 70:===========================================>          (91 + 23) / 114][Stage 70:=============================================>        (96 + 18) / 114][Stage 70:=================================================>    (105 + 9) / 114][Stage 70:====================================================> (111 + 3) / 114]                                                                                [Stage 71:======================================>               (81 + 34) / 115][Stage 71:=============================================>        (96 + 19) / 115][Stage 71:===================================================>  (109 + 6) / 115][Stage 71:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.175740923 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404066841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:====================================>                 (76 + 38) / 114][Stage 72:===========================================>          (91 + 23) / 114][Stage 72:==============================================>      (101 + 13) / 114][Stage 72:==================================================>   (106 + 8) / 114][Stage 72:===================================================>  (108 + 6) / 114][Stage 72:=====================================================>(112 + 2) / 114]                                                                                [Stage 73:==================================>                   (73 + 42) / 115][Stage 73:======================================>               (81 + 34) / 115][Stage 73:==============================================>      (100 + 15) / 115][Stage 73:==================================================>   (107 + 8) / 115][Stage 73:==================================================>   (108 + 7) / 115][Stage 73:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.46513935 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 125 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403828441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (72 + 45) / 117][Stage 74:=====================================>                (81 + 36) / 117][Stage 74:============================================>         (96 + 21) / 117][Stage 74:================================================>    (107 + 10) / 117][Stage 74:=====================================================>(115 + 2) / 117]                                                                                [Stage 75:================================>                     (72 + 46) / 118][Stage 75:==================================>                   (75 + 43) / 118][Stage 75:=========================================>            (91 + 27) / 118][Stage 75:================================================>    (107 + 11) / 118][Stage 75:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.143470743 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428734271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==============================>                       (66 + 49) / 115][Stage 76:==================================>                   (74 + 41) / 115][Stage 76:========================================>             (86 + 29) / 115][Stage 76:===========================================>          (92 + 23) / 115][Stage 76:==============================================>      (100 + 15) / 115][Stage 76:==================================================>   (108 + 7) / 115][Stage 76:===================================================>  (110 + 5) / 115]                                                                                [Stage 77:=================================>                    (72 + 44) / 116][Stage 77:========================================>             (86 + 30) / 116][Stage 77:===========================================>          (94 + 22) / 116][Stage 77:==============================================>      (102 + 14) / 116][Stage 77:===================================================>  (111 + 5) / 116][Stage 77:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.169359275 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==================================>                   (74 + 41) / 115][Stage 78:========================================>             (86 + 29) / 115][Stage 78:==============================================>       (98 + 17) / 115][Stage 78:===============================================>     (104 + 11) / 115][Stage 78:====================================================> (111 + 4) / 115]                                                                                [Stage 79:====================================>                 (78 + 38) / 116][Stage 79:===========================================>          (94 + 22) / 116][Stage 79:==============================================>      (101 + 15) / 116][Stage 79:====================================================> (112 + 4) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.290919361 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 119 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400831098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=====================================>                (79 + 35) / 114][Stage 80:===========================================>          (91 + 23) / 114][Stage 80:==============================================>      (100 + 14) / 114][Stage 80:===================================================>  (109 + 5) / 114][Stage 80:=====================================================>(113 + 1) / 114]                                                                                [Stage 81:===================================>                  (76 + 39) / 115][Stage 81:==========================================>           (91 + 24) / 115][Stage 81:===============================================>     (104 + 11) / 115][Stage 81:==================================================>   (108 + 7) / 115][Stage 81:====================================================> (111 + 4) / 115][Stage 81:====================================================> (112 + 3) / 115][Stage 81:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.441312204 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364650562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (81 + 34) / 115][Stage 82:============================================>         (95 + 20) / 115][Stage 82:====================================================> (112 + 3) / 115]                                                                                [Stage 83:======================================>               (83 + 33) / 116][Stage 83:=============================================>        (98 + 18) / 116][Stage 83:==================================================>   (109 + 7) / 116][Stage 83:====================================================> (113 + 3) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.290105114 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441352595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 60) / 121][Stage 84:============================>                         (64 + 57) / 121][Stage 84:===================================>                  (79 + 42) / 121][Stage 84:=============================================>       (104 + 17) / 121][Stage 84:===================================================>  (116 + 5) / 121]                                                                                [Stage 85:============================>                         (64 + 58) / 122][Stage 85:==============================>                       (69 + 53) / 122][Stage 85:===========================================>          (98 + 24) / 122][Stage 85:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.185086805 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411724222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:============================>                         (60 + 53) / 113][Stage 86:==============================>                       (64 + 49) / 113][Stage 86:===================================>                  (75 + 38) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:====================================================> (110 + 3) / 113]                                                                                [Stage 87:=============================>                        (63 + 51) / 114][Stage 87:=====================================>                (79 + 35) / 114][Stage 87:=============================================>        (96 + 18) / 114]                                                                                Time elapsed: 3.098519324 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355927377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=====================================>                (80 + 35) / 115][Stage 88:=========================================>            (88 + 27) / 115][Stage 88:================================================>    (105 + 10) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=====================================>                (81 + 35) / 116][Stage 89:===========================================>          (93 + 23) / 116][Stage 89:===============================================>     (105 + 11) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.647648723 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405671298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (71 + 44) / 115][Stage 90:======================================>               (83 + 32) / 115][Stage 90:==============================================>      (100 + 15) / 115][Stage 90:==================================================>   (108 + 7) / 115]                                                                                [Stage 91:==================================>                   (75 + 41) / 116][Stage 91:========================================>             (87 + 29) / 116][Stage 91:==============================================>      (102 + 14) / 116][Stage 91:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.892624528 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38868041 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=====================================>                (79 + 35) / 114][Stage 92:=========================================>            (87 + 27) / 114][Stage 92:=============================================>        (96 + 18) / 114][Stage 92:=================================================>    (105 + 9) / 114][Stage 92:=====================================================>(113 + 1) / 114]                                                                                [Stage 93:=====================================>                (80 + 35) / 115][Stage 93:========================================>             (87 + 28) / 115][Stage 93:==============================================>       (98 + 17) / 115][Stage 93:================================================>    (105 + 10) / 115][Stage 93:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.113969242 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358283377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=======================================>              (85 + 30) / 115][Stage 94:===============================================>     (102 + 13) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:=======================================>              (85 + 31) / 116][Stage 95:==========================================>           (92 + 24) / 116][Stage 95:================================================>    (106 + 10) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.690871815 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 113 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (81 + 34) / 115][Stage 96:=========================================>            (89 + 26) / 115][Stage 96:==============================================>      (101 + 14) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:========================================>             (86 + 30) / 116][Stage 97:============================================>         (96 + 20) / 116][Stage 97:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.660957119 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387366528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:>                                                       (0 + 0) / 117][Stage 98:================================>                     (71 + 46) / 117][Stage 98:====================================>                 (80 + 37) / 117][Stage 98:==========================================>           (93 + 24) / 117][Stage 98:==================================================>   (110 + 7) / 117][Stage 98:=====================================================>(116 + 1) / 117]                                                                                [Stage 99:================================>                     (72 + 46) / 118][Stage 99:=================================>                    (74 + 44) / 118][Stage 99:========================================>             (89 + 29) / 118][Stage 99:=============================================>       (102 + 16) / 118][Stage 99:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.282740228 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39222695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (73 + 41) / 114][Stage 100:========================================>            (87 + 27) / 114][Stage 100:==============================================>      (99 + 15) / 114][Stage 100:=================================================>   (106 + 8) / 114][Stage 100:===================================================> (111 + 3) / 114]                                                                                [Stage 101:=====================================>               (81 + 34) / 115][Stage 101:==========================================>          (92 + 23) / 115][Stage 101:=================================================>   (107 + 8) / 115][Stage 101:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.077991716 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395856651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===============================>                     (68 + 47) / 115][Stage 102:===================================>                 (78 + 37) / 115][Stage 102:==========================================>          (93 + 22) / 115][Stage 102:============================================>        (97 + 18) / 115][Stage 102:==================================================>  (109 + 6) / 115]                                                                                [Stage 103:=================================>                   (73 + 43) / 116][Stage 103:=======================================>             (87 + 29) / 116][Stage 103:===========================================>         (96 + 20) / 116][Stage 103:===============================================>    (105 + 11) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.305955191 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429121946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 61) / 122][Stage 104:=============================>                       (67 + 55) / 122][Stage 104:===================================>                 (82 + 40) / 122][Stage 104:===========================================>        (101 + 21) / 122][Stage 104:===================================================> (119 + 3) / 122]                                                                                [Stage 105:============================>                        (65 + 58) / 123][Stage 105:================================>                    (76 + 47) / 123][Stage 105:==========================================>          (98 + 25) / 123][Stage 105:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.14929222 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365301817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=======================================>             (85 + 30) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:=================================================>   (107 + 8) / 115]                                                                                [Stage 107:=======================================>             (86 + 30) / 116][Stage 107:============================================>        (98 + 18) / 116][Stage 107:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.510048102 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538502472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==============================>                      (67 + 48) / 115][Stage 108:====================================>                (79 + 36) / 115][Stage 108:=======================================>             (85 + 30) / 115][Stage 108:================================================>    (106 + 9) / 115][Stage 108:====================================================>(113 + 2) / 115]                                                                                [Stage 109:===============================>                     (69 + 47) / 116][Stage 109:===================================>                 (78 + 38) / 116][Stage 109:=========================================>           (91 + 25) / 116][Stage 109:===============================================>    (106 + 10) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.943993667 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375584981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (72 + 42) / 114][Stage 110:======================================>              (83 + 31) / 114][Stage 110:===========================================>         (93 + 21) / 114][Stage 110:==============================================>     (102 + 12) / 114][Stage 110:==================================================>  (109 + 5) / 114]                                                                                [Stage 111:======================================>              (84 + 31) / 115][Stage 111:=============================================>       (98 + 17) / 115][Stage 111:================================================>    (106 + 9) / 115][Stage 111:==================================================>  (110 + 5) / 115][Stage 111:====================================================>(113 + 2) / 115][Stage 111:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.627566137 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386471346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==============================>                      (67 + 48) / 115][Stage 112:==================================>                  (75 + 40) / 115][Stage 112:==========================================>          (92 + 23) / 115][Stage 112:===============================================>    (104 + 11) / 115][Stage 112:===================================================> (112 + 3) / 115]                                                                                [Stage 113:==================================>                  (76 + 40) / 116][Stage 113:=======================================>             (87 + 29) / 116][Stage 113:=============================================>      (102 + 14) / 116][Stage 113:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.291517989 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 123 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512185199 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=====================================>               (80 + 34) / 114][Stage 114:========================================>            (88 + 26) / 114][Stage 114:=============================================>      (100 + 14) / 114][Stage 114:==================================================>  (108 + 6) / 114][Stage 114:====================================================>(112 + 2) / 114]                                                                                [Stage 115:==================================>                  (75 + 40) / 115][Stage 115:=========================================>           (89 + 26) / 115][Stage 115:=============================================>       (99 + 16) / 115][Stage 115:===============================================>    (105 + 10) / 115][Stage 115:===================================================> (111 + 4) / 115][Stage 115:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.313600276 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433162245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:==============================>                      (69 + 52) / 121][Stage 116:======================================>              (88 + 33) / 121][Stage 116:==============================================>     (109 + 12) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:=============================>                       (68 + 54) / 122][Stage 117:======================================>              (88 + 34) / 122][Stage 117:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.033007413 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 117 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447546691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:============================>                        (64 + 57) / 121][Stage 118:===============================>                     (71 + 50) / 121][Stage 118:======================================>              (89 + 32) / 121][Stage 118:==============================================>     (109 + 12) / 121]                                                                                [Stage 119:=============================>                       (67 + 55) / 122][Stage 119:====================================>                (83 + 39) / 122][Stage 119:=============================================>      (106 + 16) / 122][Stage 119:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.227278132 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 244 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 244 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355142011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (81 + 34) / 115][Stage 120:=========================================>           (89 + 26) / 115][Stage 120:=============================================>       (98 + 17) / 115][Stage 120:==================================================>  (109 + 6) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:======================================>              (85 + 31) / 116][Stage 121:===========================================>         (96 + 20) / 116][Stage 121:=================================================>   (109 + 7) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.931510924 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:======================================>              (84 + 31) / 115][Stage 122:===========================================>         (95 + 20) / 115][Stage 122:===============================================>    (105 + 10) / 115][Stage 122:==================================================>  (110 + 5) / 115]                                                                                [Stage 123:========================================>            (88 + 28) / 116][Stage 123:============================================>        (97 + 19) / 116][Stage 123:================================================>    (107 + 9) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.83250852 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397617629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:===================================>                 (78 + 39) / 117][Stage 124:==========================================>          (94 + 23) / 117][Stage 124:===============================================>    (106 + 11) / 117][Stage 124:===================================================> (114 + 3) / 117]                                                                                [Stage 125:================================>                    (72 + 46) / 118][Stage 125:=================================>                   (74 + 44) / 118][Stage 125:==========================================>          (95 + 23) / 118][Stage 125:===============================================>    (107 + 11) / 118][Stage 125:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.114134096 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376277399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===================================>                 (77 + 37) / 114][Stage 126:=========================================>           (90 + 24) / 114][Stage 126:==============================================>     (101 + 13) / 114][Stage 126:=================================================>   (106 + 8) / 114][Stage 126:====================================================>(112 + 2) / 114]                                                                                [Stage 127:==================================>                  (75 + 40) / 115][Stage 127:=======================================>             (86 + 29) / 115][Stage 127:============================================>        (96 + 19) / 115][Stage 127:==================================================>  (109 + 6) / 115][Stage 127:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.13147232 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=================================>                   (72 + 42) / 114][Stage 128:=======================================>             (86 + 28) / 114][Stage 128:===========================================>         (94 + 20) / 114][Stage 128:==============================================>     (103 + 11) / 114][Stage 128:===================================================> (110 + 4) / 114][Stage 128:====================================================>(112 + 2) / 114]                                                                                [Stage 129:==================================>                  (75 + 40) / 115][Stage 129:=========================================>           (90 + 25) / 115][Stage 129:=============================================>      (100 + 15) / 115][Stage 129:=================================================>   (107 + 8) / 115][Stage 129:==================================================>  (110 + 5) / 115][Stage 129:====================================================>(113 + 2) / 115][Stage 129:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.882361014 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394493126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===============================>                     (69 + 46) / 115][Stage 130:===================================>                 (78 + 37) / 115][Stage 130:=========================================>           (90 + 25) / 115][Stage 130:==============================================>     (102 + 13) / 115]                                                                                [Stage 131:====================================>                (79 + 37) / 116][Stage 131:=========================================>           (90 + 26) / 116][Stage 131:================================================>    (107 + 9) / 116][Stage 131:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.861537461 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 152 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 152 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417225175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 61) / 122][Stage 132:=============================>                       (67 + 55) / 122][Stage 132:=====================================>               (87 + 35) / 122][Stage 132:=============================================>      (106 + 16) / 122][Stage 132:====================================================>(121 + 1) / 122]                                                                                [Stage 133:===========================>                         (63 + 60) / 123][Stage 133:===============================>                     (72 + 51) / 123][Stage 133:==========================================>         (100 + 23) / 123][Stage 133:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.27018945 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368074174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=================================>                   (72 + 42) / 114][Stage 134:======================================>              (82 + 32) / 114][Stage 134:============================================>        (95 + 19) / 114][Stage 134:==============================================>     (101 + 13) / 114][Stage 134:====================================================>(112 + 2) / 114]                                                                                [Stage 135:=====================================>               (82 + 33) / 115][Stage 135:===========================================>         (94 + 21) / 115][Stage 135:===============================================>    (105 + 10) / 115][Stage 135:===================================================> (111 + 4) / 115][Stage 135:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.077069186 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40763807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 60) / 121][Stage 136:============================>                        (65 + 56) / 121][Stage 136:====================================>                (83 + 38) / 121][Stage 136:=============================================>      (105 + 16) / 121][Stage 136:==================================================>  (116 + 5) / 121]                                                                                [Stage 137:============================>                        (65 + 57) / 122][Stage 137:===================================>                 (81 + 41) / 122][Stage 137:=============================================>      (107 + 15) / 122][Stage 137:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.265010542 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (63 + 58) / 121][Stage 138:==================================>                  (79 + 42) / 121][Stage 138:==========================================>          (98 + 23) / 121][Stage 138:=================================================>   (112 + 9) / 121][Stage 138:====================================================>(120 + 1) / 121]                                                                                [Stage 139:============================>                        (65 + 57) / 122][Stage 139:===================================>                 (81 + 41) / 122][Stage 139:===========================================>        (101 + 21) / 122][Stage 139:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.271814441 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394173004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (59 + 54) / 113][Stage 140:=============================>                       (63 + 50) / 113][Stage 140:====================================>                (78 + 35) / 113][Stage 140:==============================================>     (101 + 12) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:============================>                        (62 + 52) / 114][Stage 141:===================================>                 (77 + 37) / 114][Stage 141:=============================================>       (98 + 16) / 114][Stage 141:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.084337241 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41094079 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 60) / 121][Stage 142:===============================>                     (72 + 49) / 121][Stage 142:=========================================>           (94 + 27) / 121][Stage 142:==============================================>     (108 + 13) / 121]                                                                                [Stage 143:==========================>                          (62 + 60) / 122][Stage 143:===============================>                     (72 + 50) / 122][Stage 143:=====================================>               (87 + 35) / 122][Stage 143:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.020893512 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364988791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (71 + 43) / 114][Stage 144:======================================>              (83 + 31) / 114][Stage 144:==============================================>      (99 + 15) / 114][Stage 144:===============================================>    (104 + 10) / 114][Stage 144:==================================================>  (108 + 6) / 114][Stage 144:====================================================>(113 + 1) / 114]                                                                                [Stage 145:====================================>                (79 + 36) / 115][Stage 145:===========================================>         (95 + 20) / 115][Stage 145:==============================================>     (102 + 13) / 115][Stage 145:===============================================>    (105 + 10) / 115][Stage 145:==================================================>  (109 + 6) / 115][Stage 145:===================================================> (112 + 3) / 115][Stage 145:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.381975691 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405052387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===============================>                     (69 + 46) / 115][Stage 146:=======================================>             (85 + 30) / 115][Stage 146:=============================================>       (98 + 17) / 115][Stage 146:====================================================>(113 + 2) / 115]                                                                                [Stage 147:===============================>                     (70 + 46) / 116][Stage 147:=======================================>             (86 + 30) / 116][Stage 147:=============================================>      (102 + 14) / 116][Stage 147:=================================================>   (108 + 8) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.141905576 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336892699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (83 + 32) / 115][Stage 148:=============================================>       (99 + 16) / 115][Stage 148:==================================================>  (109 + 6) / 115]                                                                                [Stage 149:==========================================>          (92 + 24) / 116][Stage 149:================================================>    (107 + 9) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.438621983 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368809932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (78 + 36) / 114][Stage 150:=======================================>             (86 + 28) / 114][Stage 150:============================================>        (96 + 18) / 114][Stage 150:==============================================>     (103 + 11) / 114][Stage 150:===================================================> (110 + 4) / 114]                                                                                [Stage 151:======================================>              (83 + 32) / 115][Stage 151:===========================================>         (95 + 20) / 115][Stage 151:===============================================>    (104 + 11) / 115][Stage 151:==================================================>  (110 + 5) / 115][Stage 151:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.184906988 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376515835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (70 + 45) / 115][Stage 152:=====================================>               (81 + 34) / 115][Stage 152:==========================================>          (92 + 23) / 115][Stage 152:==============================================>     (102 + 13) / 115][Stage 152:===================================================> (111 + 4) / 115]                                                                                [Stage 153:==================================>                  (76 + 40) / 116][Stage 153:=========================================>           (91 + 25) / 116][Stage 153:============================================>        (98 + 18) / 116][Stage 153:=================================================>   (109 + 7) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.239632236 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393259181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (72 + 45) / 117][Stage 154:====================================>                (81 + 36) / 117][Stage 154:============================================>       (100 + 17) / 117][Stage 154:===================================================> (113 + 4) / 117]                                                                                [Stage 155:=================================>                   (75 + 43) / 118][Stage 155:======================================>              (86 + 32) / 118][Stage 155:===============================================>    (107 + 11) / 118][Stage 155:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.022582315 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359013526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=====================================>               (81 + 33) / 114][Stage 156:=========================================>           (89 + 25) / 114][Stage 156:==============================================>      (99 + 15) / 114][Stage 156:==================================================>  (109 + 5) / 114][Stage 156:====================================================>(112 + 2) / 114]                                                                                [Stage 157:======================================>              (83 + 32) / 115][Stage 157:=============================================>      (100 + 15) / 115][Stage 157:=================================================>   (108 + 7) / 115][Stage 157:==================================================>  (110 + 5) / 115][Stage 157:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.150420824 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410521787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (61 + 61) / 122][Stage 158:============================>                        (65 + 57) / 122][Stage 158:====================================>                (84 + 38) / 122][Stage 158:===============================================>    (112 + 10) / 122]                                                                                [Stage 159:===========================>                         (63 + 60) / 123][Stage 159:=================================>                   (78 + 45) / 123][Stage 159:=========================================>           (96 + 27) / 123][Stage 159:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 2.926722751 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403864185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 61) / 122][Stage 160:============================>                        (66 + 56) / 122][Stage 160:===================================>                 (81 + 41) / 122][Stage 160:==============================================>     (108 + 14) / 122][Stage 160:====================================================>(120 + 2) / 122]                                                                                [Stage 161:==========================>                          (62 + 61) / 123][Stage 161:============================>                        (67 + 56) / 123][Stage 161:====================================>                (84 + 39) / 123][Stage 161:============================================>       (105 + 18) / 123][Stage 161:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.00488662 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358466005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (70 + 44) / 114][Stage 162:===================================>                 (76 + 38) / 114][Stage 162:=========================================>           (90 + 24) / 114][Stage 162:==============================================>     (102 + 12) / 114][Stage 162:================================================>    (105 + 9) / 114][Stage 162:===================================================> (110 + 4) / 114]                                                                                [Stage 163:======================================>              (84 + 31) / 115][Stage 163:==========================================>          (92 + 23) / 115][Stage 163:================================================>    (106 + 9) / 115][Stage 163:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.18553543 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (71 + 43) / 114][Stage 164:=======================================>             (84 + 30) / 114][Stage 164:==============================================>      (99 + 15) / 114][Stage 164:=================================================>   (106 + 8) / 114][Stage 164:====================================================>(113 + 1) / 114]                                                                                [Stage 165:==================================>                  (75 + 40) / 115][Stage 165:========================================>            (87 + 28) / 115][Stage 165:=============================================>      (100 + 15) / 115][Stage 165:=================================================>   (108 + 7) / 115][Stage 165:====================================================>(113 + 2) / 115][Stage 165:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.671414064 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366617908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (71 + 46) / 117][Stage 166:====================================>                (80 + 37) / 117][Stage 166:============================================>        (99 + 18) / 117][Stage 166:====================================================>(116 + 1) / 117]                                                                                [Stage 167:==================================>                  (76 + 42) / 118][Stage 167:=======================================>             (88 + 30) / 118][Stage 167:===============================================>    (108 + 10) / 118][Stage 167:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.915076096 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383310494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (80 + 34) / 114][Stage 168:========================================>            (88 + 26) / 114][Stage 168:=============================================>       (97 + 17) / 114][Stage 168:==================================================>  (108 + 6) / 114][Stage 168:====================================================>(112 + 2) / 114]                                                                                [Stage 169:=======================================>             (86 + 29) / 115][Stage 169:=========================================>           (91 + 24) / 115][Stage 169:==============================================>     (102 + 13) / 115][Stage 169:===================================================> (111 + 4) / 115][Stage 169:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.491275324 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408188984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:>                                                      (0 + 0) / 122][Stage 170:==========================>                          (61 + 61) / 122][Stage 170:============================>                        (66 + 56) / 122][Stage 170:=================================>                   (78 + 44) / 122][Stage 170:=============================================>      (106 + 16) / 122][Stage 170:====================================================>(121 + 1) / 122]                                                                                [Stage 171:==========================>                          (61 + 62) / 123][Stage 171:============================>                        (66 + 57) / 123][Stage 171:==================================>                  (80 + 43) / 123][Stage 171:===========================================>        (104 + 19) / 123][Stage 171:===============================================>    (112 + 11) / 123][Stage 171:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.383692938 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404092502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 60) / 121][Stage 172:=============================>                       (67 + 54) / 121][Stage 172:=================================>                   (77 + 44) / 121][Stage 172:==============================================>     (109 + 12) / 121][Stage 172:===================================================> (118 + 3) / 121]                                                                                [Stage 173:==========================>                          (62 + 60) / 122][Stage 173:===========================>                         (63 + 59) / 122][Stage 173:==================================>                  (80 + 42) / 122][Stage 173:============================================>       (104 + 18) / 122]                                                                                Time elapsed: 2.977574992 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366484807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (71 + 46) / 117][Stage 174:================================>                    (72 + 45) / 117][Stage 174:======================================>              (84 + 33) / 117][Stage 174:==============================================>     (105 + 12) / 117][Stage 174:====================================================>(115 + 2) / 117]                                                                                [Stage 175:================================>                    (72 + 46) / 118][Stage 175:==================================>                  (76 + 42) / 118][Stage 175:=======================================>             (89 + 29) / 118][Stage 175:===============================================>    (108 + 10) / 118]                                                                                Time elapsed: 2.957949242 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37531459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (67 + 48) / 115][Stage 176:==================================>                  (75 + 40) / 115][Stage 176:=========================================>           (89 + 26) / 115][Stage 176:============================================>        (97 + 18) / 115][Stage 176:===================================================> (112 + 3) / 115]                                                                                [Stage 177:===============================>                     (69 + 47) / 116][Stage 177:======================================>              (84 + 32) / 116][Stage 177:============================================>        (98 + 18) / 116][Stage 177:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 3.003214978 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363825505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (71 + 46) / 117][Stage 178:===================================>                 (78 + 39) / 117][Stage 178:===========================================>         (95 + 22) / 117][Stage 178:==================================================>  (111 + 6) / 117]                                                                                [Stage 179:================================>                    (73 + 45) / 118][Stage 179:====================================>                (81 + 37) / 118][Stage 179:============================================>       (100 + 18) / 118][Stage 179:==================================================>  (112 + 6) / 118][Stage 179:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.164346118 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421439167 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 60) / 121][Stage 180:==============================>                      (69 + 52) / 121][Stage 180:=====================================>               (85 + 36) / 121][Stage 180:=================================================>   (114 + 7) / 121]                                                                                [Stage 181:============================>                        (66 + 56) / 122][Stage 181:===============================>                     (73 + 49) / 122][Stage 181:=========================================>           (96 + 26) / 122][Stage 181:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.235036164 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 188 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 188 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 60) / 121][Stage 182:==============================>                      (69 + 52) / 121][Stage 182:==========================================>          (96 + 25) / 121][Stage 182:=================================================>   (114 + 7) / 121][Stage 182:====================================================>(119 + 2) / 121]                                                                                [Stage 183:==========================>                          (62 + 60) / 122][Stage 183:==============================>                      (71 + 51) / 122][Stage 183:====================================>                (85 + 37) / 122][Stage 183:============================================>       (105 + 17) / 122]                                                                                Time elapsed: 3.066409834 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377383589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 45) / 117][Stage 184:===================================>                 (79 + 38) / 117][Stage 184:============================================>        (98 + 19) / 117][Stage 184:===================================================> (113 + 4) / 117]                                                                                [Stage 185:================================>                    (72 + 46) / 118][Stage 185:======================================>              (85 + 33) / 118][Stage 185:============================================>       (102 + 16) / 118][Stage 185:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.029633177 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 248 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 248 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337132273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:=========================================>           (90 + 25) / 115][Stage 186:=============================================>       (98 + 17) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:======================================>              (84 + 32) / 116][Stage 187:==========================================>          (93 + 23) / 116][Stage 187:===============================================>    (106 + 10) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.800765764 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485720671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=====================================>               (81 + 33) / 114][Stage 188:===========================================>         (93 + 21) / 114][Stage 188:==============================================>     (103 + 11) / 114][Stage 188:==================================================>  (109 + 5) / 114][Stage 188:====================================================>(112 + 2) / 114]                                                                                [Stage 189:========================================>            (87 + 28) / 115][Stage 189:=============================================>      (101 + 14) / 115][Stage 189:===============================================>    (105 + 10) / 115][Stage 189:==================================================>  (110 + 5) / 115][Stage 189:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.951107114 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367809084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (81 + 34) / 115][Stage 190:======================================>              (84 + 31) / 115][Stage 190:============================================>        (97 + 18) / 115][Stage 190:=================================================>   (108 + 7) / 115][Stage 190:====================================================>(113 + 2) / 115]                                                                                [Stage 191:======================================>              (84 + 32) / 116][Stage 191:==========================================>          (92 + 24) / 116][Stage 191:=============================================>      (101 + 15) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.974239547 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365332503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (71 + 46) / 117][Stage 192:=================================>                   (74 + 43) / 117][Stage 192:====================================>                (81 + 36) / 117][Stage 192:==========================================>          (93 + 24) / 117][Stage 192:===============================================>    (107 + 10) / 117]                                                                                [Stage 193:================================>                    (72 + 46) / 118][Stage 193:====================================>                (81 + 37) / 118][Stage 193:===========================================>         (97 + 21) / 118][Stage 193:===============================================>    (107 + 11) / 118][Stage 193:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.208177696 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373894666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==============================>                      (67 + 48) / 115][Stage 194:===================================>                 (77 + 38) / 115][Stage 194:=========================================>           (90 + 25) / 115][Stage 194:=============================================>      (101 + 14) / 115][Stage 194:==================================================>  (110 + 5) / 115]                                                                                [Stage 195:==================================>                  (76 + 40) / 116][Stage 195:=========================================>           (90 + 26) / 116][Stage 195:==============================================>     (104 + 12) / 116][Stage 195:==================================================>  (110 + 6) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.042866089 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403820957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (61 + 61) / 122][Stage 196:=============================>                       (69 + 53) / 122][Stage 196:====================================>                (85 + 37) / 122][Stage 196:==============================================>     (110 + 12) / 122]                                                                                [Stage 197:============================>                        (66 + 57) / 123][Stage 197:================================>                    (76 + 47) / 123][Stage 197:==========================================>          (99 + 24) / 123][Stage 197:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 2.996787648 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362835121 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (81 + 34) / 115][Stage 198:=========================================>           (89 + 26) / 115][Stage 198:=============================================>      (101 + 14) / 115][Stage 198:===================================================> (111 + 4) / 115]                                                                                [Stage 199:=====================================>               (82 + 34) / 116][Stage 199:========================================>            (88 + 28) / 116][Stage 199:=============================================>      (102 + 14) / 116][Stage 199:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.598816031 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374953006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=================================>                   (73 + 41) / 114][Stage 200:======================================>              (82 + 32) / 114][Stage 200:==========================================>          (92 + 22) / 114][Stage 200:==============================================>     (103 + 11) / 114][Stage 200:===================================================> (110 + 4) / 114]                                                                                [Stage 201:=====================================>               (81 + 34) / 115][Stage 201:============================================>        (97 + 18) / 115][Stage 201:=============================================>      (101 + 14) / 115][Stage 201:================================================>    (106 + 9) / 115][Stage 201:==================================================>  (110 + 5) / 115][Stage 201:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.210429214 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m1.626s
user	11m40.092s
sys	0m35.116s
