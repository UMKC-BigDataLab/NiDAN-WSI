Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 22:36:10 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:36:24 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:36:24 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:36:25 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 22:36:27 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:36:38 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529223627-0691).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.332768935 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=======================>                               (49 + 67) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.775180961 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.656140477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================================>                  (76 + 39) / 115][Stage 2:=====================================>                 (79 + 36) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:========================================>              (84 + 31) / 115][Stage 2:===========================================>           (90 + 25) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:===================================================>   (108 + 7) / 115][Stage 2:====================================================>  (110 + 5) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:===================================>                   (74 + 42) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:==========================================>            (89 + 27) / 116][Stage 3:===========================================>           (92 + 24) / 116][Stage 3:==============================================>        (99 + 17) / 116][Stage 3:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.519665756 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.632810171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===================================>                   (74 + 41) / 115][Stage 4:======================================>                (80 + 35) / 115][Stage 4:=======================================>               (83 + 32) / 115][Stage 4:===========================================>           (91 + 24) / 115][Stage 4:===============================================>       (99 + 16) / 115][Stage 4:==================================================>    (106 + 9) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:=====================================================> (112 + 3) / 115]                                                                                [Stage 5:=======================================>               (84 + 32) / 116][Stage 5:=========================================>             (87 + 29) / 116][Stage 5:===========================================>           (92 + 24) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.212091034 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.687482709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (70 + 44) / 114][Stage 6:=====================================>                 (78 + 36) / 114][Stage 6:=========================================>             (86 + 28) / 114][Stage 6:============================================>          (93 + 21) / 114][Stage 6:=================================================>    (104 + 10) / 114][Stage 6:===================================================>   (106 + 8) / 114][Stage 6:====================================================>  (108 + 6) / 114]                                                                                [Stage 7:===================================>                   (75 + 40) / 115][Stage 7:=======================================>               (83 + 32) / 115][Stage 7:==============================================>        (97 + 18) / 115][Stage 7:===============================================>      (102 + 13) / 115][Stage 7:===================================================>   (107 + 8) / 115][Stage 7:=====================================================> (112 + 3) / 115][Stage 7:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.824316414 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.577658509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (70 + 44) / 114][Stage 8:====================================>                  (75 + 39) / 114][Stage 8:=====================================>                 (78 + 36) / 114][Stage 8:========================================>              (83 + 31) / 114][Stage 8:===============================================>      (101 + 13) / 114][Stage 8:==================================================>    (105 + 9) / 114][Stage 8:=====================================================> (110 + 4) / 114][Stage 8:======================================================>(113 + 1) / 114]                                                                                [Stage 9:=================================>                     (71 + 44) / 115][Stage 9:====================================>                  (77 + 38) / 115][Stage 9:=========================================>             (86 + 29) / 115][Stage 9:============================================>          (93 + 22) / 115][Stage 9:==============================================>        (97 + 18) / 115][Stage 9:================================================>     (104 + 11) / 115][Stage 9:==================================================>    (106 + 9) / 115][Stage 9:=====================================================> (111 + 4) / 115][Stage 9:=====================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.550558089 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.559435608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:====================================>                 (77 + 38) / 115][Stage 10:=========================================>            (88 + 27) / 115][Stage 10:=============================================>        (97 + 18) / 115][Stage 10:===============================================>     (102 + 13) / 115][Stage 10:===================================================>  (109 + 6) / 115][Stage 10:=====================================================>(113 + 2) / 115]                                                                                [Stage 11:=======================================>              (84 + 32) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:============================================>         (95 + 21) / 116][Stage 11:===============================================>     (103 + 13) / 116][Stage 11:==================================================>   (109 + 7) / 116][Stage 11:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.80295741 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:====================================>                 (77 + 38) / 115][Stage 12:====================================>                 (78 + 37) / 115][Stage 12:==========================================>           (91 + 24) / 115][Stage 12:=============================================>        (96 + 19) / 115][Stage 12:==============================================>      (100 + 15) / 115][Stage 12:==================================================>   (108 + 7) / 115]                                                                                [Stage 13:=====================================>                (80 + 36) / 116][Stage 13:========================================>             (87 + 29) / 116][Stage 13:==============================================>       (99 + 17) / 116][Stage 13:================================================>    (106 + 10) / 116][Stage 13:==================================================>   (108 + 8) / 116][Stage 13:====================================================> (113 + 3) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.098118865 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57237474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (60 + 61) / 121][Stage 14:===========================>                          (61 + 60) / 121][Stage 14:=============================>                        (66 + 55) / 121][Stage 14:=================================>                    (75 + 46) / 121][Stage 14:=========================================>            (93 + 28) / 121][Stage 14:============================================>         (99 + 22) / 121][Stage 14:=================================================>    (112 + 9) / 121]                                                                                [Stage 15:===========================>                          (61 + 61) / 122][Stage 15:===========================>                          (63 + 59) / 122][Stage 15:===============================>                      (72 + 50) / 122][Stage 15:==========================================>           (96 + 26) / 122][Stage 15:================================================>    (111 + 11) / 122][Stage 15:===================================================>  (117 + 5) / 122][Stage 15:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.159073346 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.623920695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 62) / 122][Stage 16:===========================>                          (62 + 60) / 122][Stage 16:============================>                         (65 + 57) / 122][Stage 16:===================================>                  (81 + 41) / 122][Stage 16:============================================>        (103 + 19) / 122][Stage 16:=====================================================>(120 + 2) / 122]                                                                                [Stage 17:============================>                         (64 + 59) / 123][Stage 17:===============================>                      (71 + 52) / 123][Stage 17:=======================================>              (90 + 33) / 123][Stage 17:===============================================>     (110 + 13) / 123]                                                                                Time elapsed: 3.44754199 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488856229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (71 + 46) / 117][Stage 18:==================================>                   (74 + 43) / 117][Stage 18:========================================>             (88 + 29) / 117][Stage 18:=============================================>       (101 + 16) / 117][Stage 18:====================================================> (113 + 4) / 117]                                                                                [Stage 19:================================>                     (72 + 46) / 118][Stage 19:======================================>               (85 + 33) / 118][Stage 19:============================================>         (98 + 20) / 118][Stage 19:==================================================>   (111 + 7) / 118][Stage 19:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.456072116 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493606873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:====================================>                 (77 + 37) / 114][Stage 20:=======================================>              (84 + 30) / 114][Stage 20:=============================================>        (95 + 19) / 114][Stage 20:=================================================>    (105 + 9) / 114][Stage 20:===================================================>  (109 + 5) / 114][Stage 20:=====================================================>(113 + 1) / 114]                                                                                [Stage 21:======================================>               (83 + 32) / 115][Stage 21:========================================>             (87 + 28) / 115][Stage 21:=============================================>        (97 + 18) / 115][Stage 21:==================================================>   (108 + 7) / 115][Stage 21:===================================================>  (110 + 5) / 115][Stage 21:====================================================> (112 + 3) / 115][Stage 21:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.1116254 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=====================================>                (80 + 34) / 114][Stage 22:=========================================>            (87 + 27) / 114][Stage 22:==============================================>       (98 + 16) / 114][Stage 22:===================================================>  (108 + 6) / 114][Stage 22:====================================================> (111 + 3) / 114][Stage 22:=====================================================>(113 + 1) / 114]                                                                                [Stage 23:======================================>               (81 + 34) / 115][Stage 23:=========================================>            (88 + 27) / 115][Stage 23:============================================>         (95 + 20) / 115][Stage 23:=================================================>    (106 + 9) / 115][Stage 23:====================================================> (111 + 4) / 115][Stage 23:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.85727484 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463193059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (71 + 46) / 117][Stage 24:=================================>                    (73 + 44) / 117][Stage 24:=====================================>                (82 + 35) / 117][Stage 24:================================================>    (107 + 10) / 117][Stage 24:=====================================================>(116 + 1) / 117]                                                                                [Stage 25:=================================>                    (73 + 45) / 118][Stage 25:=======================================>              (86 + 32) / 118][Stage 25:============================================>         (98 + 20) / 118][Stage 25:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.995372587 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528723009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===============================>                      (67 + 48) / 115][Stage 26:====================================>                 (78 + 37) / 115][Stage 26:=========================================>            (88 + 27) / 115][Stage 26:============================================>         (94 + 21) / 115][Stage 26:===============================================>     (103 + 12) / 115][Stage 26:=================================================>    (106 + 9) / 115][Stage 26:====================================================> (111 + 4) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:================================>                     (70 + 46) / 116][Stage 27:=====================================>                (81 + 35) / 116][Stage 27:==========================================>           (92 + 24) / 116][Stage 27:==============================================>      (102 + 14) / 116][Stage 27:=================================================>    (107 + 9) / 116][Stage 27:===================================================>  (110 + 6) / 116][Stage 27:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.101111994 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==================================>                   (73 + 42) / 115][Stage 28:======================================>               (81 + 34) / 115][Stage 28:============================================>         (95 + 20) / 115][Stage 28:==============================================>       (98 + 17) / 115][Stage 28:==================================================>   (107 + 8) / 115][Stage 28:====================================================> (111 + 4) / 115][Stage 28:====================================================> (112 + 3) / 115]                                                                                [Stage 29:==================================>                   (75 + 41) / 116][Stage 29:==========================================>           (91 + 25) / 116][Stage 29:=============================================>        (97 + 19) / 116][Stage 29:================================================>    (106 + 10) / 116][Stage 29:===================================================>  (111 + 5) / 116][Stage 29:=====================================================>(114 + 2) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.386401695 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44669508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:======================================>               (81 + 34) / 115][Stage 30:==========================================>           (90 + 25) / 115][Stage 30:==============================================>      (100 + 15) / 115][Stage 30:==================================================>   (108 + 7) / 115][Stage 30:===================================================>  (109 + 6) / 115][Stage 30:====================================================> (111 + 4) / 115]                                                                                [Stage 31:=======================================>              (84 + 32) / 116][Stage 31:=============================================>        (97 + 19) / 116][Stage 31:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 3.148835461 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547974868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (61 + 60) / 121][Stage 32:==============================>                       (68 + 53) / 121][Stage 32:====================================>                 (82 + 39) / 121][Stage 32:============================================>        (102 + 19) / 121][Stage 32:==================================================>   (113 + 8) / 121][Stage 32:====================================================> (117 + 4) / 121][Stage 32:=====================================================>(119 + 2) / 121]                                                                                [Stage 33:===========================>                          (63 + 59) / 122][Stage 33:==============================>                       (70 + 52) / 122][Stage 33:====================================>                 (82 + 40) / 122][Stage 33:==========================================>           (96 + 26) / 122][Stage 33:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.787751643 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443939436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=================================>                    (70 + 44) / 114][Stage 34:======================================>               (81 + 33) / 114][Stage 34:=============================================>        (95 + 19) / 114][Stage 34:==================================================>   (106 + 8) / 114][Stage 34:=====================================================>(113 + 1) / 114]                                                                                [Stage 35:===================================>                  (76 + 39) / 115][Stage 35:========================================>             (87 + 28) / 115][Stage 35:==============================================>      (100 + 15) / 115][Stage 35:====================================================> (111 + 4) / 115][Stage 35:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.304843861 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (81 + 33) / 114][Stage 36:==========================================>           (90 + 24) / 114][Stage 36:===============================================>     (102 + 12) / 114][Stage 36:=====================================================>(112 + 2) / 114]                                                                                [Stage 37:========================================>             (87 + 28) / 115][Stage 37:============================================>         (95 + 20) / 115][Stage 37:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.747989862 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431776562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=====================================>                (79 + 36) / 115][Stage 38:=========================================>            (88 + 27) / 115][Stage 38:================================================>    (105 + 10) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:======================================>               (83 + 33) / 116][Stage 39:============================================>         (95 + 21) / 116][Stage 39:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.392611159 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (82 + 33) / 115][Stage 40:============================================>         (94 + 21) / 115][Stage 40:==================================================>   (107 + 8) / 115]                                                                                [Stage 41:======================================>               (82 + 34) / 116][Stage 41:=============================================>        (98 + 18) / 116][Stage 41:====================================================> (112 + 4) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.633465994 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531284148 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==========================>                           (60 + 61) / 121][Stage 42:===========================>                          (61 + 60) / 121][Stage 42:============================>                         (64 + 57) / 121][Stage 42:=======================================>              (88 + 33) / 121][Stage 42:===============================================>     (109 + 12) / 121]                                                                                [Stage 43:===========================>                          (62 + 60) / 122][Stage 43:===============================>                      (71 + 51) / 122][Stage 43:=========================================>            (93 + 29) / 122][Stage 43:==================================================>   (114 + 8) / 122][Stage 43:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.219130957 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475913987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (69 + 46) / 115][Stage 44:======================================>               (82 + 33) / 115][Stage 44:==============================================>      (101 + 14) / 115][Stage 44:==================================================>   (108 + 7) / 115]                                                                                [Stage 45:=================================>                    (71 + 45) / 116][Stage 45:====================================>                 (78 + 38) / 116][Stage 45:========================================>             (88 + 28) / 116][Stage 45:=============================================>       (100 + 16) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:===================================================>  (110 + 6) / 116][Stage 45:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.594444573 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42208429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=====================================>                (80 + 35) / 115][Stage 46:===========================================>          (93 + 22) / 115][Stage 46:==================================================>   (108 + 7) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:=========================================>            (89 + 27) / 116][Stage 47:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.451779993 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 209 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 209 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471365282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===============================>                      (67 + 48) / 115][Stage 48:====================================>                 (78 + 37) / 115][Stage 48:=========================================>            (88 + 27) / 115][Stage 48:=============================================>        (96 + 19) / 115][Stage 48:==================================================>   (107 + 8) / 115][Stage 48:=====================================================>(113 + 2) / 115]                                                                                [Stage 49:====================================>                 (78 + 38) / 116][Stage 49:=========================================>            (90 + 26) / 116][Stage 49:=================================================>    (107 + 9) / 116][Stage 49:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.252758203 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.635441596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 61) / 122][Stage 50:==============================>                       (69 + 53) / 122][Stage 50:======================================>               (87 + 35) / 122][Stage 50:=============================================>       (104 + 18) / 122][Stage 50:====================================================> (119 + 3) / 122]                                                                                [Stage 51:=============================>                        (68 + 55) / 123][Stage 51:==================================>                   (79 + 44) / 123][Stage 51:==============================================>      (107 + 16) / 123][Stage 51:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.214224839 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393473998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (82 + 33) / 115][Stage 52:==========================================>           (90 + 25) / 115][Stage 52:===============================================>     (102 + 13) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:========================================>             (87 + 29) / 116][Stage 53:=============================================>       (100 + 16) / 116][Stage 53:==================================================>   (108 + 8) / 116][Stage 53:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.80411728 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446360354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (71 + 46) / 117][Stage 54:==================================>                   (74 + 43) / 117][Stage 54:======================================>               (84 + 33) / 117][Stage 54:=============================================>       (100 + 17) / 117][Stage 54:====================================================> (113 + 4) / 117]                                                                                [Stage 55:=================================>                    (73 + 45) / 118][Stage 55:====================================>                 (80 + 38) / 118][Stage 55:==========================================>           (93 + 25) / 118][Stage 55:==================================================>   (110 + 8) / 118][Stage 55:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.191582428 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.549174643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==================================>                   (73 + 41) / 114][Stage 56:=======================================>              (83 + 31) / 114][Stage 56:=============================================>        (97 + 17) / 114][Stage 56:==================================================>   (106 + 8) / 114]                                                                                [Stage 57:===================================>                  (76 + 39) / 115][Stage 57:==========================================>           (91 + 24) / 115][Stage 57:===============================================>     (102 + 13) / 115][Stage 57:===================================================>  (110 + 5) / 115][Stage 57:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.045916171 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407836192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (80 + 35) / 115][Stage 58:========================================>             (86 + 29) / 115][Stage 58:===============================================>     (103 + 12) / 115][Stage 58:====================================================> (112 + 3) / 115]                                                                                [Stage 59:========================================>             (87 + 29) / 116][Stage 59:==============================================>       (99 + 17) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.798889626 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454314801 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:============================>                         (59 + 54) / 113][Stage 60:==================================>                   (72 + 41) / 113][Stage 60:=========================================>            (86 + 27) / 113][Stage 60:==================================================>   (106 + 7) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:=================================>                    (70 + 44) / 114][Stage 61:=======================================>              (83 + 31) / 114][Stage 61:=================================================>    (105 + 9) / 114][Stage 61:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.073048093 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443795249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (71 + 46) / 117][Stage 62:===================================>                  (76 + 41) / 117][Stage 62:==========================================>           (92 + 25) / 117][Stage 62:=============================================>       (100 + 17) / 117][Stage 62:===================================================>  (111 + 6) / 117]                                                                                [Stage 63:=================================>                    (73 + 45) / 118][Stage 63:====================================>                 (80 + 38) / 118][Stage 63:===========================================>          (96 + 22) / 118][Stage 63:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.123712584 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439348064 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=====================================>                (79 + 35) / 114][Stage 64:==========================================>           (90 + 24) / 114][Stage 64:===============================================>     (102 + 12) / 114][Stage 64:====================================================> (111 + 3) / 114]                                                                                [Stage 65:=======================================>              (84 + 31) / 115][Stage 65:==========================================>           (91 + 24) / 115][Stage 65:==============================================>      (101 + 14) / 115][Stage 65:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.976546705 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417316241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:====================================>                 (76 + 38) / 114][Stage 66:========================================>             (86 + 28) / 114][Stage 66:==============================================>      (101 + 13) / 114][Stage 66:===================================================>  (109 + 5) / 114][Stage 66:=====================================================>(113 + 1) / 114]                                                                                [Stage 67:=========================================>            (88 + 27) / 115][Stage 67:============================================>         (95 + 20) / 115][Stage 67:===============================================>     (104 + 11) / 115][Stage 67:=====================================================>(113 + 2) / 115][Stage 67:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.424784156 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387572769 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=====================================>                (79 + 36) / 115][Stage 68:========================================>             (86 + 29) / 115][Stage 68:==============================================>       (98 + 17) / 115][Stage 68:===================================================>  (109 + 6) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:=======================================>              (84 + 32) / 116][Stage 69:===========================================>          (93 + 23) / 116][Stage 69:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.669581895 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395411497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (79 + 36) / 115][Stage 70:=======================================>              (84 + 31) / 115][Stage 70:==============================================>      (100 + 15) / 115][Stage 70:=================================================>    (106 + 9) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:=======================================>              (85 + 31) / 116][Stage 71:==============================================>       (99 + 17) / 116][Stage 71:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.783301153 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393621014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:====================================>                 (76 + 38) / 114][Stage 72:=======================================>              (84 + 30) / 114][Stage 72:==============================================>      (101 + 13) / 114][Stage 72:===================================================>  (109 + 5) / 114][Stage 72:====================================================> (111 + 3) / 114][Stage 72:=====================================================>(113 + 1) / 114]                                                                                [Stage 73:==================================>                   (74 + 41) / 115][Stage 73:========================================>             (86 + 29) / 115][Stage 73:==============================================>      (101 + 14) / 115][Stage 73:=================================================>    (106 + 9) / 115][Stage 73:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.451707494 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398462599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===================================>                  (75 + 39) / 114][Stage 74:========================================>             (85 + 29) / 114][Stage 74:=============================================>        (97 + 17) / 114][Stage 74:=================================================>    (105 + 9) / 114][Stage 74:====================================================> (110 + 4) / 114]                                                                                [Stage 75:===================================>                  (75 + 40) / 115][Stage 75:===========================================>          (92 + 23) / 115][Stage 75:==============================================>       (98 + 17) / 115][Stage 75:==================================================>   (107 + 8) / 115][Stage 75:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.325934658 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447271611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (63 + 59) / 122][Stage 76:=================================>                    (75 + 47) / 122][Stage 76:===========================================>          (98 + 24) / 122][Stage 76:===================================================>  (116 + 6) / 122]                                                                                [Stage 77:===========================>                          (63 + 60) / 123][Stage 77:=============================>                        (68 + 55) / 123][Stage 77:===================================>                  (81 + 42) / 123][Stage 77:============================================>        (104 + 19) / 123]                                                                                Time elapsed: 3.021879976 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (61 + 61) / 122][Stage 78:==============================>                       (70 + 52) / 122][Stage 78:======================================>               (86 + 36) / 122][Stage 78:================================================>    (111 + 11) / 122][Stage 78:=====================================================>(120 + 2) / 122]                                                                                [Stage 79:===========================>                          (62 + 61) / 123][Stage 79:============================>                         (65 + 58) / 123][Stage 79:===================================>                  (81 + 42) / 123][Stage 79:===========================================>         (100 + 23) / 123][Stage 79:====================================================> (119 + 4) / 123][Stage 79:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.262661665 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38145036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:====================================>                 (78 + 36) / 114][Stage 80:===========================================>          (92 + 22) / 114][Stage 80:===============================================>     (102 + 12) / 114][Stage 80:===================================================>  (108 + 6) / 114]                                                                                [Stage 81:======================================>               (82 + 33) / 115][Stage 81:============================================>         (94 + 21) / 115][Stage 81:===============================================>     (104 + 11) / 115][Stage 81:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.863672643 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377093656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (83 + 32) / 115][Stage 82:==========================================>           (90 + 25) / 115][Stage 82:===============================================>     (103 + 12) / 115][Stage 82:===================================================>  (110 + 5) / 115]                                                                                [Stage 83:=======================================>              (85 + 31) / 116][Stage 83:==============================================>       (99 + 17) / 116][Stage 83:====================================================> (113 + 3) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.110260239 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444465066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==========================>                           (60 + 61) / 121][Stage 84:===========================>                          (61 + 60) / 121][Stage 84:=================================>                    (76 + 45) / 121][Stage 84:=========================================>            (94 + 27) / 121][Stage 84:====================================================> (117 + 4) / 121]                                                                                [Stage 85:============================>                         (64 + 58) / 122][Stage 85:==================================>                   (78 + 44) / 122][Stage 85:==========================================>           (95 + 27) / 122][Stage 85:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.99826088 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505580229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (62 + 60) / 122][Stage 86:==============================>                       (70 + 52) / 122][Stage 86:=====================================>                (84 + 38) / 122][Stage 86:============================================>        (103 + 19) / 122][Stage 86:====================================================> (119 + 3) / 122]                                                                                [Stage 87:==========================>                           (61 + 62) / 123][Stage 87:===========================>                          (63 + 60) / 123][Stage 87:===================================>                  (80 + 43) / 123][Stage 87:===========================================>         (101 + 22) / 123][Stage 87:===================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.097982141 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4206945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==============================>                       (66 + 49) / 115][Stage 88:===================================>                  (76 + 39) / 115][Stage 88:========================================>             (86 + 29) / 115][Stage 88:===============================================>     (103 + 12) / 115][Stage 88:==================================================>   (107 + 8) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:================================>                     (70 + 46) / 116][Stage 89:=====================================>                (80 + 36) / 116][Stage 89:============================================>         (95 + 21) / 116][Stage 89:===============================================>     (105 + 11) / 116][Stage 89:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.180604504 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379730857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=====================================>                (80 + 35) / 115][Stage 90:=========================================>            (88 + 27) / 115][Stage 90:==============================================>      (100 + 15) / 115][Stage 90:===================================================>  (110 + 5) / 115][Stage 90:=====================================================>(114 + 1) / 115]                                                                                [Stage 91:======================================>               (82 + 34) / 116][Stage 91:========================================>             (87 + 29) / 116][Stage 91:=============================================>       (100 + 16) / 116][Stage 91:====================================================> (112 + 4) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.903468672 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384912622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (70 + 44) / 114][Stage 92:========================================>             (85 + 29) / 114][Stage 92:=============================================>        (95 + 19) / 114][Stage 92:==============================================>       (99 + 15) / 114][Stage 92:===================================================>  (108 + 6) / 114][Stage 92:=====================================================>(112 + 2) / 114]                                                                                [Stage 93:========================================>             (87 + 28) / 115][Stage 93:==============================================>       (98 + 17) / 115][Stage 93:=================================================>    (106 + 9) / 115][Stage 93:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.23052959 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35473261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (82 + 33) / 115][Stage 94:=========================================>            (89 + 26) / 115][Stage 94:=================================================>    (106 + 9) / 115][Stage 94:====================================================> (111 + 4) / 115]                                                                                [Stage 95:=====================================>                (81 + 35) / 116][Stage 95:==========================================>           (91 + 25) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.720770836 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421000059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=============================>                        (66 + 55) / 121][Stage 96:=================================>                    (76 + 45) / 121][Stage 96:=========================================>            (93 + 28) / 121][Stage 96:==================================================>   (113 + 8) / 121]                                                                                [Stage 97:============================>                         (64 + 58) / 122][Stage 97:==================================>                   (78 + 44) / 122][Stage 97:==========================================>           (95 + 27) / 122][Stage 97:====================================================> (119 + 3) / 122][Stage 97:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.125356694 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (61 + 60) / 121][Stage 98:================================>                     (72 + 49) / 121][Stage 98:=========================================>            (92 + 29) / 121][Stage 98:================================================>    (110 + 11) / 121]                                                                                [Stage 99:============================>                         (64 + 58) / 122][Stage 99:==================================>                   (78 + 44) / 122][Stage 99:===========================================>         (101 + 21) / 122][Stage 99:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 2.993333235 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416566213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===========================>                         (62 + 59) / 121][Stage 100:=================================>                   (76 + 45) / 121][Stage 100:===========================================>         (99 + 22) / 121][Stage 100:===============================================>    (111 + 10) / 121]                                                                                [Stage 101:===========================>                         (64 + 58) / 122][Stage 101:===================================>                 (81 + 41) / 122][Stage 101:===========================================>        (103 + 19) / 122][Stage 101:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.03923138 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396536792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=================================>                   (72 + 43) / 115][Stage 102:=====================================>               (82 + 33) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:=================================================>   (108 + 7) / 115]                                                                                [Stage 103:=================================>                   (74 + 42) / 116][Stage 103:=======================================>             (87 + 29) / 116][Stage 103:=============================================>      (101 + 15) / 116][Stage 103:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.979737135 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425165681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 60) / 121][Stage 104:============================>                        (65 + 56) / 121][Stage 104:=================================>                   (77 + 44) / 121][Stage 104:=========================================>           (94 + 27) / 121][Stage 104:=================================================>   (113 + 8) / 121]                                                                                [Stage 105:===========================>                         (63 + 59) / 122][Stage 105:================================>                    (74 + 48) / 122][Stage 105:==========================================>          (97 + 25) / 122][Stage 105:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.058283014 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386787481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==================================>                  (75 + 39) / 114][Stage 106:=======================================>             (84 + 30) / 114][Stage 106:============================================>        (95 + 19) / 114][Stage 106:==================================================>  (108 + 6) / 114]                                                                                [Stage 107:======================================>              (83 + 32) / 115][Stage 107:==========================================>          (93 + 22) / 115][Stage 107:================================================>    (106 + 9) / 115][Stage 107:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.2600036 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (83 + 31) / 114][Stage 108:===========================================>         (93 + 21) / 114][Stage 108:===============================================>    (104 + 10) / 114][Stage 108:=================================================>   (107 + 7) / 114][Stage 108:====================================================>(113 + 1) / 114]                                                                                [Stage 109:===================================>                 (76 + 39) / 115][Stage 109:=========================================>           (90 + 25) / 115][Stage 109:==============================================>     (102 + 13) / 115][Stage 109:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.904786469 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354552067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=======================================>             (85 + 30) / 115][Stage 110:=============================================>      (100 + 15) / 115][Stage 110:=================================================>   (108 + 7) / 115][Stage 110:===================================================> (111 + 4) / 115]                                                                                [Stage 111:======================================>              (85 + 31) / 116][Stage 111:==========================================>          (92 + 24) / 116][Stage 111:==============================================>     (103 + 13) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.857681877 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346911479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (81 + 34) / 115][Stage 112:=========================================>           (90 + 25) / 115][Stage 112:===============================================>    (105 + 10) / 115][Stage 112:===================================================> (112 + 3) / 115]                                                                                [Stage 113:========================================>            (88 + 28) / 116][Stage 113:============================================>        (98 + 18) / 116][Stage 113:=================================================>   (108 + 8) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.101762148 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428379443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:============================>                        (65 + 56) / 121][Stage 114:================================>                    (74 + 47) / 121][Stage 114:============================================>       (103 + 18) / 121][Stage 114:===============================================>    (111 + 10) / 121]                                                                                [Stage 115:==========================>                          (62 + 60) / 122][Stage 115:==============================>                      (71 + 51) / 122][Stage 115:====================================>                (85 + 37) / 122][Stage 115:============================================>       (105 + 17) / 122]                                                                                Time elapsed: 2.825487199 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 251 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 251 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424741279 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:=============================>                       (67 + 54) / 121][Stage 116:=====================================>               (86 + 35) / 121][Stage 116:===============================================>    (110 + 11) / 121][Stage 116:====================================================>(120 + 1) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:=============================>                       (67 + 55) / 122][Stage 117:=====================================>               (86 + 36) / 122][Stage 117:============================================>       (105 + 17) / 122][Stage 117:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.103010803 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365968778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:====================================>                (80 + 35) / 115][Stage 118:=========================================>           (89 + 26) / 115][Stage 118:=================================================>   (107 + 8) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=====================================>               (82 + 34) / 116][Stage 119:=======================================>             (87 + 29) / 116][Stage 119:============================================>        (97 + 19) / 116][Stage 119:==================================================>  (110 + 6) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.887150238 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420793333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 61) / 122][Stage 120:===========================>                         (63 + 59) / 122][Stage 120:=================================>                   (77 + 45) / 122][Stage 120:===========================================>        (102 + 20) / 122][Stage 120:====================================================>(121 + 1) / 122]                                                                                [Stage 121:==========================>                          (61 + 62) / 123][Stage 121:==============================>                      (70 + 53) / 123][Stage 121:======================================>              (89 + 34) / 123][Stage 121:==============================================>     (110 + 13) / 123]                                                                                Time elapsed: 2.919133408 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380023671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (71 + 46) / 117][Stage 122:=================================>                   (74 + 43) / 117][Stage 122:======================================>              (86 + 31) / 117][Stage 122:============================================>       (101 + 16) / 117][Stage 122:===================================================> (114 + 3) / 117][Stage 122:====================================================>(116 + 1) / 117]                                                                                [Stage 123:================================>                    (72 + 46) / 118][Stage 123:================================>                    (73 + 45) / 118][Stage 123:========================================>            (90 + 28) / 118][Stage 123:============================================>       (100 + 18) / 118][Stage 123:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.303616781 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344662375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:====================================>                (80 + 35) / 115][Stage 124:=======================================>             (86 + 29) / 115][Stage 124:=================================================>   (107 + 8) / 115]                                                                                [Stage 125:=======================================>             (86 + 30) / 116][Stage 125:=========================================>           (91 + 25) / 116][Stage 125:==============================================>     (103 + 13) / 116][Stage 125:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.587705982 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445414838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (61 + 60) / 121][Stage 126:===============================>                     (71 + 50) / 121][Stage 126:======================================>              (89 + 32) / 121][Stage 126:=============================================>      (106 + 15) / 121]                                                                                [Stage 127:==========================>                          (62 + 60) / 122][Stage 127:=================================>                   (76 + 46) / 122][Stage 127:=======================================>             (92 + 30) / 122][Stage 127:===============================================>    (112 + 10) / 122][Stage 127:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.000635004 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425013176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 60) / 121][Stage 128:===============================>                     (72 + 49) / 121][Stage 128:======================================>              (89 + 32) / 121][Stage 128:=================================================>   (112 + 9) / 121]                                                                                [Stage 129:============================>                        (65 + 57) / 122][Stage 129:===============================>                     (72 + 50) / 122][Stage 129:=======================================>             (90 + 32) / 122][Stage 129:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.944956884 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418199129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 60) / 121][Stage 130:============================>                        (64 + 57) / 121][Stage 130:=================================>                   (77 + 44) / 121][Stage 130:===========================================>         (99 + 22) / 121][Stage 130:===================================================> (118 + 3) / 121]                                                                                [Stage 131:===========================>                         (64 + 58) / 122][Stage 131:=============================>                       (68 + 54) / 122][Stage 131:========================================>            (93 + 29) / 122][Stage 131:===============================================>    (112 + 10) / 122][Stage 131:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.141571843 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368128397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 46) / 117][Stage 132:================================>                    (72 + 45) / 117][Stage 132:=====================================>               (83 + 34) / 117][Stage 132:============================================>       (101 + 16) / 117][Stage 132:===================================================> (114 + 3) / 117][Stage 132:====================================================>(116 + 1) / 117]                                                                                [Stage 133:================================>                    (73 + 45) / 118][Stage 133:===================================>                 (79 + 39) / 118][Stage 133:=========================================>           (92 + 26) / 118][Stage 133:==============================================>     (105 + 13) / 118]                                                                                Time elapsed: 3.085486982 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399173469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 60) / 121][Stage 134:============================>                        (66 + 55) / 121][Stage 134:==================================>                  (79 + 42) / 121][Stage 134:=============================================>      (107 + 14) / 121][Stage 134:====================================================>(120 + 1) / 121]                                                                                [Stage 135:==========================>                          (62 + 60) / 122][Stage 135:=============================>                       (69 + 53) / 122][Stage 135:===================================>                 (82 + 40) / 122][Stage 135:==============================================>     (109 + 13) / 122][Stage 135:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.935058346 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405157095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 61) / 122][Stage 136:===============================>                     (73 + 49) / 122][Stage 136:========================================>            (93 + 29) / 122][Stage 136:==================================================>  (116 + 6) / 122]                                                                                [Stage 137:============================>                        (66 + 57) / 123][Stage 137:=================================>                   (78 + 45) / 123][Stage 137:==========================================>          (98 + 25) / 123][Stage 137:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 2.967082796 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458151128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (70 + 44) / 114][Stage 138:=======================================>             (84 + 30) / 114][Stage 138:==============================================>      (99 + 15) / 114][Stage 138:================================================>    (105 + 9) / 114][Stage 138:==================================================>  (108 + 6) / 114][Stage 138:====================================================>(113 + 1) / 114]                                                                                [Stage 139:==================================>                  (74 + 41) / 115][Stage 139:========================================>            (87 + 28) / 115][Stage 139:=============================================>      (100 + 15) / 115][Stage 139:================================================>    (106 + 9) / 115][Stage 139:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.21874095 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331508679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=======================================>             (85 + 30) / 115][Stage 140:=========================================>           (91 + 24) / 115][Stage 140:===============================================>    (105 + 10) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:=====================================>               (82 + 34) / 116][Stage 141:=========================================>           (90 + 26) / 116][Stage 141:============================================>        (97 + 19) / 116][Stage 141:=================================================>   (108 + 8) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.825597686 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371084818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==============================>                      (66 + 49) / 115][Stage 142:===================================>                 (77 + 38) / 115][Stage 142:=========================================>           (89 + 26) / 115][Stage 142:=============================================>      (101 + 14) / 115][Stage 142:=================================================>   (107 + 8) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:==============================>                      (67 + 49) / 116][Stage 143:===================================>                 (78 + 38) / 116][Stage 143:======================================>              (85 + 31) / 116][Stage 143:===============================================>    (106 + 10) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.253819821 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400857189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 62) / 122][Stage 144:===========================>                         (63 + 59) / 122][Stage 144:====================================>                (84 + 38) / 122][Stage 144:==============================================>     (110 + 12) / 122]                                                                                [Stage 145:===========================>                         (63 + 60) / 123][Stage 145:===============================>                     (72 + 51) / 123][Stage 145:======================================>              (90 + 33) / 123][Stage 145:=================================================>   (114 + 9) / 123]                                                                                Time elapsed: 2.861338218 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357123184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=====================================>               (82 + 33) / 115][Stage 146:========================================>            (88 + 27) / 115][Stage 146:=============================================>      (101 + 14) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:=====================================>               (82 + 34) / 116][Stage 147:========================================>            (89 + 27) / 116][Stage 147:=============================================>       (99 + 17) / 116][Stage 147:================================================>    (107 + 9) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.711375122 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (83 + 32) / 115][Stage 148:===========================================>         (94 + 21) / 115][Stage 148:=================================================>   (108 + 7) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:======================================>              (84 + 32) / 116][Stage 149:=========================================>           (91 + 25) / 116][Stage 149:================================================>    (107 + 9) / 116][Stage 149:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.670649979 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366459653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 45) / 117][Stage 150:===================================>                 (79 + 38) / 117][Stage 150:============================================>        (98 + 19) / 117][Stage 150:================================================>    (108 + 9) / 117]                                                                                [Stage 151:================================>                    (73 + 45) / 118][Stage 151:=====================================>               (84 + 34) / 118][Stage 151:============================================>       (101 + 17) / 118][Stage 151:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.848058616 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406765013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (61 + 60) / 121][Stage 152:===============================>                     (72 + 49) / 121][Stage 152:========================================>            (92 + 29) / 121][Stage 152:=================================================>   (114 + 7) / 121][Stage 152:====================================================>(120 + 1) / 121]                                                                                [Stage 153:===========================>                         (64 + 58) / 122][Stage 153:==================================>                  (80 + 42) / 122][Stage 153:=============================================>      (107 + 15) / 122][Stage 153:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.145337816 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407220613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (63 + 58) / 121][Stage 154:==================================>                  (78 + 43) / 121][Stage 154:========================================>            (93 + 28) / 121][Stage 154:===================================================> (118 + 3) / 121]                                                                                [Stage 155:==========================>                          (62 + 60) / 122][Stage 155:=============================>                       (69 + 53) / 122][Stage 155:==================================>                  (80 + 42) / 122][Stage 155:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 2.86625505 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (61 + 60) / 121][Stage 156:============================>                        (64 + 57) / 121][Stage 156:=================================>                   (77 + 44) / 121][Stage 156:============================================>       (103 + 18) / 121][Stage 156:====================================================>(119 + 2) / 121]                                                                                [Stage 157:==========================>                          (62 + 60) / 122][Stage 157:==============================>                      (70 + 52) / 122][Stage 157:=======================================>             (92 + 30) / 122][Stage 157:=================================================>   (113 + 9) / 122][Stage 157:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.975599418 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387616473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:=================================>                   (71 + 42) / 113][Stage 158:=======================================>             (85 + 28) / 113][Stage 158:==============================================>     (100 + 13) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:===========================>                         (60 + 54) / 114][Stage 159:================================>                    (69 + 45) / 114][Stage 159:========================================>            (87 + 27) / 114][Stage 159:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.06841639 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331731256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=====================================>               (82 + 33) / 115][Stage 160:=======================================>             (86 + 29) / 115][Stage 160:=============================================>       (99 + 16) / 115][Stage 160:=================================================>   (108 + 7) / 115]                                                                                [Stage 161:=====================================>               (82 + 34) / 116][Stage 161:===========================================>         (96 + 20) / 116][Stage 161:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.63662035 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461353367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==================================>                  (75 + 39) / 114][Stage 162:========================================>            (88 + 26) / 114][Stage 162:============================================>        (95 + 19) / 114][Stage 162:==============================================>     (102 + 12) / 114][Stage 162:====================================================>(112 + 2) / 114]                                                                                [Stage 163:=====================================>               (82 + 33) / 115][Stage 163:==========================================>          (92 + 23) / 115][Stage 163:=============================================>       (99 + 16) / 115][Stage 163:=================================================>   (107 + 8) / 115][Stage 163:==================================================>  (109 + 6) / 115][Stage 163:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.63653908 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359729244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (71 + 46) / 117][Stage 164:=================================>                   (75 + 42) / 117][Stage 164:=========================================>           (92 + 25) / 117][Stage 164:===============================================>    (107 + 10) / 117][Stage 164:====================================================>(116 + 1) / 117]                                                                                [Stage 165:================================>                    (72 + 46) / 118][Stage 165:==================================>                  (77 + 41) / 118][Stage 165:============================================>        (98 + 20) / 118][Stage 165:==================================================>  (113 + 5) / 118][Stage 165:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.086040039 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372122196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===============================>                     (70 + 47) / 117][Stage 166:==================================>                  (77 + 40) / 117][Stage 166:=======================================>             (88 + 29) / 117][Stage 166:============================================>        (99 + 18) / 117][Stage 166:===================================================> (114 + 3) / 117]                                                                                [Stage 167:================================>                    (72 + 46) / 118][Stage 167:==================================>                  (77 + 41) / 118][Stage 167:========================================>            (91 + 27) / 118][Stage 167:=============================================>      (103 + 15) / 118][Stage 167:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.041849152 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335013439 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:====================================>                (79 + 36) / 115][Stage 168:======================================>              (84 + 31) / 115][Stage 168:============================================>        (96 + 19) / 115][Stage 168:=================================================>   (107 + 8) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=========================================>           (91 + 25) / 116][Stage 169:==============================================>     (103 + 13) / 116][Stage 169:=================================================>   (108 + 8) / 116][Stage 169:===================================================> (112 + 4) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.301156331 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388019111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==============================>                      (67 + 48) / 115][Stage 170:=================================>                   (73 + 42) / 115][Stage 170:========================================>            (88 + 27) / 115][Stage 170:=============================================>      (100 + 15) / 115][Stage 170:=================================================>   (108 + 7) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:===============================>                     (70 + 46) / 116][Stage 171:=====================================>               (83 + 33) / 116][Stage 171:=============================================>       (99 + 17) / 116][Stage 171:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.966939791 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375674419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===================================>                 (77 + 38) / 115][Stage 172:=======================================>             (86 + 29) / 115][Stage 172:=============================================>       (99 + 16) / 115][Stage 172:===================================================> (111 + 4) / 115]                                                                                [Stage 173:===============================>                     (70 + 46) / 116][Stage 173:====================================>                (79 + 37) / 116][Stage 173:============================================>       (100 + 16) / 116][Stage 173:===============================================>    (106 + 10) / 116][Stage 173:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.95912384 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372684035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (70 + 45) / 115][Stage 174:=====================================>               (82 + 33) / 115][Stage 174:=============================================>      (100 + 15) / 115][Stage 174:=================================================>   (107 + 8) / 115]                                                                                [Stage 175:==================================>                  (75 + 41) / 116][Stage 175:=======================================>             (87 + 29) / 116][Stage 175:===============================================>    (105 + 11) / 116][Stage 175:=================================================>   (109 + 7) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.245055566 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442370685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (75 + 39) / 114][Stage 176:===========================================>         (94 + 20) / 114][Stage 176:==============================================>     (101 + 13) / 114][Stage 176:===================================================> (110 + 4) / 114][Stage 176:====================================================>(112 + 2) / 114]                                                                                [Stage 177:======================================>              (83 + 32) / 115][Stage 177:============================================>        (96 + 19) / 115][Stage 177:==============================================>     (103 + 12) / 115][Stage 177:=================================================>   (107 + 8) / 115][Stage 177:====================================================>(113 + 2) / 115][Stage 177:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.463860682 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403862946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (62 + 59) / 121][Stage 178:===============================>                     (71 + 50) / 121][Stage 178:=======================================>             (91 + 30) / 121][Stage 178:=================================================>   (112 + 9) / 121]                                                                                [Stage 179:===========================>                         (63 + 59) / 122][Stage 179:================================>                    (75 + 47) / 122][Stage 179:===========================================>        (101 + 21) / 122][Stage 179:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.951818165 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374148336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=================================>                   (73 + 44) / 117][Stage 180:===================================>                 (79 + 38) / 117][Stage 180:=========================================>           (92 + 25) / 117][Stage 180:===============================================>    (107 + 10) / 117][Stage 180:====================================================>(116 + 1) / 117]                                                                                [Stage 181:================================>                    (72 + 46) / 118][Stage 181:===================================>                 (78 + 40) / 118][Stage 181:============================================>       (101 + 17) / 118][Stage 181:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.952276523 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396735838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 60) / 121][Stage 182:============================>                        (65 + 56) / 121][Stage 182:===================================>                 (81 + 40) / 121][Stage 182:==========================================>         (100 + 21) / 121][Stage 182:====================================================>(119 + 2) / 121]                                                                                [Stage 183:==========================>                          (61 + 61) / 122][Stage 183:==============================>                      (71 + 51) / 122][Stage 183:=======================================>             (91 + 31) / 122][Stage 183:==============================================>     (109 + 13) / 122][Stage 183:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.084701453 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39917164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:============================>                        (65 + 56) / 121][Stage 184:==================================>                  (78 + 43) / 121][Stage 184:==========================================>          (96 + 25) / 121][Stage 184:===============================================>    (111 + 10) / 121]                                                                                [Stage 185:===========================>                         (64 + 58) / 122][Stage 185:=================================>                   (78 + 44) / 122][Stage 185:=========================================>           (95 + 27) / 122][Stage 185:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.061755287 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397388378 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (61 + 61) / 122][Stage 186:===========================>                         (64 + 58) / 122][Stage 186:==================================>                  (80 + 42) / 122][Stage 186:===========================================>         (99 + 23) / 122][Stage 186:==================================================>  (117 + 5) / 122][Stage 186:=====================================================(122 + 0) / 122]                                                                                [Stage 187:==========================>                          (62 + 61) / 123][Stage 187:==============================>                      (71 + 52) / 123][Stage 187:=====================================>               (88 + 35) / 123][Stage 187:============================================>       (105 + 18) / 123][Stage 187:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.263571647 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333337454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=======================================>             (86 + 29) / 115][Stage 188:=============================================>       (99 + 16) / 115][Stage 188:===================================================> (111 + 4) / 115]                                                                                [Stage 189:======================================>              (84 + 32) / 116][Stage 189:===============================================>    (105 + 11) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.490352411 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356646436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=================================>                   (73 + 41) / 114][Stage 190:======================================>              (82 + 32) / 114][Stage 190:==========================================>          (91 + 23) / 114][Stage 190:==============================================>     (102 + 12) / 114][Stage 190:====================================================>(112 + 2) / 114][Stage 190:====================================================>(113 + 1) / 114]                                                                                [Stage 191:==================================>                  (75 + 40) / 115][Stage 191:========================================>            (88 + 27) / 115][Stage 191:===========================================>         (94 + 21) / 115][Stage 191:==============================================>     (102 + 13) / 115][Stage 191:===================================================> (112 + 3) / 115][Stage 191:====================================================>(113 + 2) / 115][Stage 191:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.526002884 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (70 + 44) / 114][Stage 192:======================================>              (82 + 32) / 114][Stage 192:=========================================>           (89 + 25) / 114][Stage 192:=============================================>       (98 + 16) / 114][Stage 192:===============================================>    (104 + 10) / 114][Stage 192:=================================================>   (107 + 7) / 114][Stage 192:===================================================> (110 + 4) / 114][Stage 192:====================================================>(112 + 2) / 114]                                                                                [Stage 193:====================================>                (79 + 36) / 115][Stage 193:=========================================>           (90 + 25) / 115][Stage 193:=============================================>      (100 + 15) / 115][Stage 193:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 3.61637805 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402653821 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (71 + 44) / 115][Stage 194:===================================>                 (77 + 38) / 115][Stage 194:============================================>        (97 + 18) / 115][Stage 194:===============================================>    (105 + 10) / 115]                                                                                [Stage 195:=================================>                   (73 + 43) / 116][Stage 195:====================================>                (80 + 36) / 116][Stage 195:==========================================>          (94 + 22) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.03758991 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363967442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===============================>                     (69 + 46) / 115][Stage 196:====================================>                (80 + 35) / 115][Stage 196:===========================================>         (94 + 21) / 115][Stage 196:==============================================>     (102 + 13) / 115][Stage 196:===================================================> (112 + 3) / 115]                                                                                [Stage 197:===============================>                     (69 + 47) / 116][Stage 197:===================================>                 (78 + 38) / 116][Stage 197:============================================>       (100 + 16) / 116][Stage 197:===============================================>    (105 + 11) / 116][Stage 197:================================================>    (107 + 9) / 116][Stage 197:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.203038992 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393011052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (59 + 54) / 113][Stage 198:=============================>                       (62 + 51) / 113][Stage 198:======================================>              (82 + 31) / 113][Stage 198:=================================================>   (106 + 7) / 113]                                                                                [Stage 199:============================>                        (62 + 52) / 114][Stage 199:===============================>                     (68 + 46) / 114][Stage 199:=========================================>           (89 + 25) / 114][Stage 199:===============================================>    (104 + 10) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.033805361 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352264311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=================================>                   (73 + 41) / 114][Stage 200:======================================>              (82 + 32) / 114][Stage 200:============================================>        (95 + 19) / 114][Stage 200:==================================================>  (108 + 6) / 114][Stage 200:====================================================>(113 + 1) / 114]                                                                                [Stage 201:===================================>                 (76 + 39) / 115][Stage 201:========================================>            (87 + 28) / 115][Stage 201:============================================>        (97 + 18) / 115][Stage 201:================================================>    (106 + 9) / 115][Stage 201:===================================================> (111 + 4) / 115][Stage 201:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.086828251 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m51.979s
user	11m35.736s
sys	0m28.516s
