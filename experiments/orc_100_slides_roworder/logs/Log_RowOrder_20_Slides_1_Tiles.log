Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 20:31:10 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:31:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:31:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:31:26 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 20:31:28 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:31:38 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529203127-0679).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.316547408 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (1 + 114) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (58 + 58) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 14.093205656 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.652245081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:================================>                      (67 + 47) / 114][Stage 2:==================================>                    (72 + 42) / 114][Stage 2:====================================>                  (75 + 39) / 114][Stage 2:=====================================>                 (78 + 36) / 114][Stage 2:=========================================>             (86 + 28) / 114][Stage 2:=============================================>         (94 + 20) / 114][Stage 2:===============================================>      (100 + 14) / 114][Stage 2:===================================================>   (106 + 8) / 114][Stage 2:====================================================>  (108 + 6) / 114][Stage 2:=====================================================> (110 + 4) / 114][Stage 2:======================================================>(113 + 1) / 114]                                                                                [Stage 3:=================================>                     (71 + 44) / 115][Stage 3:=====================================>                 (78 + 37) / 115][Stage 3:======================================>                (81 + 34) / 115][Stage 3:========================================>              (85 + 30) / 115][Stage 3:===========================================>           (91 + 24) / 115][Stage 3:==============================================>       (100 + 15) / 115][Stage 3:==================================================>    (106 + 9) / 115][Stage 3:====================================================>  (109 + 6) / 115][Stage 3:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 5.585744946 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.722790439 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=========================>                             (56 + 65) / 121][Stage 4:===========================>                           (61 + 60) / 121][Stage 4:=============================>                         (64 + 57) / 121][Stage 4:==============================>                        (68 + 53) / 121][Stage 4:===================================>                   (78 + 43) / 121][Stage 4:==============================================>       (104 + 17) / 121][Stage 4:====================================================>  (116 + 5) / 121]                                                                                [Stage 5:===========================>                           (62 + 60) / 122][Stage 5:============================>                          (63 + 59) / 122][Stage 5:================================>                      (73 + 49) / 122][Stage 5:=========================================>             (91 + 31) / 122][Stage 5:===================================================>   (114 + 8) / 122][Stage 5:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.022899594 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.599825409 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (70 + 44) / 114][Stage 6:==================================>                    (72 + 42) / 114][Stage 6:====================================>                  (76 + 38) / 114][Stage 6:============================================>          (92 + 22) / 114][Stage 6:==============================================>        (97 + 17) / 114][Stage 6:================================================>     (102 + 12) / 114][Stage 6:===================================================>   (106 + 8) / 114][Stage 6:=====================================================> (111 + 3) / 114]                                                                                [Stage 7:===================================>                   (75 + 40) / 115][Stage 7:=====================================>                 (79 + 36) / 115][Stage 7:========================================>              (85 + 30) / 115][Stage 7:============================================>          (92 + 23) / 115][Stage 7:===============================================>       (99 + 16) / 115][Stage 7:===================================================>   (107 + 8) / 115][Stage 7:=====================================================> (111 + 4) / 115][Stage 7:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.601797721 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.637536195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==========================>                            (59 + 63) / 122][Stage 8:===========================>                           (62 + 60) / 122][Stage 8:===============================>                       (69 + 53) / 122][Stage 8:=================================>                     (75 + 47) / 122][Stage 8:===================================>                   (78 + 44) / 122][Stage 8:============================================>         (101 + 21) / 122][Stage 8:=====================================================> (118 + 4) / 122]                                                                                [Stage 9:==========================>                            (60 + 63) / 123][Stage 9:============================>                          (64 + 59) / 123][Stage 9:=====================================>                 (84 + 39) / 123][Stage 9:===========================================>          (100 + 23) / 123][Stage 9:================================================>     (110 + 13) / 123][Stage 9:====================================================>  (118 + 5) / 123]                                                                                Time elapsed: 4.090448635 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.611434998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (61 + 61) / 122][Stage 10:=============================>                        (67 + 55) / 122][Stage 10:===================================>                  (80 + 42) / 122][Stage 10:==============================================>      (107 + 15) / 122][Stage 10:====================================================> (118 + 4) / 122]                                                                                [Stage 11:===========================>                          (62 + 61) / 123][Stage 11:=============================>                        (67 + 56) / 123][Stage 11:====================================>                 (84 + 39) / 123][Stage 11:===========================================>          (98 + 25) / 123][Stage 11:================================================>    (113 + 10) / 123][Stage 11:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.699978202 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488449327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===================================>                  (74 + 40) / 114][Stage 12:========================================>             (85 + 29) / 114][Stage 12:===========================================>          (92 + 22) / 114][Stage 12:===============================================>     (102 + 12) / 114][Stage 12:==================================================>   (107 + 7) / 114][Stage 12:===================================================>  (108 + 6) / 114][Stage 12:===================================================>  (109 + 5) / 114][Stage 12:=====================================================>(113 + 1) / 114]                                                                                [Stage 13:===================================>                  (75 + 40) / 115][Stage 13:==========================================>           (91 + 24) / 115][Stage 13:=============================================>        (97 + 18) / 115][Stage 13:===============================================>     (102 + 13) / 115][Stage 13:===================================================>  (109 + 6) / 115][Stage 13:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.246155979 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480017335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:=======================================>              (84 + 31) / 115][Stage 14:============================================>         (94 + 21) / 115][Stage 14:====================================================> (111 + 4) / 115]                                                                                [Stage 15:=====================================>                (81 + 35) / 116][Stage 15:=======================================>              (84 + 32) / 116][Stage 15:=============================================>        (98 + 18) / 116][Stage 15:==============================================>      (102 + 14) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.161113921 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528952652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (71 + 46) / 117][Stage 16:====================================>                 (79 + 38) / 117][Stage 16:============================================>         (96 + 21) / 117][Stage 16:===================================================>  (112 + 5) / 117][Stage 16:====================================================> (113 + 4) / 117][Stage 16:=====================================================>(116 + 1) / 117]                                                                                [Stage 17:================================>                     (72 + 46) / 118][Stage 17:=================================>                    (74 + 44) / 118][Stage 17:=======================================>              (87 + 31) / 118][Stage 17:=============================================>        (99 + 19) / 118][Stage 17:=================================================>    (109 + 9) / 118][Stage 17:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.916456953 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.5198302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:============================>                         (59 + 54) / 113][Stage 18:===============================>                      (65 + 48) / 113][Stage 18:=====================================>                (79 + 34) / 113][Stage 18:==============================================>       (97 + 16) / 113][Stage 18:===================================================>  (107 + 6) / 113][Stage 18:====================================================> (110 + 3) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:=============================>                        (62 + 52) / 114][Stage 19:===================================>                  (74 + 40) / 114][Stage 19:===========================================>          (92 + 22) / 114][Stage 19:==================================================>   (106 + 8) / 114][Stage 19:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.813774425 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 251 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 251 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511228327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (65 + 50) / 115][Stage 20:===============================>                      (67 + 48) / 115][Stage 20:=======================================>              (85 + 30) / 115][Stage 20:============================================>         (95 + 20) / 115][Stage 20:==============================================>      (101 + 14) / 115][Stage 20:==================================================>   (108 + 7) / 115][Stage 20:===================================================>  (110 + 5) / 115]                                                                                [Stage 21:================================>                     (70 + 46) / 116][Stage 21:=====================================>                (80 + 36) / 116][Stage 21:============================================>         (96 + 20) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:===================================================>  (111 + 5) / 116][Stage 21:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.950591244 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449837101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==================================>                   (73 + 41) / 114][Stage 22:=======================================>              (84 + 30) / 114][Stage 22:==============================================>       (99 + 15) / 114][Stage 22:==================================================>   (106 + 8) / 114][Stage 22:====================================================> (111 + 3) / 114]                                                                                [Stage 23:====================================>                 (77 + 38) / 115][Stage 23:=======================================>              (85 + 30) / 115][Stage 23:===============================================>     (102 + 13) / 115][Stage 23:===================================================>  (109 + 6) / 115][Stage 23:====================================================> (111 + 4) / 115][Stage 23:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.407757284 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482566894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (71 + 46) / 117][Stage 24:===================================>                  (77 + 40) / 117][Stage 24:==========================================>           (93 + 24) / 117][Stage 24:================================================>    (107 + 10) / 117][Stage 24:===================================================>  (111 + 6) / 117][Stage 24:=====================================================>(116 + 1) / 117]                                                                                [Stage 25:================================>                     (72 + 46) / 118][Stage 25:==================================>                   (75 + 43) / 118][Stage 25:=====================================>                (83 + 35) / 118][Stage 25:===========================================>          (94 + 24) / 118][Stage 25:===============================================>     (105 + 13) / 118][Stage 25:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.642327098 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413738534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:======================================>               (83 + 32) / 115][Stage 26:============================================>         (95 + 20) / 115][Stage 26:=================================================>    (106 + 9) / 115][Stage 26:====================================================> (112 + 3) / 115]                                                                                [Stage 27:======================================>               (83 + 33) / 116][Stage 27:============================================>         (95 + 21) / 116][Stage 27:===============================================>     (103 + 13) / 116][Stage 27:===================================================>  (111 + 5) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.136705726 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.557759127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:================================>                     (71 + 46) / 117][Stage 28:====================================>                 (79 + 38) / 117][Stage 28:==========================================>           (92 + 25) / 117][Stage 28:===================================================>  (111 + 6) / 117][Stage 28:=====================================================>(115 + 2) / 117]                                                                                [Stage 29:================================>                     (72 + 46) / 118][Stage 29:====================================>                 (79 + 39) / 118][Stage 29:===========================================>          (96 + 22) / 118][Stage 29:===================================================>  (113 + 5) / 118][Stage 29:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.231178902 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499265659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==========================>                           (60 + 61) / 121][Stage 30:===========================>                          (62 + 59) / 121][Stage 30:=================================>                    (74 + 47) / 121][Stage 30:===========================================>         (100 + 21) / 121][Stage 30:==================================================>   (113 + 8) / 121][Stage 30:=====================================================>(120 + 1) / 121]                                                                                [Stage 31:===========================>                          (62 + 60) / 122][Stage 31:=================================>                    (76 + 46) / 122][Stage 31:========================================>             (91 + 31) / 122][Stage 31:==================================================>   (113 + 9) / 122][Stage 31:====================================================> (118 + 4) / 122][Stage 31:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.417396258 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405281982 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (81 + 34) / 115][Stage 32:=========================================>            (89 + 26) / 115][Stage 32:============================================>         (95 + 20) / 115][Stage 32:===================================================>  (109 + 6) / 115]                                                                                [Stage 33:======================================>               (83 + 33) / 116][Stage 33:=========================================>            (90 + 26) / 116][Stage 33:==============================================>      (101 + 15) / 116][Stage 33:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.847187703 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52059068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (71 + 46) / 117][Stage 34:==================================>                   (75 + 42) / 117][Stage 34:========================================>             (87 + 30) / 117][Stage 34:==================================================>   (110 + 7) / 117][Stage 34:=====================================================>(115 + 2) / 117]                                                                                [Stage 35:=================================>                    (74 + 44) / 118][Stage 35:=====================================>                (81 + 37) / 118][Stage 35:===========================================>          (96 + 22) / 118][Stage 35:=================================================>    (109 + 9) / 118][Stage 35:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.425717732 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502208697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 60) / 121][Stage 36:============================>                         (64 + 57) / 121][Stage 36:===================================>                  (79 + 42) / 121][Stage 36:=========================================>            (94 + 27) / 121][Stage 36:===================================================>  (115 + 6) / 121]                                                                                [Stage 37:===========================>                          (62 + 60) / 122][Stage 37:=================================>                    (75 + 47) / 122][Stage 37:=======================================>              (89 + 33) / 122][Stage 37:==================================================>   (115 + 7) / 122][Stage 37:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.176564312 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520858699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 60) / 121][Stage 38:============================>                         (64 + 57) / 121][Stage 38:==================================>                   (78 + 43) / 121][Stage 38:===========================================>         (100 + 21) / 121][Stage 38:=====================================================>(119 + 2) / 121]                                                                                [Stage 39:=============================>                        (67 + 55) / 122][Stage 39:==================================>                   (79 + 43) / 122][Stage 39:===============================================>     (110 + 12) / 122][Stage 39:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.01063854 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479243556 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (61 + 60) / 121][Stage 40:=================================>                    (76 + 45) / 121][Stage 40:=======================================>              (89 + 32) / 121][Stage 40:================================================>    (110 + 11) / 121]                                                                                [Stage 41:===========================>                          (63 + 59) / 122][Stage 41:================================>                     (74 + 48) / 122][Stage 41:===========================================>         (101 + 21) / 122][Stage 41:==================================================>   (113 + 9) / 122][Stage 41:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.229786446 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417499431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:======================================>               (81 + 34) / 115][Stage 42:============================================>         (95 + 20) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:=====================================>                (81 + 35) / 116][Stage 43:===========================================>          (94 + 22) / 116][Stage 43:==================================================>   (109 + 7) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.914748825 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444564808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (71 + 46) / 117][Stage 44:==================================>                   (74 + 43) / 117][Stage 44:=========================================>            (89 + 28) / 117][Stage 44:================================================>    (107 + 10) / 117][Stage 44:====================================================> (113 + 4) / 117]                                                                                [Stage 45:=================================>                    (73 + 45) / 118][Stage 45:=====================================>                (82 + 36) / 118][Stage 45:============================================>        (100 + 18) / 118][Stage 45:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.097338285 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429060681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===============================>                      (67 + 48) / 115][Stage 46:=====================================>                (79 + 36) / 115][Stage 46:============================================>         (94 + 21) / 115][Stage 46:================================================>    (105 + 10) / 115][Stage 46:====================================================> (112 + 3) / 115]                                                                                [Stage 47:=================================>                    (72 + 44) / 116][Stage 47:========================================>             (88 + 28) / 116][Stage 47:=============================================>       (100 + 16) / 116][Stage 47:=================================================>    (107 + 9) / 116][Stage 47:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.282756701 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555661489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (71 + 46) / 117][Stage 48:====================================>                 (78 + 39) / 117][Stage 48:==========================================>           (91 + 26) / 117][Stage 48:===================================================>  (112 + 5) / 117]                                                                                [Stage 49:================================>                     (72 + 46) / 118][Stage 49:====================================>                 (80 + 38) / 118][Stage 49:===========================================>          (95 + 23) / 118][Stage 49:===============================================>     (105 + 13) / 118][Stage 49:===================================================>  (113 + 5) / 118][Stage 49:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.437978925 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:================================>                     (71 + 46) / 117][Stage 50:=================================>                    (72 + 45) / 117][Stage 50:=======================================>              (85 + 32) / 117][Stage 50:===============================================>     (104 + 13) / 117][Stage 50:====================================================> (114 + 3) / 117]                                                                                [Stage 51:================================>                     (72 + 46) / 118][Stage 51:=====================================>                (83 + 35) / 118][Stage 51:============================================>        (100 + 18) / 118][Stage 51:==================================================>   (110 + 8) / 118][Stage 51:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.350441343 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371163793 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (83 + 32) / 115][Stage 52:==========================================>           (90 + 25) / 115][Stage 52:===============================================>     (102 + 13) / 115][Stage 52:====================================================> (111 + 4) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:======================================>               (82 + 34) / 116][Stage 53:=========================================>            (90 + 26) / 116][Stage 53:==============================================>      (101 + 15) / 116][Stage 53:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.883642896 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (83 + 32) / 115][Stage 54:=========================================>            (89 + 26) / 115][Stage 54:==============================================>       (99 + 16) / 115][Stage 54:====================================================> (111 + 4) / 115]                                                                                [Stage 55:========================================>             (86 + 30) / 116][Stage 55:==========================================>           (92 + 24) / 116][Stage 55:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.683664132 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437709314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=================================>                    (70 + 44) / 114][Stage 56:=====================================>                (79 + 35) / 114][Stage 56:=========================================>            (87 + 27) / 114][Stage 56:=============================================>        (97 + 17) / 114][Stage 56:==================================================>   (106 + 8) / 114][Stage 56:====================================================> (111 + 3) / 114]                                                                                [Stage 57:=====================================>                (80 + 35) / 115][Stage 57:========================================>             (86 + 29) / 115][Stage 57:==============================================>       (99 + 16) / 115][Stage 57:==================================================>   (107 + 8) / 115][Stage 57:====================================================> (111 + 4) / 115][Stage 57:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.129094998 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465930469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==========================>                           (60 + 61) / 121][Stage 58:===========================>                          (62 + 59) / 121][Stage 58:==================================>                   (77 + 44) / 121][Stage 58:============================================>        (101 + 20) / 121][Stage 58:=====================================================>(119 + 2) / 121]                                                                                [Stage 59:===========================>                          (62 + 60) / 122][Stage 59:==============================>                       (70 + 52) / 122][Stage 59:==================================>                   (79 + 43) / 122][Stage 59:==============================================>      (107 + 15) / 122]                                                                                Time elapsed: 2.962244207 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (61 + 60) / 121][Stage 60:===============================>                      (70 + 51) / 121][Stage 60:=====================================>                (85 + 36) / 121][Stage 60:=============================================>       (103 + 18) / 121][Stage 60:=====================================================>(119 + 2) / 121]                                                                                [Stage 61:===========================>                          (61 + 61) / 122][Stage 61:==============================>                       (70 + 52) / 122][Stage 61:=======================================>              (89 + 33) / 122][Stage 61:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.272522734 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413737055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==============================>                       (66 + 49) / 115][Stage 62:===================================>                  (75 + 40) / 115][Stage 62:===========================================>          (93 + 22) / 115][Stage 62:===============================================>     (103 + 12) / 115][Stage 62:===================================================>  (110 + 5) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:===============================>                      (68 + 48) / 116][Stage 63:=================================>                    (73 + 43) / 116][Stage 63:========================================>             (86 + 30) / 116][Stage 63:==============================================>      (102 + 14) / 116][Stage 63:==================================================>   (109 + 7) / 116][Stage 63:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.394719267 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410024798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===============================>                      (68 + 47) / 115][Stage 64:=====================================>                (79 + 36) / 115][Stage 64:=========================================>            (89 + 26) / 115][Stage 64:==============================================>       (99 + 16) / 115][Stage 64:=================================================>    (106 + 9) / 115][Stage 64:==================================================>   (108 + 7) / 115]                                                                                [Stage 65:==================================>                   (74 + 42) / 116][Stage 65:==========================================>           (92 + 24) / 116][Stage 65:===============================================>     (105 + 11) / 116][Stage 65:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.639354412 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458652155 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (61 + 61) / 122][Stage 66:============================>                         (64 + 58) / 122][Stage 66:===============================>                      (72 + 50) / 122][Stage 66:===========================================>          (98 + 24) / 122][Stage 66:==================================================>   (115 + 7) / 122][Stage 66:=====================================================>(121 + 1) / 122]                                                                                [Stage 67:==========================>                           (61 + 62) / 123][Stage 67:===========================>                          (62 + 61) / 123][Stage 67:==================================>                   (78 + 45) / 123][Stage 67:===========================================>         (102 + 21) / 123][Stage 67:====================================================> (119 + 4) / 123][Stage 67:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.396383566 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434842096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:============================>                         (63 + 58) / 121][Stage 68:================================>                     (73 + 48) / 121][Stage 68:===============================================>     (109 + 12) / 121][Stage 68:==================================================>   (114 + 7) / 121][Stage 68:=====================================================>(120 + 1) / 121]                                                                                [Stage 69:=============================>                        (67 + 55) / 122][Stage 69:==================================>                   (78 + 44) / 122][Stage 69:============================================>        (103 + 19) / 122][Stage 69:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.157817877 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369175135 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (80 + 35) / 115][Stage 70:========================================>             (87 + 28) / 115][Stage 70:==============================================>      (101 + 14) / 115][Stage 70:=====================================================>(113 + 2) / 115]                                                                                [Stage 71:=====================================>                (81 + 35) / 116][Stage 71:==========================================>           (91 + 25) / 116][Stage 71:=================================================>    (107 + 9) / 116][Stage 71:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.584570863 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369783734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (83 + 32) / 115][Stage 72:============================================>         (94 + 21) / 115][Stage 72:==================================================>   (108 + 7) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:===========================================>          (94 + 22) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.770867939 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=====================================>                (80 + 35) / 115][Stage 74:===========================================>          (93 + 22) / 115][Stage 74:==================================================>   (107 + 8) / 115][Stage 74:====================================================> (111 + 4) / 115]                                                                                [Stage 75:========================================>             (88 + 28) / 116][Stage 75:================================================>    (106 + 10) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.792230121 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=======================================>              (84 + 31) / 115][Stage 76:==========================================>           (91 + 24) / 115][Stage 76:===============================================>     (104 + 11) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:=======================================>              (84 + 32) / 116][Stage 77:===========================================>          (94 + 22) / 116][Stage 77:===================================================>  (110 + 6) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.682800678 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:========================================>             (86 + 29) / 115][Stage 78:=============================================>        (96 + 19) / 115][Stage 78:=================================================>    (106 + 9) / 115]                                                                                [Stage 79:========================================>             (88 + 28) / 116][Stage 79:============================================>         (95 + 21) / 116][Stage 79:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.536008727 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362302861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:======================================>               (83 + 32) / 115][Stage 80:===========================================>          (92 + 23) / 115][Stage 80:================================================>    (105 + 10) / 115][Stage 80:====================================================> (112 + 3) / 115]                                                                                [Stage 81:=======================================>              (85 + 31) / 116][Stage 81:==============================================>      (101 + 15) / 116][Stage 81:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.647103489 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389832497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:====================================>                 (77 + 37) / 114][Stage 82:=========================================>            (87 + 27) / 114][Stage 82:==============================================>      (101 + 13) / 114][Stage 82:==================================================>   (107 + 7) / 114][Stage 82:=====================================================>(112 + 2) / 114]                                                                                [Stage 83:====================================>                 (78 + 37) / 115][Stage 83:========================================>             (86 + 29) / 115][Stage 83:===============================================>     (102 + 13) / 115][Stage 83:===================================================>  (110 + 5) / 115][Stage 83:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.316627601 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468596268 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 60) / 121][Stage 84:============================>                         (64 + 57) / 121][Stage 84:==================================>                   (77 + 44) / 121][Stage 84:===========================================>          (97 + 24) / 121][Stage 84:==================================================>   (114 + 7) / 121][Stage 84:=====================================================>(120 + 1) / 121]                                                                                [Stage 85:===========================>                          (63 + 59) / 122][Stage 85:=================================>                    (75 + 47) / 122][Stage 85:============================================>        (102 + 20) / 122][Stage 85:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.253244636 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377692888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:========================================>             (86 + 29) / 115][Stage 86:==============================================>      (100 + 15) / 115][Stage 86:=====================================================>(113 + 2) / 115]                                                                                [Stage 87:=====================================>                (81 + 35) / 116][Stage 87:========================================>             (88 + 28) / 116][Stage 87:===================================================>  (110 + 6) / 116][Stage 87:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.644913152 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444041569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (62 + 60) / 122][Stage 88:===============================>                      (71 + 51) / 122][Stage 88:=========================================>            (93 + 29) / 122][Stage 88:====================================================> (118 + 4) / 122]                                                                                [Stage 89:============================>                         (65 + 58) / 123][Stage 89:=================================>                    (77 + 46) / 123][Stage 89:=========================================>            (95 + 28) / 123][Stage 89:===============================================>     (110 + 13) / 123][Stage 89:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.150173588 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490441068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:========================================>             (87 + 28) / 115][Stage 90:==============================================>      (101 + 14) / 115][Stage 90:=====================================================>(113 + 2) / 115]                                                                                [Stage 91:========================================>             (87 + 29) / 116][Stage 91:===============================================>     (103 + 13) / 116][Stage 91:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.476170302 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355090387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (82 + 33) / 115][Stage 92:=========================================>            (88 + 27) / 115][Stage 92:==============================================>      (101 + 14) / 115][Stage 92:===================================================>  (110 + 5) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:========================================>             (87 + 29) / 116][Stage 93:============================================>         (95 + 21) / 116][Stage 93:==================================================>   (108 + 8) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.911484759 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436599376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 61) / 122][Stage 94:============================>                         (64 + 58) / 122][Stage 94:==================================>                   (77 + 45) / 122][Stage 94:===========================================>         (100 + 22) / 122][Stage 94:=====================================================>(120 + 2) / 122]                                                                                [Stage 95:============================>                         (64 + 59) / 123][Stage 95:=================================>                    (77 + 46) / 123][Stage 95:========================================>             (93 + 30) / 123][Stage 95:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.005206037 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349099173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=======================================>              (84 + 31) / 115][Stage 96:=============================================>        (96 + 19) / 115][Stage 96:===============================================>     (103 + 12) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:======================================>               (83 + 33) / 116][Stage 97:=========================================>            (90 + 26) / 116][Stage 97:==============================================>      (101 + 15) / 116][Stage 97:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.660393641 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390860517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (71 + 46) / 117][Stage 98:=======================================>              (85 + 32) / 117][Stage 98:=========================================>            (90 + 27) / 117][Stage 98:===============================================>     (104 + 13) / 117][Stage 98:=====================================================>(116 + 1) / 117]                                                                                [Stage 99:================================>                     (72 + 46) / 118][Stage 99:==================================>                   (76 + 42) / 118][Stage 99:===========================================>          (95 + 23) / 118][Stage 99:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 2.960297297 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425744286 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===========================>                         (62 + 59) / 121][Stage 100:==============================>                      (70 + 51) / 121][Stage 100:====================================>                (84 + 37) / 121][Stage 100:==================================================>  (116 + 5) / 121]                                                                                [Stage 101:==========================>                          (62 + 60) / 122][Stage 101:=============================>                       (68 + 54) / 122][Stage 101:=====================================>               (87 + 35) / 122][Stage 101:==============================================>     (110 + 12) / 122]                                                                                Time elapsed: 2.839047684 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386614401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (71 + 46) / 117][Stage 102:=================================>                   (75 + 42) / 117][Stage 102:=======================================>             (88 + 29) / 117][Stage 102:==============================================>     (105 + 12) / 117][Stage 102:====================================================>(115 + 2) / 117]                                                                                [Stage 103:================================>                    (72 + 46) / 118][Stage 103:==================================>                  (77 + 41) / 118][Stage 103:========================================>            (91 + 27) / 118][Stage 103:=================================================>   (111 + 7) / 118]                                                                                Time elapsed: 2.937063439 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 46) / 117][Stage 104:===================================>                 (78 + 39) / 117][Stage 104:===========================================>         (96 + 21) / 117][Stage 104:==================================================>  (111 + 6) / 117]                                                                                [Stage 105:================================>                    (73 + 45) / 118][Stage 105:===================================>                 (78 + 40) / 118][Stage 105:========================================>            (91 + 27) / 118][Stage 105:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.055571114 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374478271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=====================================>               (81 + 33) / 114][Stage 106:=========================================>           (89 + 25) / 114][Stage 106:============================================>        (96 + 18) / 114][Stage 106:=================================================>   (106 + 8) / 114][Stage 106:====================================================>(112 + 2) / 114]                                                                                [Stage 107:=======================================>             (86 + 29) / 115][Stage 107:===========================================>         (95 + 20) / 115][Stage 107:================================================>    (106 + 9) / 115][Stage 107:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.18618072 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418395272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===========================>                         (62 + 59) / 121][Stage 108:===============================>                     (73 + 48) / 121][Stage 108:=======================================>             (90 + 31) / 121][Stage 108:===============================================>    (111 + 10) / 121]                                                                                [Stage 109:===========================>                         (64 + 58) / 122][Stage 109:==============================>                      (70 + 52) / 122][Stage 109:======================================>              (89 + 33) / 122][Stage 109:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.913715381 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430513162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (61 + 60) / 121][Stage 110:============================>                        (64 + 57) / 121][Stage 110:==================================>                  (78 + 43) / 121][Stage 110:============================================>       (104 + 17) / 121]                                                                                [Stage 111:===========================>                         (63 + 59) / 122][Stage 111:================================>                    (74 + 48) / 122][Stage 111:=======================================>             (90 + 32) / 122][Stage 111:==============================================>     (108 + 14) / 122]                                                                                Time elapsed: 2.919676776 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381331385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:>                                                      (0 + 0) / 117][Stage 112:================================>                    (71 + 46) / 117][Stage 112:==================================>                  (76 + 41) / 117][Stage 112:===========================================>         (97 + 20) / 117][Stage 112:===============================================>    (107 + 10) / 117]                                                                                [Stage 113:================================>                    (72 + 46) / 118][Stage 113:=====================================>               (83 + 35) / 118][Stage 113:============================================>        (98 + 20) / 118][Stage 113:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 2.950145789 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415660235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 62) / 122][Stage 114:===========================>                         (64 + 58) / 122][Stage 114:==================================>                  (79 + 43) / 122][Stage 114:============================================>       (104 + 18) / 122][Stage 114:===================================================> (119 + 3) / 122]                                                                                [Stage 115:===========================>                         (64 + 59) / 123][Stage 115:==================================>                  (79 + 44) / 123][Stage 115:=========================================>           (96 + 27) / 123][Stage 115:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.121899639 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477982301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 45) / 117][Stage 116:===================================>                 (78 + 39) / 117][Stage 116:==========================================>          (93 + 24) / 117][Stage 116:=================================================>   (109 + 8) / 117]                                                                                [Stage 117:================================>                    (73 + 45) / 118][Stage 117:===================================>                 (79 + 39) / 118][Stage 117:==========================================>          (95 + 23) / 118][Stage 117:====================================================>(116 + 2) / 118][Stage 117:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.038613413 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381523425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (71 + 46) / 117][Stage 118:================================>                    (72 + 45) / 117][Stage 118:=====================================>               (83 + 34) / 117][Stage 118:===========================================>         (95 + 22) / 117][Stage 118:=================================================>   (110 + 7) / 117]                                                                                [Stage 119:================================>                    (72 + 46) / 118][Stage 119:==================================>                  (77 + 41) / 118][Stage 119:=========================================>           (92 + 26) / 118][Stage 119:=================================================>   (111 + 7) / 118]                                                                                Time elapsed: 3.071517343 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:================================>                    (71 + 46) / 117][Stage 120:=================================>                   (75 + 42) / 117][Stage 120:=======================================>             (88 + 29) / 117][Stage 120:=================================================>   (109 + 8) / 117]                                                                                [Stage 121:================================>                    (72 + 46) / 118][Stage 121:==================================>                  (76 + 42) / 118][Stage 121:=========================================>           (92 + 26) / 118][Stage 121:==============================================>     (105 + 13) / 118][Stage 121:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.054189519 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43322962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (63 + 58) / 121][Stage 122:=================================>                   (76 + 45) / 121][Stage 122:=========================================>           (94 + 27) / 121][Stage 122:====================================================>(119 + 2) / 121]                                                                                [Stage 123:===========================>                         (64 + 58) / 122][Stage 123:=================================>                   (78 + 44) / 122][Stage 123:==========================================>          (97 + 25) / 122][Stage 123:===============================================>    (111 + 11) / 122][Stage 123:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.127485895 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381099326 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:====================================>                (80 + 37) / 117][Stage 124:============================================>        (99 + 18) / 117][Stage 124:====================================================>(115 + 2) / 117]                                                                                [Stage 125:================================>                    (73 + 45) / 118][Stage 125:=======================================>             (87 + 31) / 118][Stage 125:============================================>       (102 + 16) / 118][Stage 125:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.007021822 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347969475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:======================================>              (84 + 31) / 115][Stage 126:==========================================>          (92 + 23) / 115][Stage 126:==============================================>     (103 + 12) / 115][Stage 126:====================================================>(113 + 2) / 115]                                                                                [Stage 127:========================================>            (89 + 27) / 116][Stage 127:===========================================>         (95 + 21) / 116][Stage 127:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.692089558 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343799838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (84 + 31) / 115][Stage 128:=============================================>       (98 + 17) / 115][Stage 128:===================================================> (111 + 4) / 115]                                                                                [Stage 129:======================================>              (84 + 32) / 116][Stage 129:===========================================>         (95 + 21) / 116][Stage 129:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.558439096 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370054315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (71 + 46) / 117][Stage 130:=======================================>             (87 + 30) / 117][Stage 130:===============================================>    (106 + 11) / 117][Stage 130:====================================================>(115 + 2) / 117]                                                                                [Stage 131:================================>                    (72 + 46) / 118][Stage 131:====================================>                (81 + 37) / 118][Stage 131:============================================>       (100 + 18) / 118][Stage 131:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.954132889 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336094525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (80 + 35) / 115][Stage 132:=======================================>             (86 + 29) / 115][Stage 132:=============================================>       (99 + 16) / 115][Stage 132:===================================================> (112 + 3) / 115]                                                                                [Stage 133:======================================>              (85 + 31) / 116][Stage 133:===========================================>         (95 + 21) / 116][Stage 133:===============================================>    (106 + 10) / 116][Stage 133:====================================================>(114 + 2) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.04460253 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333881268 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=======================================>             (85 + 30) / 115][Stage 134:=============================================>      (100 + 15) / 115][Stage 134:==================================================>  (110 + 5) / 115]                                                                                [Stage 135:======================================>              (85 + 31) / 116][Stage 135:===========================================>         (96 + 20) / 116][Stage 135:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.541944231 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363084362 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (71 + 46) / 117][Stage 136:=================================>                   (73 + 44) / 117][Stage 136:=======================================>             (88 + 29) / 117][Stage 136:==============================================>     (105 + 12) / 117][Stage 136:===================================================> (113 + 4) / 117]                                                                                [Stage 137:================================>                    (73 + 45) / 118][Stage 137:======================================>              (85 + 33) / 118][Stage 137:==============================================>     (105 + 13) / 118]                                                                                Time elapsed: 2.89750912 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38737174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:>                                                      (0 + 0) / 113][Stage 138:===========================>                         (59 + 54) / 113][Stage 138:==============================>                      (65 + 48) / 113][Stage 138:======================================>              (82 + 31) / 113][Stage 138:==============================================>     (100 + 13) / 113]                                                                                [Stage 139:===========================>                         (60 + 54) / 114][Stage 139:===============================>                     (67 + 47) / 114][Stage 139:======================================>              (82 + 32) / 114][Stage 139:==================================================>  (109 + 5) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.98934142 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385703322 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (66 + 49) / 115][Stage 140:===================================>                 (76 + 39) / 115][Stage 140:=========================================>           (90 + 25) / 115][Stage 140:=============================================>      (101 + 14) / 115][Stage 140:==================================================>  (109 + 6) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:===============================>                     (70 + 46) / 116][Stage 141:===================================>                 (77 + 39) / 116][Stage 141:========================================>            (89 + 27) / 116][Stage 141:==============================================>     (104 + 12) / 116][Stage 141:===================================================> (112 + 4) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.646228945 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383864063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (59 + 54) / 113][Stage 142:==============================>                      (65 + 48) / 113][Stage 142:=======================================>             (84 + 29) / 113][Stage 142:==============================================>     (102 + 11) / 113][Stage 142:====================================================>(112 + 1) / 113]                                                                                [Stage 143:===========================>                         (60 + 54) / 114][Stage 143:==============================>                      (65 + 49) / 114][Stage 143:====================================>                (79 + 35) / 114][Stage 143:============================================>        (95 + 19) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.193477722 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382430505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (59 + 54) / 113][Stage 144:=============================>                       (63 + 50) / 113][Stage 144:=====================================>               (79 + 34) / 113][Stage 144:=============================================>       (98 + 15) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:===========================>                         (60 + 54) / 114][Stage 145:=============================>                       (64 + 50) / 114][Stage 145:===================================>                 (77 + 37) / 114][Stage 145:==============================================>     (101 + 13) / 114]                                                                                Time elapsed: 2.857626957 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335743246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:>                                                      (0 + 0) / 115][Stage 146:======================================>              (83 + 32) / 115][Stage 146:============================================>        (96 + 19) / 115][Stage 146:===============================================>    (104 + 11) / 115]                                                                                [Stage 147:======================================>              (84 + 32) / 116][Stage 147:=========================================>           (91 + 25) / 116][Stage 147:===============================================>    (105 + 11) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.588878632 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=====================================>               (81 + 34) / 115][Stage 148:=========================================>           (89 + 26) / 115][Stage 148:================================================>    (106 + 9) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:======================================>              (84 + 32) / 116][Stage 149:=========================================>           (90 + 26) / 116][Stage 149:==============================================>     (104 + 12) / 116]                                                                                Time elapsed: 2.551876345 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398073231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:============================>                        (61 + 52) / 113][Stage 150:================================>                    (70 + 43) / 113][Stage 150:==========================================>          (90 + 23) / 113][Stage 150:==================================================>  (108 + 5) / 113]                                                                                [Stage 151:============================>                        (61 + 53) / 114][Stage 151:===============================>                     (68 + 46) / 114][Stage 151:========================================>            (88 + 26) / 114][Stage 151:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.995478317 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368527818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (71 + 46) / 117][Stage 152:====================================>                (81 + 36) / 117][Stage 152:============================================>        (98 + 19) / 117][Stage 152:====================================================>(116 + 1) / 117]                                                                                [Stage 153:================================>                    (72 + 46) / 118][Stage 153:===================================>                 (78 + 40) / 118][Stage 153:==========================================>          (95 + 23) / 118][Stage 153:===============================================>    (107 + 11) / 118]                                                                                Time elapsed: 2.745481056 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413739858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 62) / 122][Stage 154:===========================>                         (64 + 58) / 122][Stage 154:====================================>                (84 + 38) / 122][Stage 154:==============================================>     (109 + 13) / 122][Stage 154:====================================================>(121 + 1) / 122]                                                                                [Stage 155:==========================>                          (62 + 61) / 123][Stage 155:=============================>                       (68 + 55) / 123][Stage 155:=================================>                   (77 + 46) / 123][Stage 155:===========================================>        (103 + 20) / 123][Stage 155:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.063340299 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340705242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:======================================>              (84 + 31) / 115][Stage 156:============================================>        (97 + 18) / 115][Stage 156:====================================================>(114 + 1) / 115]                                                                                [Stage 157:=====================================>               (83 + 33) / 116][Stage 157:=========================================>           (91 + 25) / 116][Stage 157:================================================>    (107 + 9) / 116][Stage 157:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.531700004 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369318977 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===================================>                 (76 + 39) / 115][Stage 158:=======================================>             (86 + 29) / 115][Stage 158:==============================================>     (102 + 13) / 115][Stage 158:==================================================>  (110 + 5) / 115]                                                                                [Stage 159:================================>                    (72 + 44) / 116][Stage 159:======================================>              (85 + 31) / 116][Stage 159:============================================>       (100 + 16) / 116][Stage 159:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.984895688 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508341735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (70 + 45) / 115][Stage 160:===================================>                 (78 + 37) / 115][Stage 160:=========================================>           (91 + 24) / 115][Stage 160:=============================================>       (99 + 16) / 115][Stage 160:===================================================> (112 + 3) / 115]                                                                                [Stage 161:=================================>                   (73 + 43) / 116][Stage 161:=======================================>             (87 + 29) / 116][Stage 161:=============================================>      (101 + 15) / 116][Stage 161:==================================================>  (110 + 6) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.31468256 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40036437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (61 + 60) / 121][Stage 162:==============================>                      (70 + 51) / 121][Stage 162:=========================================>           (94 + 27) / 121][Stage 162:===============================================>    (111 + 10) / 121][Stage 162:====================================================>(120 + 1) / 121]                                                                                [Stage 163:==========================>                          (62 + 60) / 122][Stage 163:=============================>                       (69 + 53) / 122][Stage 163:=======================================>             (91 + 31) / 122][Stage 163:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.875714924 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337458505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=====================================>               (82 + 33) / 115][Stage 164:==========================================>          (92 + 23) / 115][Stage 164:=================================================>   (108 + 7) / 115]                                                                                [Stage 165:=======================================>             (86 + 30) / 116][Stage 165:============================================>        (98 + 18) / 116][Stage 165:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.522145294 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374449173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (71 + 44) / 115][Stage 166:====================================>                (79 + 36) / 115][Stage 166:=========================================>           (89 + 26) / 115][Stage 166:==============================================>     (103 + 12) / 115][Stage 166:==================================================>  (109 + 6) / 115][Stage 166:===================================================> (111 + 4) / 115][Stage 166:====================================================>(113 + 2) / 115]                                                                                [Stage 167:===============================>                     (69 + 47) / 116][Stage 167:==================================>                  (76 + 40) / 116][Stage 167:=========================================>           (90 + 26) / 116][Stage 167:==============================================>     (103 + 13) / 116][Stage 167:==================================================>  (111 + 5) / 116][Stage 167:===================================================> (113 + 3) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.797191619 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334758967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=======================================>             (85 + 30) / 115][Stage 168:=========================================>           (91 + 24) / 115][Stage 168:=============================================>      (100 + 15) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=======================================>             (87 + 29) / 116][Stage 169:==========================================>          (94 + 22) / 116][Stage 169:===============================================>    (105 + 11) / 116][Stage 169:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.047957614 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406827324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (63 + 58) / 121][Stage 170:===================================>                 (80 + 41) / 121][Stage 170:===========================================>        (101 + 20) / 121][Stage 170:==================================================>  (115 + 6) / 121]                                                                                [Stage 171:==========================>                          (62 + 60) / 122][Stage 171:===================================>                 (82 + 40) / 122][Stage 171:===========================================>        (101 + 21) / 122][Stage 171:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.954858537 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 60) / 121][Stage 172:============================>                        (65 + 56) / 121][Stage 172:===================================>                 (81 + 40) / 121][Stage 172:=============================================>      (106 + 15) / 121][Stage 172:==================================================>  (115 + 6) / 121][Stage 172:====================================================>(120 + 1) / 121]                                                                                [Stage 173:==========================>                          (62 + 60) / 122][Stage 173:==============================>                      (70 + 52) / 122][Stage 173:=====================================>               (87 + 35) / 122][Stage 173:=============================================>      (106 + 16) / 122][Stage 173:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.195557306 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370727656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===================================>                 (77 + 37) / 114][Stage 174:===========================================>         (93 + 21) / 114][Stage 174:===============================================>    (104 + 10) / 114][Stage 174:===================================================> (111 + 3) / 114]                                                                                [Stage 175:====================================>                (80 + 35) / 115][Stage 175:============================================>        (97 + 18) / 115][Stage 175:================================================>    (106 + 9) / 115][Stage 175:====================================================>(113 + 2) / 115][Stage 175:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.049885634 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380493628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (67 + 48) / 115][Stage 176:===================================>                 (76 + 39) / 115][Stage 176:=========================================>           (89 + 26) / 115][Stage 176:=================================================>   (108 + 7) / 115]                                                                                [Stage 177:===================================>                 (77 + 39) / 116][Stage 177:=========================================>           (90 + 26) / 116][Stage 177:==============================================>     (104 + 12) / 116]                                                                                Time elapsed: 2.546275414 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399212531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:============================>                        (65 + 57) / 122][Stage 178:===============================>                     (72 + 50) / 122][Stage 178:==========================================>         (100 + 22) / 122][Stage 178:=================================================>   (113 + 9) / 122][Stage 178:====================================================>(121 + 1) / 122]                                                                                [Stage 179:===========================>                         (64 + 59) / 123][Stage 179:===============================>                     (73 + 50) / 123][Stage 179:==========================================>          (98 + 25) / 123][Stage 179:==================================================>  (117 + 6) / 123][Stage 179:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.475492263 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330513652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:====================================>                (80 + 35) / 115][Stage 180:======================================>              (84 + 31) / 115][Stage 180:===========================================>         (94 + 21) / 115][Stage 180:=================================================>   (108 + 7) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:=====================================>               (82 + 34) / 116][Stage 181:=========================================>           (91 + 25) / 116][Stage 181:===============================================>    (105 + 11) / 116][Stage 181:==================================================>  (111 + 5) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.86076762 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366900059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (71 + 46) / 117][Stage 182:===================================>                 (79 + 38) / 117][Stage 182:===========================================>         (97 + 20) / 117][Stage 182:====================================================>(116 + 1) / 117]                                                                                [Stage 183:================================>                    (72 + 46) / 118][Stage 183:===================================>                 (79 + 39) / 118][Stage 183:============================================>       (100 + 18) / 118][Stage 183:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.760244449 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404095387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (61 + 61) / 122][Stage 184:============================>                        (66 + 56) / 122][Stage 184:=====================================>               (86 + 36) / 122][Stage 184:=============================================>      (106 + 16) / 122][Stage 184:===================================================> (119 + 3) / 122]                                                                                [Stage 185:============================>                        (66 + 57) / 123][Stage 185:=================================>                   (77 + 46) / 123][Stage 185:========================================>            (95 + 28) / 123][Stage 185:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.032184392 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361803264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (71 + 46) / 117][Stage 186:=================================>                   (73 + 44) / 117][Stage 186:====================================>                (80 + 37) / 117][Stage 186:=============================================>      (103 + 14) / 117][Stage 186:====================================================>(116 + 1) / 117]                                                                                [Stage 187:================================>                    (72 + 46) / 118][Stage 187:===================================>                 (79 + 39) / 118][Stage 187:=========================================>           (93 + 25) / 118][Stage 187:===============================================>    (108 + 10) / 118][Stage 187:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.121993954 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371702315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===============================>                     (68 + 47) / 115][Stage 188:====================================>                (79 + 36) / 115][Stage 188:===========================================>         (95 + 20) / 115][Stage 188:==================================================>  (110 + 5) / 115]                                                                                [Stage 189:=================================>                   (73 + 43) / 116][Stage 189:========================================>            (88 + 28) / 116][Stage 189:============================================>        (97 + 19) / 116][Stage 189:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.896136151 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333003909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (81 + 34) / 115][Stage 190:==========================================>          (92 + 23) / 115][Stage 190:===============================================>    (104 + 11) / 115][Stage 190:====================================================>(113 + 2) / 115]                                                                                [Stage 191:=====================================>               (81 + 35) / 116][Stage 191:=======================================>             (87 + 29) / 116][Stage 191:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.406964859 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412233301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (61 + 61) / 122][Stage 192:==============================>                      (70 + 52) / 122][Stage 192:===================================>                 (82 + 40) / 122][Stage 192:===============================================>    (112 + 10) / 122]                                                                                [Stage 193:============================>                        (65 + 58) / 123][Stage 193:==================================>                  (80 + 43) / 123][Stage 193:============================================>       (105 + 18) / 123][Stage 193:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 2.976033322 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 62) / 122][Stage 194:===========================>                         (63 + 59) / 122][Stage 194:================================>                    (75 + 47) / 122][Stage 194:=======================================>             (92 + 30) / 122][Stage 194:=================================================>   (115 + 7) / 122]                                                                                [Stage 195:===========================>                         (64 + 59) / 123][Stage 195:=================================>                   (78 + 45) / 123][Stage 195:==========================================>          (98 + 25) / 123][Stage 195:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.042321745 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368690658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (71 + 46) / 117][Stage 196:====================================>                (80 + 37) / 117][Stage 196:============================================>        (99 + 18) / 117][Stage 196:==================================================>  (112 + 5) / 117]                                                                                [Stage 197:================================>                    (73 + 45) / 118][Stage 197:=======================================>             (87 + 31) / 118][Stage 197:============================================>       (100 + 18) / 118][Stage 197:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.834135107 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4120894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 61) / 121][Stage 198:==============================>                      (70 + 51) / 121][Stage 198:========================================>            (92 + 29) / 121][Stage 198:=================================================>   (113 + 8) / 121]                                                                                [Stage 199:===========================>                         (63 + 59) / 122][Stage 199:===============================>                     (72 + 50) / 122][Stage 199:=======================================>             (92 + 30) / 122][Stage 199:===============================================>    (112 + 10) / 122][Stage 199:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.2089237 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339675324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (79 + 36) / 115][Stage 200:=======================================>             (85 + 30) / 115][Stage 200:=============================================>       (98 + 17) / 115][Stage 200:====================================================>(114 + 1) / 115]                                                                                [Stage 201:=====================================>               (81 + 35) / 116][Stage 201:=========================================>           (90 + 26) / 116][Stage 201:=============================================>      (101 + 15) / 116][Stage 201:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.461746953 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 20:40:51 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:39200) dropped. RpcEnv already stopped.
17/05/29 20:40:51 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:39200) dropped. RpcEnv already stopped.

real	9m43.179s
user	11m24.400s
sys	0m27.720s
