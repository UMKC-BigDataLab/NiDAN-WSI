Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 22:46:02 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:46:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:46:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:46:17 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 22:46:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:46:30 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529224619-0692).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.360940744 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======================>                               (50 + 65) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:=============================>                         (62 + 54) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (110 + 6) / 116]                                                                                Time elapsed: 13.478747611 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==========================>                            (55 + 60) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:================================>                      (68 + 47) / 115][Stage 2:=================================>                     (70 + 45) / 115][Stage 2:====================================>                  (76 + 39) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:==========================================>            (89 + 26) / 115][Stage 2:============================================>          (94 + 21) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:==================================================>    (106 + 9) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:=====================================================> (111 + 4) / 115]                                                                                [Stage 3:===========================>                           (59 + 57) / 116][Stage 3:===============================>                       (66 + 50) / 116][Stage 3:=================================>                     (71 + 45) / 116][Stage 3:=====================================>                 (79 + 37) / 116][Stage 3:========================================>              (86 + 30) / 116][Stage 3:=============================================>         (95 + 21) / 116][Stage 3:==============================================>        (98 + 18) / 116][Stage 3:===============================================>      (102 + 14) / 116][Stage 3:================================================>     (104 + 12) / 116][Stage 3:===================================================>   (109 + 7) / 116]                                                                                Time elapsed: 6.104228415 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.666049954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:============================>                          (61 + 56) / 117][Stage 4:===============================>                       (68 + 49) / 117][Stage 4:=================================>                     (71 + 46) / 117][Stage 4:=================================>                     (72 + 45) / 117][Stage 4:=====================================>                 (79 + 38) / 117][Stage 4:=======================================>               (85 + 32) / 117][Stage 4:============================================>          (94 + 23) / 117][Stage 4:=================================================>    (107 + 10) / 117][Stage 4:=====================================================> (114 + 3) / 117][Stage 4:======================================================>(116 + 1) / 117]                                                                                [Stage 5:=================================>                     (72 + 46) / 118][Stage 5:==================================>                    (74 + 44) / 118][Stage 5:======================================>                (83 + 35) / 118][Stage 5:===========================================>           (94 + 24) / 118][Stage 5:===============================================>      (103 + 15) / 118][Stage 5:==================================================>    (109 + 9) / 118][Stage 5:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 5.132535913 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 184 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 184 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.705644352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (70 + 47) / 117][Stage 6:=================================>                     (72 + 45) / 117][Stage 6:==================================>                    (74 + 43) / 117][Stage 6:========================================>              (86 + 31) / 117][Stage 6:==============================================>       (101 + 16) / 117][Stage 6:==================================================>    (108 + 9) / 117][Stage 6:======================================================>(115 + 2) / 117]                                                                                [Stage 7:=================================>                     (72 + 46) / 118][Stage 7:=======================================>               (84 + 34) / 118][Stage 7:=============================================>         (98 + 20) / 118][Stage 7:==================================================>    (109 + 9) / 118][Stage 7:=====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.96236426 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (71 + 46) / 117][Stage 8:======================================>                (81 + 36) / 117][Stage 8:===========================================>           (92 + 25) / 117][Stage 8:=================================================>    (107 + 10) / 117]                                                                                [Stage 9:=================================>                     (72 + 46) / 118][Stage 9:===================================>                   (77 + 41) / 118][Stage 9:===========================================>           (94 + 24) / 118][Stage 9:==============================================>       (101 + 17) / 118][Stage 9:=====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.580202362 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (71 + 46) / 117][Stage 10:=================================>                    (72 + 45) / 117][Stage 10:=======================================>              (86 + 31) / 117][Stage 10:==============================================>      (103 + 14) / 117][Stage 10:==================================================>   (110 + 7) / 117][Stage 10:====================================================> (113 + 4) / 117]                                                                                [Stage 11:================================>                     (72 + 46) / 118][Stage 11:===================================>                  (77 + 41) / 118][Stage 11:==========================================>           (93 + 25) / 118][Stage 11:================================================>    (107 + 11) / 118][Stage 11:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.525791165 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.554854902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (71 + 46) / 117][Stage 12:=================================>                    (73 + 44) / 117][Stage 12:=====================================>                (81 + 36) / 117][Stage 12:============================================>         (97 + 20) / 117][Stage 12:=================================================>    (108 + 9) / 117][Stage 12:=====================================================>(116 + 1) / 117]                                                                                [Stage 13:================================>                     (72 + 46) / 118][Stage 13:==================================>                   (76 + 42) / 118][Stage 13:=======================================>              (87 + 31) / 118][Stage 13:================================================>    (107 + 11) / 118][Stage 13:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.548568243 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547687354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (71 + 46) / 117][Stage 14:=================================>                    (72 + 45) / 117][Stage 14:=====================================>                (81 + 36) / 117][Stage 14:=============================================>       (101 + 16) / 117][Stage 14:==================================================>   (109 + 8) / 117][Stage 14:===================================================>  (111 + 6) / 117][Stage 14:=====================================================>(115 + 2) / 117]                                                                                [Stage 15:================================>                     (72 + 46) / 118][Stage 15:===================================>                  (77 + 41) / 118][Stage 15:======================================>               (85 + 33) / 118][Stage 15:==============================================>      (104 + 14) / 118][Stage 15:==================================================>   (110 + 8) / 118][Stage 15:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.029617769 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51278228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=====================================>                (80 + 34) / 114][Stage 16:===========================================>          (91 + 23) / 114][Stage 16:=================================================>    (105 + 9) / 114][Stage 16:===================================================>  (108 + 6) / 114][Stage 16:=====================================================>(112 + 2) / 114][Stage 16:=====================================================>(113 + 1) / 114]                                                                                [Stage 17:======================================>               (83 + 32) / 115][Stage 17:============================================>         (94 + 21) / 115][Stage 17:==============================================>      (101 + 14) / 115][Stage 17:==================================================>   (107 + 8) / 115][Stage 17:===================================================>  (110 + 5) / 115][Stage 17:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.95338003 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53436956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (70 + 47) / 117][Stage 18:================================>                     (71 + 46) / 117][Stage 18:===================================>                  (76 + 41) / 117][Stage 18:=========================================>            (89 + 28) / 117][Stage 18:==============================================>      (102 + 15) / 117][Stage 18:==================================================>   (109 + 8) / 117][Stage 18:=====================================================>(116 + 1) / 117]                                                                                [Stage 19:================================>                     (72 + 46) / 118][Stage 19:==================================>                   (76 + 42) / 118][Stage 19:=======================================>              (86 + 32) / 118][Stage 19:===============================================>     (105 + 13) / 118][Stage 19:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.786586383 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.56575611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (71 + 46) / 117][Stage 20:===================================>                  (77 + 40) / 117][Stage 20:======================================>               (84 + 33) / 117][Stage 20:==============================================>      (103 + 14) / 117][Stage 20:====================================================> (114 + 3) / 117]                                                                                [Stage 21:================================>                     (72 + 46) / 118][Stage 21:==================================>                   (76 + 42) / 118][Stage 21:==========================================>           (92 + 26) / 118][Stage 21:==============================================>      (103 + 15) / 118][Stage 21:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.494088335 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530242405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (71 + 46) / 117][Stage 22:===================================>                  (76 + 41) / 117][Stage 22:===========================================>          (94 + 23) / 117][Stage 22:==================================================>   (110 + 7) / 117][Stage 22:=====================================================>(115 + 2) / 117]                                                                                [Stage 23:================================>                     (72 + 46) / 118][Stage 23:==================================>                   (75 + 43) / 118][Stage 23:========================================>             (89 + 29) / 118][Stage 23:==============================================>      (104 + 14) / 118][Stage 23:==================================================>   (110 + 8) / 118][Stage 23:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.522130394 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 92 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45404107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (79 + 36) / 115][Stage 24:=======================================>              (85 + 30) / 115][Stage 24:==========================================>           (91 + 24) / 115][Stage 24:==============================================>      (101 + 14) / 115][Stage 24:===================================================>  (109 + 6) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:=======================================>              (85 + 31) / 116][Stage 25:============================================>         (96 + 20) / 116][Stage 25:===================================================>  (111 + 5) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.180855036 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.561144654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:>                                                       (0 + 0) / 122][Stage 26:==========================>                           (60 + 62) / 122][Stage 26:=============================>                        (67 + 55) / 122][Stage 26:====================================>                 (83 + 39) / 122][Stage 26:=============================================>       (105 + 17) / 122][Stage 26:=====================================================>(120 + 2) / 122]                                                                                [Stage 27:===========================>                          (62 + 61) / 123][Stage 27:==============================>                       (70 + 53) / 123][Stage 27:========================================>             (93 + 30) / 123][Stage 27:=============================================>       (106 + 17) / 123][Stage 27:==================================================>   (116 + 7) / 123][Stage 27:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.660035873 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.583169178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (62 + 59) / 121][Stage 28:==============================>                       (69 + 52) / 121][Stage 28:======================================>               (87 + 34) / 121][Stage 28:==================================================>   (113 + 8) / 121]                                                                                [Stage 29:===========================>                          (62 + 60) / 122][Stage 29:=============================>                        (66 + 56) / 122][Stage 29:===================================>                  (80 + 42) / 122][Stage 29:==============================================>      (106 + 16) / 122][Stage 29:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.339029076 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538878626 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==========================>                           (60 + 62) / 122][Stage 30:===========================>                          (63 + 59) / 122][Stage 30:==================================>                   (77 + 45) / 122][Stage 30:===========================================>          (98 + 24) / 122][Stage 30:================================================>    (111 + 11) / 122][Stage 30:====================================================> (119 + 3) / 122][Stage 30:=====================================================>(121 + 1) / 122]                                                                                [Stage 31:===========================>                          (62 + 61) / 123][Stage 31:==============================>                       (70 + 53) / 123][Stage 31:======================================>               (87 + 36) / 123][Stage 31:================================================>    (112 + 11) / 123][Stage 31:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.457017616 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48417329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (66 + 49) / 115][Stage 32:=================================>                    (72 + 43) / 115][Stage 32:============================================>         (94 + 21) / 115][Stage 32:====================================================> (111 + 4) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:================================>                     (69 + 47) / 116][Stage 33:====================================>                 (78 + 38) / 116][Stage 33:========================================>             (88 + 28) / 116][Stage 33:=================================================>    (107 + 9) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.482288443 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439797357 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=================================>                    (70 + 44) / 114][Stage 34:=======================================>              (84 + 30) / 114][Stage 34:=============================================>        (95 + 19) / 114][Stage 34:===================================================>  (108 + 6) / 114][Stage 34:=====================================================>(113 + 1) / 114]                                                                                [Stage 35:====================================>                 (78 + 37) / 115][Stage 35:=========================================>            (89 + 26) / 115][Stage 35:===============================================>     (102 + 13) / 115][Stage 35:====================================================> (111 + 4) / 115][Stage 35:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.401590409 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 246 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 246 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500264762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:============================>                         (63 + 58) / 121][Stage 36:==================================>                   (77 + 44) / 121][Stage 36:=========================================>            (93 + 28) / 121][Stage 36:==============================================>      (106 + 15) / 121][Stage 36:==================================================>   (113 + 8) / 121][Stage 36:====================================================> (118 + 3) / 121]                                                                                [Stage 37:============================>                         (65 + 57) / 122][Stage 37:====================================>                 (82 + 40) / 122][Stage 37:==============================================>      (108 + 14) / 122][Stage 37:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.43843804 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445864108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (71 + 46) / 117][Stage 38:=================================>                    (73 + 44) / 117][Stage 38:====================================>                 (80 + 37) / 117][Stage 38:==============================================>      (102 + 15) / 117][Stage 38:====================================================> (113 + 4) / 117]                                                                                [Stage 39:================================>                     (72 + 46) / 118][Stage 39:===================================>                  (78 + 40) / 118][Stage 39:=========================================>            (91 + 27) / 118][Stage 39:===============================================>     (105 + 13) / 118][Stage 39:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.429604576 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406197885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (81 + 34) / 115][Stage 40:=========================================>            (88 + 27) / 115][Stage 40:==============================================>       (99 + 16) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:========================================>             (88 + 28) / 116][Stage 41:==============================================>      (101 + 15) / 116][Stage 41:====================================================> (113 + 3) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.730285297 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405030802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=======================================>              (85 + 30) / 115][Stage 42:=============================================>        (97 + 18) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=======================================>              (84 + 32) / 116][Stage 43:==========================================>           (91 + 25) / 116][Stage 43:=================================================>    (107 + 9) / 116][Stage 43:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.800703819 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448596531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (71 + 46) / 117][Stage 44:====================================>                 (80 + 37) / 117][Stage 44:=============================================>       (101 + 16) / 117][Stage 44:====================================================> (114 + 3) / 117]                                                                                [Stage 45:=================================>                    (73 + 45) / 118][Stage 45:=====================================>                (81 + 37) / 118][Stage 45:=============================================>        (99 + 19) / 118][Stage 45:===================================================>  (112 + 6) / 118][Stage 45:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.295041642 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511389521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:>                                                       (0 + 0) / 121][Stage 46:===========================>                          (61 + 60) / 121][Stage 46:===============================>                      (70 + 51) / 121][Stage 46:=====================================>                (83 + 38) / 121][Stage 46:=============================================>       (104 + 17) / 121][Stage 46:===================================================>  (116 + 5) / 121][Stage 46:=====================================================>(119 + 2) / 121]                                                                                [Stage 47:===========================>                          (62 + 60) / 122][Stage 47:=============================>                        (67 + 55) / 122][Stage 47:====================================>                 (82 + 40) / 122][Stage 47:============================================>        (102 + 20) / 122][Stage 47:====================================================> (118 + 4) / 122][Stage 47:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.588357185 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (61 + 60) / 121][Stage 48:=============================>                        (67 + 54) / 121][Stage 48:=======================================>              (89 + 32) / 121][Stage 48:===================================================>  (115 + 6) / 121][Stage 48:=====================================================>(120 + 1) / 121]                                                                                [Stage 49:===========================>                          (62 + 60) / 122][Stage 49:============================>                         (65 + 57) / 122][Stage 49:====================================>                 (82 + 40) / 122][Stage 49:===============================================>     (109 + 13) / 122][Stage 49:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.168403048 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.607295899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 60) / 121][Stage 50:================================>                     (73 + 48) / 121][Stage 50:======================================>               (86 + 35) / 121][Stage 50:==================================================>   (114 + 7) / 121][Stage 50:=====================================================>(119 + 2) / 121]                                                                                [Stage 51:===========================>                          (63 + 59) / 122][Stage 51:====================================>                 (82 + 40) / 122][Stage 51:===========================================>         (100 + 22) / 122][Stage 51:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.116197675 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453038838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (70 + 45) / 115][Stage 52:=====================================>                (80 + 35) / 115][Stage 52:==============================================>      (101 + 14) / 115][Stage 52:====================================================> (111 + 4) / 115]                                                                                [Stage 53:=================================>                    (73 + 43) / 116][Stage 53:========================================>             (88 + 28) / 116][Stage 53:==============================================>       (99 + 17) / 116][Stage 53:================================================>    (106 + 10) / 116][Stage 53:===================================================>  (110 + 6) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.641239817 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465585384 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (61 + 61) / 122][Stage 54:==============================>                       (70 + 52) / 122][Stage 54:========================================>             (92 + 30) / 122][Stage 54:============================================>        (102 + 20) / 122][Stage 54:===================================================>  (116 + 6) / 122]                                                                                [Stage 55:===========================>                          (62 + 61) / 123][Stage 55:==============================>                       (69 + 54) / 123][Stage 55:=====================================>                (85 + 38) / 123][Stage 55:=============================================>       (106 + 17) / 123][Stage 55:==================================================>   (115 + 8) / 123][Stage 55:=====================================================>(121 + 2) / 123][Stage 55:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.788854297 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425422839 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (69 + 46) / 115][Stage 56:======================================>               (83 + 32) / 115][Stage 56:=============================================>        (96 + 19) / 115][Stage 56:===================================================>  (110 + 5) / 115][Stage 56:=====================================================>(113 + 2) / 115]                                                                                [Stage 57:=================================>                    (72 + 44) / 116][Stage 57:=======================================>              (84 + 32) / 116][Stage 57:============================================>         (95 + 21) / 116][Stage 57:==================================================>   (109 + 7) / 116][Stage 57:=====================================================>(114 + 2) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.257629173 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===============================>                      (67 + 48) / 115][Stage 58:===================================>                  (76 + 39) / 115][Stage 58:==========================================>           (91 + 24) / 115][Stage 58:===============================================>     (104 + 11) / 115][Stage 58:=====================================================>(113 + 2) / 115]                                                                                [Stage 59:================================>                     (69 + 47) / 116][Stage 59:====================================>                 (79 + 37) / 116][Stage 59:=============================================>        (98 + 18) / 116][Stage 59:==================================================>   (108 + 8) / 116][Stage 59:====================================================> (112 + 4) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.725911555 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50894935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (71 + 46) / 117][Stage 60:===================================>                  (77 + 40) / 117][Stage 60:========================================>             (88 + 29) / 117][Stage 60:=================================================>    (108 + 9) / 117][Stage 60:=====================================================>(116 + 1) / 117]                                                                                [Stage 61:================================>                     (72 + 46) / 118][Stage 61:===================================>                  (78 + 40) / 118][Stage 61:======================================>               (84 + 34) / 118][Stage 61:=============================================>        (99 + 19) / 118][Stage 61:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.364842643 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462915935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===============================>                      (68 + 47) / 115][Stage 62:======================================>               (81 + 34) / 115][Stage 62:============================================>         (94 + 21) / 115][Stage 62:===============================================>     (102 + 13) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:====================================>                 (78 + 38) / 116][Stage 63:========================================>             (88 + 28) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:===============================================>     (104 + 12) / 116][Stage 63:==================================================>   (109 + 7) / 116][Stage 63:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.724558599 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (69 + 46) / 115][Stage 64:=====================================>                (80 + 35) / 115][Stage 64:===========================================>          (93 + 22) / 115][Stage 64:==============================================>       (99 + 16) / 115][Stage 64:====================================================> (112 + 3) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:===============================>                      (68 + 48) / 116][Stage 65:===================================>                  (76 + 40) / 116][Stage 65:========================================>             (86 + 30) / 116][Stage 65:==============================================>      (102 + 14) / 116][Stage 65:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.298331356 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489940809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (61 + 60) / 121][Stage 66:=============================>                        (66 + 55) / 121][Stage 66:=================================>                    (76 + 45) / 121][Stage 66:==========================================>           (96 + 25) / 121][Stage 66:=================================================>    (112 + 9) / 121]                                                                                [Stage 67:===========================>                          (62 + 60) / 122][Stage 67:================================>                     (74 + 48) / 122][Stage 67:=======================================>              (89 + 33) / 122][Stage 67:==============================================>      (106 + 16) / 122][Stage 67:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.377220713 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38346125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (81 + 34) / 115][Stage 68:=========================================>            (88 + 27) / 115][Stage 68:=============================================>        (97 + 18) / 115][Stage 68:===================================================>  (110 + 5) / 115]                                                                                [Stage 69:=======================================>              (85 + 31) / 116][Stage 69:=============================================>        (98 + 18) / 116][Stage 69:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.647299646 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 251 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 251 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395016632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (71 + 46) / 117][Stage 70:==================================>                   (74 + 43) / 117][Stage 70:========================================>             (87 + 30) / 117][Stage 70:================================================>    (106 + 11) / 117][Stage 70:=====================================================>(116 + 1) / 117]                                                                                [Stage 71:================================>                     (72 + 46) / 118][Stage 71:=======================================>              (87 + 31) / 118][Stage 71:==============================================>      (103 + 15) / 118][Stage 71:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.139977816 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430273025 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (69 + 46) / 115][Stage 72:======================================>               (81 + 34) / 115][Stage 72:============================================>         (95 + 20) / 115][Stage 72:==================================================>   (107 + 8) / 115]                                                                                [Stage 73:=================================>                    (71 + 45) / 116][Stage 73:=======================================>              (84 + 32) / 116][Stage 73:==============================================>       (99 + 17) / 116][Stage 73:=================================================>    (107 + 9) / 116][Stage 73:====================================================> (112 + 4) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.255428328 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 220 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 220 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387236595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===================================>                  (75 + 39) / 114][Stage 74:========================================>             (86 + 28) / 114][Stage 74:=============================================>        (96 + 18) / 114][Stage 74:=================================================>    (105 + 9) / 114][Stage 74:====================================================> (111 + 3) / 114]                                                                                [Stage 75:=======================================>              (84 + 31) / 115][Stage 75:==========================================>           (91 + 24) / 115][Stage 75:==============================================>      (100 + 15) / 115][Stage 75:====================================================> (112 + 3) / 115][Stage 75:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.223631659 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454929014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (71 + 44) / 115][Stage 76:=========================================>            (89 + 26) / 115][Stage 76:==============================================>       (99 + 16) / 115][Stage 76:================================================>    (105 + 10) / 115][Stage 76:====================================================> (112 + 3) / 115]                                                                                [Stage 77:================================>                     (69 + 47) / 116][Stage 77:======================================>               (82 + 34) / 116][Stage 77:============================================>         (95 + 21) / 116][Stage 77:===============================================>     (104 + 12) / 116][Stage 77:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.049071916 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (70 + 45) / 115][Stage 78:======================================>               (81 + 34) / 115][Stage 78:============================================>         (94 + 21) / 115][Stage 78:==============================================>      (101 + 14) / 115][Stage 78:====================================================> (112 + 3) / 115]                                                                                [Stage 79:====================================>                 (78 + 38) / 116][Stage 79:==========================================>           (91 + 25) / 116][Stage 79:==============================================>      (101 + 15) / 116][Stage 79:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.00970295 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366508591 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:======================================>               (82 + 33) / 115][Stage 80:=============================================>        (96 + 19) / 115][Stage 80:==================================================>   (108 + 7) / 115]                                                                                [Stage 81:======================================>               (83 + 33) / 116][Stage 81:===========================================>          (94 + 22) / 116][Stage 81:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.504835232 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359701037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (82 + 33) / 115][Stage 82:==========================================>           (90 + 25) / 115][Stage 82:================================================>    (105 + 10) / 115][Stage 82:====================================================> (111 + 4) / 115]                                                                                [Stage 83:======================================>               (82 + 34) / 116][Stage 83:========================================>             (88 + 28) / 116][Stage 83:==============================================>      (102 + 14) / 116][Stage 83:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.770647033 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452569746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==========================>                           (60 + 62) / 122][Stage 84:===============================>                      (72 + 50) / 122][Stage 84:=======================================>              (90 + 32) / 122][Stage 84:==============================================>      (106 + 16) / 122][Stage 84:===================================================>  (116 + 6) / 122][Stage 84:=====================================================>(121 + 1) / 122]                                                                                [Stage 85:===========================>                          (62 + 61) / 123][Stage 85:===============================>                      (71 + 52) / 123][Stage 85:====================================>                 (84 + 39) / 123][Stage 85:================================================>    (113 + 10) / 123][Stage 85:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.498695519 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (62 + 60) / 122][Stage 86:==============================>                       (68 + 54) / 122][Stage 86:======================================>               (86 + 36) / 122][Stage 86:================================================>    (112 + 10) / 122][Stage 86:====================================================> (119 + 3) / 122]                                                                                [Stage 87:===========================>                          (63 + 60) / 123][Stage 87:================================>                     (74 + 49) / 123][Stage 87:===========================================>          (99 + 24) / 123][Stage 87:==================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.322952115 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463077467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (61 + 60) / 121][Stage 88:==============================>                       (69 + 52) / 121][Stage 88:=====================================>                (85 + 36) / 121][Stage 88:==============================================>      (106 + 15) / 121][Stage 88:=====================================================>(119 + 2) / 121]                                                                                [Stage 89:===========================>                          (63 + 59) / 122][Stage 89:=================================>                    (75 + 47) / 122][Stage 89:==========================================>           (95 + 27) / 122][Stage 89:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.16171008 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399386136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (71 + 46) / 117][Stage 90:====================================>                 (79 + 38) / 117][Stage 90:==========================================>           (93 + 24) / 117][Stage 90:================================================>    (107 + 10) / 117][Stage 90:=====================================================>(116 + 1) / 117]                                                                                [Stage 91:=================================>                    (73 + 45) / 118][Stage 91:=====================================>                (82 + 36) / 118][Stage 91:==========================================>           (92 + 26) / 118][Stage 91:==================================================>   (110 + 8) / 118]                                                                                Time elapsed: 3.041208269 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412807523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (70 + 45) / 115][Stage 92:=======================================>              (85 + 30) / 115][Stage 92:==============================================>       (98 + 17) / 115][Stage 92:===============================================>     (103 + 12) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:===================================>                  (76 + 40) / 116][Stage 93:========================================>             (87 + 29) / 116][Stage 93:==============================================>       (99 + 17) / 116][Stage 93:===================================================>  (111 + 5) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.290261453 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378362612 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (72 + 45) / 117][Stage 94:=====================================>                (81 + 36) / 117][Stage 94:==========================================>           (93 + 24) / 117][Stage 94:==============================================>      (103 + 14) / 117][Stage 94:=====================================================>(116 + 1) / 117]                                                                                [Stage 95:================================>                     (72 + 46) / 118][Stage 95:==================================>                   (75 + 43) / 118][Stage 95:=======================================>              (87 + 31) / 118][Stage 95:=============================================>       (102 + 16) / 118][Stage 95:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.156733797 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347756389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (80 + 35) / 115][Stage 96:===========================================>          (92 + 23) / 115][Stage 96:================================================>    (105 + 10) / 115][Stage 96:===================================================>  (110 + 5) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:======================================>               (83 + 33) / 116][Stage 97:=========================================>            (90 + 26) / 116][Stage 97:==============================================>       (99 + 17) / 116][Stage 97:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.884557597 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403523222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===============================>                      (67 + 48) / 115][Stage 98:===================================>                  (76 + 39) / 115][Stage 98:==========================================>           (90 + 25) / 115][Stage 98:==============================================>       (99 + 16) / 115][Stage 98:================================================>    (105 + 10) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=================================>                    (72 + 44) / 116][Stage 99:=======================================>              (84 + 32) / 116][Stage 99:============================================>         (95 + 21) / 116][Stage 99:===================================================>  (110 + 6) / 116][Stage 99:====================================================> (112 + 4) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.141137592 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380734595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (71 + 43) / 114][Stage 100:=====================================>               (81 + 33) / 114][Stage 100:=============================================>       (97 + 17) / 114][Stage 100:==============================================>     (102 + 12) / 114][Stage 100:===================================================> (110 + 4) / 114]                                                                                [Stage 101:=================================>                   (72 + 43) / 115][Stage 101:=========================================>           (91 + 24) / 115][Stage 101:============================================>        (97 + 18) / 115][Stage 101:================================================>    (106 + 9) / 115][Stage 101:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.057824861 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393914821 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==============================>                      (67 + 50) / 117][Stage 102:=================================>                   (73 + 44) / 117][Stage 102:=========================================>           (91 + 26) / 117][Stage 102:================================================>    (108 + 9) / 117][Stage 102:===================================================> (113 + 4) / 117]                                                                                [Stage 103:================================>                    (73 + 45) / 118][Stage 103:=====================================>               (83 + 35) / 118][Stage 103:==========================================>          (95 + 23) / 118][Stage 103:===============================================>    (108 + 10) / 118][Stage 103:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.453475681 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379182091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=================================>                   (72 + 42) / 114][Stage 104:======================================>              (82 + 32) / 114][Stage 104:=============================================>       (97 + 17) / 114][Stage 104:=================================================>   (107 + 7) / 114][Stage 104:====================================================>(113 + 1) / 114]                                                                                [Stage 105:=================================>                   (72 + 43) / 115][Stage 105:=====================================>               (81 + 34) / 115][Stage 105:============================================>        (96 + 19) / 115][Stage 105:================================================>    (106 + 9) / 115][Stage 105:==================================================>  (110 + 5) / 115][Stage 105:===================================================> (112 + 3) / 115][Stage 105:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.270641185 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391192574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (68 + 49) / 117][Stage 106:=================================>                   (74 + 43) / 117][Stage 106:======================================>              (84 + 33) / 117][Stage 106:===========================================>         (95 + 22) / 117][Stage 106:==============================================>     (105 + 12) / 117][Stage 106:====================================================>(115 + 2) / 117]                                                                                [Stage 107:=================================>                   (75 + 43) / 118][Stage 107:=====================================>               (84 + 34) / 118][Stage 107:===========================================>         (97 + 21) / 118][Stage 107:================================================>    (109 + 9) / 118][Stage 107:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.400578304 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391001214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (71 + 44) / 115][Stage 108:=======================================>             (86 + 29) / 115][Stage 108:==========================================>          (93 + 22) / 115][Stage 108:===============================================>    (104 + 11) / 115][Stage 108:===================================================> (111 + 4) / 115]                                                                                [Stage 109:=================================>                   (74 + 42) / 116][Stage 109:==========================================>          (92 + 24) / 116][Stage 109:=============================================>      (101 + 15) / 116][Stage 109:=================================================>   (109 + 7) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.247065287 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425827404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (62 + 60) / 122][Stage 110:==============================>                      (70 + 52) / 122][Stage 110:=========================================>           (95 + 27) / 122][Stage 110:===============================================>    (112 + 10) / 122][Stage 110:====================================================>(120 + 2) / 122]                                                                                [Stage 111:===========================>                         (64 + 59) / 123][Stage 111:================================>                    (75 + 48) / 123][Stage 111:========================================>            (95 + 28) / 123][Stage 111:==================================================>  (118 + 5) / 123][Stage 111:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.425186464 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382471076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:======================================>              (82 + 32) / 114][Stage 112:===========================================>         (94 + 20) / 114][Stage 112:===============================================>    (104 + 10) / 114][Stage 112:=================================================>   (106 + 8) / 114][Stage 112:====================================================>(112 + 2) / 114]                                                                                [Stage 113:======================================>              (83 + 32) / 115][Stage 113:===========================================>         (94 + 21) / 115][Stage 113:=============================================>      (100 + 15) / 115][Stage 113:=================================================>   (107 + 8) / 115][Stage 113:===================================================> (111 + 4) / 115][Stage 113:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.573351479 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419034649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 60) / 121][Stage 114:==============================>                      (69 + 52) / 121][Stage 114:========================================>            (92 + 29) / 121][Stage 114:==============================================>     (108 + 13) / 121][Stage 114:====================================================>(120 + 1) / 121]                                                                                [Stage 115:===========================>                         (63 + 59) / 122][Stage 115:==============================>                      (70 + 52) / 122][Stage 115:======================================>              (88 + 34) / 122][Stage 115:==============================================>     (109 + 13) / 122][Stage 115:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.085773847 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365414739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:====================================>                (78 + 36) / 114][Stage 116:==========================================>          (91 + 23) / 114][Stage 116:==============================================>     (102 + 12) / 114][Stage 116:==================================================>  (109 + 5) / 114][Stage 116:====================================================>(113 + 1) / 114]                                                                                [Stage 117:=======================================>             (86 + 29) / 115][Stage 117:=============================================>      (100 + 15) / 115][Stage 117:===============================================>    (105 + 10) / 115][Stage 117:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 3.124587701 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377801104 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (71 + 46) / 117][Stage 118:==================================>                  (76 + 41) / 117][Stage 118:===========================================>         (96 + 21) / 117][Stage 118:=================================================>   (109 + 8) / 117][Stage 118:====================================================>(115 + 2) / 117]                                                                                [Stage 119:=================================>                   (74 + 44) / 118][Stage 119:====================================>                (82 + 36) / 118][Stage 119:=============================================>      (103 + 15) / 118][Stage 119:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.175247699 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349234266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (82 + 33) / 115][Stage 120:=========================================>           (89 + 26) / 115][Stage 120:===============================================>    (104 + 11) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:=======================================>             (87 + 29) / 116][Stage 121:=============================================>      (101 + 15) / 116][Stage 121:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.63867055 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399825707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (70 + 45) / 115][Stage 122:=======================================>             (86 + 29) / 115][Stage 122:=============================================>      (101 + 14) / 115][Stage 122:==================================================>  (109 + 6) / 115]                                                                                [Stage 123:===============================>                     (69 + 47) / 116][Stage 123:=====================================>               (83 + 33) / 116][Stage 123:===========================================>         (95 + 21) / 116][Stage 123:=================================================>   (109 + 7) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.991062219 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392996754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (69 + 46) / 115][Stage 124:=====================================>               (81 + 34) / 115][Stage 124:=========================================>           (91 + 24) / 115][Stage 124:==============================================>     (102 + 13) / 115][Stage 124:===================================================> (111 + 4) / 115]                                                                                [Stage 125:==============================>                      (67 + 49) / 116][Stage 125:===================================>                 (78 + 38) / 116][Stage 125:========================================>            (89 + 27) / 116][Stage 125:==============================================>     (104 + 12) / 116][Stage 125:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.99868807 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.532109053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:============================>                        (64 + 57) / 121][Stage 126:===============================>                     (72 + 49) / 121][Stage 126:========================================>            (93 + 28) / 121][Stage 126:==============================================>     (108 + 13) / 121][Stage 126:====================================================>(119 + 2) / 121]                                                                                [Stage 127:==========================>                          (62 + 60) / 122][Stage 127:==============================>                      (70 + 52) / 122][Stage 127:=====================================>               (87 + 35) / 122][Stage 127:============================================>       (105 + 17) / 122][Stage 127:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.247645708 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490288728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=======================================>             (86 + 28) / 114][Stage 128:==========================================>          (92 + 22) / 114][Stage 128:===============================================>    (104 + 10) / 114][Stage 128:==================================================>  (109 + 5) / 114]                                                                                [Stage 129:====================================>                (80 + 35) / 115][Stage 129:=========================================>           (90 + 25) / 115][Stage 129:=============================================>       (98 + 17) / 115][Stage 129:==================================================>  (110 + 5) / 115][Stage 129:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.207854403 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:====================================>                (79 + 35) / 114][Stage 130:========================================>            (88 + 26) / 114][Stage 130:==============================================>      (99 + 15) / 114][Stage 130:==================================================>  (109 + 5) / 114]                                                                                [Stage 131:=====================================>               (81 + 34) / 115][Stage 131:=======================================>             (86 + 29) / 115][Stage 131:=============================================>       (99 + 16) / 115][Stage 131:==================================================>  (110 + 5) / 115][Stage 131:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.096284754 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37742296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=================================>                   (72 + 43) / 115][Stage 132:======================================>              (83 + 32) / 115][Stage 132:=============================================>       (98 + 17) / 115][Stage 132:==================================================>  (109 + 6) / 115]                                                                                [Stage 133:===============================>                     (70 + 46) / 116][Stage 133:=====================================>               (83 + 33) / 116][Stage 133:===========================================>         (96 + 20) / 116][Stage 133:=================================================>   (109 + 7) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.544715632 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 125 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==================================>                  (74 + 41) / 115][Stage 134:======================================>              (84 + 31) / 115][Stage 134:==========================================>          (92 + 23) / 115][Stage 134:================================================>    (106 + 9) / 115]                                                                                [Stage 135:================================>                    (71 + 45) / 116][Stage 135:======================================>              (85 + 31) / 116][Stage 135:=============================================>      (102 + 14) / 116]                                                                                Time elapsed: 2.758054025 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403689491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 60) / 121][Stage 136:================================>                    (74 + 47) / 121][Stage 136:=======================================>             (90 + 31) / 121][Stage 136:===================================================> (117 + 4) / 121]                                                                                [Stage 137:==========================>                          (62 + 60) / 122][Stage 137:===============================>                     (73 + 49) / 122][Stage 137:======================================>              (88 + 34) / 122][Stage 137:===============================================>    (111 + 11) / 122][Stage 137:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.377407366 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 120 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398964061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 61) / 122][Stage 138:==========================>                          (62 + 60) / 122][Stage 138:===================================>                 (81 + 41) / 122][Stage 138:==========================================>         (100 + 22) / 122][Stage 138:=================================================>   (114 + 8) / 122]                                                                                [Stage 139:===========================>                         (64 + 59) / 123][Stage 139:=================================>                   (78 + 45) / 123][Stage 139:=========================================>           (97 + 26) / 123][Stage 139:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.093719232 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334366471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (82 + 33) / 115][Stage 140:==========================================>          (92 + 23) / 115][Stage 140:=================================================>   (108 + 7) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:==========================================>          (94 + 22) / 116][Stage 141:===============================================>    (105 + 11) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.797216412 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364433031 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (71 + 46) / 117][Stage 142:===================================>                 (79 + 38) / 117][Stage 142:============================================>        (99 + 18) / 117][Stage 142:==================================================>  (111 + 6) / 117][Stage 142:====================================================>(116 + 1) / 117]                                                                                [Stage 143:================================>                    (72 + 46) / 118][Stage 143:==================================>                  (77 + 41) / 118][Stage 143:=======================================>             (89 + 29) / 118][Stage 143:==============================================>     (106 + 12) / 118][Stage 143:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.257485011 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353884989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (72 + 42) / 114][Stage 144:=========================================>           (90 + 24) / 114][Stage 144:===========================================>         (94 + 20) / 114][Stage 144:================================================>    (105 + 9) / 114]                                                                                [Stage 145:====================================>                (80 + 35) / 115][Stage 145:=========================================>           (90 + 25) / 115][Stage 145:=============================================>      (101 + 14) / 115][Stage 145:===================================================> (111 + 4) / 115][Stage 145:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.018118008 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362342226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=====================================>               (81 + 33) / 114][Stage 146:=============================================>       (97 + 17) / 114][Stage 146:================================================>    (105 + 9) / 114][Stage 146:===================================================> (111 + 3) / 114][Stage 146:====================================================>(113 + 1) / 114]                                                                                [Stage 147:======================================>              (83 + 32) / 115][Stage 147:=========================================>           (91 + 24) / 115][Stage 147:==============================================>     (103 + 12) / 115][Stage 147:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.430495689 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407419116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (61 + 60) / 121][Stage 148:===========================>                         (62 + 59) / 121][Stage 148:=================================>                   (77 + 44) / 121][Stage 148:===========================================>         (99 + 22) / 121][Stage 148:===================================================> (118 + 3) / 121]                                                                                [Stage 149:==========================>                          (62 + 60) / 122][Stage 149:==============================>                      (70 + 52) / 122][Stage 149:====================================>                (83 + 39) / 122][Stage 149:==============================================>     (109 + 13) / 122][Stage 149:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.030493424 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387600355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==============================>                      (66 + 49) / 115][Stage 150:====================================>                (79 + 36) / 115][Stage 150:==========================================>          (93 + 22) / 115][Stage 150:=================================================>   (107 + 8) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:================================>                    (72 + 44) / 116][Stage 151:======================================>              (85 + 31) / 116][Stage 151:==========================================>          (94 + 22) / 116][Stage 151:=============================================>      (102 + 14) / 116][Stage 151:==================================================>  (110 + 6) / 116][Stage 151:==================================================>  (111 + 5) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.450317298 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372173624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (71 + 46) / 117][Stage 152:===================================>                 (78 + 39) / 117][Stage 152:===========================================>         (96 + 21) / 117][Stage 152:===================================================> (114 + 3) / 117]                                                                                [Stage 153:================================>                    (72 + 46) / 118][Stage 153:==================================>                  (76 + 42) / 118][Stage 153:========================================>            (91 + 27) / 118][Stage 153:===============================================>    (107 + 11) / 118][Stage 153:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.948830972 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495096429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (63 + 58) / 121][Stage 154:===============================>                     (72 + 49) / 121][Stage 154:=======================================>             (91 + 30) / 121][Stage 154:=================================================>   (114 + 7) / 121]                                                                                [Stage 155:============================>                        (65 + 57) / 122][Stage 155:=================================>                   (76 + 46) / 122][Stage 155:==========================================>         (100 + 22) / 122][Stage 155:===================================================> (118 + 4) / 122][Stage 155:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.244289218 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239  OR  partitionIndex = 254 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239  OR  partitionIndex = 254 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359422957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==================================>                  (75 + 39) / 114][Stage 156:=========================================>           (89 + 25) / 114][Stage 156:=============================================>       (98 + 16) / 114][Stage 156:=================================================>   (106 + 8) / 114][Stage 156:====================================================>(112 + 2) / 114]                                                                                [Stage 157:======================================>              (84 + 31) / 115][Stage 157:=============================================>       (99 + 16) / 115][Stage 157:==================================================>  (109 + 6) / 115][Stage 157:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.975852217 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388376494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:==================================>                  (73 + 40) / 113][Stage 158:==========================================>          (90 + 23) / 113][Stage 158:==================================================>  (108 + 5) / 113]                                                                                [Stage 159:============================>                        (62 + 52) / 114][Stage 159:================================>                    (69 + 45) / 114][Stage 159:=============================================>       (97 + 17) / 114][Stage 159:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.168466758 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409948397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 61) / 122][Stage 160:=============================>                       (69 + 53) / 122][Stage 160:====================================>                (83 + 39) / 122][Stage 160:=============================================>      (107 + 15) / 122][Stage 160:====================================================>(120 + 2) / 122]                                                                                [Stage 161:==========================>                          (62 + 61) / 123][Stage 161:==============================>                      (70 + 53) / 123][Stage 161:====================================>                (84 + 39) / 123][Stage 161:==============================================>     (110 + 13) / 123][Stage 161:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.212830782 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375542228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (70 + 45) / 115][Stage 162:====================================>                (80 + 35) / 115][Stage 162:=========================================>           (89 + 26) / 115][Stage 162:=============================================>      (101 + 14) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:===============================>                     (70 + 46) / 116][Stage 163:====================================>                (80 + 36) / 116][Stage 163:=============================================>       (99 + 17) / 116][Stage 163:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.761374599 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===============================>                     (68 + 47) / 115][Stage 164:===================================>                 (78 + 37) / 115][Stage 164:==========================================>          (93 + 22) / 115][Stage 164:=================================================>   (108 + 7) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:===================================>                 (78 + 38) / 116][Stage 165:=====================================>               (83 + 33) / 116][Stage 165:===========================================>         (96 + 20) / 116][Stage 165:================================================>    (107 + 9) / 116][Stage 165:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.454557115 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===============================>                     (68 + 47) / 115][Stage 166:=====================================>               (81 + 34) / 115][Stage 166:===========================================>         (95 + 20) / 115][Stage 166:==================================================>  (109 + 6) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:===================================>                 (77 + 39) / 116][Stage 167:==========================================>          (93 + 23) / 116][Stage 167:===============================================>    (105 + 11) / 116][Stage 167:===================================================> (113 + 3) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.185211334 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404977765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 61) / 122][Stage 168:===============================>                     (72 + 50) / 122][Stage 168:===========================================>         (99 + 23) / 122][Stage 168:=================================================>   (113 + 9) / 122]                                                                                [Stage 169:============================>                        (66 + 57) / 123][Stage 169:================================>                    (76 + 47) / 123][Stage 169:=========================================>           (97 + 26) / 123][Stage 169:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.184014608 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370854397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (72 + 43) / 115][Stage 170:========================================>            (87 + 28) / 115][Stage 170:============================================>        (97 + 18) / 115][Stage 170:================================================>    (106 + 9) / 115][Stage 170:===================================================> (111 + 4) / 115]                                                                                [Stage 171:=================================>                   (74 + 42) / 116][Stage 171:========================================>            (89 + 27) / 116][Stage 171:============================================>       (100 + 16) / 116][Stage 171:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.029941058 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400371055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 61) / 122][Stage 172:=============================>                       (67 + 55) / 122][Stage 172:===================================>                 (82 + 40) / 122][Stage 172:===========================================>        (101 + 21) / 122][Stage 172:===============================================>    (111 + 11) / 122][Stage 172:====================================================>(120 + 2) / 122]                                                                                [Stage 173:===========================>                         (63 + 60) / 123][Stage 173:===============================>                     (74 + 49) / 123][Stage 173:========================================>            (94 + 29) / 123][Stage 173:============================================>       (106 + 17) / 123]                                                                                Time elapsed: 3.320870471 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387213648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (71 + 46) / 117][Stage 174:==================================>                  (76 + 41) / 117][Stage 174:===========================================>         (95 + 22) / 117][Stage 174:=================================================>   (109 + 8) / 117]                                                                                [Stage 175:=================================>                   (74 + 44) / 118][Stage 175:====================================>                (82 + 36) / 118][Stage 175:============================================>        (99 + 19) / 118][Stage 175:=================================================>   (110 + 8) / 118][Stage 175:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.01549216 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410183714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (61 + 61) / 122][Stage 176:=============================>                       (67 + 55) / 122][Stage 176:====================================>                (84 + 38) / 122][Stage 176:===========================================>        (101 + 21) / 122][Stage 176:=================================================>   (114 + 8) / 122]                                                                                [Stage 177:===========================>                         (64 + 59) / 123][Stage 177:=================================>                   (78 + 45) / 123][Stage 177:=========================================>           (96 + 27) / 123][Stage 177:==================================================>  (118 + 5) / 123][Stage 177:====================================================>(121 + 2) / 123][Stage 177:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.419520837 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395723144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (61 + 60) / 121][Stage 178:===============================>                     (71 + 50) / 121][Stage 178:=====================================>               (85 + 36) / 121][Stage 178:=============================================>      (107 + 14) / 121][Stage 178:====================================================>(120 + 1) / 121]                                                                                [Stage 179:===========================>                         (63 + 59) / 122][Stage 179:==============================>                      (71 + 51) / 122][Stage 179:======================================>              (89 + 33) / 122][Stage 179:============================================>       (105 + 17) / 122][Stage 179:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.100947682 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350570534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:====================================>                (78 + 36) / 114][Stage 180:=======================================>             (85 + 29) / 114][Stage 180:==========================================>          (91 + 23) / 114][Stage 180:===============================================>    (104 + 10) / 114][Stage 180:====================================================>(112 + 2) / 114]                                                                                [Stage 181:=====================================>               (81 + 34) / 115][Stage 181:======================================>              (84 + 31) / 115][Stage 181:=============================================>      (100 + 15) / 115][Stage 181:=================================================>   (107 + 8) / 115][Stage 181:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.230733674 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400004692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 61) / 122][Stage 182:=============================>                       (69 + 53) / 122][Stage 182:==========================================>          (97 + 25) / 122][Stage 182:==================================================>  (116 + 6) / 122]                                                                                [Stage 183:===========================>                         (63 + 60) / 123][Stage 183:================================>                    (75 + 48) / 123][Stage 183:=======================================>             (91 + 32) / 123][Stage 183:===============================================>    (113 + 10) / 123]                                                                                Time elapsed: 3.007829249 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396936565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (61 + 61) / 122][Stage 184:============================>                        (66 + 56) / 122][Stage 184:====================================>                (83 + 39) / 122][Stage 184:============================================>       (105 + 17) / 122][Stage 184:===================================================> (119 + 3) / 122]                                                                                [Stage 185:===========================>                         (64 + 59) / 123][Stage 185:================================>                    (76 + 47) / 123][Stage 185:==========================================>          (98 + 25) / 123][Stage 185:===================================================> (120 + 3) / 123][Stage 185:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.502521883 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 119 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400713792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (61 + 60) / 121][Stage 186:================================>                    (74 + 47) / 121][Stage 186:=======================================>             (90 + 31) / 121][Stage 186:=================================================>   (112 + 9) / 121]                                                                                [Stage 187:============================>                        (66 + 56) / 122][Stage 187:=====================================>               (87 + 35) / 122][Stage 187:===========================================>        (101 + 21) / 122][Stage 187:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.173771429 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362154475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (73 + 42) / 115][Stage 188:==========================================>          (93 + 22) / 115][Stage 188:================================================>    (106 + 9) / 115]                                                                                [Stage 189:==================================>                  (76 + 40) / 116][Stage 189:==========================================>          (92 + 24) / 116][Stage 189:==============================================>     (104 + 12) / 116][Stage 189:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.651234893 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352388215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=================================>                   (73 + 41) / 114][Stage 190:========================================>            (88 + 26) / 114][Stage 190:==============================================>     (102 + 12) / 114][Stage 190:=================================================>   (107 + 7) / 114][Stage 190:====================================================>(112 + 2) / 114]                                                                                [Stage 191:=================================>                   (72 + 43) / 115][Stage 191:====================================>                (79 + 36) / 115][Stage 191:============================================>        (96 + 19) / 115][Stage 191:=================================================>   (107 + 8) / 115]                                                                                Time elapsed: 2.89957794 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:=======================================>             (84 + 30) / 114][Stage 192:===========================================>         (94 + 20) / 114][Stage 192:==================================================>  (109 + 5) / 114]                                                                                [Stage 193:===================================>                 (77 + 38) / 115][Stage 193:=========================================>           (91 + 24) / 115][Stage 193:=============================================>      (100 + 15) / 115][Stage 193:===================================================> (111 + 4) / 115][Stage 193:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 2.863058044 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360720771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (71 + 46) / 117][Stage 194:================================>                    (72 + 45) / 117][Stage 194:======================================>              (85 + 32) / 117][Stage 194:============================================>       (101 + 16) / 117][Stage 194:===================================================> (113 + 4) / 117]                                                                                [Stage 195:===============================>                     (71 + 47) / 118][Stage 195:===================================>                 (78 + 40) / 118][Stage 195:========================================>            (90 + 28) / 118][Stage 195:=============================================>      (103 + 15) / 118][Stage 195:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.117425422 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384033296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==================================>                  (75 + 39) / 114][Stage 196:=========================================>           (89 + 25) / 114][Stage 196:==============================================>     (102 + 12) / 114][Stage 196:=================================================>   (107 + 7) / 114][Stage 196:====================================================>(113 + 1) / 114]                                                                                [Stage 197:==================================>                  (74 + 41) / 115][Stage 197:======================================>              (84 + 31) / 115][Stage 197:============================================>        (96 + 19) / 115][Stage 197:===============================================>    (105 + 10) / 115][Stage 197:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.089840004 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423350853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (61 + 61) / 122][Stage 198:==============================>                      (71 + 51) / 122][Stage 198:=========================================>           (96 + 26) / 122][Stage 198:==================================================>  (117 + 5) / 122]                                                                                [Stage 199:============================>                        (66 + 57) / 123][Stage 199:================================>                    (75 + 48) / 123][Stage 199:==========================================>         (101 + 22) / 123][Stage 199:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.031570825 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369661307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (71 + 46) / 117][Stage 200:================================>                    (72 + 45) / 117][Stage 200:======================================>              (86 + 31) / 117][Stage 200:================================================>    (108 + 9) / 117]                                                                                [Stage 201:================================>                    (72 + 46) / 118][Stage 201:=====================================>               (83 + 35) / 118][Stage 201:==========================================>          (95 + 23) / 118][Stage 201:==================================================>  (112 + 6) / 118][Stage 201:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.998313616 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 22:56:03 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:55196) dropped. RpcEnv already stopped.
17/05/29 22:56:03 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:55196) dropped. RpcEnv already stopped.

real	10m3.918s
user	11m40.732s
sys	0m36.352s
