Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 23:18:07 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:18:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:18:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:18:22 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 23:18:24 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:18:35 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529231824-0695).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.457294018 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:==================>                                    (38 + 77) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==========================>                            (55 + 61) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:=========================================>             (88 + 28) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 13.691315647 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.701956241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=================================>                     (70 + 44) / 114][Stage 2:====================================>                  (75 + 39) / 114][Stage 2:======================================>                (79 + 35) / 114][Stage 2:=======================================>               (82 + 32) / 114][Stage 2:==========================================>            (89 + 25) / 114][Stage 2:===============================================>       (98 + 16) / 114][Stage 2:=================================================>    (104 + 10) / 114][Stage 2:==================================================>    (105 + 9) / 114][Stage 2:=====================================================> (110 + 4) / 114]                                                                                [Stage 3:=================================>                     (71 + 44) / 115][Stage 3:====================================>                  (76 + 39) / 115][Stage 3:=========================================>             (86 + 29) / 115][Stage 3:=============================================>         (96 + 19) / 115][Stage 3:================================================>     (103 + 12) / 115][Stage 3:=================================================>    (105 + 10) / 115][Stage 3:==================================================>    (106 + 9) / 115][Stage 3:=====================================================> (112 + 3) / 115]                                                                                Time elapsed: 5.332907434 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.6091564 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:>                                                        (0 + 0) / 114][Stage 4:================================>                      (68 + 46) / 114][Stage 4:====================================>                  (76 + 38) / 114][Stage 4:=====================================>                 (78 + 36) / 114][Stage 4:========================================>              (84 + 30) / 114][Stage 4:==============================================>        (96 + 18) / 114][Stage 4:================================================>     (103 + 11) / 114][Stage 4:===================================================>   (107 + 7) / 114][Stage 4:=====================================================> (110 + 4) / 114][Stage 4:======================================================>(112 + 2) / 114]                                                                                [Stage 5:================================>                      (68 + 47) / 115][Stage 5:====================================>                  (77 + 38) / 115][Stage 5:========================================>              (85 + 30) / 115][Stage 5:===========================================>           (91 + 24) / 115][Stage 5:=============================================>         (96 + 19) / 115][Stage 5:===================================================>   (107 + 8) / 115][Stage 5:=====================================================> (112 + 3) / 115][Stage 5:======================================================>(113 + 2) / 115]                                                                                Time elapsed: 5.052542662 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.851392056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=======================>                               (53 + 69) / 122][Stage 6:===========================>                           (60 + 62) / 122][Stage 6:===============================>                       (70 + 52) / 122][Stage 6:=================================>                     (75 + 47) / 122][Stage 6:==================================>                    (77 + 45) / 122][Stage 6:==========================================>            (95 + 27) / 122][Stage 6:=====================================================> (118 + 4) / 122]                                                                                [Stage 7:===========================>                           (62 + 61) / 123][Stage 7:=============================>                         (66 + 57) / 123][Stage 7:===================================>                   (79 + 44) / 123][Stage 7:=========================================>             (92 + 31) / 123][Stage 7:===============================================>      (108 + 15) / 123][Stage 7:======================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.064232503 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.545880383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (70 + 44) / 114][Stage 8:======================================>                (80 + 34) / 114][Stage 8:============================================>          (92 + 22) / 114][Stage 8:===============================================>       (98 + 16) / 114][Stage 8:=================================================>    (104 + 10) / 114][Stage 8:===================================================>   (106 + 8) / 114][Stage 8:===================================================>   (107 + 7) / 114][Stage 8:=====================================================> (111 + 3) / 114]                                                                                [Stage 9:===================================>                   (74 + 41) / 115][Stage 9:=========================================>             (87 + 28) / 115][Stage 9:=============================================>         (95 + 20) / 115][Stage 9:==============================================>       (100 + 15) / 115][Stage 9:=====================================================> (111 + 4) / 115][Stage 9:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.172357185 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.60163942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (61 + 60) / 121][Stage 10:============================>                         (63 + 58) / 121][Stage 10:==================================>                   (77 + 44) / 121][Stage 10:==========================================>           (96 + 25) / 121][Stage 10:==============================================>      (106 + 15) / 121][Stage 10:=====================================================>(119 + 2) / 121]                                                                                [Stage 11:===========================>                          (62 + 60) / 122][Stage 11:==============================>                       (70 + 52) / 122][Stage 11:===================================>                  (80 + 42) / 122][Stage 11:============================================>        (103 + 19) / 122][Stage 11:================================================>    (112 + 10) / 122][Stage 11:====================================================> (118 + 4) / 122][Stage 11:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.048646752 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:===========================>                          (61 + 60) / 121][Stage 12:================================>                     (73 + 48) / 121][Stage 12:=======================================>              (88 + 33) / 121][Stage 12:=============================================>       (103 + 18) / 121][Stage 12:===============================================>     (109 + 12) / 121][Stage 12:===================================================>  (116 + 5) / 121]                                                                                [Stage 13:===========================>                          (63 + 59) / 122][Stage 13:===============================>                      (71 + 51) / 122][Stage 13:====================================>                 (83 + 39) / 122][Stage 13:===========================================>         (101 + 21) / 122][Stage 13:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.814626908 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505761914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:=====================================>                (80 + 35) / 115][Stage 14:===========================================>          (92 + 23) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:====================================================> (111 + 4) / 115]                                                                                [Stage 15:=====================================>                (80 + 36) / 116][Stage 15:======================================>               (83 + 33) / 116][Stage 15:==========================================>           (92 + 24) / 116][Stage 15:=============================================>       (100 + 16) / 116][Stage 15:==================================================>   (108 + 8) / 116][Stage 15:===================================================>  (110 + 6) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.848141852 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.54151033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===============================>                      (67 + 48) / 115][Stage 16:====================================>                 (77 + 38) / 115][Stage 16:=========================================>            (89 + 26) / 115][Stage 16:============================================>         (95 + 20) / 115][Stage 16:===============================================>     (103 + 12) / 115][Stage 16:===================================================>  (109 + 6) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:==============================>                       (66 + 50) / 116][Stage 17:====================================>                 (78 + 38) / 116][Stage 17:=========================================>            (89 + 27) / 116][Stage 17:===========================================>          (93 + 23) / 116][Stage 17:==============================================>      (102 + 14) / 116][Stage 17:===================================================>  (110 + 6) / 116][Stage 17:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.991734508 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491570702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (71 + 43) / 114][Stage 18:======================================>               (82 + 32) / 114][Stage 18:=============================================>        (97 + 17) / 114][Stage 18:==============================================>       (99 + 15) / 114][Stage 18:===================================================>  (108 + 6) / 114][Stage 18:===================================================>  (109 + 5) / 114][Stage 18:====================================================> (110 + 4) / 114]                                                                                [Stage 19:=====================================>                (79 + 36) / 115][Stage 19:==========================================>           (90 + 25) / 115][Stage 19:==============================================>       (99 + 16) / 115][Stage 19:================================================>    (105 + 10) / 115][Stage 19:===================================================>  (109 + 6) / 115][Stage 19:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 4.378593101 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.550184406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (60 + 62) / 122][Stage 20:===========================>                          (61 + 61) / 122][Stage 20:===============================>                      (72 + 50) / 122][Stage 20:======================================>               (87 + 35) / 122][Stage 20:===========================================>         (101 + 21) / 122][Stage 20:===============================================>     (110 + 12) / 122][Stage 20:===================================================>  (116 + 6) / 122]                                                                                [Stage 21:==========================>                           (61 + 62) / 123][Stage 21:===========================>                          (63 + 60) / 123][Stage 21:===================================>                  (81 + 42) / 123][Stage 21:=========================================>            (95 + 28) / 123][Stage 21:==============================================>      (109 + 14) / 123][Stage 21:==================================================>   (114 + 9) / 123][Stage 21:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.15127249 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (61 + 61) / 122][Stage 22:============================>                         (65 + 57) / 122][Stage 22:====================================>                 (83 + 39) / 122][Stage 22:==================================================>   (113 + 9) / 122][Stage 22:=====================================================>(121 + 1) / 122]                                                                                [Stage 23:==========================>                           (61 + 62) / 123][Stage 23:===========================>                          (63 + 60) / 123][Stage 23:====================================>                 (82 + 41) / 123][Stage 23:=========================================>            (95 + 28) / 123][Stage 23:==============================================>      (108 + 15) / 123][Stage 23:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.448000375 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479837655 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===================================>                  (75 + 39) / 114][Stage 24:==========================================>           (90 + 24) / 114][Stage 24:===============================================>     (102 + 12) / 114][Stage 24:===================================================>  (108 + 6) / 114]                                                                                [Stage 25:======================================>               (83 + 32) / 115][Stage 25:==========================================>           (91 + 24) / 115][Stage 25:==============================================>      (101 + 14) / 115][Stage 25:===================================================>  (109 + 6) / 115]                                                                                Time elapsed: 2.933913943 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=================================>                    (70 + 44) / 114][Stage 26:=======================================>              (83 + 31) / 114][Stage 26:=============================================>        (95 + 19) / 114][Stage 26:===============================================>     (103 + 11) / 114][Stage 26:==================================================>   (107 + 7) / 114][Stage 26:=====================================================>(113 + 1) / 114]                                                                                [Stage 27:================================>                     (70 + 45) / 115][Stage 27:=====================================>                (79 + 36) / 115][Stage 27:=========================================>            (89 + 26) / 115][Stage 27:==============================================>       (99 + 16) / 115][Stage 27:================================================>    (105 + 10) / 115][Stage 27:===================================================>  (110 + 5) / 115][Stage 27:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.602636492 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456351783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=======================================>              (83 + 31) / 114][Stage 28:============================================>         (93 + 21) / 114][Stage 28:==============================================>       (99 + 15) / 114][Stage 28:==================================================>   (107 + 7) / 114][Stage 28:=====================================================>(112 + 2) / 114][Stage 28:=====================================================>(113 + 1) / 114]                                                                                [Stage 29:======================================>               (82 + 33) / 115][Stage 29:=========================================>            (88 + 27) / 115][Stage 29:==============================================>      (100 + 15) / 115][Stage 29:==================================================>   (107 + 8) / 115][Stage 29:===================================================>  (110 + 5) / 115][Stage 29:====================================================> (112 + 3) / 115][Stage 29:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.882852837 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493590641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:====================================>                 (78 + 37) / 115][Stage 30:======================================>               (83 + 32) / 115][Stage 30:==============================================>       (99 + 16) / 115][Stage 30:==================================================>   (107 + 8) / 115][Stage 30:=====================================================>(113 + 2) / 115]                                                                                [Stage 31:========================================>             (87 + 29) / 116][Stage 31:==============================================>      (102 + 14) / 116][Stage 31:====================================================> (113 + 3) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.974796875 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515842428 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===============================>                      (67 + 48) / 115][Stage 32:===================================>                  (76 + 39) / 115][Stage 32:============================================>         (94 + 21) / 115][Stage 32:==============================================>      (100 + 15) / 115][Stage 32:==================================================>   (107 + 8) / 115][Stage 32:====================================================> (111 + 4) / 115]                                                                                [Stage 33:=================================>                    (71 + 45) / 116][Stage 33:======================================>               (83 + 33) / 116][Stage 33:==============================================>       (99 + 17) / 116][Stage 33:==================================================>   (108 + 8) / 116][Stage 33:===================================================>  (110 + 6) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.782842153 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453994657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (82 + 33) / 115][Stage 34:==========================================>           (91 + 24) / 115][Stage 34:==================================================>   (107 + 8) / 115][Stage 34:====================================================> (112 + 3) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:======================================>               (83 + 33) / 116][Stage 35:========================================>             (87 + 29) / 116][Stage 35:============================================>         (96 + 20) / 116][Stage 35:==================================================>   (109 + 7) / 116][Stage 35:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.639742125 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417143498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=====================================>                (79 + 36) / 115][Stage 36:========================================>             (86 + 29) / 115][Stage 36:===============================================>     (103 + 12) / 115][Stage 36:====================================================> (112 + 3) / 115]                                                                                [Stage 37:========================================>             (86 + 30) / 116][Stage 37:==============================================>       (99 + 17) / 116][Stage 37:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.555145037 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511004355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 60) / 121][Stage 38:==============================>                       (69 + 52) / 121][Stage 38:=====================================>                (83 + 38) / 121][Stage 38:=============================================>       (105 + 16) / 121][Stage 38:====================================================> (118 + 3) / 121]                                                                                [Stage 39:==========================>                           (60 + 62) / 122][Stage 39:=============================>                        (67 + 55) / 122][Stage 39:==================================>                   (79 + 43) / 122][Stage 39:========================================>             (92 + 30) / 122][Stage 39:================================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.158768203 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495700842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=====================================>                (79 + 36) / 115][Stage 40:========================================>             (86 + 29) / 115][Stage 40:==============================================>       (98 + 17) / 115][Stage 40:====================================================> (111 + 4) / 115][Stage 40:=====================================================>(113 + 2) / 115]                                                                                [Stage 41:=======================================>              (85 + 31) / 116][Stage 41:============================================>         (96 + 20) / 116][Stage 41:====================================================> (112 + 4) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.980857884 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449026343 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:======================================>               (82 + 33) / 115][Stage 42:=========================================>            (89 + 26) / 115][Stage 42:===============================================>     (104 + 11) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:======================================>               (83 + 33) / 116][Stage 43:=========================================>            (90 + 26) / 116][Stage 43:===============================================>     (104 + 12) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.595002169 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457563401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==================================>                   (73 + 42) / 115][Stage 44:=======================================>              (85 + 30) / 115][Stage 44:=============================================>        (97 + 18) / 115][Stage 44:===================================================>  (110 + 5) / 115]                                                                                [Stage 45:==================================>                   (75 + 41) / 116][Stage 45:========================================>             (87 + 29) / 116][Stage 45:===============================================>     (105 + 11) / 116][Stage 45:==================================================>   (108 + 8) / 116][Stage 45:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.314206935 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520040371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:============================>                         (63 + 58) / 121][Stage 46:================================>                     (72 + 49) / 121][Stage 46:==========================================>           (96 + 25) / 121][Stage 46:===================================================>  (116 + 5) / 121]                                                                                [Stage 47:===========================>                          (62 + 60) / 122][Stage 47:==================================>                   (78 + 44) / 122][Stage 47:==========================================>           (96 + 26) / 122][Stage 47:===================================================>  (116 + 6) / 122][Stage 47:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.24272776 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527281545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (61 + 60) / 121][Stage 48:================================>                     (72 + 49) / 121][Stage 48:===========================================>          (97 + 24) / 121][Stage 48:==================================================>   (114 + 7) / 121]                                                                                [Stage 49:===========================>                          (63 + 59) / 122][Stage 49:==================================>                   (77 + 45) / 122][Stage 49:==========================================>           (97 + 25) / 122][Stage 49:================================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.05911897 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 60) / 121][Stage 50:================================>                     (73 + 48) / 121][Stage 50:=======================================>              (88 + 33) / 121][Stage 50:==============================================>      (106 + 15) / 121][Stage 50:=====================================================>(119 + 2) / 121]                                                                                [Stage 51:===========================>                          (62 + 60) / 122][Stage 51:==============================>                       (69 + 53) / 122][Stage 51:=======================================>              (90 + 32) / 122][Stage 51:===============================================>     (109 + 13) / 122][Stage 51:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.069254267 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399573637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (81 + 34) / 115][Stage 52:============================================>         (95 + 20) / 115][Stage 52:===================================================>  (109 + 6) / 115]                                                                                [Stage 53:=======================================>              (85 + 31) / 116][Stage 53:=============================================>       (100 + 16) / 116][Stage 53:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.535492246 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.514195576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (61 + 60) / 121][Stage 54:============================>                         (63 + 58) / 121][Stage 54:=====================================>                (83 + 38) / 121][Stage 54:==============================================>      (107 + 14) / 121][Stage 54:===================================================>  (115 + 6) / 121]                                                                                [Stage 55:===========================>                          (62 + 60) / 122][Stage 55:=================================>                    (75 + 47) / 122][Stage 55:===========================================>         (100 + 22) / 122][Stage 55:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.171441632 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416987812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (71 + 46) / 117][Stage 56:==================================>                   (74 + 43) / 117][Stage 56:=======================================>              (85 + 32) / 117][Stage 56:================================================>    (106 + 11) / 117][Stage 56:=====================================================>(116 + 1) / 117]                                                                                [Stage 57:================================>                     (72 + 46) / 118][Stage 57:===================================>                  (77 + 41) / 118][Stage 57:==========================================>           (93 + 25) / 118][Stage 57:=================================================>    (109 + 9) / 118][Stage 57:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.01024509 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.599422592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 60) / 121][Stage 58:============================>                         (63 + 58) / 121][Stage 58:=================================>                    (76 + 45) / 121][Stage 58:===========================================>          (98 + 23) / 121][Stage 58:====================================================> (117 + 4) / 121][Stage 58:=====================================================>(120 + 1) / 121]                                                                                [Stage 59:===========================>                          (62 + 60) / 122][Stage 59:=============================>                        (67 + 55) / 122][Stage 59:===================================>                  (80 + 42) / 122][Stage 59:==========================================>           (97 + 25) / 122][Stage 59:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.346154687 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477361217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===============================>                      (68 + 47) / 115][Stage 60:====================================>                 (77 + 38) / 115][Stage 60:=============================================>        (96 + 19) / 115][Stage 60:===============================================>     (104 + 11) / 115][Stage 60:====================================================> (112 + 3) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:================================>                     (70 + 46) / 116][Stage 61:======================================>               (82 + 34) / 116][Stage 61:===========================================>          (94 + 22) / 116][Stage 61:================================================>    (106 + 10) / 116][Stage 61:====================================================> (113 + 3) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.716796755 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490063162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===============================>                      (68 + 47) / 115][Stage 62:===================================>                  (76 + 39) / 115][Stage 62:==============================================>       (98 + 17) / 115][Stage 62:==================================================>   (108 + 7) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:===============================>                      (67 + 49) / 116][Stage 63:=======================================>              (84 + 32) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:================================================>    (106 + 10) / 116][Stage 63:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.208218089 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (74 + 41) / 115][Stage 64:========================================>             (86 + 29) / 115][Stage 64:===============================================>     (104 + 11) / 115][Stage 64:=====================================================>(113 + 2) / 115]                                                                                [Stage 65:====================================>                 (78 + 38) / 116][Stage 65:============================================>         (96 + 20) / 116][Stage 65:=================================================>    (107 + 9) / 116][Stage 65:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.939248284 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422831621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==============================>                       (66 + 49) / 115][Stage 66:================================>                     (70 + 45) / 115][Stage 66:========================================>             (86 + 29) / 115][Stage 66:==================================================>   (107 + 8) / 115][Stage 66:====================================================> (112 + 3) / 115]                                                                                [Stage 67:===============================>                      (67 + 49) / 116][Stage 67:====================================>                 (78 + 38) / 116][Stage 67:==============================================>      (101 + 15) / 116][Stage 67:==================================================>   (109 + 7) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.863717723 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481517042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (61 + 60) / 121][Stage 68:===============================>                      (70 + 51) / 121][Stage 68:======================================>               (87 + 34) / 121][Stage 68:===============================================>     (109 + 12) / 121][Stage 68:=====================================================>(120 + 1) / 121]                                                                                [Stage 69:===========================>                          (62 + 60) / 122][Stage 69:===============================>                      (71 + 51) / 122][Stage 69:=========================================>            (94 + 28) / 122][Stage 69:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.148400171 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455643908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (62 + 59) / 121][Stage 70:=================================>                    (76 + 45) / 121][Stage 70:=========================================>            (92 + 29) / 121][Stage 70:==================================================>   (114 + 7) / 121][Stage 70:=====================================================>(120 + 1) / 121]                                                                                [Stage 71:===========================>                          (63 + 59) / 122][Stage 71:================================>                     (73 + 49) / 122][Stage 71:=========================================>            (93 + 29) / 122][Stage 71:==================================================>   (113 + 9) / 122][Stage 71:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.402947635 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456186608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 61) / 122][Stage 72:================================>                     (74 + 48) / 122][Stage 72:===========================================>         (101 + 21) / 122][Stage 72:==================================================>   (113 + 9) / 122][Stage 72:====================================================> (119 + 3) / 122][Stage 72:=====================================================>(121 + 1) / 122]                                                                                [Stage 73:===========================>                          (63 + 60) / 123][Stage 73:===============================>                      (72 + 51) / 123][Stage 73:=====================================>                (86 + 37) / 123][Stage 73:==============================================>      (109 + 14) / 123][Stage 73:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.445022337 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465775388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (61 + 61) / 122][Stage 74:=============================>                        (66 + 56) / 122][Stage 74:=====================================>                (84 + 38) / 122][Stage 74:==========================================>           (97 + 25) / 122][Stage 74:==================================================>   (113 + 9) / 122][Stage 74:=====================================================>(120 + 2) / 122]                                                                                [Stage 75:===========================>                          (63 + 60) / 123][Stage 75:====================================>                 (82 + 41) / 123][Stage 75:==========================================>           (97 + 26) / 123][Stage 75:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.301200994 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456982969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (61 + 60) / 121][Stage 76:================================>                     (73 + 48) / 121][Stage 76:========================================>             (90 + 31) / 121][Stage 76:=================================================>    (112 + 9) / 121]                                                                                [Stage 77:==============================>                       (68 + 54) / 122][Stage 77:=================================>                    (75 + 47) / 122][Stage 77:===========================================>         (100 + 22) / 122][Stage 77:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 2.994992594 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407471585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (71 + 44) / 115][Stage 78:=======================================>              (84 + 31) / 115][Stage 78:===========================================>          (93 + 22) / 115][Stage 78:====================================================> (112 + 3) / 115]                                                                                [Stage 79:==================================>                   (75 + 41) / 116][Stage 79:==========================================>           (92 + 24) / 116][Stage 79:===============================================>     (104 + 12) / 116][Stage 79:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.929382693 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378913745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:======================================>               (82 + 33) / 115][Stage 80:============================================>         (94 + 21) / 115][Stage 80:===============================================>     (103 + 12) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:======================================>               (82 + 34) / 116][Stage 81:===========================================>          (93 + 23) / 116][Stage 81:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.536735056 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388265244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (70 + 44) / 114][Stage 82:======================================>               (82 + 32) / 114][Stage 82:=============================================>        (95 + 19) / 114][Stage 82:===============================================>     (102 + 12) / 114][Stage 82:====================================================> (111 + 3) / 114]                                                                                [Stage 83:====================================>                 (77 + 38) / 115][Stage 83:===========================================>          (93 + 22) / 115][Stage 83:===============================================>     (103 + 12) / 115][Stage 83:==================================================>   (108 + 7) / 115][Stage 83:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.152646428 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419198128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (71 + 46) / 117][Stage 84:==================================>                   (75 + 42) / 117][Stage 84:========================================>             (87 + 30) / 117][Stage 84:==============================================>      (102 + 15) / 117][Stage 84:====================================================> (114 + 3) / 117]                                                                                [Stage 85:=================================>                    (73 + 45) / 118][Stage 85:=====================================>                (83 + 35) / 118][Stage 85:===========================================>          (96 + 22) / 118][Stage 85:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.13650647 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458927909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (63 + 59) / 122][Stage 86:================================>                     (73 + 49) / 122][Stage 86:==========================================>           (95 + 27) / 122][Stage 86:================================================>    (111 + 11) / 122][Stage 86:=====================================================>(120 + 2) / 122]                                                                                [Stage 87:==========================>                           (61 + 62) / 123][Stage 87:==============================>                       (70 + 53) / 123][Stage 87:======================================>               (88 + 35) / 123][Stage 87:==============================================>      (109 + 14) / 123][Stage 87:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.082760035 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (61 + 61) / 122][Stage 88:=============================>                        (66 + 56) / 122][Stage 88:==================================>                   (78 + 44) / 122][Stage 88:============================================>        (103 + 19) / 122][Stage 88:=====================================================>(121 + 1) / 122]                                                                                [Stage 89:============================>                         (65 + 58) / 123][Stage 89:==================================>                   (79 + 44) / 123][Stage 89:===========================================>         (101 + 22) / 123][Stage 89:====================================================> (119 + 4) / 123][Stage 89:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.233528222 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389522365 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===================================>                  (75 + 39) / 114][Stage 90:=======================================>              (84 + 30) / 114][Stage 90:===========================================>          (92 + 22) / 114][Stage 90:==================================================>   (107 + 7) / 114][Stage 90:=====================================================>(112 + 2) / 114]                                                                                [Stage 91:=================================>                    (72 + 43) / 115][Stage 91:========================================>             (86 + 29) / 115][Stage 91:==============================================>      (101 + 14) / 115][Stage 91:==================================================>   (107 + 8) / 115]                                                                                Time elapsed: 2.897099926 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52471154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (62 + 59) / 121][Stage 92:===============================>                      (71 + 50) / 121][Stage 92:=========================================>            (92 + 29) / 121][Stage 92:===============================================>     (108 + 13) / 121]                                                                                [Stage 93:===========================>                          (63 + 59) / 122][Stage 93:==============================>                       (68 + 54) / 122][Stage 93:============================================>        (102 + 20) / 122][Stage 93:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.096231137 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:============================>                         (63 + 58) / 121][Stage 94:==================================>                   (77 + 44) / 121][Stage 94:=========================================>            (94 + 27) / 121][Stage 94:===================================================>  (116 + 5) / 121]                                                                                [Stage 95:============================>                         (65 + 57) / 122][Stage 95:====================================>                 (82 + 40) / 122][Stage 95:==============================================>      (106 + 16) / 122][Stage 95:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.023489583 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425163468 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (61 + 61) / 122][Stage 96:=============================>                        (67 + 55) / 122][Stage 96:===================================>                  (81 + 41) / 122][Stage 96:=============================================>       (104 + 18) / 122][Stage 96:===================================================>  (116 + 6) / 122]                                                                                [Stage 97:============================>                         (65 + 58) / 123][Stage 97:====================================>                 (82 + 41) / 123][Stage 97:===========================================>         (100 + 23) / 123][Stage 97:==================================================>   (115 + 8) / 123][Stage 97:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.208244227 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (61 + 61) / 122][Stage 98:==============================>                       (69 + 53) / 122][Stage 98:======================================>               (86 + 36) / 122][Stage 98:==============================================>      (106 + 16) / 122][Stage 98:====================================================> (119 + 3) / 122]                                                                                [Stage 99:============================>                         (66 + 57) / 123][Stage 99:=====================================>                (86 + 37) / 123][Stage 99:=============================================>       (106 + 17) / 123][Stage 99:===================================================>  (118 + 5) / 123][Stage 99:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.22076341 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42686933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 61) / 121][Stage 100:============================>                        (66 + 55) / 121][Stage 100:======================================>              (88 + 33) / 121][Stage 100:==================================================>  (115 + 6) / 121]                                                                                [Stage 101:==========================>                          (62 + 60) / 122][Stage 101:============================>                        (66 + 56) / 122][Stage 101:===================================>                 (81 + 41) / 122][Stage 101:============================================>       (105 + 17) / 122][Stage 101:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.915129237 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380658322 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===================================>                 (76 + 38) / 114][Stage 102:========================================>            (87 + 27) / 114][Stage 102:============================================>        (95 + 19) / 114][Stage 102:==============================================>     (103 + 11) / 114][Stage 102:====================================================>(113 + 1) / 114]                                                                                [Stage 103:==================================>                  (75 + 40) / 115][Stage 103:========================================>            (88 + 27) / 115][Stage 103:===========================================>         (94 + 21) / 115][Stage 103:===============================================>    (104 + 11) / 115][Stage 103:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.280121797 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411478692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===================================>                 (76 + 39) / 115][Stage 104:=======================================>             (85 + 30) / 115][Stage 104:=============================================>      (101 + 14) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:===============================>                     (70 + 46) / 116][Stage 105:=====================================>               (83 + 33) / 116][Stage 105:============================================>        (98 + 18) / 116][Stage 105:==================================================>  (110 + 6) / 116][Stage 105:====================================================>(114 + 2) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.546818809 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403361333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (71 + 46) / 117][Stage 106:=====================================>               (82 + 35) / 117][Stage 106:=============================================>      (102 + 15) / 117][Stage 106:==================================================>  (111 + 6) / 117][Stage 106:====================================================>(116 + 1) / 117]                                                                                [Stage 107:================================>                    (72 + 46) / 118][Stage 107:===================================>                 (79 + 39) / 118][Stage 107:===========================================>         (97 + 21) / 118][Stage 107:================================================>    (109 + 9) / 118][Stage 107:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.15213947 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355309621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=======================================>             (85 + 30) / 115][Stage 108:=========================================>           (91 + 24) / 115][Stage 108:=============================================>      (100 + 15) / 115][Stage 108:===================================================> (112 + 3) / 115]                                                                                [Stage 109:=====================================>               (82 + 34) / 116][Stage 109:========================================>            (89 + 27) / 116][Stage 109:=============================================>      (101 + 15) / 116][Stage 109:==================================================>  (110 + 6) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.967298717 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38545971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (70 + 44) / 114][Stage 110:=====================================>               (81 + 33) / 114][Stage 110:===========================================>         (93 + 21) / 114][Stage 110:==============================================>     (101 + 13) / 114][Stage 110:===================================================> (110 + 4) / 114]                                                                                [Stage 111:===================================>                 (78 + 37) / 115][Stage 111:==========================================>          (93 + 22) / 115][Stage 111:==============================================>     (103 + 12) / 115][Stage 111:=================================================>   (107 + 8) / 115][Stage 111:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.345815467 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 253 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 253 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349086026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (81 + 34) / 115][Stage 112:=========================================>           (90 + 25) / 115][Stage 112:==================================================>  (110 + 5) / 115]                                                                                [Stage 113:======================================>              (84 + 32) / 116][Stage 113:===========================================>         (95 + 21) / 116][Stage 113:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.464024487 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378989954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (71 + 46) / 117][Stage 114:===================================>                 (79 + 38) / 117][Stage 114:=========================================>           (91 + 26) / 117][Stage 114:================================================>    (108 + 9) / 117][Stage 114:====================================================>(115 + 2) / 117]                                                                                [Stage 115:================================>                    (72 + 46) / 118][Stage 115:==================================>                  (76 + 42) / 118][Stage 115:=======================================>             (89 + 29) / 118][Stage 115:===============================================>    (108 + 10) / 118][Stage 115:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.123398523 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375160005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (71 + 46) / 117][Stage 116:=================================>                   (73 + 44) / 117][Stage 116:======================================>              (86 + 31) / 117][Stage 116:============================================>       (101 + 16) / 117][Stage 116:===================================================> (113 + 4) / 117]                                                                                [Stage 117:================================>                    (73 + 45) / 118][Stage 117:==================================>                  (76 + 42) / 118][Stage 117:========================================>            (91 + 27) / 118][Stage 117:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 2.814507526 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (71 + 46) / 117][Stage 118:=================================>                   (73 + 44) / 117][Stage 118:======================================>              (85 + 32) / 117][Stage 118:============================================>        (99 + 18) / 117][Stage 118:==================================================>  (112 + 5) / 117]                                                                                [Stage 119:================================>                    (72 + 46) / 118][Stage 119:=================================>                   (75 + 43) / 118][Stage 119:========================================>            (91 + 27) / 118][Stage 119:==============================================>     (106 + 12) / 118][Stage 119:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.005996903 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439727372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 60) / 121][Stage 120:===============================>                     (73 + 48) / 121][Stage 120:========================================>            (92 + 29) / 121][Stage 120:=================================================>   (112 + 9) / 121][Stage 120:====================================================>(119 + 2) / 121]                                                                                [Stage 121:==========================>                          (62 + 60) / 122][Stage 121:==============================>                      (70 + 52) / 122][Stage 121:=======================================>             (92 + 30) / 122][Stage 121:=================================================>   (113 + 9) / 122][Stage 121:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.16360424 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401984324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===============================>                     (69 + 46) / 115][Stage 122:==================================>                  (75 + 40) / 115][Stage 122:========================================>            (88 + 27) / 115][Stage 122:==============================================>     (102 + 13) / 115][Stage 122:===================================================> (111 + 4) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:=================================>                   (73 + 43) / 116][Stage 123:=====================================>               (83 + 33) / 116][Stage 123:=========================================>           (91 + 25) / 116][Stage 123:================================================>    (107 + 9) / 116][Stage 123:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.110082632 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380075934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:=================================>                   (74 + 43) / 117][Stage 124:======================================>              (84 + 33) / 117][Stage 124:==========================================>          (93 + 24) / 117][Stage 124:===================================================> (113 + 4) / 117]                                                                                [Stage 125:================================>                    (72 + 46) / 118][Stage 125:===================================>                 (78 + 40) / 118][Stage 125:========================================>            (90 + 28) / 118][Stage 125:=============================================>      (104 + 14) / 118][Stage 125:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.177122161 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508223867 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (67 + 48) / 115][Stage 126:=====================================>               (81 + 34) / 115][Stage 126:========================================>            (88 + 27) / 115][Stage 126:=============================================>      (101 + 14) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:===============================>                     (69 + 47) / 116][Stage 127:======================================>              (84 + 32) / 116][Stage 127:========================================>            (89 + 27) / 116][Stage 127:==============================================>     (104 + 12) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.125743018 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382784899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:================================>                    (71 + 46) / 117][Stage 128:=================================>                   (73 + 44) / 117][Stage 128:======================================>              (86 + 31) / 117][Stage 128:===========================================>         (97 + 20) / 117][Stage 128:===================================================> (114 + 3) / 117]                                                                                [Stage 129:===============================>                     (71 + 47) / 118][Stage 129:===================================>                 (78 + 40) / 118][Stage 129:===========================================>         (96 + 22) / 118][Stage 129:================================================>    (109 + 9) / 118][Stage 129:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.110627717 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403954627 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (71 + 46) / 117][Stage 130:=================================>                   (75 + 42) / 117][Stage 130:======================================>              (85 + 32) / 117][Stage 130:============================================>       (101 + 16) / 117][Stage 130:===================================================> (114 + 3) / 117]                                                                                [Stage 131:=================================>                   (74 + 44) / 118][Stage 131:====================================>                (82 + 36) / 118][Stage 131:============================================>       (101 + 17) / 118][Stage 131:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.990926978 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374442438 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 46) / 117][Stage 132:===================================>                 (78 + 39) / 117][Stage 132:===========================================>         (96 + 21) / 117][Stage 132:===================================================> (113 + 4) / 117]                                                                                [Stage 133:================================>                    (73 + 45) / 118][Stage 133:=======================================>             (87 + 31) / 118][Stage 133:=============================================>      (104 + 14) / 118][Stage 133:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.838264984 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342654425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (82 + 33) / 115][Stage 134:=========================================>           (89 + 26) / 115][Stage 134:============================================>        (96 + 19) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:=====================================>               (81 + 35) / 116][Stage 135:========================================>            (89 + 27) / 116][Stage 135:============================================>        (98 + 18) / 116][Stage 135:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.6462855 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364478754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:====================================>                (79 + 35) / 114][Stage 136:==========================================>          (91 + 23) / 114][Stage 136:==============================================>     (102 + 12) / 114][Stage 136:====================================================>(113 + 1) / 114]                                                                                [Stage 137:=================================>                   (73 + 42) / 115][Stage 137:=======================================>             (86 + 29) / 115][Stage 137:===========================================>         (95 + 20) / 115][Stage 137:===============================================>    (104 + 11) / 115][Stage 137:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 2.950624532 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373307754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (71 + 46) / 117][Stage 138:=================================>                   (75 + 42) / 117][Stage 138:=======================================>             (87 + 30) / 117][Stage 138:============================================>       (100 + 17) / 117][Stage 138:===================================================> (113 + 4) / 117]                                                                                [Stage 139:================================>                    (73 + 45) / 118][Stage 139:=====================================>               (83 + 35) / 118][Stage 139:============================================>       (101 + 17) / 118][Stage 139:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.170081869 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (71 + 46) / 117][Stage 140:=================================>                   (73 + 44) / 117][Stage 140:====================================>                (80 + 37) / 117][Stage 140:=============================================>      (102 + 15) / 117][Stage 140:===================================================> (113 + 4) / 117]                                                                                [Stage 141:================================>                    (72 + 46) / 118][Stage 141:====================================>                (81 + 37) / 118][Stage 141:=============================================>      (103 + 15) / 118][Stage 141:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.041823431 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359546081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:======================================>              (83 + 32) / 115][Stage 142:========================================>            (88 + 27) / 115][Stage 142:===========================================>         (95 + 20) / 115][Stage 142:==================================================>  (109 + 6) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:=====================================>               (81 + 35) / 116][Stage 143:=========================================>           (91 + 25) / 116][Stage 143:=============================================>      (102 + 14) / 116][Stage 143:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.923624396 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369527043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (71 + 46) / 117][Stage 144:==================================>                  (77 + 40) / 117][Stage 144:============================================>        (99 + 18) / 117][Stage 144:===================================================> (114 + 3) / 117]                                                                                [Stage 145:=================================>                   (74 + 44) / 118][Stage 145:========================================>            (90 + 28) / 118][Stage 145:===================================================> (114 + 4) / 118][Stage 145:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.794020056 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409439774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (62 + 59) / 121][Stage 146:===============================>                     (73 + 48) / 121][Stage 146:===========================================>        (101 + 20) / 121][Stage 146:==================================================>  (116 + 5) / 121]                                                                                [Stage 147:=============================>                       (69 + 53) / 122][Stage 147:=================================>                   (78 + 44) / 122][Stage 147:===========================================>        (101 + 21) / 122][Stage 147:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 2.943244511 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 249 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 249 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438075859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:====================================>                (78 + 36) / 114][Stage 148:=========================================>           (90 + 24) / 114][Stage 148:=============================================>       (98 + 16) / 114][Stage 148:=================================================>   (107 + 7) / 114][Stage 148:===================================================> (111 + 3) / 114][Stage 148:====================================================>(113 + 1) / 114]                                                                                [Stage 149:===================================>                 (78 + 37) / 115][Stage 149:========================================>            (87 + 28) / 115][Stage 149:=============================================>      (100 + 15) / 115][Stage 149:===================================================> (111 + 4) / 115][Stage 149:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.428177712 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42607833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:============================>                        (65 + 57) / 122][Stage 150:=================================>                   (78 + 44) / 122][Stage 150:=========================================>           (95 + 27) / 122][Stage 150:===============================================>    (112 + 10) / 122]                                                                                [Stage 151:===========================>                         (64 + 59) / 123][Stage 151:==============================>                      (71 + 52) / 123][Stage 151:=======================================>             (91 + 32) / 123][Stage 151:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.039571821 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374074271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (71 + 46) / 117][Stage 152:=================================>                   (75 + 42) / 117][Stage 152:=======================================>             (87 + 30) / 117][Stage 152:==============================================>     (104 + 13) / 117][Stage 152:====================================================>(115 + 2) / 117]                                                                                [Stage 153:================================>                    (72 + 46) / 118][Stage 153:==================================>                  (76 + 42) / 118][Stage 153:========================================>            (90 + 28) / 118][Stage 153:==============================================>     (106 + 12) / 118][Stage 153:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.00638086 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350129057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=======================================>             (85 + 30) / 115][Stage 154:============================================>        (97 + 18) / 115][Stage 154:==================================================>  (110 + 5) / 115]                                                                                [Stage 155:=======================================>             (87 + 29) / 116][Stage 155:============================================>       (100 + 16) / 116][Stage 155:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.604254462 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:======================================>              (83 + 32) / 115][Stage 156:========================================>            (88 + 27) / 115][Stage 156:================================================>    (106 + 9) / 115][Stage 156:====================================================>(114 + 1) / 115]                                                                                [Stage 157:=======================================>             (86 + 30) / 116][Stage 157:============================================>        (98 + 18) / 116][Stage 157:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.420729921 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378002958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (71 + 46) / 117][Stage 158:=================================>                   (74 + 43) / 117][Stage 158:=======================================>             (88 + 29) / 117][Stage 158:==============================================>     (104 + 13) / 117][Stage 158:====================================================>(115 + 2) / 117]                                                                                [Stage 159:=================================>                   (75 + 43) / 118][Stage 159:========================================>            (90 + 28) / 118][Stage 159:===============================================>    (108 + 10) / 118][Stage 159:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.927614068 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385328355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 45) / 117][Stage 160:====================================>                (81 + 36) / 117][Stage 160:===========================================>         (97 + 20) / 117][Stage 160:==================================================>  (111 + 6) / 117][Stage 160:====================================================>(116 + 1) / 117]                                                                                [Stage 161:================================>                    (73 + 45) / 118][Stage 161:===================================>                 (78 + 40) / 118][Stage 161:========================================>            (91 + 27) / 118][Stage 161:================================================>    (109 + 9) / 118][Stage 161:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.161830316 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353873542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=====================================>               (82 + 33) / 115][Stage 162:========================================>            (88 + 27) / 115][Stage 162:================================================>    (106 + 9) / 115][Stage 162:===================================================> (111 + 4) / 115]                                                                                [Stage 163:=====================================>               (83 + 33) / 116][Stage 163:=========================================>           (90 + 26) / 116][Stage 163:=============================================>      (102 + 14) / 116][Stage 163:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.641027289 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364478107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===================================>                 (77 + 37) / 114][Stage 164:=========================================>           (89 + 25) / 114][Stage 164:==============================================>     (103 + 11) / 114][Stage 164:===================================================> (111 + 3) / 114][Stage 164:====================================================>(113 + 1) / 114]                                                                                [Stage 165:==================================>                  (74 + 41) / 115][Stage 165:=======================================>             (86 + 29) / 115][Stage 165:=============================================>       (99 + 16) / 115][Stage 165:==================================================>  (110 + 5) / 115][Stage 165:===================================================> (112 + 3) / 115][Stage 165:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.197033865 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383044488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===============================>                     (69 + 46) / 115][Stage 166:======================================>              (83 + 32) / 115][Stage 166:==========================================>          (93 + 22) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(113 + 2) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:=================================>                   (73 + 43) / 116][Stage 167:=====================================>               (83 + 33) / 116][Stage 167:============================================>        (98 + 18) / 116][Stage 167:=================================================>   (109 + 7) / 116][Stage 167:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.257587697 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405204578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 60) / 121][Stage 168:==============================>                      (70 + 51) / 121][Stage 168:==========================================>          (96 + 25) / 121][Stage 168:===============================================>    (110 + 11) / 121]                                                                                [Stage 169:==========================>                          (62 + 60) / 122][Stage 169:=============================>                       (67 + 55) / 122][Stage 169:=======================================>             (90 + 32) / 122][Stage 169:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 2.883947486 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376223111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (71 + 46) / 117][Stage 170:===================================>                 (78 + 39) / 117][Stage 170:===========================================>         (95 + 22) / 117][Stage 170:==================================================>  (112 + 5) / 117]                                                                                [Stage 171:================================>                    (72 + 46) / 118][Stage 171:====================================>                (81 + 37) / 118][Stage 171:==========================================>          (95 + 23) / 118][Stage 171:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 2.925155515 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (71 + 46) / 117][Stage 172:===================================>                 (79 + 38) / 117][Stage 172:============================================>       (100 + 17) / 117][Stage 172:===================================================> (114 + 3) / 117]                                                                                [Stage 173:================================>                    (73 + 45) / 118][Stage 173:=====================================>               (83 + 35) / 118][Stage 173:===============================================>    (107 + 11) / 118][Stage 173:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.864171973 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424762699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (71 + 46) / 117][Stage 174:=================================>                   (75 + 42) / 117][Stage 174:=======================================>             (88 + 29) / 117][Stage 174:==================================================>  (112 + 5) / 117]                                                                                [Stage 175:================================>                    (72 + 46) / 118][Stage 175:===================================>                 (78 + 40) / 118][Stage 175:========================================>            (91 + 27) / 118][Stage 175:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.825776501 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371085658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 45) / 117][Stage 176:==================================>                  (76 + 41) / 117][Stage 176:==========================================>          (94 + 23) / 117][Stage 176:===================================================> (114 + 3) / 117][Stage 176:====================================================>(116 + 1) / 117]                                                                                [Stage 177:================================>                    (72 + 46) / 118][Stage 177:===================================>                 (79 + 39) / 118][Stage 177:===========================================>         (97 + 21) / 118][Stage 177:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.156854105 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (71 + 46) / 117][Stage 178:===================================>                 (78 + 39) / 117][Stage 178:==========================================>          (93 + 24) / 117][Stage 178:===================================================> (113 + 4) / 117]                                                                                [Stage 179:================================>                    (72 + 46) / 118][Stage 179:=================================>                   (74 + 44) / 118][Stage 179:========================================>            (91 + 27) / 118][Stage 179:=================================================>   (111 + 7) / 118][Stage 179:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.82009316 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434126838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 61) / 122][Stage 180:============================>                        (65 + 57) / 122][Stage 180:======================================>              (89 + 33) / 122][Stage 180:=================================================>   (115 + 7) / 122]                                                                                [Stage 181:===========================>                         (64 + 59) / 123][Stage 181:=================================>                   (77 + 46) / 123][Stage 181:========================================>            (93 + 30) / 123][Stage 181:===============================================>    (113 + 10) / 123][Stage 181:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.011206086 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371851838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=====================================>               (81 + 33) / 114][Stage 182:===========================================>         (94 + 20) / 114][Stage 182:=================================================>   (106 + 8) / 114][Stage 182:===================================================> (110 + 4) / 114]                                                                                [Stage 183:===================================>                 (78 + 37) / 115][Stage 183:=======================================>             (86 + 29) / 115][Stage 183:============================================>        (97 + 18) / 115][Stage 183:===================================================> (111 + 4) / 115][Stage 183:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.114401534 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379989495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==============================>                      (66 + 49) / 115][Stage 184:=================================>                   (72 + 43) / 115][Stage 184:=========================================>           (89 + 26) / 115][Stage 184:=============================================>       (98 + 17) / 115][Stage 184:=================================================>   (108 + 7) / 115]                                                                                [Stage 185:==================================>                  (76 + 40) / 116][Stage 185:=========================================>           (91 + 25) / 116][Stage 185:=============================================>       (99 + 17) / 116][Stage 185:==============================================>     (103 + 13) / 116][Stage 185:=================================================>   (108 + 8) / 116][Stage 185:=================================================>   (109 + 7) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.863688155 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405815793 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (61 + 60) / 121][Stage 186:==============================>                      (70 + 51) / 121][Stage 186:===================================>                 (81 + 40) / 121][Stage 186:==============================================>     (109 + 12) / 121][Stage 186:===================================================> (118 + 3) / 121]                                                                                [Stage 187:==========================>                          (62 + 60) / 122][Stage 187:==============================>                      (71 + 51) / 122][Stage 187:=====================================>               (86 + 36) / 122][Stage 187:==============================================>     (109 + 13) / 122][Stage 187:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.339527489 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412727848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (62 + 60) / 122][Stage 188:==============================>                      (70 + 52) / 122][Stage 188:==========================================>          (98 + 24) / 122][Stage 188:=================================================>   (114 + 8) / 122]                                                                                [Stage 189:==========================>                          (62 + 61) / 123][Stage 189:================================>                    (75 + 48) / 123][Stage 189:=======================================>             (92 + 31) / 123][Stage 189:==============================================>     (111 + 12) / 123][Stage 189:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.325243992 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356641901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===================================>                 (77 + 37) / 114][Stage 190:=========================================>           (89 + 25) / 114][Stage 190:==============================================>     (103 + 11) / 114][Stage 190:=================================================>   (106 + 8) / 114][Stage 190:====================================================>(113 + 1) / 114]                                                                                [Stage 191:==================================>                  (75 + 40) / 115][Stage 191:==========================================>          (92 + 23) / 115][Stage 191:=============================================>      (100 + 15) / 115][Stage 191:=================================================>   (108 + 7) / 115][Stage 191:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.046961561 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388259151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:============================>                        (61 + 52) / 113][Stage 192:=================================>                   (71 + 42) / 113][Stage 192:=========================================>           (89 + 24) / 113][Stage 192:=================================================>   (106 + 7) / 113]                                                                                [Stage 193:============================>                        (62 + 52) / 114][Stage 193:=================================>                   (72 + 42) / 114][Stage 193:=========================================>           (90 + 24) / 114][Stage 193:=================================================>   (107 + 7) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.170898335 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373311897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 45) / 117][Stage 194:=======================================>             (88 + 29) / 117][Stage 194:=================================================>   (109 + 8) / 117][Stage 194:====================================================>(115 + 2) / 117]                                                                                [Stage 195:==================================>                  (76 + 42) / 118][Stage 195:=====================================>               (84 + 34) / 118][Stage 195:=============================================>      (104 + 14) / 118][Stage 195:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.003678915 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373102656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:====================================>                (79 + 36) / 115][Stage 196:======================================>              (84 + 31) / 115][Stage 196:==========================================>          (92 + 23) / 115][Stage 196:===============================================>    (104 + 11) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:=====================================>               (83 + 33) / 116][Stage 197:==========================================>          (92 + 24) / 116][Stage 197:==============================================>     (104 + 12) / 116][Stage 197:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.921454746 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421500444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (61 + 61) / 122][Stage 198:===========================>                         (64 + 58) / 122][Stage 198:====================================>                (83 + 39) / 122][Stage 198:===========================================>        (103 + 19) / 122][Stage 198:====================================================>(120 + 2) / 122]                                                                                [Stage 199:============================>                        (67 + 56) / 123][Stage 199:===================================>                 (82 + 41) / 123][Stage 199:===========================================>        (104 + 19) / 123][Stage 199:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.063078318 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336116053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=======================================>             (85 + 30) / 115][Stage 200:===========================================>         (94 + 21) / 115][Stage 200:===============================================>    (104 + 11) / 115][Stage 200:===================================================> (111 + 4) / 115]                                                                                [Stage 201:======================================>              (84 + 32) / 116][Stage 201:==========================================>          (92 + 24) / 116][Stage 201:=================================================>   (108 + 8) / 116][Stage 201:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.925161785 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 23:27:58 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.16:51578) dropped. RpcEnv already stopped.
17/05/29 23:27:58 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.16:51578) dropped. RpcEnv already stopped.

real	9m54.484s
user	11m28.292s
sys	0m28.340s
