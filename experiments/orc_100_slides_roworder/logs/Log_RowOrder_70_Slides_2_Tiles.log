Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 00:09:56 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:10:10 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:10:10 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:10:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 00:10:13 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:10:23 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530001012-0700).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@649a6d88

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.440268235 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:=========================>                             (54 + 62) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:====================================================>  (110 + 6) / 116]                                                                                Time elapsed: 13.02977884 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.656181384 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=========================>                             (55 + 62) / 117][Stage 2:============================>                          (61 + 56) / 117][Stage 2:=================================>                     (71 + 46) / 117][Stage 2:=================================>                     (72 + 45) / 117][Stage 2:==================================>                    (73 + 44) / 117][Stage 2:=====================================>                 (80 + 37) / 117][Stage 2:============================================>          (95 + 22) / 117][Stage 2:====================================================>  (112 + 5) / 117]                                                                                [Stage 3:=================================>                     (72 + 46) / 118][Stage 3:==================================>                    (73 + 45) / 118][Stage 3:===================================>                   (77 + 41) / 118][Stage 3:======================================>                (83 + 35) / 118][Stage 3:=============================================>         (97 + 21) / 118][Stage 3:====================================================>  (113 + 5) / 118]                                                                                Time elapsed: 4.331752953 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=================================>                     (71 + 46) / 117][Stage 4:======================================>                (81 + 36) / 117][Stage 4:=============================================>         (96 + 21) / 117][Stage 4:================================================>     (105 + 12) / 117][Stage 4:====================================================>  (112 + 5) / 117]                                                                                [Stage 5:=================================>                     (72 + 46) / 118][Stage 5:===================================>                   (77 + 41) / 118][Stage 5:=========================================>             (88 + 30) / 118][Stage 5:================================================>     (105 + 13) / 118]                                                                                Time elapsed: 3.781232918 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.717114007 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (57 + 64) / 121][Stage 6:============================>                          (63 + 58) / 121][Stage 6:==============================>                        (68 + 53) / 121][Stage 6:====================================>                  (80 + 41) / 121][Stage 6:=========================================>             (92 + 29) / 121][Stage 6:====================================================>  (115 + 6) / 121]                                                                                [Stage 7:===========================>                           (62 + 60) / 122][Stage 7:==============================>                        (68 + 54) / 122][Stage 7:==================================>                    (77 + 45) / 122][Stage 7:=========================================>             (91 + 31) / 122][Stage 7:==============================================>       (105 + 17) / 122][Stage 7:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.988047523 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.689398353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 62) / 122][Stage 8:=============================>                         (66 + 56) / 122][Stage 8:=================================>                     (75 + 47) / 122][Stage 8:=======================================>               (87 + 35) / 122][Stage 8:============================================>         (100 + 22) / 122][Stage 8:====================================================>  (116 + 6) / 122]                                                                                [Stage 9:===========================>                           (62 + 61) / 123][Stage 9:============================>                          (64 + 59) / 123][Stage 9:======================================>                (86 + 37) / 123][Stage 9:==============================================>       (106 + 17) / 123][Stage 9:===================================================>   (116 + 7) / 123][Stage 9:=====================================================> (120 + 3) / 123][Stage 9:======================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.37424496 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.647556192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (60 + 62) / 122][Stage 10:===========================>                          (61 + 61) / 122][Stage 10:=============================>                        (66 + 56) / 122][Stage 10:====================================>                 (83 + 39) / 122][Stage 10:===========================================>         (101 + 21) / 122][Stage 10:==================================================>   (115 + 7) / 122][Stage 10:=====================================================>(121 + 1) / 122]                                                                                [Stage 11:===========================>                          (63 + 60) / 123][Stage 11:=================================>                    (76 + 47) / 123][Stage 11:========================================>             (92 + 31) / 123][Stage 11:==============================================>      (109 + 14) / 123][Stage 11:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.862800637 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531304538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (71 + 46) / 117][Stage 12:====================================>                 (79 + 38) / 117][Stage 12:===========================================>          (95 + 22) / 117][Stage 12:===============================================>     (105 + 12) / 117][Stage 12:===================================================>  (112 + 5) / 117]                                                                                [Stage 13:================================>                     (72 + 46) / 118][Stage 13:==================================>                   (75 + 43) / 118][Stage 13:=========================================>            (91 + 27) / 118][Stage 13:==================================================>   (111 + 7) / 118][Stage 13:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.527218033 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510750119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==============================>                       (66 + 49) / 115][Stage 14:================================>                     (70 + 45) / 115][Stage 14:=====================================>                (80 + 35) / 115][Stage 14:=========================================>            (89 + 26) / 115][Stage 14:=============================================>        (96 + 19) / 115][Stage 14:===============================================>     (104 + 11) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:====================================>                 (78 + 38) / 116][Stage 15:========================================>             (86 + 30) / 116][Stage 15:==============================================>       (99 + 17) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.976144866 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518144372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===============================>                      (67 + 47) / 114][Stage 16:===================================>                  (75 + 39) / 114][Stage 16:========================================>             (86 + 28) / 114][Stage 16:=============================================>        (95 + 19) / 114][Stage 16:================================================>    (104 + 10) / 114][Stage 16:===================================================>  (108 + 6) / 114][Stage 16:=====================================================>(112 + 2) / 114]                                                                                [Stage 17:=====================================>                (79 + 36) / 115][Stage 17:========================================>             (86 + 29) / 115][Stage 17:============================================>         (94 + 21) / 115][Stage 17:===============================================>     (103 + 12) / 115][Stage 17:==================================================>   (108 + 7) / 115][Stage 17:===================================================>  (110 + 5) / 115][Stage 17:====================================================> (112 + 3) / 115][Stage 17:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.695317292 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53071119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==============================>                       (66 + 49) / 115][Stage 18:=================================>                    (72 + 43) / 115][Stage 18:======================================>               (81 + 34) / 115][Stage 18:======================================>               (83 + 32) / 115][Stage 18:=======================================>              (84 + 31) / 115][Stage 18:=============================================>        (96 + 19) / 115][Stage 18:===============================================>     (103 + 12) / 115]                                                                                [Stage 19:================================>                     (69 + 47) / 116][Stage 19:=====================================>                (80 + 36) / 116][Stage 19:===========================================>          (94 + 22) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:==================================================>   (108 + 8) / 116][Stage 19:===================================================>  (110 + 6) / 116][Stage 19:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.605369148 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453368162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===================================>                  (75 + 40) / 115][Stage 20:=========================================>            (89 + 26) / 115][Stage 20:===============================================>     (103 + 12) / 115][Stage 20:====================================================> (111 + 4) / 115][Stage 20:====================================================> (112 + 3) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:=======================================>              (84 + 32) / 116][Stage 21:==========================================>           (91 + 25) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:====================================================> (112 + 4) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.530058013 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.618835122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (69 + 46) / 115][Stage 22:=====================================>                (80 + 35) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:===============================================>     (102 + 13) / 115][Stage 22:==================================================>   (108 + 7) / 115]                                                                                [Stage 23:==================================>                   (74 + 42) / 116][Stage 23:=======================================>              (84 + 32) / 116][Stage 23:========================================>             (88 + 28) / 116][Stage 23:=========================================>            (89 + 27) / 116][Stage 23:============================================>         (96 + 20) / 116][Stage 23:===============================================>     (105 + 11) / 116][Stage 23:===================================================>  (110 + 6) / 116][Stage 23:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.871835893 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457587218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (71 + 43) / 114][Stage 24:========================================>             (86 + 28) / 114][Stage 24:=============================================>        (97 + 17) / 114][Stage 24:===============================================>     (102 + 12) / 114][Stage 24:=====================================================>(112 + 2) / 114]                                                                                [Stage 25:===============================>                      (68 + 47) / 115][Stage 25:======================================>               (81 + 34) / 115][Stage 25:==========================================>           (90 + 25) / 115][Stage 25:=============================================>        (96 + 19) / 115][Stage 25:===================================================>  (110 + 5) / 115][Stage 25:====================================================> (112 + 3) / 115][Stage 25:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.534498489 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 117 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527882369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (61 + 60) / 121][Stage 26:================================>                     (72 + 49) / 121][Stage 26:=======================================>              (89 + 32) / 121][Stage 26:============================================>        (101 + 20) / 121][Stage 26:================================================>    (111 + 10) / 121][Stage 26:=====================================================>(120 + 1) / 121]                                                                                [Stage 27:===========================>                          (62 + 60) / 122][Stage 27:==================================>                   (78 + 44) / 122][Stage 27:==========================================>           (95 + 27) / 122][Stage 27:===================================================>  (117 + 5) / 122][Stage 27:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.827621599 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 119 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:=============================>                        (67 + 54) / 121][Stage 28:===================================>                  (79 + 42) / 121][Stage 28:=============================================>       (104 + 17) / 121][Stage 28:===================================================>  (116 + 5) / 121]                                                                                [Stage 29:===========================>                          (63 + 59) / 122][Stage 29:==============================>                       (68 + 54) / 122][Stage 29:========================================>             (91 + 31) / 122][Stage 29:==============================================>      (108 + 14) / 122][Stage 29:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.573012887 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508222313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (61 + 61) / 122][Stage 30:===============================>                      (72 + 50) / 122][Stage 30:========================================>             (92 + 30) / 122][Stage 30:==============================================>      (108 + 14) / 122][Stage 30:=====================================================>(120 + 2) / 122]                                                                                [Stage 31:============================>                         (64 + 59) / 123][Stage 31:================================>                     (75 + 48) / 123][Stage 31:=======================================>              (90 + 33) / 123][Stage 31:=============================================>       (106 + 17) / 123][Stage 31:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.591855723 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48262539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (71 + 46) / 117][Stage 32:=================================>                    (73 + 44) / 117][Stage 32:=====================================>                (82 + 35) / 117][Stage 32:============================================>         (97 + 20) / 117][Stage 32:=====================================================>(115 + 2) / 117]                                                                                [Stage 33:================================>                     (72 + 46) / 118][Stage 33:=================================>                    (73 + 45) / 118][Stage 33:========================================>             (89 + 29) / 118][Stage 33:==============================================>      (103 + 15) / 118][Stage 33:===================================================>  (112 + 6) / 118][Stage 33:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.280326767 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499038426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (61 + 60) / 121][Stage 34:=============================>                        (67 + 54) / 121][Stage 34:====================================>                 (82 + 39) / 121][Stage 34:=============================================>       (105 + 16) / 121][Stage 34:=====================================================>(120 + 1) / 121]                                                                                [Stage 35:===========================>                          (62 + 60) / 122][Stage 35:===============================>                      (72 + 50) / 122][Stage 35:=========================================>            (93 + 29) / 122][Stage 35:================================================>    (111 + 11) / 122][Stage 35:====================================================> (119 + 3) / 122][Stage 35:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.680623298 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498417541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 60) / 121][Stage 36:=============================>                        (66 + 55) / 121][Stage 36:====================================>                 (81 + 40) / 121][Stage 36:=============================================>       (105 + 16) / 121][Stage 36:===================================================>  (116 + 5) / 121]                                                                                [Stage 37:===========================>                          (62 + 60) / 122][Stage 37:===============================>                      (72 + 50) / 122][Stage 37:=========================================>            (94 + 28) / 122][Stage 37:===============================================>     (109 + 13) / 122][Stage 37:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.468208847 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461600667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===============================>                      (68 + 47) / 115][Stage 38:===================================>                  (76 + 39) / 115][Stage 38:=========================================>            (89 + 26) / 115][Stage 38:==================================================>   (107 + 8) / 115]                                                                                [Stage 39:==================================>                   (74 + 42) / 116][Stage 39:=========================================>            (90 + 26) / 116][Stage 39:==============================================>      (102 + 14) / 116][Stage 39:==================================================>   (108 + 8) / 116][Stage 39:====================================================> (112 + 4) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.206361907 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===============================>                      (67 + 48) / 115][Stage 40:====================================>                 (78 + 37) / 115][Stage 40:============================================>         (95 + 20) / 115][Stage 40:===================================================>  (110 + 5) / 115]                                                                                [Stage 41:=====================================>                (80 + 36) / 116][Stage 41:============================================>         (95 + 21) / 116][Stage 41:==============================================>      (101 + 15) / 116][Stage 41:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.897022547 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462213548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (71 + 46) / 117][Stage 42:===================================>                  (77 + 40) / 117][Stage 42:==========================================>           (92 + 25) / 117][Stage 42:===================================================>  (112 + 5) / 117]                                                                                [Stage 43:================================>                     (72 + 46) / 118][Stage 43:=================================>                    (74 + 44) / 118][Stage 43:======================================>               (84 + 34) / 118][Stage 43:============================================>        (100 + 18) / 118][Stage 43:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.96109756 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.517248484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (71 + 43) / 114][Stage 44:=======================================>              (83 + 31) / 114][Stage 44:=============================================>        (96 + 18) / 114][Stage 44:=================================================>    (105 + 9) / 114][Stage 44:====================================================> (110 + 4) / 114][Stage 44:=====================================================>(113 + 1) / 114]                                                                                [Stage 45:====================================>                 (77 + 38) / 115][Stage 45:=====================================>                (80 + 35) / 115][Stage 45:==========================================>           (91 + 24) / 115][Stage 45:=================================================>    (106 + 9) / 115][Stage 45:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.256544215 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520462898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (61 + 61) / 122][Stage 46:================================>                     (74 + 48) / 122][Stage 46:===========================================>          (98 + 24) / 122][Stage 46:=====================================================>(120 + 2) / 122]                                                                                [Stage 47:==========================>                           (61 + 62) / 123][Stage 47:===============================>                      (72 + 51) / 123][Stage 47:=======================================>              (91 + 32) / 123][Stage 47:================================================>    (112 + 11) / 123][Stage 47:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.194309194 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (64 + 58) / 122][Stage 48:==================================>                   (77 + 45) / 122][Stage 48:===========================================>         (101 + 21) / 122][Stage 48:===================================================>  (117 + 5) / 122][Stage 48:=====================================================>(121 + 1) / 122]                                                                                [Stage 49:===========================>                          (62 + 61) / 123][Stage 49:==============================>                       (70 + 53) / 123][Stage 49:======================================>               (88 + 35) / 123][Stage 49:===============================================>     (110 + 13) / 123][Stage 49:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.143389466 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 61) / 122][Stage 50:==============================>                       (70 + 52) / 122][Stage 50:======================================>               (88 + 34) / 122][Stage 50:====================================================> (118 + 4) / 122]                                                                                [Stage 51:===========================>                          (63 + 60) / 123][Stage 51:==================================>                   (78 + 45) / 123][Stage 51:===========================================>         (101 + 22) / 123][Stage 51:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.138453834 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475180021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (61 + 60) / 121][Stage 52:============================>                         (64 + 57) / 121][Stage 52:=====================================>                (85 + 36) / 121][Stage 52:===============================================>     (108 + 13) / 121][Stage 52:=====================================================>(120 + 1) / 121]                                                                                [Stage 53:===========================>                          (61 + 61) / 122][Stage 53:===============================>                      (72 + 50) / 122][Stage 53:=========================================>            (93 + 29) / 122][Stage 53:===============================================>     (110 + 12) / 122][Stage 53:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.167987483 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428649002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==============================>                       (66 + 49) / 115][Stage 54:===================================>                  (75 + 40) / 115][Stage 54:=============================================>        (96 + 19) / 115][Stage 54:====================================================> (112 + 3) / 115]                                                                                [Stage 55:===================================>                  (77 + 39) / 116][Stage 55:=========================================>            (90 + 26) / 116][Stage 55:===============================================>     (105 + 11) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.737097702 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418530014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:>                                                       (0 + 0) / 115][Stage 56:===============================>                      (68 + 47) / 115][Stage 56:=====================================>                (80 + 35) / 115][Stage 56:===========================================>          (93 + 22) / 115][Stage 56:====================================================> (112 + 3) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:================================>                     (70 + 46) / 116][Stage 57:====================================>                 (79 + 37) / 116][Stage 57:===========================================>          (93 + 23) / 116][Stage 57:=================================================>    (107 + 9) / 116][Stage 57:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.115852022 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248  OR  partitionIndex = 249 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248  OR  partitionIndex = 249 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470654676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==========================>                           (60 + 61) / 121][Stage 58:============================>                         (64 + 57) / 121][Stage 58:===================================>                  (79 + 42) / 121][Stage 58:===========================================>          (98 + 23) / 121][Stage 58:===================================================>  (115 + 6) / 121]                                                                                [Stage 59:============================>                         (64 + 58) / 122][Stage 59:====================================>                 (83 + 39) / 122][Stage 59:============================================>        (103 + 19) / 122][Stage 59:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.105601985 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376743816 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (82 + 33) / 115][Stage 60:==========================================>           (91 + 24) / 115][Stage 60:================================================>    (105 + 10) / 115]                                                                                [Stage 61:======================================>               (82 + 34) / 116][Stage 61:=============================================>       (100 + 16) / 116][Stage 61:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.517125033 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386810542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=====================================>                (79 + 36) / 115][Stage 62:=======================================>              (85 + 30) / 115][Stage 62:=============================================>        (97 + 18) / 115][Stage 62:===================================================>  (110 + 5) / 115]                                                                                [Stage 63:========================================>             (86 + 30) / 116][Stage 63:==============================================>      (102 + 14) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.66353963 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 249 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 249 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448926971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (62 + 59) / 121][Stage 64:==============================>                       (69 + 52) / 121][Stage 64:=========================================>            (94 + 27) / 121][Stage 64:=================================================>    (112 + 9) / 121]                                                                                [Stage 65:===========================>                          (63 + 59) / 122][Stage 65:===============================>                      (72 + 50) / 122][Stage 65:===========================================>         (101 + 21) / 122][Stage 65:===================================================>  (117 + 5) / 122][Stage 65:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.31162048 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44898975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:============================>                         (63 + 58) / 121][Stage 66:===================================>                  (80 + 41) / 121][Stage 66:===========================================>          (97 + 24) / 121][Stage 66:================================================>    (111 + 10) / 121]                                                                                [Stage 67:============================>                         (64 + 58) / 122][Stage 67:================================>                     (74 + 48) / 122][Stage 67:========================================>             (92 + 30) / 122][Stage 67:================================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.039576025 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 209 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398810775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==================================>                   (73 + 41) / 114][Stage 68:======================================>               (82 + 32) / 114][Stage 68:============================================>         (94 + 20) / 114][Stage 68:=================================================>    (105 + 9) / 114][Stage 68:====================================================> (111 + 3) / 114][Stage 68:=====================================================>(113 + 1) / 114]                                                                                [Stage 69:========================================>             (87 + 28) / 115][Stage 69:============================================>         (94 + 21) / 115][Stage 69:==============================================>      (100 + 15) / 115][Stage 69:==================================================>   (108 + 7) / 115][Stage 69:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.370105032 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 112 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454891695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (61 + 61) / 122][Stage 70:============================>                         (65 + 57) / 122][Stage 70:==================================>                   (78 + 44) / 122][Stage 70:============================================>        (102 + 20) / 122][Stage 70:===================================================>  (117 + 5) / 122]                                                                                [Stage 71:===========================>                          (62 + 61) / 123][Stage 71:=============================>                        (68 + 55) / 123][Stage 71:===================================>                  (81 + 42) / 123][Stage 71:=============================================>       (106 + 17) / 123][Stage 71:====================================================> (120 + 3) / 123][Stage 71:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.23837743 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399085414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:====================================>                 (76 + 38) / 114][Stage 72:==========================================>           (89 + 25) / 114][Stage 72:===============================================>     (102 + 12) / 114][Stage 72:====================================================> (110 + 4) / 114][Stage 72:=====================================================>(113 + 1) / 114]                                                                                [Stage 73:====================================>                 (78 + 37) / 115][Stage 73:==========================================>           (90 + 25) / 115][Stage 73:===============================================>     (102 + 13) / 115][Stage 73:===============================================>     (104 + 11) / 115][Stage 73:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.178916244 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398066528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (71 + 46) / 117][Stage 74:=================================>                    (72 + 45) / 117][Stage 74:=====================================>                (82 + 35) / 117][Stage 74:=============================================>        (99 + 18) / 117][Stage 74:=====================================================>(116 + 1) / 117]                                                                                [Stage 75:=================================>                    (74 + 44) / 118][Stage 75:========================================>             (89 + 29) / 118][Stage 75:===============================================>     (105 + 13) / 118][Stage 75:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.077822707 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 115 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434070514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (61 + 61) / 122][Stage 76:============================>                         (64 + 58) / 122][Stage 76:=====================================>                (84 + 38) / 122][Stage 76:===============================================>     (109 + 13) / 122]                                                                                [Stage 77:===========================>                          (62 + 61) / 123][Stage 77:================================>                     (73 + 50) / 123][Stage 77:======================================>               (87 + 36) / 123][Stage 77:================================================>    (112 + 11) / 123][Stage 77:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.335985195 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400903099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (72 + 45) / 117][Stage 78:===================================>                  (77 + 40) / 117][Stage 78:===========================================>          (95 + 22) / 117][Stage 78:================================================>    (106 + 11) / 117][Stage 78:=====================================================>(116 + 1) / 117]                                                                                [Stage 79:================================>                     (72 + 46) / 118][Stage 79:=====================================>                (82 + 36) / 118][Stage 79:===========================================>          (94 + 24) / 118][Stage 79:================================================>    (108 + 10) / 118][Stage 79:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.45555184 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407242248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (71 + 46) / 117][Stage 80:====================================>                 (78 + 39) / 117][Stage 80:===========================================>          (94 + 23) / 117][Stage 80:================================================>    (106 + 11) / 117][Stage 80:=====================================================>(116 + 1) / 117]                                                                                [Stage 81:================================>                     (72 + 46) / 118][Stage 81:=================================>                    (74 + 44) / 118][Stage 81:==========================================>           (92 + 26) / 118][Stage 81:==================================================>   (111 + 7) / 118][Stage 81:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.05829951 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410161379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (71 + 46) / 117][Stage 82:=================================>                    (72 + 45) / 117][Stage 82:=========================================>            (89 + 28) / 117][Stage 82:===================================================>  (111 + 6) / 117]                                                                                [Stage 83:=================================>                    (73 + 45) / 118][Stage 83:======================================>               (84 + 34) / 118][Stage 83:=============================================>       (102 + 16) / 118][Stage 83:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.801817254 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423911402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 60) / 121][Stage 84:===========================>                          (62 + 59) / 121][Stage 84:==================================>                   (77 + 44) / 121][Stage 84:=========================================>            (92 + 29) / 121][Stage 84:==================================================>   (114 + 7) / 121]                                                                                [Stage 85:===========================>                          (63 + 59) / 122][Stage 85:===================================>                  (81 + 41) / 122][Stage 85:==========================================>           (95 + 27) / 122][Stage 85:===============================================>     (110 + 12) / 122][Stage 85:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.286680089 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387907495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (81 + 34) / 115][Stage 86:============================================>         (94 + 21) / 115][Stage 86:================================================>    (105 + 10) / 115][Stage 86:=====================================================>(113 + 2) / 115]                                                                                [Stage 87:=======================================>              (85 + 31) / 116][Stage 87:============================================>         (96 + 20) / 116][Stage 87:==================================================>   (108 + 8) / 116][Stage 87:=====================================================>(114 + 2) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.449653614 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427517876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==========================>                           (60 + 62) / 122][Stage 88:=============================>                        (67 + 55) / 122][Stage 88:======================================>               (88 + 34) / 122][Stage 88:==================================================>   (113 + 9) / 122]                                                                                [Stage 89:===========================>                          (62 + 61) / 123][Stage 89:===============================>                      (71 + 52) / 123][Stage 89:======================================>               (87 + 36) / 123][Stage 89:==================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.15008296 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39184401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===============================>                      (68 + 47) / 115][Stage 90:===================================>                  (75 + 40) / 115][Stage 90:==============================================>      (100 + 15) / 115][Stage 90:==================================================>   (107 + 8) / 115]                                                                                [Stage 91:=================================>                    (72 + 44) / 116][Stage 91:======================================>               (82 + 34) / 116][Stage 91:=============================================>        (97 + 19) / 116][Stage 91:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.850528267 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (72 + 43) / 115][Stage 92:======================================>               (81 + 34) / 115][Stage 92:============================================>         (95 + 20) / 115][Stage 92:=================================================>    (106 + 9) / 115]                                                                                [Stage 93:====================================>                 (78 + 38) / 116][Stage 93:===========================================>          (93 + 23) / 116][Stage 93:================================================>    (106 + 10) / 116][Stage 93:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.874139528 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 125 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430647188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=======================================>              (85 + 30) / 115][Stage 94:===========================================>          (92 + 23) / 115][Stage 94:=================================================>    (106 + 9) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:======================================>               (83 + 33) / 116][Stage 95:==========================================>           (91 + 25) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.661995083 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368779401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=========================================>            (87 + 27) / 114][Stage 96:=============================================>        (96 + 18) / 114][Stage 96:==================================================>   (107 + 7) / 114][Stage 96:===================================================>  (109 + 5) / 114][Stage 96:=====================================================>(113 + 1) / 114]                                                                                [Stage 97:===================================>                  (76 + 39) / 115][Stage 97:=========================================>            (88 + 27) / 115][Stage 97:==============================================>      (101 + 14) / 115][Stage 97:====================================================> (111 + 4) / 115][Stage 97:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.166354701 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=====================================>                (79 + 35) / 114][Stage 98:=============================================>        (95 + 19) / 114][Stage 98:=================================================>    (105 + 9) / 114][Stage 98:===================================================>  (109 + 5) / 114]                                                                                [Stage 99:====================================>                 (78 + 37) / 115][Stage 99:============================================>         (95 + 20) / 115][Stage 99:=================================================>    (106 + 9) / 115][Stage 99:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.202773981 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381191897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (72 + 45) / 117][Stage 100:======================================>              (84 + 33) / 117][Stage 100:============================================>        (99 + 18) / 117][Stage 100:===================================================> (114 + 3) / 117][Stage 100:====================================================>(116 + 1) / 117]                                                                                [Stage 101:================================>                    (73 + 45) / 118][Stage 101:===================================>                 (78 + 40) / 118][Stage 101:=========================================>           (93 + 25) / 118][Stage 101:==============================================>     (106 + 12) / 118][Stage 101:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.362114644 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (71 + 46) / 117][Stage 102:================================>                    (72 + 45) / 117][Stage 102:======================================>              (86 + 31) / 117][Stage 102:==============================================>     (105 + 12) / 117][Stage 102:===================================================> (114 + 3) / 117]                                                                                [Stage 103:================================>                    (72 + 46) / 118][Stage 103:===================================>                 (78 + 40) / 118][Stage 103:=========================================>           (93 + 25) / 118][Stage 103:==============================================>     (106 + 12) / 118][Stage 103:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.049079135 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400025121 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:===================================>                 (77 + 38) / 115][Stage 104:======================================>              (83 + 32) / 115][Stage 104:=============================================>       (99 + 16) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:===================================>                 (78 + 38) / 116][Stage 105:======================================>              (85 + 31) / 116][Stage 105:============================================>        (98 + 18) / 116][Stage 105:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.027757809 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422565684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=================================>                   (72 + 43) / 115][Stage 106:=========================================>           (91 + 24) / 115][Stage 106:=============================================>      (101 + 14) / 115][Stage 106:=================================================>   (108 + 7) / 115][Stage 106:====================================================>(113 + 2) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:===============================>                     (68 + 48) / 116][Stage 107:====================================>                (80 + 36) / 116][Stage 107:=========================================>           (91 + 25) / 116][Stage 107:=============================================>      (101 + 15) / 116][Stage 107:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.287044172 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351013894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (81 + 34) / 115][Stage 108:=======================================>             (85 + 30) / 115][Stage 108:============================================>        (96 + 19) / 115][Stage 108:==================================================>  (110 + 5) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:==========================================>          (94 + 22) / 116][Stage 109:=================================================>   (108 + 8) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.383904908 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4223478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (61 + 61) / 122][Stage 110:============================>                        (66 + 56) / 122][Stage 110:======================================>              (89 + 33) / 122][Stage 110:==============================================>     (110 + 12) / 122][Stage 110:====================================================>(121 + 1) / 122]                                                                                [Stage 111:==========================>                          (62 + 61) / 123][Stage 111:===========================>                         (64 + 59) / 123][Stage 111:====================================>                (85 + 38) / 123][Stage 111:============================================>       (106 + 17) / 123][Stage 111:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.287822277 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418134939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 61) / 122][Stage 112:=============================>                       (68 + 54) / 122][Stage 112:=====================================>               (86 + 36) / 122][Stage 112:=============================================>      (107 + 15) / 122][Stage 112:===================================================> (119 + 3) / 122]                                                                                [Stage 113:============================>                        (66 + 57) / 123][Stage 113:================================>                    (75 + 48) / 123][Stage 113:========================================>            (95 + 28) / 123][Stage 113:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.14873791 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419410984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 62) / 122][Stage 114:===========================>                         (64 + 58) / 122][Stage 114:==================================>                  (80 + 42) / 122][Stage 114:==========================================>          (98 + 24) / 122][Stage 114:===============================================>    (112 + 10) / 122]                                                                                [Stage 115:==========================>                          (62 + 61) / 123][Stage 115:=================================>                   (78 + 45) / 123][Stage 115:==========================================>          (99 + 24) / 123][Stage 115:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.142391792 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400230835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===============================>                     (69 + 46) / 115][Stage 116:======================================>              (83 + 32) / 115][Stage 116:==============================================>     (102 + 13) / 115][Stage 116:==================================================>  (109 + 6) / 115]                                                                                [Stage 117:================================>                    (72 + 44) / 116][Stage 117:=====================================>               (83 + 33) / 116][Stage 117:==========================================>          (92 + 24) / 116][Stage 117:=================================================>   (109 + 7) / 116][Stage 117:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.301852074 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==============================>                      (67 + 48) / 115][Stage 118:===================================>                 (78 + 37) / 115][Stage 118:===========================================>         (94 + 21) / 115][Stage 118:===================================================> (111 + 4) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:===================================>                 (77 + 39) / 116][Stage 119:=========================================>           (90 + 26) / 116][Stage 119:==============================================>     (104 + 12) / 116][Stage 119:===================================================> (113 + 3) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.093767473 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===============================>                     (68 + 47) / 115][Stage 120:======================================>              (84 + 31) / 115][Stage 120:=============================================>       (99 + 16) / 115][Stage 120:=================================================>   (107 + 8) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:===============================>                     (69 + 47) / 116][Stage 121:=======================================>             (86 + 30) / 116][Stage 121:==============================================>     (103 + 13) / 116][Stage 121:=================================================>   (109 + 7) / 116][Stage 121:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.304439169 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420162983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:============================>                        (65 + 56) / 121][Stage 122:===================================>                 (80 + 41) / 121][Stage 122:=============================================>      (105 + 16) / 121][Stage 122:====================================================>(119 + 2) / 121]                                                                                [Stage 123:==========================>                          (62 + 60) / 122][Stage 123:===============================>                     (73 + 49) / 122][Stage 123:=========================================>           (95 + 27) / 122][Stage 123:=================================================>   (113 + 9) / 122][Stage 123:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.215107291 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381350844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:=====================================>               (83 + 34) / 117][Stage 124:============================================>       (100 + 17) / 117][Stage 124:===================================================> (114 + 3) / 117]                                                                                [Stage 125:================================>                    (72 + 46) / 118][Stage 125:==================================>                  (77 + 41) / 118][Stage 125:==========================================>          (94 + 24) / 118][Stage 125:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.082622216 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392644335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (66 + 49) / 115][Stage 126:==================================>                  (74 + 41) / 115][Stage 126:=========================================>           (89 + 26) / 115][Stage 126:================================================>    (106 + 9) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:===============================>                     (70 + 46) / 116][Stage 127:======================================>              (85 + 31) / 116][Stage 127:=============================================>      (102 + 14) / 116][Stage 127:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.252690105 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436997996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 60) / 121][Stage 128:=============================>                       (68 + 53) / 121][Stage 128:===================================>                 (81 + 40) / 121][Stage 128:=============================================>      (107 + 14) / 121]                                                                                [Stage 129:==========================>                          (62 + 60) / 122][Stage 129:==============================>                      (70 + 52) / 122][Stage 129:====================================>                (85 + 37) / 122][Stage 129:==============================================>     (108 + 14) / 122][Stage 129:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.0607006 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 120 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353464874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==================================>                  (74 + 40) / 114][Stage 130:============================================>        (96 + 18) / 114][Stage 130:==============================================>     (102 + 12) / 114][Stage 130:=================================================>   (106 + 8) / 114][Stage 130:====================================================>(113 + 1) / 114]                                                                                [Stage 131:=================================>                   (73 + 42) / 115][Stage 131:========================================>            (87 + 28) / 115][Stage 131:=============================================>      (101 + 14) / 115][Stage 131:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.15024478 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40540699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 60) / 121][Stage 132:============================>                        (66 + 55) / 121][Stage 132:====================================>                (83 + 38) / 121][Stage 132:==============================================>     (109 + 12) / 121][Stage 132:====================================================>(120 + 1) / 121]                                                                                [Stage 133:==========================>                          (62 + 60) / 122][Stage 133:==============================>                      (70 + 52) / 122][Stage 133:=====================================>               (86 + 36) / 122][Stage 133:==============================================>     (108 + 14) / 122][Stage 133:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.091995166 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39681117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 60) / 121][Stage 134:=============================>                       (67 + 54) / 121][Stage 134:====================================>                (83 + 38) / 121][Stage 134:=============================================>      (105 + 16) / 121]                                                                                [Stage 135:============================>                        (65 + 57) / 122][Stage 135:================================>                    (74 + 48) / 122][Stage 135:==========================================>          (97 + 25) / 122][Stage 135:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.136667381 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 176 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403883341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (62 + 60) / 122][Stage 136:=============================>                       (69 + 53) / 122][Stage 136:========================================>            (94 + 28) / 122][Stage 136:===================================================> (119 + 3) / 122]                                                                                [Stage 137:==========================>                          (62 + 61) / 123][Stage 137:============================>                        (67 + 56) / 123][Stage 137:=====================================>               (87 + 36) / 123][Stage 137:=============================================>      (107 + 16) / 123][Stage 137:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 2.969401751 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35775187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==================================>                  (74 + 40) / 114][Stage 138:=========================================>           (90 + 24) / 114][Stage 138:==============================================>     (102 + 12) / 114][Stage 138:===================================================> (111 + 3) / 114][Stage 138:====================================================>(112 + 2) / 114]                                                                                [Stage 139:======================================>              (84 + 31) / 115][Stage 139:===========================================>         (94 + 21) / 115][Stage 139:================================================>    (106 + 9) / 115][Stage 139:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.150682108 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496803982 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (62 + 59) / 121][Stage 140:================================>                    (74 + 47) / 121][Stage 140:==========================================>          (97 + 24) / 121][Stage 140:===================================================> (117 + 4) / 121]                                                                                [Stage 141:==========================>                          (61 + 61) / 122][Stage 141:==============================>                      (70 + 52) / 122][Stage 141:====================================>                (85 + 37) / 122][Stage 141:============================================>       (105 + 17) / 122][Stage 141:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.926224018 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:============================>                        (65 + 56) / 121][Stage 142:===============================>                     (73 + 48) / 121][Stage 142:==========================================>          (96 + 25) / 121][Stage 142:=================================================>   (112 + 9) / 121][Stage 142:====================================================>(120 + 1) / 121]                                                                                [Stage 143:==========================>                          (62 + 60) / 122][Stage 143:=============================>                       (68 + 54) / 122][Stage 143:======================================>              (88 + 34) / 122][Stage 143:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.215515627 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369261079 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===============================>                     (68 + 47) / 115][Stage 144:====================================>                (79 + 36) / 115][Stage 144:===========================================>         (95 + 20) / 115][Stage 144:=================================================>   (107 + 8) / 115][Stage 144:===================================================> (112 + 3) / 115]                                                                                [Stage 145:===================================>                 (78 + 38) / 116][Stage 145:========================================>            (88 + 28) / 116][Stage 145:=============================================>      (102 + 14) / 116][Stage 145:=================================================>   (109 + 7) / 116][Stage 145:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.551824367 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (73 + 42) / 115][Stage 146:====================================>                (80 + 35) / 115][Stage 146:=============================================>      (101 + 14) / 115][Stage 146:==================================================>  (109 + 6) / 115][Stage 146:===================================================> (112 + 3) / 115]                                                                                [Stage 147:==================================>                  (75 + 41) / 116][Stage 147:========================================>            (88 + 28) / 116][Stage 147:============================================>        (97 + 19) / 116][Stage 147:==================================================>  (111 + 5) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.20032948 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365541161 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (71 + 43) / 114][Stage 148:========================================>            (87 + 27) / 114][Stage 148:============================================>        (96 + 18) / 114][Stage 148:================================================>    (105 + 9) / 114][Stage 148:====================================================>(113 + 1) / 114]                                                                                [Stage 149:===================================>                 (76 + 39) / 115][Stage 149:=======================================>             (85 + 30) / 115][Stage 149:============================================>        (97 + 18) / 115][Stage 149:=================================================>   (108 + 7) / 115][Stage 149:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.888237834 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40313091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 62) / 122][Stage 150:===========================>                         (63 + 59) / 122][Stage 150:================================>                    (75 + 47) / 122][Stage 150:============================================>       (105 + 17) / 122][Stage 150:===================================================> (118 + 4) / 122][Stage 150:====================================================>(121 + 1) / 122]                                                                                [Stage 151:==========================>                          (62 + 61) / 123][Stage 151:============================>                        (66 + 57) / 123][Stage 151:==================================>                  (79 + 44) / 123][Stage 151:==========================================>          (99 + 24) / 123][Stage 151:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.319051262 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369256675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==================================>                  (74 + 41) / 115][Stage 152:========================================>            (88 + 27) / 115][Stage 152:=============================================>      (100 + 15) / 115][Stage 152:===============================================>    (104 + 11) / 115][Stage 152:==================================================>  (109 + 6) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:===============================>                     (68 + 48) / 116][Stage 153:====================================>                (79 + 37) / 116][Stage 153:==========================================>          (94 + 22) / 116][Stage 153:=================================================>   (108 + 8) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.229533347 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469622409 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=================================>                   (73 + 42) / 115][Stage 154:=========================================>           (89 + 26) / 115][Stage 154:=============================================>      (100 + 15) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:=================================>                   (74 + 42) / 116][Stage 155:======================================>              (85 + 31) / 116][Stage 155:==============================================>     (104 + 12) / 116][Stage 155:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.724994612 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383169716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:==============================>                      (65 + 48) / 113][Stage 156:=======================================>             (84 + 29) / 113][Stage 156:================================================>    (104 + 9) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:===========================>                         (60 + 54) / 114][Stage 157:==============================>                      (66 + 48) / 114][Stage 157:=====================================>               (80 + 34) / 114][Stage 157:=================================================>   (106 + 8) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.13234443 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400633614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (61 + 61) / 122][Stage 158:==============================>                      (70 + 52) / 122][Stage 158:=====================================>               (87 + 35) / 122][Stage 158:==============================================>     (109 + 13) / 122]                                                                                [Stage 159:============================>                        (65 + 58) / 123][Stage 159:===============================>                     (74 + 49) / 123][Stage 159:==========================================>          (99 + 24) / 123][Stage 159:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.040864468 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407035462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 61) / 122][Stage 160:=============================>                       (69 + 53) / 122][Stage 160:======================================>              (89 + 33) / 122][Stage 160:=================================================>   (113 + 9) / 122][Stage 160:====================================================>(121 + 1) / 122]                                                                                [Stage 161:==========================>                          (62 + 61) / 123][Stage 161:=============================>                       (68 + 55) / 123][Stage 161:===================================>                 (83 + 40) / 123][Stage 161:=============================================>      (108 + 15) / 123][Stage 161:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.250634949 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (62 + 60) / 122][Stage 162:================================>                    (74 + 48) / 122][Stage 162:============================================>       (104 + 18) / 122][Stage 162:===================================================> (118 + 4) / 122]                                                                                [Stage 163:===========================>                         (64 + 59) / 123][Stage 163:===============================>                     (73 + 50) / 123][Stage 163:==========================================>          (98 + 25) / 123][Stage 163:===================================================> (120 + 3) / 123][Stage 163:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.191699634 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398585342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 62) / 122][Stage 164:===========================>                         (63 + 59) / 122][Stage 164:====================================>                (83 + 39) / 122][Stage 164:==============================================>     (109 + 13) / 122][Stage 164:===================================================> (118 + 4) / 122]                                                                                [Stage 165:==========================>                          (62 + 61) / 123][Stage 165:=============================>                       (68 + 55) / 123][Stage 165:====================================>                (84 + 39) / 123][Stage 165:=================================================>   (114 + 9) / 123][Stage 165:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.036518025 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370395854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (71 + 46) / 117][Stage 166:=====================================>               (82 + 35) / 117][Stage 166:===========================================>         (95 + 22) / 117][Stage 166:================================================>    (108 + 9) / 117][Stage 166:===================================================> (113 + 4) / 117]                                                                                [Stage 167:================================>                    (72 + 46) / 118][Stage 167:=================================>                   (75 + 43) / 118][Stage 167:========================================>            (91 + 27) / 118][Stage 167:=============================================>      (103 + 15) / 118][Stage 167:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.217053932 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (71 + 46) / 117][Stage 168:================================>                    (72 + 45) / 117][Stage 168:=====================================>               (82 + 35) / 117][Stage 168:============================================>        (99 + 18) / 117][Stage 168:==================================================>  (111 + 6) / 117]                                                                                [Stage 169:================================>                    (72 + 46) / 118][Stage 169:===================================>                 (78 + 40) / 118][Stage 169:=========================================>           (92 + 26) / 118][Stage 169:===============================================>    (107 + 11) / 118][Stage 169:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.195348566 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403576502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:>                                                      (0 + 0) / 121][Stage 170:==========================>                          (61 + 60) / 121][Stage 170:===============================>                     (72 + 49) / 121][Stage 170:=======================================>             (90 + 31) / 121][Stage 170:===============================================>    (111 + 10) / 121]                                                                                [Stage 171:===========================>                         (63 + 59) / 122][Stage 171:===============================>                     (73 + 49) / 122][Stage 171:======================================>              (88 + 34) / 122][Stage 171:==============================================>     (109 + 13) / 122][Stage 171:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.124563178 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412440541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 61) / 122][Stage 172:===========================>                         (63 + 59) / 122][Stage 172:=================================>                   (78 + 44) / 122][Stage 172:==============================================>     (108 + 14) / 122][Stage 172:===================================================> (119 + 3) / 122]                                                                                [Stage 173:==========================>                          (62 + 61) / 123][Stage 173:=============================>                       (68 + 55) / 123][Stage 173:=====================================>               (88 + 35) / 123][Stage 173:===========================================>        (103 + 20) / 123][Stage 173:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.003176883 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 184 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 184 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539224071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===============================>                     (68 + 47) / 115][Stage 174:=====================================>               (82 + 33) / 115][Stage 174:=============================================>      (100 + 15) / 115][Stage 174:====================================================>(113 + 2) / 115]                                                                                [Stage 175:==============================>                      (67 + 49) / 116][Stage 175:======================================>              (84 + 32) / 116][Stage 175:============================================>        (97 + 19) / 116][Stage 175:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.630653116 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (67 + 48) / 115][Stage 176:====================================>                (80 + 35) / 115][Stage 176:=========================================>           (89 + 26) / 115][Stage 176:===============================================>    (104 + 11) / 115]                                                                                [Stage 177:================================>                    (72 + 44) / 116][Stage 177:======================================>              (84 + 32) / 116][Stage 177:=========================================>           (91 + 25) / 116][Stage 177:=================================================>   (109 + 7) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.885368157 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353289731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===================================>                 (77 + 37) / 114][Stage 178:==========================================>          (92 + 22) / 114][Stage 178:==============================================>     (103 + 11) / 114][Stage 178:==================================================>  (108 + 6) / 114][Stage 178:====================================================>(113 + 1) / 114]                                                                                [Stage 179:=================================>                   (73 + 42) / 115][Stage 179:============================================>        (97 + 18) / 115][Stage 179:==============================================>     (102 + 13) / 115][Stage 179:================================================>    (106 + 9) / 115][Stage 179:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.045026049 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376897237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (70 + 45) / 115][Stage 180:========================================>            (88 + 27) / 115][Stage 180:=============================================>      (101 + 14) / 115][Stage 180:==================================================>  (110 + 5) / 115]                                                                                [Stage 181:===============================>                     (68 + 48) / 116][Stage 181:==================================>                  (76 + 40) / 116][Stage 181:===========================================>         (95 + 21) / 116][Stage 181:================================================>    (107 + 9) / 116][Stage 181:===================================================> (112 + 4) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.029912873 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399871179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 61) / 122][Stage 182:============================>                        (66 + 56) / 122][Stage 182:====================================>                (84 + 38) / 122][Stage 182:===========================================>        (102 + 20) / 122][Stage 182:==================================================>  (117 + 5) / 122]                                                                                [Stage 183:===========================>                         (63 + 60) / 123][Stage 183:===============================>                     (74 + 49) / 123][Stage 183:=======================================>             (92 + 31) / 123][Stage 183:=============================================>      (108 + 15) / 123][Stage 183:===================================================> (120 + 3) / 123][Stage 183:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.409536612 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39360675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (61 + 61) / 122][Stage 184:================================>                    (75 + 47) / 122][Stage 184:=========================================>           (95 + 27) / 122][Stage 184:=================================================>   (113 + 9) / 122][Stage 184:====================================================>(121 + 1) / 122]                                                                                [Stage 185:==========================>                          (62 + 61) / 123][Stage 185:=============================>                       (68 + 55) / 123][Stage 185:=====================================>               (88 + 35) / 123][Stage 185:============================================>       (106 + 17) / 123][Stage 185:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.062039902 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.329074358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:========================================>            (88 + 27) / 115][Stage 186:==============================================>     (103 + 12) / 115][Stage 186:==================================================>  (109 + 6) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:=====================================>               (83 + 33) / 116][Stage 187:==========================================>          (92 + 24) / 116][Stage 187:================================================>    (107 + 9) / 116][Stage 187:====================================================>(114 + 2) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.557088677 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 180 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356529361 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (71 + 46) / 117][Stage 188:================================>                    (72 + 45) / 117][Stage 188:======================================>              (85 + 32) / 117][Stage 188:==============================================>     (105 + 12) / 117][Stage 188:====================================================>(116 + 1) / 117]                                                                                [Stage 189:================================>                    (72 + 46) / 118][Stage 189:===================================>                 (79 + 39) / 118][Stage 189:========================================>            (90 + 28) / 118][Stage 189:===============================================>    (107 + 11) / 118][Stage 189:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.380652175 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485155077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (64 + 58) / 122][Stage 190:=================================>                   (78 + 44) / 122][Stage 190:=========================================>           (95 + 27) / 122][Stage 190:==============================================>     (109 + 13) / 122]                                                                                [Stage 191:==========================>                          (62 + 61) / 123][Stage 191:=============================>                       (69 + 54) / 123][Stage 191:======================================>              (89 + 34) / 123][Stage 191:===============================================>    (112 + 11) / 123][Stage 191:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.174552362 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349913789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:====================================>                (78 + 36) / 114][Stage 192:=========================================>           (90 + 24) / 114][Stage 192:=============================================>       (97 + 17) / 114][Stage 192:===============================================>    (104 + 10) / 114][Stage 192:===================================================> (110 + 4) / 114]                                                                                [Stage 193:===================================>                 (78 + 37) / 115][Stage 193:=========================================>           (91 + 24) / 115][Stage 193:===============================================>    (105 + 10) / 115][Stage 193:=================================================>   (107 + 8) / 115][Stage 193:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.249020587 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398734567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (61 + 61) / 122][Stage 194:===========================>                         (64 + 58) / 122][Stage 194:=================================>                   (78 + 44) / 122][Stage 194:===========================================>         (99 + 23) / 122][Stage 194:===================================================> (118 + 4) / 122]                                                                                [Stage 195:===========================>                         (63 + 60) / 123][Stage 195:=================================>                   (78 + 45) / 123][Stage 195:=======================================>             (92 + 31) / 123][Stage 195:==================================================>  (117 + 6) / 123][Stage 195:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.23809409 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365459137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (71 + 44) / 115][Stage 196:=====================================>               (82 + 33) / 115][Stage 196:=============================================>       (99 + 16) / 115][Stage 196:===================================================> (112 + 3) / 115]                                                                                [Stage 197:==============================>                      (67 + 49) / 116][Stage 197:======================================>              (84 + 32) / 116][Stage 197:=============================================>       (99 + 17) / 116][Stage 197:===============================================>    (105 + 11) / 116][Stage 197:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.225606925 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222  OR  partitionIndex = 223 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408060807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===============================>                     (69 + 46) / 115][Stage 198:=====================================>               (81 + 34) / 115][Stage 198:============================================>        (97 + 18) / 115][Stage 198:=================================================>   (108 + 7) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:===================================>                 (77 + 39) / 116][Stage 199:==========================================>          (93 + 23) / 116][Stage 199:================================================>    (107 + 9) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.93337701 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.659163449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (61 + 61) / 122][Stage 200:=============================>                       (69 + 53) / 122][Stage 200:==================================>                  (79 + 43) / 122][Stage 200:===========================================>        (102 + 20) / 122][Stage 200:===================================================> (119 + 3) / 122]                                                                                [Stage 201:==========================>                          (61 + 62) / 123][Stage 201:=============================>                       (68 + 55) / 123][Stage 201:====================================>                (84 + 39) / 123][Stage 201:==========================================>         (100 + 23) / 123][Stage 201:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.200126695 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/30 00:19:52 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:59194) dropped. RpcEnv already stopped.
17/05/30 00:19:52 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:59194) dropped. RpcEnv already stopped.

real	9m59.642s
user	11m36.432s
sys	0m36.468s
