Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 01:01:57 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:02:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:02:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:02:12 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 01:02:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:02:25 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530010214-0705).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.419585093 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=================>                                     (37 + 78) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:==========================>                            (56 + 60) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.874064399 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR   partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.729620686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==========================>                            (57 + 60) / 117][Stage 2:================================>                      (69 + 48) / 117][Stage 2:=================================>                     (71 + 46) / 117][Stage 2:===================================>                   (75 + 42) / 117][Stage 2:=====================================>                 (79 + 38) / 117][Stage 2:============================================>          (95 + 22) / 117][Stage 2:=================================================>    (107 + 10) / 117][Stage 2:====================================================>  (111 + 6) / 117][Stage 2:======================================================>(115 + 2) / 117]                                                                                [Stage 3:==================================>                    (73 + 45) / 118][Stage 3:==================================>                    (74 + 44) / 118][Stage 3:====================================>                  (79 + 39) / 118][Stage 3:========================================>              (87 + 31) / 118][Stage 3:============================================>          (96 + 22) / 118][Stage 3:================================================>     (105 + 13) / 118][Stage 3:====================================================>  (113 + 5) / 118]                                                                                Time elapsed: 4.995122769 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  pa rtitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=================================>                     (71 + 46) / 117][Stage 4:=================================>                     (72 + 45) / 117][Stage 4:==================================>                    (73 + 44) / 117][Stage 4:=======================================>               (83 + 34) / 117][Stage 4:============================================>          (94 + 23) / 117][Stage 4:==============================================>       (101 + 16) / 117][Stage 4:===================================================>   (109 + 8) / 117]                                                                                [Stage 5:=================================>                     (72 + 46) / 118][Stage 5:==================================>                    (75 + 43) / 118][Stage 5:=====================================>                 (80 + 38) / 118][Stage 5:=========================================>             (89 + 29) / 118][Stage 5:=============================================>        (100 + 18) / 118][Stage 5:====================================================>  (113 + 5) / 118]                                                                                Time elapsed: 4.413173658 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR   partitionIndex = 193  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.61555773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (71 + 46) / 117][Stage 6:===================================>                   (76 + 41) / 117][Stage 6:========================================>              (87 + 30) / 117][Stage 6:===============================================>      (102 + 15) / 117][Stage 6:====================================================>  (111 + 6) / 117][Stage 6:======================================================>(115 + 2) / 117]                                                                                [Stage 7:=================================>                     (72 + 46) / 118][Stage 7:==================================>                    (73 + 45) / 118][Stage 7:======================================>                (83 + 35) / 118][Stage 7:==========================================>            (91 + 27) / 118][Stage 7:=============================================>        (100 + 18) / 118][Stage 7:==================================================>    (109 + 9) / 118][Stage 7:======================================================>(116 + 2) / 118]                                                                                Time elapsed: 4.235771719 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 242  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 242  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501815984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:======================================>                (80 + 35) / 115][Stage 8:=======================================>               (82 + 33) / 115][Stage 8:===========================================>           (90 + 25) / 115][Stage 8:================================================>     (103 + 12) / 115][Stage 8:====================================================>  (110 + 5) / 115][Stage 8:======================================================>(113 + 2) / 115]                                                                                [Stage 9:======================================>                (81 + 35) / 116][Stage 9:=========================================>             (87 + 29) / 116][Stage 9:==============================================>        (99 + 17) / 116][Stage 9:====================================================>  (110 + 6) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.598892554 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR   partitionIndex = 172  OR  partitionIndex = 173 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538955756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (71 + 46) / 117][Stage 10:=================================>                    (72 + 45) / 117][Stage 10:==================================>                   (75 + 42) / 117][Stage 10:======================================>               (83 + 34) / 117][Stage 10:=============================================>        (99 + 18) / 117][Stage 10:================================================>    (106 + 11) / 117]                                                                                [Stage 11:================================>                     (72 + 46) / 118][Stage 11:==================================>                   (76 + 42) / 118][Stage 11:======================================>               (85 + 33) / 118][Stage 11:============================================>         (98 + 20) / 118][Stage 11:==============================================>      (104 + 14) / 118][Stage 11:==================================================>   (111 + 7) / 118]                                                                                Time elapsed: 3.915247263 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR   partitionIndex = 200  OR  partitionIndex = 201 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511891934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (70 + 44) / 114][Stage 12:====================================>                 (76 + 38) / 114][Stage 12:=========================================>            (88 + 26) / 114][Stage 12:=============================================>        (95 + 19) / 114][Stage 12:==============================================>       (98 + 16) / 114][Stage 12:=================================================>    (105 + 9) / 114][Stage 12:====================================================> (110 + 4) / 114][Stage 12:=====================================================>(113 + 1) / 114]                                                                                [Stage 13:====================================>                 (77 + 38) / 115][Stage 13:==========================================>           (90 + 25) / 115][Stage 13:==============================================>       (98 + 17) / 115][Stage 13:===================================================>  (109 + 6) / 115][Stage 13:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.931150923 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.604528437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (61 + 60) / 121][Stage 14:============================>                         (64 + 57) / 121][Stage 14:===============================>                      (70 + 51) / 121][Stage 14:=====================================>                (85 + 36) / 121][Stage 14:============================================>        (102 + 19) / 121][Stage 14:=================================================>    (112 + 9) / 121][Stage 14:=====================================================>(120 + 1) / 121]                                                                                [Stage 15:===========================>                          (62 + 60) / 122][Stage 15:===============================>                      (71 + 51) / 122][Stage 15:======================================>               (86 + 36) / 122][Stage 15:==============================================>      (106 + 16) / 122][Stage 15:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.842071546 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  pa rtitionIndex = 112  OR  partitionIndex = 113 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 112  OR  partitionIndex = 113 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:============================>                         (64 + 57) / 121][Stage 16:===================================>                  (79 + 42) / 121][Stage 16:===========================================>          (98 + 23) / 121][Stage 16:===============================================>     (109 + 12) / 121][Stage 16:====================================================> (117 + 4) / 121]                                                                                [Stage 17:===========================>                          (62 + 60) / 122][Stage 17:==============================>                       (70 + 52) / 122][Stage 17:====================================>                 (83 + 39) / 122][Stage 17:==============================================>      (106 + 16) / 122][Stage 17:==================================================>   (114 + 8) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.840865161 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107  OR   partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466221829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (79 + 36) / 115][Stage 18:=========================================>            (88 + 27) / 115][Stage 18:==============================================>      (100 + 15) / 115][Stage 18:===================================================>  (110 + 5) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:========================================>             (87 + 29) / 116][Stage 19:==============================================>       (99 + 17) / 116][Stage 19:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.908618211 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  pa rtitionIndex = 55  OR  partitionIndex = 64 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.705621097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (60 + 62) / 122][Stage 20:================================>                     (73 + 49) / 122][Stage 20:=========================================>            (94 + 28) / 122][Stage 20:================================================>    (112 + 10) / 122][Stage 20:===================================================>  (117 + 5) / 122]                                                                                [Stage 21:===========================>                          (62 + 61) / 123][Stage 21:===============================>                      (71 + 52) / 123][Stage 21:=======================================>              (91 + 32) / 123][Stage 21:============================================>        (104 + 19) / 123][Stage 21:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.755479559 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485538868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==============================>                       (66 + 49) / 115][Stage 22:==================================>                   (74 + 41) / 115][Stage 22:========================================>             (86 + 29) / 115][Stage 22:=============================================>        (97 + 18) / 115][Stage 22:================================================>    (105 + 10) / 115][Stage 22:===================================================>  (109 + 6) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:================================>                     (69 + 47) / 116][Stage 23:====================================>                 (79 + 37) / 116][Stage 23:==========================================>           (91 + 25) / 116][Stage 23:=============================================>       (100 + 16) / 116][Stage 23:================================================>    (106 + 10) / 116][Stage 23:==================================================>   (109 + 7) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.10430526 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  part itionIndex = 16  OR  partitionIndex = 17 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.557155975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 62) / 122][Stage 24:=============================>                        (66 + 56) / 122][Stage 24:=========================================>            (94 + 28) / 122][Stage 24:==================================================>   (113 + 9) / 122][Stage 24:=====================================================>(120 + 2) / 122]                                                                                [Stage 25:============================>                         (64 + 59) / 123][Stage 25:===============================>                      (71 + 52) / 123][Stage 25:======================================>               (88 + 35) / 123][Stage 25:===========================================>         (101 + 22) / 123][Stage 25:================================================>    (113 + 10) / 123][Stage 25:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.913767016 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR   partitionIndex = 215  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.568669077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==========================>                           (60 + 61) / 121][Stage 26:==============================>                       (68 + 53) / 121][Stage 26:=====================================>                (85 + 36) / 121][Stage 26:=============================================>       (104 + 17) / 121][Stage 26:==================================================>   (114 + 7) / 121][Stage 26:=====================================================>(119 + 2) / 121]                                                                                [Stage 27:===========================>                          (61 + 61) / 122][Stage 27:=============================>                        (66 + 56) / 122][Stage 27:=====================================>                (85 + 37) / 122][Stage 27:============================================>        (103 + 19) / 122][Stage 27:==============================================>      (108 + 14) / 122][Stage 27:====================================================> (118 + 4) / 122][Stage 27:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.971075422 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR   partitionIndex = 168  OR  partitionIndex = 169 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.603002568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 62) / 122][Stage 28:============================>                         (65 + 57) / 122][Stage 28:=====================================>                (85 + 37) / 122][Stage 28:=============================================>       (105 + 17) / 122][Stage 28:====================================================> (119 + 3) / 122]                                                                                [Stage 29:===========================>                          (62 + 61) / 123][Stage 29:==============================>                       (69 + 54) / 123][Stage 29:===================================>                  (80 + 43) / 123][Stage 29:===========================================>         (102 + 21) / 123][Stage 29:================================================>    (113 + 10) / 123][Stage 29:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.586375929 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45986947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===================================>                  (74 + 40) / 114][Stage 30:========================================>             (86 + 28) / 114][Stage 30:============================================>         (93 + 21) / 114][Stage 30:================================================>    (104 + 10) / 114][Stage 30:====================================================> (110 + 4) / 114][Stage 30:=====================================================>(113 + 1) / 114]                                                                                [Stage 31:==================================>                   (73 + 42) / 115][Stage 31:========================================>             (86 + 29) / 115][Stage 31:=============================================>        (97 + 18) / 115][Stage 31:===================================================>  (109 + 6) / 115][Stage 31:=====================================================>(113 + 2) / 115][Stage 31:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.983106798 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513901246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (66 + 49) / 115][Stage 32:===================================>                  (75 + 40) / 115][Stage 32:===========================================>          (93 + 22) / 115][Stage 32:====================================================> (112 + 3) / 115]                                                                                [Stage 33:===================================>                  (76 + 40) / 116][Stage 33:===========================================>          (93 + 23) / 116][Stage 33:==================================================>   (109 + 7) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.94823676 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437673603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==================================>                   (73 + 41) / 114][Stage 34:========================================>             (86 + 28) / 114][Stage 34:============================================>         (94 + 20) / 114][Stage 34:==================================================>   (107 + 7) / 114][Stage 34:=====================================================>(113 + 1) / 114]                                                                                [Stage 35:========================================>             (86 + 29) / 115][Stage 35:=============================================>        (96 + 19) / 115][Stage 35:=================================================>    (106 + 9) / 115][Stage 35:====================================================> (112 + 3) / 115][Stage 35:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.314187923 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 18  OR  partitionIndex = 19 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.517174827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=========================>                            (58 + 63) / 121][Stage 36:==============================>                       (68 + 53) / 121][Stage 36:====================================>                 (81 + 40) / 121][Stage 36:=============================================>       (104 + 17) / 121][Stage 36:===================================================>  (116 + 5) / 121]                                                                                [Stage 37:===========================>                          (62 + 60) / 122][Stage 37:================================>                     (74 + 48) / 122][Stage 37:========================================>             (91 + 31) / 122][Stage 37:==============================================>      (106 + 16) / 122][Stage 37:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.547211225 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 98  OR  pa rtitionIndex = 112  OR  partitionIndex = 113 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 112  OR  partitionIndex = 113 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 60) / 121][Stage 38:===============================>                      (71 + 50) / 121][Stage 38:======================================>               (86 + 35) / 121][Stage 38:===============================================>     (109 + 12) / 121]                                                                                [Stage 39:===========================>                          (62 + 60) / 122][Stage 39:===============================>                      (72 + 50) / 122][Stage 39:==========================================>           (96 + 26) / 122][Stage 39:================================================>    (112 + 10) / 122][Stage 39:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.40948552 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  pa rtitionIndex = 97  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515834313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==========================>                           (60 + 62) / 122][Stage 40:============================>                         (64 + 58) / 122][Stage 40:==================================>                   (77 + 45) / 122][Stage 40:===========================================>          (99 + 23) / 122]                                                                                [Stage 41:===========================>                          (62 + 61) / 123][Stage 41:==============================>                       (69 + 54) / 123][Stage 41:======================================>               (87 + 36) / 123][Stage 41:================================================>    (112 + 11) / 123][Stage 41:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.50659038 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480727914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (71 + 46) / 117][Stage 42:=================================>                    (73 + 44) / 117][Stage 42:===================================>                  (76 + 41) / 117][Stage 42:=========================================>            (89 + 28) / 117][Stage 42:==============================================>      (102 + 15) / 117][Stage 42:===================================================>  (111 + 6) / 117]                                                                                [Stage 43:================================>                     (72 + 46) / 118][Stage 43:===================================>                  (77 + 41) / 118][Stage 43:=======================================>              (86 + 32) / 118][Stage 43:============================================>        (100 + 18) / 118][Stage 43:================================================>    (108 + 10) / 118][Stage 43:====================================================> (115 + 3) / 118][Stage 43:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.985740347 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  pa rtitionIndex = 91  OR  partitionIndex = 104 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495825943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:============================>                         (63 + 58) / 121][Stage 44:=================================>                    (76 + 45) / 121][Stage 44:==========================================>           (95 + 26) / 121][Stage 44:=====================================================>(119 + 2) / 121]                                                                                [Stage 45:===========================>                          (62 + 60) / 122][Stage 45:============================>                         (64 + 58) / 122][Stage 45:==================================>                   (77 + 45) / 122][Stage 45:========================================>             (92 + 30) / 122][Stage 45:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.305716018 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  pa rtitionIndex = 44  OR  partitionIndex = 45 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:=============================>                        (65 + 56) / 121][Stage 46:=======================================>              (89 + 32) / 121][Stage 46:===============================================>     (109 + 12) / 121][Stage 46:=====================================================>(120 + 1) / 121]                                                                                [Stage 47:===========================>                          (62 + 60) / 122][Stage 47:===============================>                      (71 + 51) / 122][Stage 47:======================================>               (88 + 34) / 122][Stage 47:==================================================>   (113 + 9) / 122][Stage 47:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.492125074 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164  OR   partitionIndex = 165  OR  partitionIndex = 180 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 180 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520793182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:>                                                       (0 + 0) / 121][Stage 48:==========================>                           (60 + 61) / 121][Stage 48:=============================>                        (67 + 54) / 121][Stage 48:====================================>                 (81 + 40) / 121][Stage 48:=============================================>       (105 + 16) / 121]                                                                                [Stage 49:===========================>                          (63 + 59) / 122][Stage 49:===============================>                      (72 + 50) / 122][Stage 49:=========================================>            (93 + 29) / 122][Stage 49:==================================================>   (114 + 8) / 122][Stage 49:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.465932709 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482454199 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:>                                                       (0 + 0) / 122][Stage 50:==========================>                           (60 + 62) / 122][Stage 50:============================>                         (65 + 57) / 122][Stage 50:=====================================>                (84 + 38) / 122][Stage 50:=============================================>       (104 + 18) / 122][Stage 50:====================================================> (118 + 4) / 122][Stage 50:=====================================================>(121 + 1) / 122]                                                                                [Stage 51:==========================>                           (61 + 62) / 123][Stage 51:============================>                         (64 + 59) / 123][Stage 51:==================================>                   (78 + 45) / 123][Stage 51:==========================================>           (96 + 27) / 123][Stage 51:==================================================>   (114 + 9) / 123][Stage 51:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.746122151 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 153  OR  partitionIndex = 154 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 153  OR  partitionIndex = 154 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377559227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=======================================>              (84 + 31) / 115][Stage 52:=============================================>        (96 + 19) / 115][Stage 52:================================================>    (105 + 10) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:=======================================>              (85 + 31) / 116][Stage 53:===========================================>          (94 + 22) / 116][Stage 53:=================================================>    (107 + 9) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.690186057 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23  OR  pa rtitionIndex = 36  OR  partitionIndex = 37 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399437847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:>                                                       (0 + 0) / 114][Stage 54:===================================>                  (74 + 40) / 114][Stage 54:======================================>               (82 + 32) / 114][Stage 54:=============================================>        (97 + 17) / 114][Stage 54:===================================================>  (108 + 6) / 114][Stage 54:=====================================================>(113 + 1) / 114]                                                                                [Stage 55:====================================>                 (77 + 38) / 115][Stage 55:=========================================>            (88 + 27) / 115][Stage 55:==============================================>       (98 + 17) / 115][Stage 55:=================================================>    (106 + 9) / 115][Stage 55:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 5.047107514 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150  OR   partitionIndex = 151  OR  partitionIndex = 164 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411748476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===================================>                  (74 + 40) / 114][Stage 56:=========================================>            (87 + 27) / 114][Stage 56:=============================================>        (97 + 17) / 114][Stage 56:================================================>    (104 + 10) / 114][Stage 56:====================================================> (111 + 3) / 114][Stage 56:=====================================================>(113 + 1) / 114]                                                                                [Stage 57:==================================>                   (74 + 41) / 115][Stage 57:=======================================>              (85 + 30) / 115][Stage 57:==============================================>       (98 + 17) / 115][Stage 57:===================================================>  (109 + 6) / 115][Stage 57:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.23023579 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.514358765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 61) / 122][Stage 58:===========================>                          (63 + 59) / 122][Stage 58:====================================>                 (83 + 39) / 122][Stage 58:===========================================>          (99 + 23) / 122][Stage 58:====================================================> (118 + 4) / 122]                                                                                [Stage 59:===========================>                          (63 + 60) / 123][Stage 59:===============================>                      (72 + 51) / 123][Stage 59:======================================>               (88 + 35) / 123][Stage 59:================================================>    (112 + 11) / 123][Stage 59:=====================================================>(121 + 2) / 123][Stage 59:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.783436867 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484946248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (62 + 59) / 121][Stage 60:==============================>                       (69 + 52) / 121][Stage 60:=======================================>              (88 + 33) / 121][Stage 60:=============================================>       (103 + 18) / 121][Stage 60:=====================================================>(119 + 2) / 121]                                                                                [Stage 61:===========================>                          (61 + 61) / 122][Stage 61:===============================>                      (72 + 50) / 122][Stage 61:==========================================>           (96 + 26) / 122][Stage 61:===============================================>     (110 + 12) / 122]                                                                                Time elapsed: 3.201512116 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233  OR   partitionIndex = 248  OR  partitionIndex = 249 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248  OR  partitionIndex = 249 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416640246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (81 + 33) / 114][Stage 62:===========================================>          (92 + 22) / 114][Stage 62:===============================================>     (102 + 12) / 114][Stage 62:==================================================>   (107 + 7) / 114][Stage 62:=====================================================>(113 + 1) / 114]                                                                                [Stage 63:===================================>                  (75 + 40) / 115][Stage 63:=======================================>              (85 + 30) / 115][Stage 63:============================================>         (94 + 21) / 115][Stage 63:=================================================>    (106 + 9) / 115][Stage 63:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.132290599 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  pa rtitionIndex = 95  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393595797 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=====================================>                (79 + 35) / 114][Stage 64:=========================================>            (87 + 27) / 114][Stage 64:==============================================>      (100 + 14) / 114][Stage 64:====================================================> (110 + 4) / 114]                                                                                [Stage 65:===================================>                  (75 + 40) / 115][Stage 65:==========================================>           (90 + 25) / 115][Stage 65:==============================================>      (100 + 15) / 115][Stage 65:==================================================>   (107 + 8) / 115][Stage 65:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.168189511 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 84  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 84  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=====================================>                (80 + 34) / 114][Stage 66:===========================================>          (92 + 22) / 114][Stage 66:==============================================>       (99 + 15) / 114][Stage 66:===================================================>  (109 + 5) / 114][Stage 66:=====================================================>(113 + 1) / 114]                                                                                [Stage 67:========================================>             (86 + 29) / 115][Stage 67:=============================================>        (97 + 18) / 115][Stage 67:===============================================>     (103 + 12) / 115][Stage 67:====================================================> (111 + 4) / 115][Stage 67:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.444552999 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 213 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 213 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436560388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (71 + 46) / 117][Stage 68:=================================>                    (73 + 44) / 117][Stage 68:=======================================>              (86 + 31) / 117][Stage 68:===============================================>     (105 + 12) / 117][Stage 68:=====================================================>(116 + 1) / 117]                                                                                [Stage 69:================================>                     (72 + 46) / 118][Stage 69:==================================>                   (75 + 43) / 118][Stage 69:=======================================>              (87 + 31) / 118][Stage 69:===============================================>     (106 + 12) / 118]                                                                                Time elapsed: 3.014572028 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR   partitionIndex = 160  OR  partitionIndex = 161 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=================================>                    (72 + 45) / 117][Stage 70:===================================>                  (77 + 40) / 117][Stage 70:=============================================>        (99 + 18) / 117][Stage 70:=====================================================>(115 + 2) / 117]                                                                                [Stage 71:================================>                     (72 + 46) / 118][Stage 71:==================================>                   (75 + 43) / 118][Stage 71:======================================>               (84 + 34) / 118][Stage 71:============================================>         (98 + 20) / 118][Stage 71:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.037494385 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 235  OR   partitionIndex = 250  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394785421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==================================>                   (73 + 41) / 114][Stage 72:========================================>             (86 + 28) / 114][Stage 72:==============================================>       (98 + 16) / 114][Stage 72:================================================>    (104 + 10) / 114][Stage 72:===================================================>  (109 + 5) / 114][Stage 72:=====================================================>(113 + 1) / 114]                                                                                [Stage 73:==================================>                   (73 + 42) / 115][Stage 73:=======================================>              (85 + 30) / 115][Stage 73:============================================>         (94 + 21) / 115][Stage 73:===============================================>     (104 + 11) / 115][Stage 73:===================================================>  (110 + 5) / 115][Stage 73:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.344685576 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 157 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 157 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461624946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:==========================>                           (60 + 61) / 121][Stage 74:=============================>                        (67 + 54) / 121][Stage 74:====================================>                 (82 + 39) / 121][Stage 74:==============================================>      (106 + 15) / 121][Stage 74:=====================================================>(119 + 2) / 121]                                                                                [Stage 75:===========================>                          (62 + 60) / 122][Stage 75:============================>                         (65 + 57) / 122][Stage 75:===================================>                  (80 + 42) / 122][Stage 75:=============================================>       (105 + 17) / 122][Stage 75:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.372511547 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160  OR   partitionIndex = 161  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495683273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===============================>                      (67 + 48) / 115][Stage 76:======================================>               (83 + 32) / 115][Stage 76:==============================================>       (99 + 16) / 115][Stage 76:==================================================>   (108 + 7) / 115][Stage 76:====================================================> (111 + 4) / 115]                                                                                [Stage 77:=================================>                    (72 + 44) / 116][Stage 77:=======================================>              (85 + 31) / 116][Stage 77:============================================>         (95 + 21) / 116][Stage 77:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.087174457 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 122  OR  partitionIndex = 123 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 122  OR  partitionIndex = 123 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453857207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:============================>                         (63 + 58) / 121][Stage 78:====================================>                 (82 + 39) / 121][Stage 78:=============================================>       (105 + 16) / 121]                                                                                [Stage 79:===========================>                          (62 + 60) / 122][Stage 79:==============================>                       (70 + 52) / 122][Stage 79:====================================>                 (83 + 39) / 122][Stage 79:==============================================>      (107 + 15) / 122][Stage 79:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.187214935 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (62 + 59) / 121][Stage 80:=================================>                    (76 + 45) / 121][Stage 80:============================================>         (99 + 22) / 121][Stage 80:==================================================>   (114 + 7) / 121][Stage 80:=====================================================>(119 + 2) / 121]                                                                                [Stage 81:==============================>                       (68 + 54) / 122][Stage 81:=====================================>                (85 + 37) / 122][Stage 81:============================================>        (102 + 20) / 122][Stage 81:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.4997739 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  pa rtitionIndex = 31  OR  partitionIndex = 44 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406514479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (72 + 45) / 117][Stage 82:====================================>                 (78 + 39) / 117][Stage 82:==========================================>           (91 + 26) / 117][Stage 82:==============================================>      (103 + 14) / 117][Stage 82:=====================================================>(116 + 1) / 117]                                                                                [Stage 83:=================================>                    (74 + 44) / 118][Stage 83:=====================================>                (82 + 36) / 118][Stage 83:=========================================>            (90 + 28) / 118][Stage 83:===============================================>     (106 + 12) / 118][Stage 83:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.581961165 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453494479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 60) / 121][Stage 84:===================================>                  (79 + 42) / 121][Stage 84:============================================>        (102 + 19) / 121][Stage 84:==================================================>   (113 + 8) / 121]                                                                                [Stage 85:============================>                         (64 + 58) / 122][Stage 85:==============================>                       (69 + 53) / 122][Stage 85:======================================>               (88 + 34) / 122][Stage 85:==================================================>   (114 + 8) / 122][Stage 85:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.522232778 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  pa rtitionIndex = 83  OR  partitionIndex = 96 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449306307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (61 + 61) / 122][Stage 86:=============================>                        (67 + 55) / 122][Stage 86:===================================>                  (81 + 41) / 122][Stage 86:==============================================>      (107 + 15) / 122][Stage 86:=====================================================>(120 + 2) / 122]                                                                                [Stage 87:==========================>                           (61 + 62) / 123][Stage 87:=============================>                        (67 + 56) / 123][Stage 87:======================================>               (88 + 35) / 123][Stage 87:===============================================>     (111 + 12) / 123][Stage 87:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.158996145 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38384981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=====================================>                (79 + 35) / 114][Stage 88:==========================================>           (89 + 25) / 114][Stage 88:==============================================>       (99 + 15) / 114][Stage 88:====================================================> (111 + 3) / 114][Stage 88:=====================================================>(113 + 1) / 114]                                                                                [Stage 89:===================================>                  (75 + 40) / 115][Stage 89:==========================================>           (90 + 25) / 115][Stage 89:==============================================>      (101 + 14) / 115][Stage 89:==================================================>   (107 + 8) / 115][Stage 89:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.053426147 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108  OR  p artitionIndex = 109  OR  partitionIndex = 124 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428311492 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (61 + 60) / 121][Stage 90:==============================>                       (69 + 52) / 121][Stage 90:=========================================>            (94 + 27) / 121][Stage 90:==================================================>   (114 + 7) / 121]                                                                                [Stage 91:===========================>                          (63 + 59) / 122][Stage 91:================================>                     (73 + 49) / 122][Stage 91:=========================================>            (93 + 29) / 122][Stage 91:================================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.145472186 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  pa rtitionIndex = 40  OR  partitionIndex = 41 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357136993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=======================================>              (84 + 31) / 115][Stage 92:=============================================>        (97 + 18) / 115][Stage 92:===============================================>     (103 + 12) / 115][Stage 92:===================================================>  (110 + 5) / 115]                                                                                [Stage 93:========================================>             (87 + 29) / 116][Stage 93:==============================================>       (99 + 17) / 116][Stage 93:===============================================>     (105 + 11) / 116][Stage 93:===================================================>  (111 + 5) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.309967429 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (83 + 32) / 115][Stage 94:============================================>         (94 + 21) / 115][Stage 94:==============================================>      (101 + 14) / 115][Stage 94:=====================================================>(113 + 2) / 115]                                                                                [Stage 95:=====================================>                (81 + 35) / 116][Stage 95:========================================>             (88 + 28) / 116][Stage 95:===============================================>     (103 + 13) / 116][Stage 95:===================================================>  (111 + 5) / 116][Stage 95:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.432478566 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 92  OR  partitionIndex = 123 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 92  OR  partitionIndex = 123 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398067187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===============================>                      (68 + 47) / 115][Stage 96:=======================================>              (85 + 30) / 115][Stage 96:===============================================>     (103 + 12) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:=====================================>                (81 + 35) / 116][Stage 97:============================================>         (96 + 20) / 116][Stage 97:==================================================>   (109 + 7) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.762893259 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 220  OR  partitionIndex = 221 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433884166 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (61 + 60) / 121][Stage 98:=================================>                    (75 + 46) / 121][Stage 98:===========================================>          (98 + 23) / 121][Stage 98:==================================================>   (114 + 7) / 121]                                                                                [Stage 99:===========================>                          (63 + 59) / 122][Stage 99:=============================>                        (66 + 56) / 122][Stage 99:=====================================>                (84 + 38) / 122][Stage 99:================================================>    (111 + 11) / 122][Stage 99:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.426354419 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 250  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434154787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 62) / 122][Stage 100:==========================>                          (61 + 61) / 122][Stage 100:=================================>                   (76 + 46) / 122][Stage 100:==========================================>         (100 + 22) / 122][Stage 100:==================================================>  (117 + 5) / 122]                                                                                [Stage 101:============================>                        (67 + 56) / 123][Stage 101:===============================>                     (74 + 49) / 123][Stage 101:==============================================>     (111 + 12) / 123][Stage 101:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.133114203 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382684352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (71 + 46) / 117][Stage 102:================================>                    (72 + 45) / 117][Stage 102:==================================>                  (77 + 40) / 117][Stage 102:============================================>       (100 + 17) / 117][Stage 102:====================================================>(115 + 2) / 117]                                                                                [Stage 103:=================================>                   (75 + 43) / 118][Stage 103:=======================================>             (87 + 31) / 118][Stage 103:============================================>       (101 + 17) / 118][Stage 103:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.183029934 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  pa rtitionIndex = 45  OR  partitionIndex = 60 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 60 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436661642 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 60) / 121][Stage 104:==============================>                      (69 + 52) / 121][Stage 104:===================================>                 (80 + 41) / 121][Stage 104:============================================>       (103 + 18) / 121][Stage 104:===================================================> (118 + 3) / 121]                                                                                [Stage 105:===========================>                         (64 + 58) / 122][Stage 105:================================>                    (74 + 48) / 122][Stage 105:===========================================>        (102 + 20) / 122][Stage 105:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.247283549 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408589897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (71 + 46) / 117][Stage 106:=================================>                   (75 + 42) / 117][Stage 106:=======================================>             (88 + 29) / 117][Stage 106:============================================>        (99 + 18) / 117][Stage 106:=================================================>   (110 + 7) / 117][Stage 106:====================================================>(116 + 1) / 117]                                                                                [Stage 107:================================>                    (72 + 46) / 118][Stage 107:==================================>                  (77 + 41) / 118][Stage 107:=======================================>             (87 + 31) / 118][Stage 107:=============================================>      (104 + 14) / 118][Stage 107:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.867907568 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 146  OR  partitionIndex = 147 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 146  OR  partitionIndex = 147 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398833625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==============================>                      (67 + 48) / 115][Stage 108:===================================>                 (78 + 37) / 115][Stage 108:==========================================>          (93 + 22) / 115][Stage 108:===============================================>    (104 + 11) / 115][Stage 108:===================================================> (112 + 3) / 115]                                                                                [Stage 109:===============================>                     (70 + 46) / 116][Stage 109:===================================>                 (78 + 38) / 116][Stage 109:=========================================>           (90 + 26) / 116][Stage 109:============================================>        (97 + 19) / 116][Stage 109:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.990226886 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344101888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (82 + 33) / 115][Stage 110:=========================================>           (91 + 24) / 115][Stage 110:================================================>    (106 + 9) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:=====================================>               (81 + 35) / 116][Stage 111:========================================>            (89 + 27) / 116][Stage 111:=============================================>      (102 + 14) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.661099438 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62  OR  pa rtitionIndex = 63  OR  partitionIndex = 72 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34456439 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=======================================>             (86 + 29) / 115][Stage 112:=============================================>       (98 + 17) / 115][Stage 112:=================================================>   (108 + 7) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:=====================================>               (82 + 34) / 116][Stage 113:=========================================>           (91 + 25) / 116][Stage 113:============================================>       (100 + 16) / 116][Stage 113:=================================================>   (109 + 7) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.185035096 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR   partitionIndex = 224  OR  partitionIndex = 225 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416246967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 60) / 121][Stage 114:=============================>                       (67 + 54) / 121][Stage 114:======================================>              (87 + 34) / 121][Stage 114:============================================>       (104 + 17) / 121][Stage 114:===================================================> (118 + 3) / 121]                                                                                [Stage 115:============================>                        (65 + 57) / 122][Stage 115:==================================>                  (79 + 43) / 122][Stage 115:===========================================>        (102 + 20) / 122][Stage 115:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.208825177 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379880063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (73 + 44) / 117][Stage 116:=====================================>               (83 + 34) / 117][Stage 116:===========================================>         (96 + 21) / 117][Stage 116:=================================================>   (110 + 7) / 117]                                                                                [Stage 117:================================>                    (72 + 46) / 118][Stage 117:===================================>                 (78 + 40) / 118][Stage 117:==========================================>          (94 + 24) / 118][Stage 117:===============================================>    (108 + 10) / 118][Stage 117:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.251251253 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR   partitionIndex = 191  OR  partitionIndex = 200 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347404108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:======================================>              (84 + 31) / 115][Stage 118:==========================================>          (93 + 22) / 115][Stage 118:==============================================>     (102 + 13) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:=======================================>             (86 + 30) / 116][Stage 119:=============================================>       (99 + 17) / 116][Stage 119:==================================================>  (111 + 5) / 116][Stage 119:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.852719346 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  par titionIndex = 23  OR  partitionIndex = 36 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344585606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:====================================>                (79 + 36) / 115][Stage 120:=======================================>             (85 + 30) / 115][Stage 120:============================================>        (97 + 18) / 115][Stage 120:==================================================>  (110 + 5) / 115]                                                                                [Stage 121:=====================================>               (82 + 34) / 116][Stage 121:========================================>            (88 + 28) / 116][Stage 121:=============================================>      (101 + 15) / 116][Stage 121:==============================================>     (103 + 13) / 116][Stage 121:====================================================>(114 + 2) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.945781642 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  par titionIndex = 19  OR  partitionIndex = 32 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415052733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (62 + 59) / 121][Stage 122:==============================>                      (70 + 51) / 121][Stage 122:==========================================>          (96 + 25) / 121][Stage 122:===================================================> (118 + 3) / 121]                                                                                [Stage 123:==========================>                          (62 + 60) / 122][Stage 123:==============================>                      (70 + 52) / 122][Stage 123:==================================>                  (80 + 42) / 122][Stage 123:=============================================>      (106 + 16) / 122][Stage 123:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.129374262 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404468856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (70 + 45) / 115][Stage 124:===================================>                 (76 + 39) / 115][Stage 124:=========================================>           (89 + 26) / 115][Stage 124:=============================================>       (98 + 17) / 115][Stage 124:==================================================>  (110 + 5) / 115]                                                                                [Stage 125:==================================>                  (76 + 40) / 116][Stage 125:=====================================>               (83 + 33) / 116][Stage 125:==========================================>          (93 + 23) / 116][Stage 125:=================================================>   (108 + 8) / 116][Stage 125:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.271044272 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335727119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:====================================>                (80 + 35) / 115][Stage 126:========================================>            (88 + 27) / 115][Stage 126:===============================================>    (105 + 10) / 115][Stage 126:===================================================> (111 + 4) / 115]                                                                                [Stage 127:=========================================>           (90 + 26) / 116][Stage 127:============================================>        (97 + 19) / 116][Stage 127:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.62651694 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 221 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 221 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403914869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 62) / 122][Stage 128:===============================>                     (72 + 50) / 122][Stage 128:========================================>            (94 + 28) / 122][Stage 128:=================================================>   (114 + 8) / 122][Stage 128:====================================================>(120 + 2) / 122]                                                                                [Stage 129:============================>                        (65 + 58) / 123][Stage 129:==================================>                  (79 + 44) / 123][Stage 129:========================================>            (94 + 29) / 123][Stage 129:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.408523882 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR   partitionIndex = 212  OR  partitionIndex = 213 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 212  OR  partitionIndex = 213 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372585223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==============================>                      (67 + 48) / 115][Stage 130:=================================>                   (72 + 43) / 115][Stage 130:=========================================>           (90 + 25) / 115][Stage 130:===============================================>    (104 + 11) / 115][Stage 130:==================================================>  (110 + 5) / 115]                                                                                [Stage 131:=================================>                   (73 + 43) / 116][Stage 131:=====================================>               (82 + 34) / 116][Stage 131:============================================>       (100 + 16) / 116][Stage 131:================================================>    (107 + 9) / 116][Stage 131:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.215909984 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224  OR   partitionIndex = 225  OR  partitionIndex = 240 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===============================>                     (68 + 47) / 115][Stage 132:===================================>                 (77 + 38) / 115][Stage 132:=======================================>             (85 + 30) / 115][Stage 132:==============================================>     (102 + 13) / 115][Stage 132:===================================================> (111 + 4) / 115]                                                                                [Stage 133:=================================>                   (74 + 42) / 116][Stage 133:=======================================>             (86 + 30) / 116][Stage 133:============================================>        (97 + 19) / 116][Stage 133:=================================================>   (109 + 7) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.11065564 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 238  OR   partitionIndex = 252  OR  partitionIndex = 253 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 238  OR  partitionIndex = 252  OR  partitionIndex = 253 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374594486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===============================>                     (68 + 47) / 115][Stage 134:=======================================>             (85 + 30) / 115][Stage 134:=============================================>       (98 + 17) / 115][Stage 134:=================================================>   (108 + 7) / 115]                                                                                [Stage 135:=================================>                   (74 + 42) / 116][Stage 135:=====================================>               (83 + 33) / 116][Stage 135:============================================>       (100 + 16) / 116][Stage 135:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.747156174 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370727948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (72 + 43) / 115][Stage 136:=====================================>               (82 + 33) / 115][Stage 136:===========================================>         (95 + 20) / 115][Stage 136:===================================================> (111 + 4) / 115]                                                                                [Stage 137:===================================>                 (77 + 39) / 116][Stage 137:============================================>        (97 + 19) / 116][Stage 137:===============================================>    (105 + 11) / 116][Stage 137:==================================================>  (111 + 5) / 116][Stage 137:===================================================> (113 + 3) / 116][Stage 137:====================================================>(114 + 2) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.8535324 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR   partitionIndex = 216  OR  partitionIndex = 217 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 216  OR  partitionIndex = 217 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==============================>                      (67 + 48) / 115][Stage 138:======================================>              (83 + 32) / 115][Stage 138:=============================================>       (98 + 17) / 115][Stage 138:===================================================> (112 + 3) / 115]                                                                                [Stage 139:=====================================>               (83 + 33) / 116][Stage 139:==========================================>          (94 + 22) / 116][Stage 139:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.560724656 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=================================>                   (72 + 43) / 115][Stage 140:======================================>              (84 + 31) / 115][Stage 140:==============================================>     (103 + 12) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:====================================>                (80 + 36) / 116][Stage 141:========================================>            (89 + 27) / 116][Stage 141:===============================================>    (106 + 10) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.783598837 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 21  OR  partitionIndex = 22 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395532947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 60) / 121][Stage 142:==============================>                      (69 + 52) / 121][Stage 142:=====================================>               (85 + 36) / 121][Stage 142:===============================================>    (110 + 11) / 121]                                                                                [Stage 143:===========================>                         (64 + 58) / 122][Stage 143:=================================>                   (76 + 46) / 122][Stage 143:=======================================>             (92 + 30) / 122][Stage 143:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.240172331 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 209  OR  partitionIndex = 210 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 209  OR  partitionIndex = 210 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401593745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (61 + 61) / 122][Stage 144:==============================>                      (70 + 52) / 122][Stage 144:=====================================>               (87 + 35) / 122][Stage 144:============================================>       (105 + 17) / 122][Stage 144:===================================================> (118 + 4) / 122][Stage 144:====================================================>(121 + 1) / 122]                                                                                [Stage 145:==========================>                          (61 + 62) / 123][Stage 145:=============================>                       (68 + 55) / 123][Stage 145:=====================================>               (86 + 37) / 123][Stage 145:============================================>       (105 + 18) / 123][Stage 145:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.32515385 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  pa rtitionIndex = 96  OR  partitionIndex = 97 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401735244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 62) / 122][Stage 146:============================>                        (66 + 56) / 122][Stage 146:====================================>                (84 + 38) / 122][Stage 146:============================================>       (105 + 17) / 122][Stage 146:====================================================>(120 + 2) / 122]                                                                                [Stage 147:============================>                        (65 + 58) / 123][Stage 147:================================>                    (76 + 47) / 123][Stage 147:==========================================>          (99 + 24) / 123][Stage 147:===================================================> (119 + 4) / 123][Stage 147:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.32143642 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409104194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 61) / 121][Stage 148:============================>                        (65 + 56) / 121][Stage 148:====================================>                (84 + 37) / 121][Stage 148:==========================================>          (98 + 23) / 121][Stage 148:=================================================>   (114 + 7) / 121]                                                                                [Stage 149:===========================>                         (63 + 59) / 122][Stage 149:================================>                    (75 + 47) / 122][Stage 149:========================================>            (93 + 29) / 122][Stage 149:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.433496345 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 249  OR  partitionIndex = 250 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340039535 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (81 + 34) / 115][Stage 150:=========================================>           (89 + 26) / 115][Stage 150:================================================>    (106 + 9) / 115]                                                                                [Stage 151:=======================================>             (86 + 30) / 116][Stage 151:=========================================>           (91 + 25) / 116][Stage 151:==============================================>     (104 + 12) / 116][Stage 151:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.632073872 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409603456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (61 + 61) / 122][Stage 152:===============================>                     (72 + 50) / 122][Stage 152:========================================>            (93 + 29) / 122][Stage 152:==================================================>  (116 + 6) / 122]                                                                                [Stage 153:============================>                        (66 + 57) / 123][Stage 153:==================================>                  (79 + 44) / 123][Stage 153:=========================================>           (96 + 27) / 123][Stage 153:===============================================>    (113 + 10) / 123][Stage 153:===================================================> (120 + 3) / 123][Stage 153:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.500463013 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380534689 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:============================>                        (60 + 53) / 113][Stage 154:================================>                    (70 + 43) / 113][Stage 154:=========================================>           (88 + 25) / 113][Stage 154:===================================================> (109 + 4) / 113]                                                                                [Stage 155:===========================>                         (60 + 54) / 114][Stage 155:==============================>                      (66 + 48) / 114][Stage 155:=======================================>             (85 + 29) / 114][Stage 155:==============================================>     (101 + 13) / 114][Stage 155:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.252125764 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36  OR  pa rtitionIndex = 37  OR  partitionIndex = 52 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 52 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380317706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:============================>                        (60 + 53) / 113][Stage 156:================================>                    (70 + 43) / 113][Stage 156:==========================================>          (91 + 22) / 113][Stage 156:=================================================>   (106 + 7) / 113]                                                                                [Stage 157:===========================>                         (60 + 54) / 114][Stage 157:===============================>                     (68 + 46) / 114][Stage 157:=======================================>             (85 + 29) / 114][Stage 157:==============================================>     (102 + 12) / 114][Stage 157:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.437519966 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 61  OR  partitionIndex = 62 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 61  OR  partitionIndex = 62 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437879168 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:>                                                      (0 + 0) / 114][Stage 158:===================================>                 (77 + 37) / 114][Stage 158:=========================================>           (90 + 24) / 114][Stage 158:==============================================>      (99 + 15) / 114][Stage 158:===============================================>    (104 + 10) / 114][Stage 158:=================================================>   (107 + 7) / 114]                                                                                [Stage 159:======================================>              (84 + 31) / 115][Stage 159:==========================================>          (93 + 22) / 115][Stage 159:=============================================>      (101 + 14) / 115][Stage 159:=================================================>   (108 + 7) / 115][Stage 159:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.359207392 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR   partitionIndex = 245  OR  partitionIndex = 246 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 245  OR  partitionIndex = 246 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341144819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:====================================>                (80 + 35) / 115][Stage 160:=========================================>           (90 + 25) / 115][Stage 160:===============================================>    (104 + 11) / 115][Stage 160:===================================================> (111 + 4) / 115]                                                                                [Stage 161:=====================================>               (81 + 35) / 116][Stage 161:========================================>            (89 + 27) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.622771643 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365456995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==============================>                      (67 + 48) / 115][Stage 162:==================================>                  (75 + 40) / 115][Stage 162:========================================>            (88 + 27) / 115][Stage 162:=============================================>      (100 + 15) / 115][Stage 162:===================================================> (111 + 4) / 115]                                                                                [Stage 163:===============================>                     (69 + 47) / 116][Stage 163:=====================================>               (82 + 34) / 116][Stage 163:========================================>            (89 + 27) / 116][Stage 163:============================================>        (97 + 19) / 116][Stage 163:=================================================>   (108 + 8) / 116][Stage 163:===================================================> (113 + 3) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.935446208 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR   partitionIndex = 184  OR  partitionIndex = 185 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360533165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:======================================>              (83 + 31) / 114][Stage 164:==========================================>          (91 + 23) / 114][Stage 164:============================================>        (96 + 18) / 114][Stage 164:===============================================>    (104 + 10) / 114][Stage 164:===================================================> (111 + 3) / 114]                                                                                [Stage 165:====================================>                (79 + 36) / 115][Stage 165:==========================================>          (92 + 23) / 115][Stage 165:===============================================>    (105 + 10) / 115][Stage 165:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.059522586 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR   partitionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339631059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:====================================>                (79 + 36) / 115][Stage 166:======================================>              (83 + 32) / 115][Stage 166:=========================================>           (91 + 24) / 115][Stage 166:===============================================>    (105 + 10) / 115]                                                                                [Stage 167:=======================================>             (86 + 30) / 116][Stage 167:============================================>        (97 + 19) / 116][Stage 167:===============================================>    (105 + 11) / 116][Stage 167:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.697540818 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 181  OR  partitionIndex = 182 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 181  OR  partitionIndex = 182 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=======================================>             (86 + 29) / 115][Stage 168:==========================================>          (93 + 22) / 115][Stage 168:==================================================>  (109 + 6) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=======================================>             (87 + 29) / 116][Stage 169:============================================>        (97 + 19) / 116][Stage 169:===================================================> (112 + 4) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.780973183 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=======================================>             (86 + 29) / 115][Stage 170:==========================================>          (92 + 23) / 115][Stage 170:================================================>    (106 + 9) / 115][Stage 170:===================================================> (112 + 3) / 115]                                                                                [Stage 171:======================================>              (85 + 31) / 116][Stage 171:============================================>        (98 + 18) / 116][Stage 171:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.72541795 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 227  OR   partitionIndex = 242  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 227  OR  partitionIndex = 242  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359031465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:====================================>                (79 + 35) / 114][Stage 172:========================================>            (87 + 27) / 114][Stage 172:==============================================>     (103 + 11) / 114][Stage 172:=================================================>   (106 + 8) / 114]                                                                                [Stage 173:=====================================>               (82 + 33) / 115][Stage 173:=========================================>           (90 + 25) / 115][Stage 173:=================================================>   (107 + 8) / 115][Stage 173:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 2.926889326 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 85  OR  partitionIndex = 86 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 85  OR  partitionIndex = 86 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347940315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=======================================>             (85 + 30) / 115][Stage 174:=========================================>           (91 + 24) / 115][Stage 174:================================================>    (106 + 9) / 115][Stage 174:====================================================>(113 + 2) / 115]                                                                                [Stage 175:=======================================>             (87 + 29) / 116][Stage 175:=============================================>      (101 + 15) / 116][Stage 175:=================================================>   (109 + 7) / 116][Stage 175:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.850196187 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126  OR   partitionIndex = 127  OR  partitionIndex = 128 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388182566 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (66 + 49) / 115][Stage 176:===================================>                 (76 + 39) / 115][Stage 176:=========================================>           (89 + 26) / 115][Stage 176:===============================================>    (104 + 11) / 115][Stage 176:====================================================>(113 + 2) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:=================================>                   (73 + 43) / 116][Stage 177:===================================>                 (78 + 38) / 116][Stage 177:============================================>        (97 + 19) / 116][Stage 177:===============================================>    (106 + 10) / 116][Stage 177:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.192167869 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170  OR   partitionIndex = 184  OR  partitionIndex = 185 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 184  OR  partitionIndex = 185 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (71 + 44) / 115][Stage 178:=====================================>               (82 + 33) / 115][Stage 178:===========================================>         (95 + 20) / 115][Stage 178:=================================================>   (107 + 8) / 115][Stage 178:==================================================>  (109 + 6) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:=====================================>               (81 + 35) / 116][Stage 179:=========================================>           (91 + 25) / 116][Stage 179:=============================================>       (99 + 17) / 116][Stage 179:==================================================>  (110 + 6) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.416715865 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR   partitionIndex = 229  OR  partitionIndex = 244 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (70 + 45) / 115][Stage 180:======================================>              (83 + 32) / 115][Stage 180:============================================>        (97 + 18) / 115][Stage 180:==============================================>     (103 + 12) / 115][Stage 180:===================================================> (112 + 3) / 115]                                                                                [Stage 181:=================================>                   (74 + 42) / 116][Stage 181:=======================================>             (87 + 29) / 116][Stage 181:============================================>        (97 + 19) / 116][Stage 181:=================================================>   (108 + 8) / 116][Stage 181:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.18262867 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19  OR  pa rtitionIndex = 32  OR  partitionIndex = 33 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412631739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 61) / 122][Stage 182:============================>                        (65 + 57) / 122][Stage 182:===================================>                 (81 + 41) / 122][Stage 182:===========================================>        (101 + 21) / 122][Stage 182:===================================================> (119 + 3) / 122]                                                                                [Stage 183:===========================>                         (63 + 60) / 123][Stage 183:==================================>                  (80 + 43) / 123][Stage 183:========================================>            (95 + 28) / 123][Stage 183:===============================================>    (112 + 11) / 123][Stage 183:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.399696491 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 217  OR  partitionIndex = 218 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 217  OR  partitionIndex = 218 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402083055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (61 + 61) / 122][Stage 184:===============================>                     (72 + 50) / 122][Stage 184:========================================>            (93 + 29) / 122][Stage 184:===================================================> (118 + 4) / 122][Stage 184:====================================================>(121 + 1) / 122]                                                                                [Stage 185:==========================>                          (62 + 61) / 123][Stage 185:=============================>                       (69 + 54) / 123][Stage 185:======================================>              (89 + 34) / 123][Stage 185:=============================================>      (108 + 15) / 123][Stage 185:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.384127824 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (61 + 61) / 122][Stage 186:=============================>                       (67 + 55) / 122][Stage 186:======================================>              (88 + 34) / 122][Stage 186:============================================>       (104 + 18) / 122][Stage 186:====================================================>(120 + 2) / 122]                                                                                [Stage 187:==========================>                          (61 + 62) / 123][Stage 187:===============================>                     (73 + 50) / 123][Stage 187:=====================================>               (87 + 36) / 123][Stage 187:==============================================>     (109 + 14) / 123][Stage 187:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.262039682 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359211675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (71 + 46) / 117][Stage 188:======================================>              (84 + 33) / 117][Stage 188:===========================================>         (96 + 21) / 117][Stage 188:=================================================>   (110 + 7) / 117]                                                                                [Stage 189:================================>                    (72 + 46) / 118][Stage 189:======================================>              (86 + 32) / 118][Stage 189:=================================================>   (110 + 8) / 118][Stage 189:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.1398085 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 84  OR  partitionIndex = 85 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350531629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (70 + 44) / 114][Stage 190:=====================================>               (80 + 34) / 114][Stage 190:===========================================>         (93 + 21) / 114][Stage 190:==============================================>     (103 + 11) / 114][Stage 190:====================================================>(112 + 2) / 114][Stage 190:====================================================>(113 + 1) / 114]                                                                                [Stage 191:======================================>              (83 + 32) / 115][Stage 191:=============================================>      (100 + 15) / 115][Stage 191:===============================================>    (105 + 10) / 115][Stage 191:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.091947982 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  pa rtitionIndex = 48  OR  partitionIndex = 49 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 48  OR  partitionIndex = 49 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394665156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (61 + 60) / 121][Stage 192:============================>                        (66 + 55) / 121][Stage 192:=====================================>               (85 + 36) / 121][Stage 192:=================================================>   (112 + 9) / 121][Stage 192:====================================================>(119 + 2) / 121]                                                                                [Stage 193:==========================>                          (62 + 60) / 122][Stage 193:==============================>                      (70 + 52) / 122][Stage 193:=====================================>               (87 + 35) / 122][Stage 193:==============================================>     (109 + 13) / 122][Stage 193:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.163100922 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  pa rtitionIndex = 104  OR  partitionIndex = 105 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38899568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (61 + 60) / 121][Stage 194:============================>                        (66 + 55) / 121][Stage 194:=======================================>             (91 + 30) / 121][Stage 194:=================================================>   (112 + 9) / 121][Stage 194:====================================================>(120 + 1) / 121]                                                                                [Stage 195:============================>                        (65 + 57) / 122][Stage 195:================================>                    (75 + 47) / 122][Stage 195:===========================================>        (101 + 21) / 122][Stage 195:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.429524995 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  pa rtitionIndex = 100  OR  partitionIndex = 101 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347241152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:====================================>                (79 + 35) / 114][Stage 196:==========================================>          (91 + 23) / 114][Stage 196:==============================================>     (103 + 11) / 114][Stage 196:===================================================> (110 + 4) / 114]                                                                                [Stage 197:===================================>                 (77 + 38) / 115][Stage 197:=========================================>           (89 + 26) / 115][Stage 197:==============================================>     (102 + 13) / 115][Stage 197:==================================================>  (110 + 5) / 115][Stage 197:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.166140264 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379583745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=================================>                   (73 + 42) / 115][Stage 198:========================================>            (88 + 27) / 115][Stage 198:============================================>        (97 + 18) / 115][Stage 198:===================================================> (111 + 4) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:=====================================>               (82 + 34) / 116][Stage 199:===========================================>         (96 + 20) / 116][Stage 199:=================================================>   (108 + 8) / 116][Stage 199:===================================================> (112 + 4) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.183997405 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436738318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (61 + 61) / 122][Stage 200:================================>                    (75 + 47) / 122][Stage 200:=======================================>             (91 + 31) / 122][Stage 200:===============================================>    (112 + 10) / 122][Stage 200:====================================================>(121 + 1) / 122]                                                                                [Stage 201:===========================>                         (63 + 60) / 123][Stage 201:===============================>                     (72 + 51) / 123][Stage 201:=====================================>               (88 + 35) / 123][Stage 201:=============================================>      (108 + 15) / 123][Stage 201:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.535836824 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m12.508s
user	11m48.264s
sys	0m48.252s
