Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 21:12:45 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:13:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:13:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:13:01 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 21:13:03 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:13:14 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529211303-0683).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.370468882 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.746968523 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.863206058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=================>                                     (38 + 83) / 121][Stage 2:=========================>                             (56 + 65) / 121][Stage 2:===========================>                           (60 + 61) / 121][Stage 2:===========================>                           (61 + 60) / 121][Stage 2:==============================>                        (68 + 53) / 121][Stage 2:======================================>                (84 + 37) / 121][Stage 2:============================================>         (100 + 21) / 121][Stage 2:================================================>     (109 + 12) / 121][Stage 2:=====================================================> (118 + 3) / 121]                                                                                [Stage 3:===========================>                           (61 + 61) / 122][Stage 3:===========================>                           (62 + 60) / 122][Stage 3:================================>                      (71 + 51) / 122][Stage 3:====================================>                  (82 + 40) / 122][Stage 3:===========================================>           (96 + 26) / 122][Stage 3:==================================================>    (113 + 9) / 122][Stage 3:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.935108681 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.608841039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=====================================>                 (79 + 36) / 115][Stage 4:======================================>                (81 + 34) / 115][Stage 4:========================================>              (85 + 30) / 115][Stage 4:============================================>          (94 + 21) / 115][Stage 4:===============================================>       (99 + 16) / 115][Stage 4:================================================>     (104 + 11) / 115][Stage 4:====================================================>  (110 + 5) / 115]                                                                                [Stage 5:=======================================>               (83 + 33) / 116][Stage 5:=========================================>             (88 + 28) / 116][Stage 5:===========================================>           (92 + 24) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:===================================================>   (109 + 7) / 116][Stage 5:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.07407408 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.658938012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (56 + 65) / 121][Stage 6:===========================>                           (61 + 60) / 121][Stage 6:==============================>                        (67 + 54) / 121][Stage 6:====================================>                  (80 + 41) / 121][Stage 6:=========================================>             (92 + 29) / 121][Stage 6:=============================================>        (103 + 18) / 121][Stage 6:=================================================>    (111 + 10) / 121]                                                                                [Stage 7:===========================>                           (62 + 60) / 122][Stage 7:============================>                          (63 + 59) / 122][Stage 7:==============================>                        (67 + 55) / 122][Stage 7:====================================>                  (82 + 40) / 122][Stage 7:============================================>          (99 + 23) / 122][Stage 7:====================================================>  (117 + 5) / 122]                                                                                Time elapsed: 4.094824567 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.532625682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (70 + 44) / 114][Stage 8:===================================>                   (73 + 41) / 114][Stage 8:====================================>                  (75 + 39) / 114][Stage 8:=======================================>               (81 + 33) / 114][Stage 8:=============================================>         (94 + 20) / 114][Stage 8:===================================================>   (106 + 8) / 114][Stage 8:====================================================>  (108 + 6) / 114][Stage 8:======================================================>(112 + 2) / 114]                                                                                [Stage 9:==================================>                    (73 + 42) / 115][Stage 9:======================================>                (81 + 34) / 115][Stage 9:============================================>          (93 + 22) / 115][Stage 9:===============================================>      (102 + 13) / 115][Stage 9:================================================>     (104 + 11) / 115][Stage 9:====================================================>  (110 + 5) / 115][Stage 9:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.415061066 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.591947729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (60 + 61) / 121][Stage 10:===========================>                          (61 + 60) / 121][Stage 10:===============================>                      (70 + 51) / 121][Stage 10:=====================================>                (84 + 37) / 121][Stage 10:===========================================>          (97 + 24) / 121][Stage 10:===============================================>     (108 + 13) / 121][Stage 10:=====================================================>(119 + 2) / 121]                                                                                [Stage 11:===========================>                          (62 + 60) / 122][Stage 11:===============================>                      (71 + 51) / 122][Stage 11:=====================================>                (85 + 37) / 122][Stage 11:===============================================>     (109 + 13) / 122][Stage 11:==================================================>   (115 + 7) / 122][Stage 11:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.846960583 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542918036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==============================>                       (64 + 51) / 115][Stage 12:================================>                     (69 + 46) / 115][Stage 12:=======================================>              (84 + 31) / 115][Stage 12:===============================================>     (104 + 11) / 115][Stage 12:====================================================> (112 + 3) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=================================>                    (72 + 44) / 116][Stage 13:=======================================>              (85 + 31) / 116][Stage 13:===========================================>          (94 + 22) / 116][Stage 13:===============================================>     (104 + 12) / 116][Stage 13:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.517596667 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450089087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:=======================================>              (84 + 31) / 115][Stage 14:=============================================>        (96 + 19) / 115][Stage 14:====================================================> (112 + 3) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:=====================================>                (80 + 36) / 116][Stage 15:==========================================>           (91 + 25) / 116][Stage 15:================================================>    (106 + 10) / 116][Stage 15:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.053608386 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.565586202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (61 + 60) / 121][Stage 16:=============================>                        (67 + 54) / 121][Stage 16:===================================>                  (79 + 42) / 121][Stage 16:===========================================>          (97 + 24) / 121][Stage 16:===============================================>     (109 + 12) / 121][Stage 16:====================================================> (118 + 3) / 121]                                                                                [Stage 17:============================>                         (65 + 57) / 122][Stage 17:=================================>                    (76 + 46) / 122][Stage 17:==========================================>           (95 + 27) / 122][Stage 17:==================================================>   (113 + 9) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.574425914 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46313178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (71 + 43) / 114][Stage 18:=========================================>            (87 + 27) / 114][Stage 18:==============================================>       (98 + 16) / 114][Stage 18:==================================================>   (106 + 8) / 114][Stage 18:===================================================>  (108 + 6) / 114][Stage 18:====================================================> (110 + 4) / 114][Stage 18:=====================================================>(113 + 1) / 114]                                                                                [Stage 19:====================================>                 (77 + 38) / 115][Stage 19:=========================================>            (88 + 27) / 115][Stage 19:===============================================>     (102 + 13) / 115][Stage 19:===================================================>  (110 + 5) / 115][Stage 19:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.723420149 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:>                                                       (0 + 0) / 114][Stage 20:==================================>                   (72 + 42) / 114][Stage 20:=======================================>              (84 + 30) / 114][Stage 20:=============================================>        (97 + 17) / 114][Stage 20:===============================================>     (103 + 11) / 114][Stage 20:===================================================>  (108 + 6) / 114][Stage 20:=====================================================>(112 + 2) / 114][Stage 20:=====================================================>(113 + 1) / 114]                                                                                [Stage 21:==================================>                   (74 + 41) / 115][Stage 21:========================================>             (87 + 28) / 115][Stage 21:=============================================>        (97 + 18) / 115][Stage 21:================================================>    (105 + 10) / 115][Stage 21:==================================================>   (108 + 7) / 115][Stage 21:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.923004196 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47975829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=====================================>                (79 + 35) / 114][Stage 22:==========================================>           (89 + 25) / 114][Stage 22:===============================================>     (102 + 12) / 114][Stage 22:==================================================>   (107 + 7) / 114][Stage 22:====================================================> (110 + 4) / 114][Stage 22:=====================================================>(112 + 2) / 114][Stage 22:=====================================================>(113 + 1) / 114]                                                                                [Stage 23:================================>                     (69 + 46) / 115][Stage 23:=======================================>              (85 + 30) / 115][Stage 23:===========================================>          (92 + 23) / 115][Stage 23:==============================================>       (99 + 16) / 115][Stage 23:===============================================>     (103 + 12) / 115][Stage 23:===================================================>  (109 + 6) / 115][Stage 23:====================================================> (111 + 4) / 115][Stage 23:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.300894942 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456716563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (70 + 44) / 114][Stage 24:=====================================>                (79 + 35) / 114][Stage 24:============================================>         (94 + 20) / 114][Stage 24:==============================================>      (100 + 14) / 114][Stage 24:==================================================>   (106 + 8) / 114][Stage 24:===================================================>  (109 + 5) / 114][Stage 24:=====================================================>(112 + 2) / 114]                                                                                [Stage 25:======================================>               (81 + 34) / 115][Stage 25:===========================================>          (93 + 22) / 115][Stage 25:===============================================>     (103 + 12) / 115][Stage 25:==================================================>   (108 + 7) / 115][Stage 25:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.898468986 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474776153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===============================>                      (68 + 47) / 115][Stage 26:==================================>                   (74 + 41) / 115][Stage 26:==========================================>           (90 + 25) / 115][Stage 26:==============================================>       (99 + 16) / 115][Stage 26:==================================================>   (108 + 7) / 115]                                                                                [Stage 27:==================================>                   (75 + 41) / 116][Stage 27:========================================>             (88 + 28) / 116][Stage 27:=============================================>       (100 + 16) / 116][Stage 27:=================================================>    (107 + 9) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.420126975 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505857576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 60) / 121][Stage 28:=============================>                        (66 + 55) / 121][Stage 28:===================================>                  (80 + 41) / 121][Stage 28:===========================================>         (100 + 21) / 121][Stage 28:==================================================>   (114 + 7) / 121][Stage 28:====================================================> (118 + 3) / 121]                                                                                [Stage 29:===========================>                          (63 + 59) / 122][Stage 29:==================================>                   (77 + 45) / 122][Stage 29:===========================================>          (98 + 24) / 122][Stage 29:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.355295071 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (61 + 60) / 121][Stage 30:=============================>                        (67 + 54) / 121][Stage 30:====================================>                 (81 + 40) / 121][Stage 30:=============================================>       (103 + 18) / 121][Stage 30:===================================================>  (115 + 6) / 121]                                                                                [Stage 31:===========================>                          (62 + 60) / 122][Stage 31:=================================>                    (75 + 47) / 122][Stage 31:========================================>             (92 + 30) / 122][Stage 31:================================================>    (112 + 10) / 122][Stage 31:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.275458674 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.641977698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (71 + 46) / 117][Stage 32:=======================================>              (85 + 32) / 117][Stage 32:=============================================>        (98 + 19) / 117][Stage 32:====================================================> (114 + 3) / 117]                                                                                [Stage 33:=================================>                    (73 + 45) / 118][Stage 33:=======================================>              (86 + 32) / 118][Stage 33:=============================================>       (101 + 17) / 118][Stage 33:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.054717258 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496909979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==========================>                           (60 + 61) / 121][Stage 34:=============================>                        (67 + 54) / 121][Stage 34:========================================>             (90 + 31) / 121][Stage 34:===============================================>     (109 + 12) / 121]                                                                                [Stage 35:===========================>                          (62 + 60) / 122][Stage 35:==============================>                       (68 + 54) / 122][Stage 35:=======================================>              (90 + 32) / 122][Stage 35:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.045893382 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505535915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 61) / 122][Stage 36:=============================>                        (67 + 55) / 122][Stage 36:==================================>                   (78 + 44) / 122][Stage 36:=============================================>       (105 + 17) / 122][Stage 36:=====================================================>(120 + 2) / 122][Stage 36:=====================================================>(121 + 1) / 122]                                                                                [Stage 37:===========================>                          (62 + 61) / 123][Stage 37:============================>                         (66 + 57) / 123][Stage 37:=====================================>                (86 + 37) / 123][Stage 37:===============================================>     (111 + 12) / 123][Stage 37:===================================================>  (118 + 5) / 123][Stage 37:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.486930793 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507542614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (62 + 60) / 122][Stage 38:=============================>                        (67 + 55) / 122][Stage 38:=====================================>                (85 + 37) / 122][Stage 38:============================================>        (103 + 19) / 122][Stage 38:=====================================================>(121 + 1) / 122]                                                                                [Stage 39:===========================>                          (62 + 61) / 123][Stage 39:===============================>                      (72 + 51) / 123][Stage 39:========================================>             (92 + 31) / 123][Stage 39:==============================================>      (107 + 16) / 123][Stage 39:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.18905026 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479482889 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (71 + 46) / 117][Stage 40:==================================>                   (74 + 43) / 117][Stage 40:========================================>             (87 + 30) / 117][Stage 40:==============================================>      (103 + 14) / 117][Stage 40:===================================================>  (112 + 5) / 117][Stage 40:=====================================================>(116 + 1) / 117]                                                                                [Stage 41:================================>                     (72 + 46) / 118][Stage 41:==================================>                   (76 + 42) / 118][Stage 41:==========================================>           (93 + 25) / 118][Stage 41:================================================>    (107 + 11) / 118]                                                                                Time elapsed: 3.067193988 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452813005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (66 + 49) / 115][Stage 42:===================================>                  (75 + 40) / 115][Stage 42:===========================================>          (92 + 23) / 115][Stage 42:==============================================>       (99 + 16) / 115][Stage 42:==================================================>   (107 + 8) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:===================================>                  (77 + 39) / 116][Stage 43:==========================================>           (92 + 24) / 116][Stage 43:===============================================>     (103 + 13) / 116][Stage 43:==================================================>   (109 + 7) / 116][Stage 43:===================================================>  (111 + 5) / 116][Stage 43:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.773143629 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488961284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 61) / 122][Stage 44:================================>                     (74 + 48) / 122][Stage 44:===========================================>         (100 + 22) / 122][Stage 44:=====================================================>(120 + 2) / 122]                                                                                [Stage 45:============================>                         (64 + 59) / 123][Stage 45:================================>                     (74 + 49) / 123][Stage 45:======================================>               (87 + 36) / 123][Stage 45:==================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.088566354 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465597456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==================================>                   (73 + 42) / 115][Stage 46:=========================================>            (88 + 27) / 115][Stage 46:==============================================>      (101 + 14) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:==================================>                   (74 + 42) / 116][Stage 47:==========================================>           (91 + 25) / 116][Stage 47:===============================================>     (104 + 12) / 116][Stage 47:===================================================>  (110 + 6) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.354100863 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447345487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (70 + 45) / 115][Stage 48:====================================>                 (78 + 37) / 115][Stage 48:===========================================>          (93 + 22) / 115][Stage 48:===============================================>     (104 + 11) / 115][Stage 48:===================================================>  (110 + 5) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:================================>                     (69 + 47) / 116][Stage 49:====================================>                 (78 + 38) / 116][Stage 49:=============================================>        (97 + 19) / 116][Stage 49:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.361238578 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422379341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:================================>                     (71 + 46) / 117][Stage 50:===================================>                  (76 + 41) / 117][Stage 50:========================================>             (87 + 30) / 117][Stage 50:================================================>    (106 + 11) / 117][Stage 50:===================================================>  (112 + 5) / 117]                                                                                [Stage 51:==================================>                   (75 + 43) / 118][Stage 51:========================================>             (88 + 30) / 118][Stage 51:=============================================>       (101 + 17) / 118][Stage 51:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.166050928 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (71 + 46) / 117][Stage 52:=======================================>              (85 + 32) / 117][Stage 52:================================================>    (107 + 10) / 117][Stage 52:====================================================> (113 + 4) / 117][Stage 52:=====================================================>(116 + 1) / 117]                                                                                [Stage 53:================================>                     (72 + 46) / 118][Stage 53:==================================>                   (76 + 42) / 118][Stage 53:=======================================>              (87 + 31) / 118][Stage 53:==============================================>      (104 + 14) / 118]                                                                                Time elapsed: 3.060775627 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472142693 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==========================>                           (60 + 62) / 122][Stage 54:============================>                         (65 + 57) / 122][Stage 54:==================================>                   (79 + 43) / 122][Stage 54:==============================================>      (106 + 16) / 122][Stage 54:==================================================>   (113 + 9) / 122][Stage 54:===================================================>  (117 + 5) / 122]                                                                                [Stage 55:============================>                         (64 + 59) / 123][Stage 55:=================================>                    (76 + 47) / 123][Stage 55:=======================================>              (90 + 33) / 123][Stage 55:==================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.539951694 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395936736 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=======================================>              (84 + 31) / 115][Stage 56:=============================================>        (96 + 19) / 115][Stage 56:===================================================>  (109 + 6) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:======================================>               (82 + 34) / 116][Stage 57:==========================================>           (92 + 24) / 116][Stage 57:===============================================>     (103 + 13) / 116][Stage 57:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.710044224 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394884996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===================================>                  (75 + 39) / 114][Stage 58:========================================>             (86 + 28) / 114][Stage 58:============================================>         (94 + 20) / 114][Stage 58:==============================================>      (101 + 13) / 114][Stage 58:===================================================>  (108 + 6) / 114][Stage 58:=====================================================>(113 + 1) / 114]                                                                                [Stage 59:=====================================>                (80 + 35) / 115][Stage 59:==========================================>           (91 + 24) / 115][Stage 59:==============================================>      (100 + 15) / 115][Stage 59:==================================================>   (107 + 8) / 115][Stage 59:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.405848769 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440360171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:====================================>                 (78 + 36) / 114][Stage 60:===========================================>          (92 + 22) / 114][Stage 60:==============================================>      (100 + 14) / 114][Stage 60:===================================================>  (108 + 6) / 114][Stage 60:====================================================> (110 + 4) / 114]                                                                                [Stage 61:=====================================>                (79 + 36) / 115][Stage 61:============================================>         (94 + 21) / 115][Stage 61:================================================>    (105 + 10) / 115][Stage 61:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.347471281 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=================================>                    (71 + 43) / 114][Stage 62:======================================>               (81 + 33) / 114][Stage 62:============================================>         (93 + 21) / 114][Stage 62:=================================================>    (105 + 9) / 114]                                                                                [Stage 63:====================================>                 (77 + 38) / 115][Stage 63:==========================================>           (91 + 24) / 115][Stage 63:==============================================>      (100 + 15) / 115][Stage 63:===================================================>  (109 + 6) / 115][Stage 63:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.000564377 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435861933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==========================>                           (60 + 61) / 121][Stage 64:==============================>                       (68 + 53) / 121][Stage 64:==================================>                   (78 + 43) / 121][Stage 64:============================================>        (101 + 20) / 121][Stage 64:====================================================> (117 + 4) / 121]                                                                                [Stage 65:============================>                         (64 + 58) / 122][Stage 65:===================================>                  (81 + 41) / 122][Stage 65:============================================>        (103 + 19) / 122][Stage 65:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.027084361 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447509446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (61 + 61) / 122][Stage 66:===========================>                          (63 + 59) / 122][Stage 66:================================>                     (74 + 48) / 122][Stage 66:==========================================>           (97 + 25) / 122][Stage 66:==================================================>   (114 + 8) / 122]                                                                                [Stage 67:============================>                         (64 + 59) / 123][Stage 67:================================>                     (74 + 49) / 123][Stage 67:===========================================>         (101 + 22) / 123][Stage 67:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.110941173 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (61 + 61) / 122][Stage 68:===============================>                      (72 + 50) / 122][Stage 68:=========================================>            (93 + 29) / 122][Stage 68:===============================================>     (109 + 13) / 122]                                                                                [Stage 69:===========================>                          (62 + 61) / 123][Stage 69:==============================>                       (70 + 53) / 123][Stage 69:==========================================>           (96 + 27) / 123][Stage 69:===================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.128304183 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359961375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (79 + 36) / 115][Stage 70:======================================>               (81 + 34) / 115][Stage 70:==========================================>           (91 + 24) / 115][Stage 70:==================================================>   (108 + 7) / 115]                                                                                [Stage 71:=======================================>              (85 + 31) / 116][Stage 71:=============================================>        (98 + 18) / 116][Stage 71:====================================================> (112 + 4) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.699363766 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=======================================>              (84 + 31) / 115][Stage 72:=============================================>        (96 + 19) / 115][Stage 72:==================================================>   (108 + 7) / 115]                                                                                [Stage 73:=======================================>              (85 + 31) / 116][Stage 73:==============================================>       (99 + 17) / 116][Stage 73:==================================================>   (108 + 8) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.825925033 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (82 + 33) / 115][Stage 74:=========================================>            (88 + 27) / 115][Stage 74:==============================================>      (101 + 14) / 115][Stage 74:=====================================================>(114 + 1) / 115]                                                                                [Stage 75:======================================>               (83 + 33) / 116][Stage 75:=============================================>        (97 + 19) / 116][Stage 75:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.867464009 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462519537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (61 + 61) / 122][Stage 76:===============================>                      (72 + 50) / 122][Stage 76:=========================================>            (93 + 29) / 122][Stage 76:===============================================>     (110 + 12) / 122]                                                                                [Stage 77:===========================>                          (63 + 60) / 123][Stage 77:===============================>                      (71 + 52) / 123][Stage 77:=======================================>              (91 + 32) / 123][Stage 77:================================================>    (112 + 11) / 123][Stage 77:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.240931176 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 249 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 249 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40304073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===================================>                  (76 + 39) / 115][Stage 78:========================================>             (87 + 28) / 115][Stage 78:==============================================>       (99 + 16) / 115][Stage 78:====================================================> (111 + 4) / 115]                                                                                [Stage 79:===================================>                  (76 + 40) / 116][Stage 79:========================================>             (87 + 29) / 116][Stage 79:============================================>         (95 + 21) / 116][Stage 79:====================================================> (113 + 3) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.071980691 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38600538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:====================================>                 (78 + 36) / 114][Stage 80:=============================================>        (95 + 19) / 114][Stage 80:===============================================>     (102 + 12) / 114][Stage 80:====================================================> (110 + 4) / 114]                                                                                [Stage 81:===================================>                  (76 + 39) / 115][Stage 81:========================================>             (87 + 28) / 115][Stage 81:================================================>    (105 + 10) / 115][Stage 81:====================================================> (111 + 4) / 115][Stage 81:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.198087538 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390256958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (70 + 44) / 114][Stage 82:=====================================>                (79 + 35) / 114][Stage 82:===========================================>          (92 + 22) / 114][Stage 82:==================================================>   (106 + 8) / 114][Stage 82:===================================================>  (109 + 5) / 114][Stage 82:=====================================================>(113 + 1) / 114]                                                                                [Stage 83:==================================>                   (74 + 41) / 115][Stage 83:==========================================>           (91 + 24) / 115][Stage 83:==============================================>      (100 + 15) / 115][Stage 83:===============================================>     (104 + 11) / 115][Stage 83:===================================================>  (109 + 6) / 115][Stage 83:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.399010523 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40495029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (71 + 43) / 114][Stage 84:=====================================>                (79 + 35) / 114][Stage 84:==========================================>           (90 + 24) / 114][Stage 84:==============================================>      (100 + 14) / 114][Stage 84:===================================================>  (108 + 6) / 114][Stage 84:======================================================(114 + 0) / 114]                                                                                [Stage 85:=====================================>                (79 + 36) / 115][Stage 85:===========================================>          (93 + 22) / 115][Stage 85:=================================================>    (106 + 9) / 115][Stage 85:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.025789335 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418756802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===============================>                      (67 + 48) / 115][Stage 86:==================================>                   (74 + 41) / 115][Stage 86:=======================================>              (85 + 30) / 115][Stage 86:===========================================>          (93 + 22) / 115][Stage 86:=====================================================>(113 + 2) / 115]                                                                                [Stage 87:===============================>                      (68 + 48) / 116][Stage 87:=====================================>                (80 + 36) / 116][Stage 87:========================================>             (88 + 28) / 116][Stage 87:==============================================>      (101 + 15) / 116][Stage 87:=====================================================>(114 + 2) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.517362454 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394859874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:================================>                     (71 + 46) / 117][Stage 88:====================================>                 (80 + 37) / 117][Stage 88:==============================================>      (102 + 15) / 117][Stage 88:===================================================>  (111 + 6) / 117][Stage 88:=====================================================>(116 + 1) / 117]                                                                                [Stage 89:================================>                     (72 + 46) / 118][Stage 89:==================================>                   (76 + 42) / 118][Stage 89:========================================>             (89 + 29) / 118][Stage 89:==============================================>      (104 + 14) / 118][Stage 89:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.284867566 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390215317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (71 + 44) / 115][Stage 90:====================================>                 (77 + 38) / 115][Stage 90:==========================================>           (91 + 24) / 115][Stage 90:===============================================>     (103 + 12) / 115][Stage 90:====================================================> (112 + 3) / 115]                                                                                [Stage 91:====================================>                 (78 + 38) / 116][Stage 91:==========================================>           (92 + 24) / 116][Stage 91:===============================================>     (105 + 11) / 116][Stage 91:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.025082893 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426592776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:============================>                         (63 + 58) / 121][Stage 92:==================================>                   (77 + 44) / 121][Stage 92:=============================================>       (103 + 18) / 121][Stage 92:===================================================>  (116 + 5) / 121]                                                                                [Stage 93:============================>                         (65 + 57) / 122][Stage 93:===================================>                  (80 + 42) / 122][Stage 93:===========================================>         (101 + 21) / 122][Stage 93:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 2.967228606 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (62 + 59) / 121][Stage 94:==================================>                   (77 + 44) / 121][Stage 94:===========================================>          (97 + 24) / 121][Stage 94:===================================================>  (116 + 5) / 121]                                                                                [Stage 95:=============================>                        (67 + 55) / 122][Stage 95:===================================>                  (81 + 41) / 122][Stage 95:=============================================>       (105 + 17) / 122][Stage 95:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 2.951273274 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355157477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (83 + 32) / 115][Stage 96:==============================================>       (98 + 17) / 115][Stage 96:====================================================> (112 + 3) / 115]                                                                                [Stage 97:=========================================>            (89 + 27) / 116][Stage 97:==============================================>      (101 + 15) / 116][Stage 97:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.521812119 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387978978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=================================>                    (72 + 45) / 117][Stage 98:===================================>                  (76 + 41) / 117][Stage 98:===========================================>          (95 + 22) / 117][Stage 98:==================================================>   (109 + 8) / 117]                                                                                [Stage 99:=================================>                    (73 + 45) / 118][Stage 99:=====================================>                (81 + 37) / 118][Stage 99:============================================>         (97 + 21) / 118][Stage 99:==================================================>   (111 + 7) / 118][Stage 99:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.993489128 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350862999 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=====================================>               (81 + 34) / 115][Stage 100:=======================================>             (86 + 29) / 115][Stage 100:===========================================>         (95 + 20) / 115][Stage 100:=================================================>   (108 + 7) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:=====================================>               (81 + 35) / 116][Stage 101:=========================================>           (91 + 25) / 116][Stage 101:================================================>    (107 + 9) / 116][Stage 101:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.79714798 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462952395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 62) / 122][Stage 102:===========================>                         (63 + 59) / 122][Stage 102:=================================>                   (77 + 45) / 122][Stage 102:===========================================>        (102 + 20) / 122][Stage 102:===================================================> (119 + 3) / 122]                                                                                [Stage 103:===========================>                         (64 + 59) / 123][Stage 103:==================================>                  (79 + 44) / 123][Stage 103:=============================================>      (108 + 15) / 123][Stage 103:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 2.984107533 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.548529666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 44) / 115][Stage 104:===================================>                 (78 + 37) / 115][Stage 104:==========================================>          (92 + 23) / 115][Stage 104:===============================================>    (104 + 11) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:================================>                    (72 + 44) / 116][Stage 105:======================================>              (85 + 31) / 116][Stage 105:============================================>        (98 + 18) / 116][Stage 105:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.004263761 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399480891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==================================>                  (74 + 41) / 115][Stage 106:======================================>              (84 + 31) / 115][Stage 106:=============================================>      (100 + 15) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:===============================>                     (70 + 46) / 116][Stage 107:======================================>              (85 + 31) / 116][Stage 107:===========================================>         (96 + 20) / 116][Stage 107:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.645941345 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432431732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (61 + 61) / 122][Stage 108:===============================>                     (73 + 49) / 122][Stage 108:========================================>            (93 + 29) / 122][Stage 108:==================================================>  (117 + 5) / 122]                                                                                [Stage 109:===========================>                         (63 + 60) / 123][Stage 109:==============================>                      (70 + 53) / 123][Stage 109:=======================================>             (92 + 31) / 123][Stage 109:=================================================>   (114 + 9) / 123][Stage 109:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.092936548 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390249616 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (71 + 44) / 115][Stage 110:=====================================>               (81 + 34) / 115][Stage 110:============================================>        (96 + 19) / 115][Stage 110:=============================================>      (101 + 14) / 115][Stage 110:===================================================> (111 + 4) / 115]                                                                                [Stage 111:===================================>                 (78 + 38) / 116][Stage 111:=======================================>             (87 + 29) / 116][Stage 111:==============================================>     (104 + 12) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.191258471 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421761939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 61) / 122][Stage 112:=============================>                       (68 + 54) / 122][Stage 112:====================================>                (85 + 37) / 122][Stage 112:=================================================>   (115 + 7) / 122][Stage 112:====================================================>(121 + 1) / 122]                                                                                [Stage 113:==========================>                          (62 + 61) / 123][Stage 113:=============================>                       (68 + 55) / 123][Stage 113:=====================================>               (88 + 35) / 123][Stage 113:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 2.94802879 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404444548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:============================>                        (60 + 53) / 113][Stage 114:=================================>                   (72 + 41) / 113][Stage 114:=========================================>           (88 + 25) / 113][Stage 114:===============================================>    (103 + 10) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:===========================>                         (60 + 54) / 114][Stage 115:===============================>                     (68 + 46) / 114][Stage 115:======================================>              (83 + 31) / 114][Stage 115:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.992386384 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426987795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 61) / 122][Stage 116:===========================>                         (64 + 58) / 122][Stage 116:================================>                    (75 + 47) / 122][Stage 116:===========================================>        (102 + 20) / 122][Stage 116:===================================================> (119 + 3) / 122]                                                                                [Stage 117:=============================>                       (68 + 55) / 123][Stage 117:====================================>                (84 + 39) / 123][Stage 117:===========================================>        (102 + 21) / 123][Stage 117:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.101756701 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437605509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (61 + 60) / 121][Stage 118:============================>                        (66 + 55) / 121][Stage 118:==================================>                  (78 + 43) / 121][Stage 118:==========================================>          (96 + 25) / 121][Stage 118:==================================================>  (115 + 6) / 121]                                                                                [Stage 119:==========================>                          (62 + 60) / 122][Stage 119:===============================>                     (72 + 50) / 122][Stage 119:=======================================>             (92 + 30) / 122][Stage 119:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.03108968 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395614592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===============================>                     (69 + 46) / 115][Stage 120:====================================>                (80 + 35) / 115][Stage 120:===========================================>         (94 + 21) / 115][Stage 120:=================================================>   (107 + 8) / 115]                                                                                [Stage 121:===================================>                 (78 + 38) / 116][Stage 121:==========================================>          (94 + 22) / 116][Stage 121:=================================================>   (108 + 8) / 116][Stage 121:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.058694744 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395309033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (73 + 41) / 114][Stage 122:=======================================>             (86 + 28) / 114][Stage 122:==========================================>          (92 + 22) / 114][Stage 122:==============================================>      (99 + 15) / 114][Stage 122:==================================================>  (108 + 6) / 114][Stage 122:==================================================>  (109 + 5) / 114][Stage 122:===================================================> (111 + 3) / 114]                                                                                [Stage 123:======================================>              (84 + 31) / 115][Stage 123:=========================================>           (91 + 24) / 115][Stage 123:==============================================>     (103 + 12) / 115][Stage 123:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.601255032 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395402073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (71 + 46) / 117][Stage 124:==================================>                  (76 + 41) / 117][Stage 124:======================================>              (86 + 31) / 117][Stage 124:============================================>       (101 + 16) / 117][Stage 124:=================================================>   (110 + 7) / 117]                                                                                [Stage 125:================================>                    (72 + 46) / 118][Stage 125:=================================>                   (75 + 43) / 118][Stage 125:=======================================>             (89 + 29) / 118][Stage 125:============================================>       (101 + 17) / 118][Stage 125:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.27159968 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365887089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:======================================>              (84 + 31) / 115][Stage 126:===========================================>         (95 + 20) / 115][Stage 126:===================================================> (111 + 4) / 115]                                                                                [Stage 127:======================================>              (84 + 32) / 116][Stage 127:============================================>        (97 + 19) / 116][Stage 127:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.5385937 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (80 + 35) / 115][Stage 128:========================================>            (88 + 27) / 115][Stage 128:==============================================>     (102 + 13) / 115][Stage 128:===================================================> (112 + 3) / 115]                                                                                [Stage 129:=======================================>             (87 + 29) / 116][Stage 129:=============================================>      (102 + 14) / 116][Stage 129:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.629417108 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372965285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (70 + 44) / 114][Stage 130:======================================>              (82 + 32) / 114][Stage 130:==============================================>      (99 + 15) / 114][Stage 130:=================================================>   (107 + 7) / 114][Stage 130:===================================================> (110 + 4) / 114][Stage 130:====================================================>(113 + 1) / 114]                                                                                [Stage 131:===================================>                 (76 + 39) / 115][Stage 131:========================================>            (88 + 27) / 115][Stage 131:==============================================>     (103 + 12) / 115][Stage 131:================================================>    (106 + 9) / 115][Stage 131:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.384562393 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36534495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 46) / 117][Stage 132:===================================>                 (78 + 39) / 117][Stage 132:=========================================>           (91 + 26) / 117][Stage 132:===============================================>    (106 + 11) / 117][Stage 132:====================================================>(116 + 1) / 117]                                                                                [Stage 133:================================>                    (72 + 46) / 118][Stage 133:==================================>                  (76 + 42) / 118][Stage 133:=====================================>               (84 + 34) / 118][Stage 133:==========================================>          (95 + 23) / 118][Stage 133:================================================>    (109 + 9) / 118]                                                                                Time elapsed: 3.269490479 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373678425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (71 + 46) / 117][Stage 134:=================================>                   (73 + 44) / 117][Stage 134:======================================>              (86 + 31) / 117][Stage 134:===============================================>    (107 + 10) / 117]                                                                                [Stage 135:================================>                    (72 + 46) / 118][Stage 135:====================================>                (81 + 37) / 118][Stage 135:==============================================>     (105 + 13) / 118][Stage 135:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 2.93512323 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407844445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 61) / 122][Stage 136:===========================>                         (63 + 59) / 122][Stage 136:=================================>                   (78 + 44) / 122][Stage 136:==========================================>         (100 + 22) / 122][Stage 136:===================================================> (119 + 3) / 122]                                                                                [Stage 137:===========================>                         (63 + 60) / 123][Stage 137:===============================>                     (74 + 49) / 123][Stage 137:==========================================>          (98 + 25) / 123][Stage 137:==================================================>  (118 + 5) / 123][Stage 137:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.137689973 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 61) / 122][Stage 138:============================>                        (66 + 56) / 122][Stage 138:===================================>                 (82 + 40) / 122][Stage 138:=============================================>      (106 + 16) / 122][Stage 138:===================================================> (119 + 3) / 122]                                                                                [Stage 139:==========================>                          (62 + 61) / 123][Stage 139:=============================>                       (68 + 55) / 123][Stage 139:=====================================>               (86 + 37) / 123][Stage 139:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 2.855187755 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357202294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (81 + 33) / 114][Stage 140:=========================================>           (90 + 24) / 114][Stage 140:============================================>        (95 + 19) / 114][Stage 140:==================================================>  (108 + 6) / 114][Stage 140:====================================================>(113 + 1) / 114]                                                                                [Stage 141:====================================>                (79 + 36) / 115][Stage 141:=========================================>           (90 + 25) / 115][Stage 141:=============================================>       (99 + 16) / 115][Stage 141:=================================================>   (107 + 8) / 115][Stage 141:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.144133047 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375427184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (72 + 43) / 115][Stage 142:=======================================>             (86 + 29) / 115][Stage 142:=============================================>      (100 + 15) / 115][Stage 142:===================================================> (112 + 3) / 115]                                                                                [Stage 143:===================================>                 (77 + 39) / 116][Stage 143:==========================================>          (93 + 23) / 116][Stage 143:==============================================>     (104 + 12) / 116][Stage 143:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.872781504 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405023107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (63 + 59) / 122][Stage 144:=================================>                   (76 + 46) / 122][Stage 144:===========================================>        (101 + 21) / 122][Stage 144:==================================================>  (117 + 5) / 122]                                                                                [Stage 145:==========================>                          (62 + 61) / 123][Stage 145:===============================>                     (72 + 51) / 123][Stage 145:=====================================>               (88 + 35) / 123][Stage 145:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 2.927094792 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377377203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (73 + 44) / 117][Stage 146:========================================>            (90 + 27) / 117][Stage 146:==============================================>     (105 + 12) / 117]                                                                                [Stage 147:================================>                    (72 + 46) / 118][Stage 147:======================================>              (86 + 32) / 118][Stage 147:=============================================>      (103 + 15) / 118][Stage 147:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.834787284 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343635182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (83 + 32) / 115][Stage 148:===========================================>         (95 + 20) / 115][Stage 148:==================================================>  (110 + 5) / 115]                                                                                [Stage 149:========================================>            (89 + 27) / 116][Stage 149:===============================================>    (106 + 10) / 116][Stage 149:===================================================> (113 + 3) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.626111724 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339835724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (80 + 35) / 115][Stage 150:=====================================>               (82 + 33) / 115][Stage 150:============================================>        (96 + 19) / 115][Stage 150:===============================================>    (105 + 10) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:========================================>            (88 + 28) / 116][Stage 151:============================================>        (98 + 18) / 116][Stage 151:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.850477414 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377446802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 45) / 117][Stage 152:==================================>                  (77 + 40) / 117][Stage 152:=======================================>             (87 + 30) / 117][Stage 152:==============================================>     (105 + 12) / 117]                                                                                [Stage 153:================================>                    (73 + 45) / 118][Stage 153:====================================>                (81 + 37) / 118][Stage 153:============================================>        (98 + 20) / 118][Stage 153:=================================================>   (111 + 7) / 118][Stage 153:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.033961708 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376966502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==============================>                      (67 + 48) / 115][Stage 154:===================================>                 (78 + 37) / 115][Stage 154:==========================================>          (92 + 23) / 115][Stage 154:================================================>    (106 + 9) / 115]                                                                                [Stage 155:=================================>                   (74 + 42) / 116][Stage 155:======================================>              (85 + 31) / 116][Stage 155:=============================================>      (102 + 14) / 116][Stage 155:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.724665466 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385046138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:============================>                        (61 + 52) / 113][Stage 156:====================================>                (78 + 35) / 113][Stage 156:==============================================>      (99 + 14) / 113][Stage 156:===================================================> (109 + 4) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:===========================>                         (60 + 54) / 114][Stage 157:===============================>                     (67 + 47) / 114][Stage 157:=======================================>             (85 + 29) / 114][Stage 157:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.030632748 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:============================>                        (60 + 53) / 113][Stage 158:==================================>                  (73 + 40) / 113][Stage 158:=============================================>       (96 + 17) / 113][Stage 158:===================================================> (109 + 4) / 113]                                                                                [Stage 159:=============================>                       (64 + 50) / 114][Stage 159:==================================>                  (75 + 39) / 114][Stage 159:==============================================>      (99 + 15) / 114][Stage 159:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.971098922 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408397704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 60) / 121][Stage 160:===============================>                     (73 + 48) / 121][Stage 160:========================================>            (93 + 28) / 121][Stage 160:===================================================> (117 + 4) / 121]                                                                                [Stage 161:===========================>                         (63 + 59) / 122][Stage 161:================================>                    (74 + 48) / 122][Stage 161:===========================================>        (101 + 21) / 122][Stage 161:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 2.997641186 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376373962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=================================>                   (72 + 42) / 114][Stage 162:======================================>              (82 + 32) / 114][Stage 162:=============================================>       (97 + 17) / 114][Stage 162:================================================>    (105 + 9) / 114][Stage 162:===================================================> (111 + 3) / 114]                                                                                [Stage 163:===================================>                 (77 + 38) / 115][Stage 163:========================================>            (87 + 28) / 115][Stage 163:=============================================>      (100 + 15) / 115][Stage 163:==================================================>  (109 + 6) / 115][Stage 163:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.205297585 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358082673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (71 + 43) / 114][Stage 164:=====================================>               (81 + 33) / 114][Stage 164:============================================>        (95 + 19) / 114][Stage 164:==================================================>  (108 + 6) / 114][Stage 164:===================================================> (111 + 3) / 114]                                                                                [Stage 165:====================================>                (80 + 35) / 115][Stage 165:===========================================>         (94 + 21) / 115][Stage 165:===============================================>    (104 + 11) / 115][Stage 165:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.212109921 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39829503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 60) / 121][Stage 166:=============================>                       (67 + 54) / 121][Stage 166:======================================>              (87 + 34) / 121][Stage 166:==================================================>  (116 + 5) / 121]                                                                                [Stage 167:=============================>                       (67 + 55) / 122][Stage 167:====================================>                (83 + 39) / 122][Stage 167:===========================================>        (102 + 20) / 122][Stage 167:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 2.885758549 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (63 + 58) / 121][Stage 168:===============================>                     (72 + 49) / 121][Stage 168:==========================================>          (97 + 24) / 121][Stage 168:=================================================>   (112 + 9) / 121]                                                                                [Stage 169:===========================>                         (63 + 59) / 122][Stage 169:================================>                    (75 + 47) / 122][Stage 169:===========================================>        (101 + 21) / 122][Stage 169:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.902844198 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:============================>                        (65 + 56) / 121][Stage 170:====================================>                (84 + 37) / 121][Stage 170:=============================================>      (107 + 14) / 121]                                                                                [Stage 171:==========================>                          (62 + 60) / 122][Stage 171:===============================>                     (73 + 49) / 122][Stage 171:======================================>              (88 + 34) / 122][Stage 171:==============================================>     (108 + 14) / 122]                                                                                Time elapsed: 2.935514359 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403708606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 61) / 122][Stage 172:===========================>                         (64 + 58) / 122][Stage 172:===================================>                 (82 + 40) / 122][Stage 172:============================================>       (105 + 17) / 122][Stage 172:==================================================>  (117 + 5) / 122]                                                                                [Stage 173:==========================>                          (62 + 61) / 123][Stage 173:============================>                        (65 + 58) / 123][Stage 173:=================================>                   (78 + 45) / 123][Stage 173:===========================================>        (102 + 21) / 123][Stage 173:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 2.986888949 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347519318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=======================================>             (86 + 29) / 115][Stage 174:==========================================>          (93 + 22) / 115][Stage 174:==================================================>  (109 + 6) / 115]                                                                                [Stage 175:========================================>            (89 + 27) / 116][Stage 175:===========================================>         (95 + 21) / 116][Stage 175:=================================================>   (109 + 7) / 116][Stage 175:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.6551779 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.584977261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (61 + 60) / 121][Stage 176:=============================>                       (67 + 54) / 121][Stage 176:======================================>              (88 + 33) / 121][Stage 176:==============================================>     (108 + 13) / 121][Stage 176:===================================================> (118 + 3) / 121]                                                                                [Stage 177:=============================>                       (67 + 55) / 122][Stage 177:=================================>                   (76 + 46) / 122][Stage 177:========================================>            (94 + 28) / 122][Stage 177:=================================================>   (115 + 7) / 122][Stage 177:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.11765208 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437134283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (62 + 60) / 122][Stage 178:===============================>                     (73 + 49) / 122][Stage 178:=======================================>             (92 + 30) / 122][Stage 178:=================================================>   (115 + 7) / 122][Stage 178:====================================================>(120 + 2) / 122]                                                                                [Stage 179:==========================>                          (62 + 61) / 123][Stage 179:==============================>                      (70 + 53) / 123][Stage 179:===================================>                 (83 + 40) / 123][Stage 179:==============================================>     (110 + 13) / 123][Stage 179:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.148411347 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395334522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 60) / 121][Stage 180:==============================>                      (69 + 52) / 121][Stage 180:======================================>              (87 + 34) / 121][Stage 180:===============================================>    (111 + 10) / 121][Stage 180:====================================================>(120 + 1) / 121]                                                                                [Stage 181:==========================>                          (62 + 60) / 122][Stage 181:============================>                        (66 + 56) / 122][Stage 181:====================================>                (85 + 37) / 122][Stage 181:==============================================>     (109 + 13) / 122][Stage 181:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.109177988 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370675089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===============================>                     (69 + 46) / 115][Stage 182:====================================>                (80 + 35) / 115][Stage 182:==========================================>          (92 + 23) / 115][Stage 182:=============================================>      (100 + 15) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:=================================>                   (74 + 42) / 116][Stage 183:=========================================>           (90 + 26) / 116][Stage 183:==============================================>     (104 + 12) / 116][Stage 183:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.103954002 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361439204 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (71 + 46) / 117][Stage 184:====================================>                (80 + 37) / 117][Stage 184:==========================================>          (94 + 23) / 117][Stage 184:=================================================>   (110 + 7) / 117]                                                                                [Stage 185:=================================>                   (74 + 44) / 118][Stage 185:=======================================>             (89 + 29) / 118][Stage 185:=============================================>      (104 + 14) / 118][Stage 185:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.011126852 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365421966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (71 + 46) / 117][Stage 186:===================================>                 (79 + 38) / 117][Stage 186:============================================>        (99 + 18) / 117][Stage 186:===================================================> (114 + 3) / 117]                                                                                [Stage 187:================================>                    (72 + 46) / 118][Stage 187:==================================>                  (76 + 42) / 118][Stage 187:========================================>            (91 + 27) / 118][Stage 187:=================================================>   (110 + 8) / 118]                                                                                Time elapsed: 2.715564599 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364546005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (73 + 44) / 117][Stage 188:=====================================>               (83 + 34) / 117][Stage 188:==============================================>     (104 + 13) / 117][Stage 188:====================================================>(116 + 1) / 117]                                                                                [Stage 189:================================>                    (72 + 46) / 118][Stage 189:===================================>                 (80 + 38) / 118][Stage 189:========================================>            (90 + 28) / 118][Stage 189:==================================================>  (112 + 6) / 118][Stage 189:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.937818189 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397062501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (61 + 60) / 121][Stage 190:================================>                    (74 + 47) / 121][Stage 190:===========================================>         (99 + 22) / 121][Stage 190:==================================================>  (115 + 6) / 121]                                                                                [Stage 191:==========================>                          (61 + 61) / 122][Stage 191:=============================>                       (67 + 55) / 122][Stage 191:====================================>                (85 + 37) / 122][Stage 191:==============================================>     (110 + 12) / 122]                                                                                Time elapsed: 2.829270371 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363103544 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (71 + 46) / 117][Stage 192:==================================>                  (77 + 40) / 117][Stage 192:===========================================>         (95 + 22) / 117][Stage 192:==================================================>  (111 + 6) / 117][Stage 192:====================================================>(116 + 1) / 117]                                                                                [Stage 193:================================>                    (72 + 46) / 118][Stage 193:=====================================>               (83 + 35) / 118][Stage 193:============================================>        (98 + 20) / 118][Stage 193:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.861704405 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371695608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===============================>                     (68 + 47) / 115][Stage 194:==================================>                  (75 + 40) / 115][Stage 194:==========================================>          (92 + 23) / 115][Stage 194:=================================================>   (108 + 7) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:==============================>                      (67 + 49) / 116][Stage 195:=================================>                   (73 + 43) / 116][Stage 195:========================================>            (88 + 28) / 116][Stage 195:============================================>       (100 + 16) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.179445422 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383378773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:====================================>                (79 + 35) / 114][Stage 196:========================================>            (88 + 26) / 114][Stage 196:==============================================>      (99 + 15) / 114][Stage 196:================================================>    (105 + 9) / 114][Stage 196:====================================================>(112 + 2) / 114]                                                                                [Stage 197:======================================>              (84 + 31) / 115][Stage 197:============================================>        (97 + 18) / 115][Stage 197:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.835753266 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387074934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (71 + 46) / 117][Stage 198:===================================>                 (79 + 38) / 117][Stage 198:=========================================>           (91 + 26) / 117][Stage 198:=================================================>   (109 + 8) / 117][Stage 198:====================================================>(116 + 1) / 117]                                                                                [Stage 199:================================>                    (72 + 46) / 118][Stage 199:==================================>                  (76 + 42) / 118][Stage 199:========================================>            (91 + 27) / 118][Stage 199:============================================>        (98 + 20) / 118][Stage 199:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.208008831 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370198886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=================================>                   (73 + 42) / 115][Stage 200:========================================>            (88 + 27) / 115][Stage 200:============================================>        (97 + 18) / 115][Stage 200:==================================================>  (109 + 6) / 115]                                                                                [Stage 201:=================================>                   (74 + 42) / 116][Stage 201:========================================>            (88 + 28) / 116][Stage 201:=============================================>      (101 + 15) / 116][Stage 201:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.83434772 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m47.668s
user	11m21.684s
sys	0m28.376s
