Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 21:54:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:54:51 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:54:51 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:54:52 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 21:54:54 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:55:04 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529215454-0687).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.396237113 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=============>                                         (29 + 86) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:=====================================================> (111 + 4) / 115]                                                                                [Stage 1:===========================>                           (59 + 57) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.170666795 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.804197467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:========================>                              (51 + 64) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:=================================>                     (69 + 46) / 115][Stage 2:=================================>                     (71 + 44) / 115][Stage 2:===================================>                   (75 + 40) / 115][Stage 2:========================================>              (85 + 30) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:===================================================>   (108 + 7) / 115][Stage 2:======================================================>(113 + 2) / 115]                                                                                [Stage 3:==============================>                        (65 + 51) / 116][Stage 3:===============================>                       (66 + 50) / 116][Stage 3:================================>                      (68 + 48) / 116][Stage 3:====================================>                  (78 + 38) / 116][Stage 3:========================================>              (86 + 30) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:=================================================>    (106 + 10) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:====================================================>  (111 + 5) / 116][Stage 3:=====================================================> (112 + 4) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.024473774 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.717548789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=========================>                             (55 + 66) / 121][Stage 4:=========================>                             (57 + 64) / 121][Stage 4:=============================>                         (64 + 57) / 121][Stage 4:================================>                      (72 + 49) / 121][Stage 4:===================================>                   (79 + 42) / 121][Stage 4:======================================>                (85 + 36) / 121][Stage 4:=============================================>        (101 + 20) / 121][Stage 4:=====================================================> (117 + 4) / 121]                                                                                [Stage 5:===========================>                           (62 + 60) / 122][Stage 5:==============================>                        (68 + 54) / 122][Stage 5:====================================>                  (80 + 42) / 122][Stage 5:========================================>              (90 + 32) / 122][Stage 5:==============================================>       (106 + 16) / 122][Stage 5:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.184608096 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.55610426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (70 + 44) / 114][Stage 6:===================================>                   (73 + 41) / 114][Stage 6:========================================>              (83 + 31) / 114][Stage 6:==============================================>        (96 + 18) / 114][Stage 6:==================================================>    (105 + 9) / 114][Stage 6:=====================================================> (111 + 3) / 114]                                                                                [Stage 7:====================================>                  (77 + 38) / 115][Stage 7:=======================================>               (83 + 32) / 115][Stage 7:===============================================>      (101 + 14) / 115][Stage 7:==================================================>    (106 + 9) / 115][Stage 7:====================================================>  (109 + 6) / 115][Stage 7:=====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.717965428 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.622213791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===============================>                       (66 + 49) / 115][Stage 8:=================================>                     (70 + 45) / 115][Stage 8:=====================================>                 (78 + 37) / 115][Stage 8:=========================================>             (86 + 29) / 115][Stage 8:============================================>          (93 + 22) / 115][Stage 8:===============================================>      (101 + 14) / 115][Stage 8:====================================================>  (109 + 6) / 115][Stage 8:======================================================>(113 + 2) / 115]                                                                                [Stage 9:===================================>                   (75 + 41) / 116][Stage 9:=======================================>               (84 + 32) / 116][Stage 9:============================================>          (93 + 23) / 116][Stage 9:==============================================>        (99 + 17) / 116][Stage 9:====================================================>  (111 + 5) / 116][Stage 9:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.057170666 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==============================>                       (65 + 50) / 115][Stage 10:================================>                     (70 + 45) / 115][Stage 10:====================================>                 (78 + 37) / 115][Stage 10:======================================>               (81 + 34) / 115][Stage 10:=========================================>            (89 + 26) / 115][Stage 10:=============================================>        (96 + 19) / 115][Stage 10:===============================================>     (103 + 12) / 115][Stage 10:==================================================>   (108 + 7) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:===============================>                      (68 + 48) / 116][Stage 11:====================================>                 (79 + 37) / 116][Stage 11:========================================>             (88 + 28) / 116][Stage 11:============================================>         (95 + 21) / 116][Stage 11:==============================================>      (102 + 14) / 116][Stage 11:===================================================>  (110 + 6) / 116][Stage 11:=====================================================>(114 + 2) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.60910242 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526348213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===============================>                      (67 + 48) / 115][Stage 12:==================================>                   (74 + 41) / 115][Stage 12:=======================================>              (84 + 31) / 115][Stage 12:========================================>             (86 + 29) / 115][Stage 12:============================================>         (95 + 20) / 115][Stage 12:===============================================>     (104 + 11) / 115][Stage 12:=================================================>    (106 + 9) / 115][Stage 12:====================================================> (111 + 4) / 115]                                                                                [Stage 13:===============================>                      (68 + 48) / 116][Stage 13:====================================>                 (78 + 38) / 116][Stage 13:========================================>             (87 + 29) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:==============================================>      (102 + 14) / 116][Stage 13:=================================================>    (107 + 9) / 116][Stage 13:===================================================>  (111 + 5) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.689291828 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.643201127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=========================>                            (57 + 65) / 122][Stage 14:============================>                         (65 + 57) / 122][Stage 14:====================================>                 (82 + 40) / 122][Stage 14:==========================================>           (97 + 25) / 122][Stage 14:============================================>        (103 + 19) / 122][Stage 14:===============================================>     (110 + 12) / 122][Stage 14:====================================================> (119 + 3) / 122]                                                                                [Stage 15:===========================>                          (62 + 61) / 123][Stage 15:=============================>                        (68 + 55) / 123][Stage 15:===================================>                  (81 + 42) / 123][Stage 15:========================================>             (93 + 30) / 123][Stage 15:==================================================>   (115 + 8) / 123][Stage 15:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.958285196 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.652900359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:====================================>                 (76 + 38) / 114][Stage 16:========================================>             (86 + 28) / 114][Stage 16:==============================================>       (99 + 15) / 114][Stage 16:===============================================>     (103 + 11) / 114][Stage 16:=================================================>    (105 + 9) / 114][Stage 16:==================================================>   (107 + 7) / 114][Stage 16:====================================================> (111 + 3) / 114]                                                                                [Stage 17:===================================>                  (76 + 39) / 115][Stage 17:=========================================>            (89 + 26) / 115][Stage 17:==============================================>       (98 + 17) / 115][Stage 17:================================================>    (105 + 10) / 115][Stage 17:===================================================>  (110 + 5) / 115][Stage 17:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.904670255 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462553696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:======================================>               (81 + 34) / 115][Stage 18:=========================================>            (89 + 26) / 115][Stage 18:===============================================>     (102 + 13) / 115][Stage 18:====================================================> (111 + 4) / 115]                                                                                [Stage 19:======================================>               (82 + 34) / 116][Stage 19:==========================================>           (92 + 24) / 116][Stage 19:==================================================>   (109 + 7) / 116][Stage 19:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.891975057 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490772934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (70 + 47) / 117][Stage 20:=================================>                    (72 + 45) / 117][Stage 20:====================================>                 (80 + 37) / 117][Stage 20:============================================>         (97 + 20) / 117][Stage 20:==================================================>   (109 + 8) / 117][Stage 20:===================================================>  (112 + 5) / 117]                                                                                [Stage 21:=================================>                    (73 + 45) / 118][Stage 21:===================================>                  (78 + 40) / 118][Stage 21:========================================>             (89 + 29) / 118][Stage 21:===============================================>     (105 + 13) / 118][Stage 21:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.661431209 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484527446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (71 + 46) / 117][Stage 22:=================================>                    (72 + 45) / 117][Stage 22:===================================>                  (77 + 40) / 117][Stage 22:=======================================>              (86 + 31) / 117][Stage 22:==============================================>      (102 + 15) / 117][Stage 22:==================================================>   (109 + 8) / 117][Stage 22:====================================================> (113 + 4) / 117][Stage 22:=====================================================>(115 + 2) / 117]                                                                                [Stage 23:================================>                     (72 + 46) / 118][Stage 23:==================================>                   (75 + 43) / 118][Stage 23:=====================================>                (81 + 37) / 118][Stage 23:===========================================>          (95 + 23) / 118][Stage 23:================================================>    (107 + 11) / 118][Stage 23:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.894428423 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.566762757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (61 + 61) / 122][Stage 24:============================>                         (64 + 58) / 122][Stage 24:=====================================>                (84 + 38) / 122][Stage 24:===============================================>     (109 + 13) / 122][Stage 24:=====================================================>(121 + 1) / 122]                                                                                [Stage 25:===========================>                          (62 + 61) / 123][Stage 25:============================>                         (66 + 57) / 123][Stage 25:==================================>                   (79 + 44) / 123][Stage 25:==============================================>      (108 + 15) / 123][Stage 25:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.16716484 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 240 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473063168 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==============================>                       (66 + 49) / 115][Stage 26:==================================>                   (74 + 41) / 115][Stage 26:============================================>         (94 + 21) / 115][Stage 26:===============================================>     (104 + 11) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:====================================>                 (78 + 38) / 116][Stage 27:==========================================>           (92 + 24) / 116][Stage 27:================================================>    (106 + 10) / 116][Stage 27:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.057675666 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==============================>                       (66 + 49) / 115][Stage 28:=================================>                    (72 + 43) / 115][Stage 28:=========================================>            (88 + 27) / 115][Stage 28:=============================================>        (97 + 18) / 115][Stage 28:===================================================>  (110 + 5) / 115][Stage 28:=====================================================>(113 + 2) / 115]                                                                                [Stage 29:===============================>                      (67 + 49) / 116][Stage 29:====================================>                 (79 + 37) / 116][Stage 29:=============================================>        (98 + 18) / 116][Stage 29:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.28315351 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441629344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=======================================>              (85 + 30) / 115][Stage 30:==========================================>           (91 + 24) / 115][Stage 30:================================================>    (105 + 10) / 115][Stage 30:===================================================>  (110 + 5) / 115][Stage 30:====================================================> (111 + 4) / 115][Stage 30:=====================================================>(113 + 2) / 115]                                                                                [Stage 31:=====================================>                (81 + 35) / 116][Stage 31:========================================>             (86 + 30) / 116][Stage 31:============================================>         (96 + 20) / 116][Stage 31:===============================================>     (104 + 12) / 116][Stage 31:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.386145405 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489586329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:====================================>                 (78 + 36) / 114][Stage 32:===========================================>          (91 + 23) / 114][Stage 32:================================================>    (104 + 10) / 114]                                                                                [Stage 33:====================================>                 (78 + 37) / 115][Stage 33:==========================================>           (90 + 25) / 115][Stage 33:===============================================>     (104 + 11) / 115][Stage 33:===================================================>  (110 + 5) / 115][Stage 33:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 2.886614598 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402132749 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=======================================>              (84 + 31) / 115][Stage 34:===========================================>          (93 + 22) / 115][Stage 34:================================================>    (105 + 10) / 115][Stage 34:=====================================================>(113 + 2) / 115]                                                                                [Stage 35:========================================>             (87 + 29) / 116][Stage 35:==============================================>      (101 + 15) / 116][Stage 35:==================================================>   (108 + 8) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.898638032 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40366841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (81 + 34) / 115][Stage 36:==========================================>           (91 + 24) / 115][Stage 36:================================================>    (105 + 10) / 115][Stage 36:=====================================================>(113 + 2) / 115]                                                                                [Stage 37:======================================>               (82 + 34) / 116][Stage 37:==========================================>           (92 + 24) / 116][Stage 37:===============================================>     (103 + 13) / 116][Stage 37:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.207338487 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497950558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (63 + 59) / 122][Stage 38:================================>                     (74 + 48) / 122][Stage 38:===========================================>          (98 + 24) / 122][Stage 38:===================================================>  (116 + 6) / 122]                                                                                [Stage 39:===========================>                          (62 + 61) / 123][Stage 39:===============================>                      (71 + 52) / 123][Stage 39:=======================================>              (89 + 34) / 123][Stage 39:===============================================>     (111 + 12) / 123][Stage 39:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.206890982 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446324266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:====================================>                 (77 + 37) / 114][Stage 40:===========================================>          (91 + 23) / 114][Stage 40:===============================================>     (103 + 11) / 114][Stage 40:===================================================>  (108 + 6) / 114]                                                                                [Stage 41:====================================>                 (78 + 37) / 115][Stage 41:=========================================>            (89 + 26) / 115][Stage 41:===============================================>     (102 + 13) / 115][Stage 41:==================================================>   (108 + 7) / 115][Stage 41:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.081946407 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498292857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (61 + 60) / 121][Stage 42:============================>                         (64 + 57) / 121][Stage 42:================================>                     (73 + 48) / 121][Stage 42:===========================================>          (97 + 24) / 121][Stage 42:===================================================>  (115 + 6) / 121]                                                                                [Stage 43:===========================>                          (62 + 60) / 122][Stage 43:=============================>                        (66 + 56) / 122][Stage 43:==================================>                   (79 + 43) / 122][Stage 43:=============================================>       (104 + 18) / 122][Stage 43:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.048614738 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40484015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=====================================>                (80 + 35) / 115][Stage 44:==========================================>           (90 + 25) / 115][Stage 44:==================================================>   (108 + 7) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:=====================================>                (81 + 35) / 116][Stage 45:========================================>             (88 + 28) / 116][Stage 45:=============================================>        (97 + 19) / 116][Stage 45:===================================================>  (110 + 6) / 116][Stage 45:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.108053315 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42776456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:======================================>               (83 + 32) / 115][Stage 46:===========================================>          (93 + 22) / 115][Stage 46:===============================================>     (102 + 13) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:=======================================>              (84 + 32) / 116][Stage 47:========================================>             (88 + 28) / 116][Stage 47:==============================================>      (101 + 15) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.795793887 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506969466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (61 + 61) / 122][Stage 48:===========================>                          (63 + 59) / 122][Stage 48:==================================>                   (77 + 45) / 122][Stage 48:===========================================>         (100 + 22) / 122][Stage 48:==================================================>   (115 + 7) / 122]                                                                                [Stage 49:===========================>                          (62 + 61) / 123][Stage 49:=================================>                    (76 + 47) / 123][Stage 49:==========================================>           (97 + 26) / 123][Stage 49:================================================>    (112 + 11) / 123]                                                                                Time elapsed: 3.128183633 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492167265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 60) / 121][Stage 50:=============================>                        (65 + 56) / 121][Stage 50:==================================>                   (78 + 43) / 121][Stage 50:==============================================>      (106 + 15) / 121]                                                                                [Stage 51:============================>                         (64 + 58) / 122][Stage 51:===============================>                      (71 + 51) / 122][Stage 51:======================================>               (87 + 35) / 122][Stage 51:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.92157661 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408741152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (71 + 46) / 117][Stage 52:==================================>                   (75 + 42) / 117][Stage 52:=========================================>            (89 + 28) / 117][Stage 52:===============================================>     (105 + 12) / 117][Stage 52:==================================================>   (110 + 7) / 117]                                                                                [Stage 53:================================>                     (72 + 46) / 118][Stage 53:=====================================>                (83 + 35) / 118][Stage 53:============================================>         (97 + 21) / 118][Stage 53:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.15461396 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:=================================>                    (72 + 45) / 117][Stage 54:====================================>                 (80 + 37) / 117][Stage 54:==========================================>           (92 + 25) / 117][Stage 54:==================================================>   (110 + 7) / 117]                                                                                [Stage 55:================================>                     (72 + 46) / 118][Stage 55:===================================>                  (78 + 40) / 118][Stage 55:===========================================>          (94 + 24) / 118][Stage 55:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.065118235 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410090453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (71 + 46) / 117][Stage 56:==================================>                   (74 + 43) / 117][Stage 56:=====================================>                (82 + 35) / 117][Stage 56:=============================================>       (100 + 17) / 117]                                                                                [Stage 57:================================>                     (72 + 46) / 118][Stage 57:====================================>                 (79 + 39) / 118][Stage 57:===========================================>          (95 + 23) / 118][Stage 57:=================================================>    (109 + 9) / 118][Stage 57:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.118456223 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.596883744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=================================>                    (71 + 44) / 115][Stage 58:=======================================>              (84 + 31) / 115][Stage 58:==============================================>      (101 + 14) / 115][Stage 58:===================================================>  (110 + 5) / 115]                                                                                [Stage 59:===================================>                  (76 + 40) / 116][Stage 59:============================================>         (96 + 20) / 116][Stage 59:==================================================>   (109 + 7) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.969595438 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==============================>                       (66 + 49) / 115][Stage 60:====================================>                 (78 + 37) / 115][Stage 60:===========================================>          (92 + 23) / 115][Stage 60:==================================================>   (108 + 7) / 115][Stage 60:====================================================> (111 + 4) / 115]                                                                                [Stage 61:=================================>                    (71 + 45) / 116][Stage 61:======================================>               (83 + 33) / 116][Stage 61:=================================================>    (107 + 9) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.974569961 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482433049 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (61 + 60) / 121][Stage 62:=================================>                    (74 + 47) / 121][Stage 62:=========================================>            (94 + 27) / 121][Stage 62:==================================================>   (113 + 8) / 121]                                                                                [Stage 63:============================>                         (64 + 58) / 122][Stage 63:=================================>                    (76 + 46) / 122][Stage 63:==========================================>           (96 + 26) / 122][Stage 63:==================================================>   (114 + 8) / 122][Stage 63:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.216937443 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425806312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (73 + 42) / 115][Stage 64:======================================>               (82 + 33) / 115][Stage 64:==============================================>      (100 + 15) / 115][Stage 64:====================================================> (111 + 4) / 115]                                                                                [Stage 65:==================================>                   (74 + 42) / 116][Stage 65:=======================================>              (84 + 32) / 116][Stage 65:==============================================>      (101 + 15) / 116][Stage 65:===================================================>  (110 + 6) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.07684437 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474382116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:======================================>               (81 + 34) / 115][Stage 66:=========================================>            (89 + 26) / 115][Stage 66:================================================>    (105 + 10) / 115][Stage 66:===================================================>  (109 + 6) / 115]                                                                                [Stage 67:========================================>             (87 + 29) / 116][Stage 67:=============================================>        (98 + 18) / 116][Stage 67:=================================================>    (107 + 9) / 116][Stage 67:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.955658383 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369434495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (82 + 33) / 115][Stage 68:==========================================>           (90 + 25) / 115][Stage 68:==============================================>      (101 + 14) / 115][Stage 68:===================================================>  (109 + 6) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:========================================>             (86 + 30) / 116][Stage 69:============================================>         (95 + 21) / 116][Stage 69:==================================================>   (109 + 7) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.046357481 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377735945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (82 + 33) / 115][Stage 70:=========================================>            (88 + 27) / 115][Stage 70:==============================================>      (101 + 14) / 115][Stage 70:====================================================> (112 + 3) / 115]                                                                                [Stage 71:========================================>             (86 + 30) / 116][Stage 71:============================================>         (96 + 20) / 116][Stage 71:=================================================>    (107 + 9) / 116][Stage 71:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.038892547 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:>                                                       (0 + 0) / 115][Stage 72:======================================>               (82 + 33) / 115][Stage 72:=========================================>            (88 + 27) / 115][Stage 72:==============================================>       (98 + 17) / 115][Stage 72:==================================================>   (107 + 8) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=======================================>              (85 + 31) / 116][Stage 73:============================================>         (95 + 21) / 116][Stage 73:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.058187029 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356798777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=====================================>                (79 + 36) / 115][Stage 74:========================================>             (87 + 28) / 115][Stage 74:=============================================>        (96 + 19) / 115][Stage 74:===================================================>  (110 + 5) / 115]                                                                                [Stage 75:=======================================>              (84 + 32) / 116][Stage 75:===========================================>          (93 + 23) / 116][Stage 75:================================================>    (106 + 10) / 116][Stage 75:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.709791359 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390181681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=====================================>                (80 + 34) / 114][Stage 76:===========================================>          (91 + 23) / 114][Stage 76:===============================================>     (103 + 11) / 114][Stage 76:===================================================>  (108 + 6) / 114][Stage 76:=====================================================>(113 + 1) / 114]                                                                                [Stage 77:===================================>                  (75 + 40) / 115][Stage 77:==========================================>           (90 + 25) / 115][Stage 77:===============================================>     (102 + 13) / 115][Stage 77:===================================================>  (110 + 5) / 115][Stage 77:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.131205998 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448778018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:============================>                         (64 + 57) / 121][Stage 78:===================================>                  (79 + 42) / 121][Stage 78:============================================>        (102 + 19) / 121][Stage 78:====================================================> (118 + 3) / 121]                                                                                [Stage 79:============================>                         (64 + 58) / 122][Stage 79:==================================>                   (79 + 43) / 122][Stage 79:===========================================>          (99 + 23) / 122][Stage 79:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.099091351 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395181127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (71 + 46) / 117][Stage 80:====================================>                 (79 + 38) / 117][Stage 80:===========================================>          (95 + 22) / 117][Stage 80:===================================================>  (111 + 6) / 117]                                                                                [Stage 81:================================>                     (72 + 46) / 118][Stage 81:=====================================>                (83 + 35) / 118][Stage 81:===========================================>          (96 + 22) / 118][Stage 81:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.03370456 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (71 + 46) / 117][Stage 82:===================================>                  (77 + 40) / 117][Stage 82:==========================================>           (91 + 26) / 117][Stage 82:==============================================>      (103 + 14) / 117]                                                                                [Stage 83:================================>                     (72 + 46) / 118][Stage 83:====================================>                 (79 + 39) / 118][Stage 83:============================================>         (97 + 21) / 118][Stage 83:================================================>    (107 + 11) / 118]                                                                                Time elapsed: 2.96160346 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404440097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (71 + 46) / 117][Stage 84:=================================>                    (72 + 45) / 117][Stage 84:=======================================>              (85 + 32) / 117][Stage 84:===============================================>     (104 + 13) / 117][Stage 84:=====================================================>(116 + 1) / 117]                                                                                [Stage 85:================================>                     (72 + 46) / 118][Stage 85:===================================>                  (78 + 40) / 118][Stage 85:=======================================>              (86 + 32) / 118][Stage 85:==============================================>      (103 + 15) / 118][Stage 85:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.967081664 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3617706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (82 + 33) / 115][Stage 86:=======================================>              (85 + 30) / 115][Stage 86:==============================================>       (98 + 17) / 115][Stage 86:===================================================>  (110 + 5) / 115]                                                                                [Stage 87:======================================>               (82 + 34) / 116][Stage 87:========================================>             (87 + 29) / 116][Stage 87:=============================================>       (100 + 16) / 116][Stage 87:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.633059216 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384737191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=======================================>              (84 + 30) / 114][Stage 88:============================================>         (93 + 21) / 114][Stage 88:==============================================>       (99 + 15) / 114][Stage 88:==================================================>   (107 + 7) / 114][Stage 88:=====================================================>(113 + 1) / 114]                                                                                [Stage 89:===================================>                  (76 + 39) / 115][Stage 89:==========================================>           (90 + 25) / 115][Stage 89:===============================================>     (104 + 11) / 115][Stage 89:===================================================>  (109 + 6) / 115][Stage 89:====================================================> (112 + 3) / 115][Stage 89:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.578550767 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39961547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (71 + 46) / 117][Stage 90:==================================>                   (74 + 43) / 117][Stage 90:======================================>               (83 + 34) / 117][Stage 90:==============================================>      (103 + 14) / 117][Stage 90:=====================================================>(116 + 1) / 117]                                                                                [Stage 91:================================>                     (72 + 46) / 118][Stage 91:===================================>                  (77 + 41) / 118][Stage 91:==========================================>           (92 + 26) / 118][Stage 91:=============================================>       (102 + 16) / 118][Stage 91:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.993237427 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389842976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==============================>                       (66 + 49) / 115][Stage 92:===================================>                  (75 + 40) / 115][Stage 92:========================================>             (86 + 29) / 115][Stage 92:=============================================>        (96 + 19) / 115][Stage 92:================================================>    (105 + 10) / 115]                                                                                [Stage 93:=================================>                    (72 + 44) / 116][Stage 93:=======================================>              (85 + 31) / 116][Stage 93:=============================================>        (98 + 18) / 116][Stage 93:===============================================>     (104 + 12) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.242493432 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416766711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 60) / 121][Stage 94:===============================>                      (70 + 51) / 121][Stage 94:======================================>               (87 + 34) / 121][Stage 94:================================================>    (110 + 11) / 121][Stage 94:====================================================> (118 + 3) / 121]                                                                                [Stage 95:============================>                         (64 + 58) / 122][Stage 95:==================================>                   (78 + 44) / 122][Stage 95:===========================================>          (99 + 23) / 122][Stage 95:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.074023605 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372337972 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==================================>                   (72 + 42) / 114][Stage 96:======================================>               (82 + 32) / 114][Stage 96:==============================================>       (99 + 15) / 114][Stage 96:===================================================>  (108 + 6) / 114][Stage 96:=====================================================>(112 + 2) / 114]                                                                                [Stage 97:====================================>                 (77 + 38) / 115][Stage 97:==========================================>           (90 + 25) / 115][Stage 97:===============================================>     (104 + 11) / 115][Stage 97:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.024994017 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377170758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (70 + 47) / 117][Stage 98:==================================>                   (75 + 42) / 117][Stage 98:===========================================>          (94 + 23) / 117][Stage 98:================================================>    (106 + 11) / 117][Stage 98:=====================================================>(116 + 1) / 117]                                                                                [Stage 99:================================>                     (72 + 46) / 118][Stage 99:===================================>                  (77 + 41) / 118][Stage 99:==========================================>           (92 + 26) / 118][Stage 99:==============================================>      (103 + 15) / 118][Stage 99:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.089279678 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369450347 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:====================================>                (79 + 35) / 114][Stage 100:==========================================>          (92 + 22) / 114][Stage 100:==============================================>     (101 + 13) / 114][Stage 100:=================================================>   (106 + 8) / 114][Stage 100:===================================================> (110 + 4) / 114]                                                                                [Stage 101:==================================>                  (75 + 40) / 115][Stage 101:========================================>            (87 + 28) / 115][Stage 101:============================================>        (97 + 18) / 115][Stage 101:==============================================>     (102 + 13) / 115][Stage 101:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.22315031 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415327228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (61 + 60) / 121][Stage 102:================================>                    (74 + 47) / 121][Stage 102:=======================================>             (90 + 31) / 121][Stage 102:==============================================>     (109 + 12) / 121][Stage 102:====================================================>(119 + 2) / 121]                                                                                [Stage 103:==========================>                          (62 + 60) / 122][Stage 103:=============================>                       (68 + 54) / 122][Stage 103:====================================>                (83 + 39) / 122][Stage 103:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.039121523 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 60) / 121][Stage 104:==============================>                      (69 + 52) / 121][Stage 104:=================================>                   (77 + 44) / 121][Stage 104:==========================================>         (100 + 21) / 121][Stage 104:=================================================>   (114 + 7) / 121]                                                                                [Stage 105:=============================>                       (68 + 54) / 122][Stage 105:====================================>                (83 + 39) / 122][Stage 105:==============================================>     (109 + 13) / 122][Stage 105:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.064446652 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385191087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===================================>                 (76 + 38) / 114][Stage 106:=========================================>           (89 + 25) / 114][Stage 106:=============================================>       (97 + 17) / 114][Stage 106:=============================================>      (100 + 14) / 114][Stage 106:===================================================> (110 + 4) / 114]                                                                                [Stage 107:=========================================>           (89 + 26) / 115][Stage 107:==========================================>          (93 + 22) / 115][Stage 107:===============================================>    (105 + 10) / 115][Stage 107:====================================================>(113 + 2) / 115][Stage 107:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.166136622 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41858663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===========================>                         (63 + 58) / 121][Stage 108:===============================>                     (73 + 48) / 121][Stage 108:==========================================>          (96 + 25) / 121][Stage 108:===================================================> (117 + 4) / 121]                                                                                [Stage 109:==========================>                          (62 + 60) / 122][Stage 109:===============================>                     (72 + 50) / 122][Stage 109:==========================================>          (97 + 25) / 122][Stage 109:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.013641138 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386191947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==============================>                      (66 + 49) / 115][Stage 110:==================================>                  (75 + 40) / 115][Stage 110:==========================================>          (92 + 23) / 115][Stage 110:==============================================>     (103 + 12) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:================================>                    (71 + 45) / 116][Stage 111:========================================>            (89 + 27) / 116][Stage 111:=============================================>       (99 + 17) / 116][Stage 111:===============================================>    (106 + 10) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.122848797 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428168342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 60) / 121][Stage 112:==============================>                      (69 + 52) / 121][Stage 112:=======================================>             (90 + 31) / 121][Stage 112:=================================================>   (112 + 9) / 121]                                                                                [Stage 113:==========================>                          (62 + 60) / 122][Stage 113:==================================>                  (80 + 42) / 122][Stage 113:==============================================>     (108 + 14) / 122][Stage 113:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.854510202 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:=============================>                       (68 + 53) / 121][Stage 114:==================================>                  (78 + 43) / 121][Stage 114:=============================================>      (105 + 16) / 121]                                                                                [Stage 115:==========================>                          (61 + 61) / 122][Stage 115:==========================>                          (62 + 60) / 122][Stage 115:==================================>                  (80 + 42) / 122][Stage 115:===========================================>        (103 + 19) / 122][Stage 115:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.113885538 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416748425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:============================>                        (65 + 56) / 121][Stage 116:=================================>                   (77 + 44) / 121][Stage 116:==========================================>         (100 + 21) / 121][Stage 116:====================================================>(119 + 2) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:==============================>                      (71 + 51) / 122][Stage 117:=======================================>             (90 + 32) / 122][Stage 117:=================================================>   (114 + 8) / 122][Stage 117:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.066300212 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344759191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:=======================================>             (86 + 29) / 115][Stage 118:============================================>        (96 + 19) / 115][Stage 118:==================================================>  (109 + 6) / 115]                                                                                [Stage 119:========================================>            (89 + 27) / 116][Stage 119:===========================================>         (96 + 20) / 116][Stage 119:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.605103585 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369457703 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===================================>                 (77 + 37) / 114][Stage 120:===========================================>         (94 + 20) / 114][Stage 120:==============================================>      (99 + 15) / 114][Stage 120:================================================>    (105 + 9) / 114][Stage 120:====================================================>(113 + 1) / 114]                                                                                [Stage 121:===================================>                 (77 + 38) / 115][Stage 121:=========================================>           (90 + 25) / 115][Stage 121:=============================================>       (99 + 16) / 115][Stage 121:==================================================>  (109 + 6) / 115][Stage 121:====================================================>(113 + 2) / 115][Stage 121:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.435371305 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397827119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (73 + 44) / 117][Stage 122:======================================>              (86 + 31) / 117][Stage 122:==============================================>     (104 + 13) / 117][Stage 122:====================================================>(115 + 2) / 117]                                                                                [Stage 123:================================>                    (73 + 45) / 118][Stage 123:========================================>            (91 + 27) / 118][Stage 123:==================================================>  (113 + 5) / 118][Stage 123:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.843219888 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420132548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (59 + 54) / 113][Stage 124:==============================>                      (65 + 48) / 113][Stage 124:====================================>                (78 + 35) / 113][Stage 124:============================================>        (95 + 18) / 113][Stage 124:====================================================>(111 + 2) / 113]                                                                                [Stage 125:===========================>                         (60 + 54) / 114][Stage 125:================================>                    (70 + 44) / 114][Stage 125:========================================>            (87 + 27) / 114][Stage 125:================================================>    (105 + 9) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.963284321 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427121816 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (61 + 60) / 121][Stage 126:=============================>                       (67 + 54) / 121][Stage 126:===================================>                 (81 + 40) / 121][Stage 126:===========================================>         (99 + 22) / 121][Stage 126:====================================================>(120 + 1) / 121]                                                                                [Stage 127:============================>                        (65 + 57) / 122][Stage 127:===================================>                 (81 + 41) / 122][Stage 127:============================================>       (104 + 18) / 122][Stage 127:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.058338302 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392829731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==============================>                      (67 + 48) / 115][Stage 128:=====================================>               (82 + 33) / 115][Stage 128:=============================================>       (99 + 16) / 115][Stage 128:==================================================>  (110 + 5) / 115][Stage 128:====================================================>(113 + 2) / 115]                                                                                [Stage 129:===============================>                     (70 + 46) / 116][Stage 129:=====================================>               (83 + 33) / 116][Stage 129:==========================================>          (94 + 22) / 116][Stage 129:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.933059715 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405415627 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 61) / 122][Stage 130:==============================>                      (70 + 52) / 122][Stage 130:====================================>                (85 + 37) / 122][Stage 130:==============================================>     (110 + 12) / 122]                                                                                [Stage 131:==========================>                          (62 + 61) / 123][Stage 131:===============================>                     (73 + 50) / 123][Stage 131:=======================================>             (92 + 31) / 123][Stage 131:===============================================>    (112 + 11) / 123][Stage 131:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.063765901 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364632834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 46) / 117][Stage 132:=================================>                   (73 + 44) / 117][Stage 132:======================================>              (86 + 31) / 117][Stage 132:=============================================>      (102 + 15) / 117][Stage 132:====================================================>(116 + 1) / 117]                                                                                [Stage 133:=================================>                   (74 + 44) / 118][Stage 133:=====================================>               (84 + 34) / 118][Stage 133:===========================================>         (97 + 21) / 118][Stage 133:=================================================>   (111 + 7) / 118][Stage 133:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.26650748 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378578811 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===================================>                 (77 + 38) / 115][Stage 134:===========================================>         (94 + 21) / 115][Stage 134:===============================================>    (105 + 10) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:=================================>                   (73 + 43) / 116][Stage 135:=====================================>               (83 + 33) / 116][Stage 135:============================================>       (100 + 16) / 116][Stage 135:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.69070121 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===============================>                     (69 + 46) / 115][Stage 136:====================================>                (80 + 35) / 115][Stage 136:=============================================>      (101 + 14) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:================================>                    (72 + 44) / 116][Stage 137:=====================================>               (82 + 34) / 116][Stage 137:============================================>        (97 + 19) / 116][Stage 137:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.684379298 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404509724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 61) / 122][Stage 138:=============================>                       (67 + 55) / 122][Stage 138:===================================>                 (81 + 41) / 122][Stage 138:===========================================>        (101 + 21) / 122][Stage 138:===================================================> (119 + 3) / 122]                                                                                [Stage 139:===========================>                         (63 + 60) / 123][Stage 139:===========================>                         (64 + 59) / 123][Stage 139:=====================================>               (87 + 36) / 123][Stage 139:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 2.885620256 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404517603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (61 + 60) / 121][Stage 140:=============================>                       (68 + 53) / 121][Stage 140:======================================>              (87 + 34) / 121][Stage 140:==============================================>     (108 + 13) / 121][Stage 140:====================================================>(119 + 2) / 121]                                                                                [Stage 141:==========================>                          (62 + 60) / 122][Stage 141:=============================>                       (68 + 54) / 122][Stage 141:===================================>                 (82 + 40) / 122][Stage 141:===============================================>    (112 + 10) / 122][Stage 141:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.963930734 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404540343 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 61) / 122][Stage 142:============================>                        (66 + 56) / 122][Stage 142:====================================>                (84 + 38) / 122][Stage 142:=============================================>      (107 + 15) / 122]                                                                                [Stage 143:==========================>                          (62 + 61) / 123][Stage 143:===============================>                     (73 + 50) / 123][Stage 143:======================================>              (90 + 33) / 123][Stage 143:=============================================>      (108 + 15) / 123][Stage 143:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.082250582 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389672803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==================================>                  (74 + 41) / 115][Stage 144:=======================================>             (85 + 30) / 115][Stage 144:==============================================>     (102 + 13) / 115][Stage 144:===================================================> (112 + 3) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:===================================>                 (77 + 39) / 116][Stage 145:==========================================>          (92 + 24) / 116][Stage 145:=============================================>      (102 + 14) / 116][Stage 145:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.154824392 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383946556 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (73 + 44) / 117][Stage 146:===================================>                 (79 + 38) / 117][Stage 146:===========================================>         (96 + 21) / 117][Stage 146:=================================================>   (110 + 7) / 117]                                                                                [Stage 147:=================================>                   (74 + 44) / 118][Stage 147:======================================>              (85 + 33) / 118][Stage 147:===========================================>         (97 + 21) / 118][Stage 147:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 2.976104538 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 45) / 117][Stage 148:====================================>                (80 + 37) / 117][Stage 148:===========================================>         (96 + 21) / 117][Stage 148:===============================================>    (106 + 11) / 117][Stage 148:====================================================>(116 + 1) / 117]                                                                                [Stage 149:================================>                    (72 + 46) / 118][Stage 149:==================================>                  (76 + 42) / 118][Stage 149:=======================================>             (88 + 30) / 118][Stage 149:============================================>       (101 + 17) / 118][Stage 149:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.117985337 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335359732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (81 + 34) / 115][Stage 150:=======================================>             (85 + 30) / 115][Stage 150:=============================================>       (98 + 17) / 115][Stage 150:===================================================> (111 + 4) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:=====================================>               (82 + 34) / 116][Stage 151:=========================================>           (91 + 25) / 116][Stage 151:===============================================>    (105 + 11) / 116][Stage 151:==================================================>  (111 + 5) / 116][Stage 151:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.126299704 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341219019 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=======================================>             (85 + 30) / 115][Stage 152:============================================>        (97 + 18) / 115][Stage 152:=================================================>   (107 + 8) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:======================================>              (84 + 32) / 116][Stage 153:==============================================>     (103 + 13) / 116][Stage 153:===================================================> (112 + 4) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.003264582 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33454069 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:>                                                      (0 + 0) / 115][Stage 154:=====================================>               (82 + 33) / 115][Stage 154:=========================================>           (91 + 24) / 115][Stage 154:=================================================>   (107 + 8) / 115][Stage 154:===================================================> (112 + 3) / 115]                                                                                [Stage 155:======================================>              (84 + 32) / 116][Stage 155:===========================================>         (95 + 21) / 116][Stage 155:==================================================>  (111 + 5) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.9268772 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366773951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (71 + 46) / 117][Stage 156:====================================>                (81 + 36) / 117][Stage 156:==========================================>          (93 + 24) / 117][Stage 156:=================================================>   (109 + 8) / 117]                                                                                [Stage 157:================================>                    (72 + 46) / 118][Stage 157:=================================>                   (74 + 44) / 118][Stage 157:========================================>            (91 + 27) / 118][Stage 157:===============================================>    (108 + 10) / 118][Stage 157:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.919799327 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354330794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (80 + 34) / 114][Stage 158:=========================================>           (90 + 24) / 114][Stage 158:===============================================>    (104 + 10) / 114][Stage 158:==================================================>  (109 + 5) / 114][Stage 158:====================================================>(113 + 1) / 114]                                                                                [Stage 159:===================================>                 (77 + 38) / 115][Stage 159:=======================================>             (86 + 29) / 115][Stage 159:=============================================>      (100 + 15) / 115][Stage 159:==================================================>  (109 + 6) / 115][Stage 159:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.121617463 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399619632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 60) / 121][Stage 160:===========================>                         (63 + 58) / 121][Stage 160:==============================>                      (70 + 51) / 121][Stage 160:=======================================>             (90 + 31) / 121][Stage 160:===================================================> (117 + 4) / 121]                                                                                [Stage 161:============================>                        (66 + 56) / 122][Stage 161:====================================>                (84 + 38) / 122][Stage 161:=============================================>      (107 + 15) / 122][Stage 161:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.046895003 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338311533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=======================================>             (85 + 30) / 115][Stage 162:===========================================>         (95 + 20) / 115][Stage 162:=================================================>   (108 + 7) / 115][Stage 162:====================================================>(113 + 2) / 115]                                                                                [Stage 163:=======================================>             (87 + 29) / 116][Stage 163:==========================================>          (93 + 23) / 116][Stage 163:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.754989845 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413563449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:>                                                      (0 + 0) / 121][Stage 164:==========================>                          (61 + 60) / 121][Stage 164:===============================>                     (73 + 48) / 121][Stage 164:=======================================>             (91 + 30) / 121][Stage 164:=================================================>   (112 + 9) / 121][Stage 164:====================================================>(120 + 1) / 121]                                                                                [Stage 165:==========================>                          (62 + 60) / 122][Stage 165:=============================>                       (68 + 54) / 122][Stage 165:======================================>              (88 + 34) / 122][Stage 165:=============================================>      (107 + 15) / 122][Stage 165:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.05778417 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371340255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==================================>                  (74 + 41) / 115][Stage 166:=========================================>           (89 + 26) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:==================================>                  (75 + 41) / 116][Stage 167:==========================================>          (92 + 24) / 116][Stage 167:============================================>        (98 + 18) / 116][Stage 167:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.134874984 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333200085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=======================================>             (86 + 29) / 115][Stage 168:==========================================>          (93 + 22) / 115][Stage 168:==================================================>  (109 + 6) / 115]                                                                                [Stage 169:======================================>              (85 + 31) / 116][Stage 169:===========================================>         (95 + 21) / 116][Stage 169:===================================================> (112 + 4) / 116][Stage 169:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.728864882 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408796961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 60) / 121][Stage 170:============================>                        (65 + 56) / 121][Stage 170:==================================>                  (79 + 42) / 121][Stage 170:=============================================>      (105 + 16) / 121][Stage 170:===================================================> (118 + 3) / 121]                                                                                [Stage 171:=============================>                       (67 + 55) / 122][Stage 171:====================================>                (85 + 37) / 122][Stage 171:===========================================>        (101 + 21) / 122][Stage 171:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.014013162 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403791215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 61) / 122][Stage 172:==============================>                      (70 + 52) / 122][Stage 172:===================================>                 (82 + 40) / 122][Stage 172:===============================================>    (111 + 11) / 122]                                                                                [Stage 173:===========================>                         (63 + 60) / 123][Stage 173:===============================>                     (72 + 51) / 123][Stage 173:======================================>              (90 + 33) / 123][Stage 173:============================================>       (105 + 18) / 123][Stage 173:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.01489906 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377593781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:====================================>                (79 + 36) / 115][Stage 174:===========================================>         (94 + 21) / 115][Stage 174:===============================================>    (105 + 10) / 115][Stage 174:==================================================>  (110 + 5) / 115]                                                                                [Stage 175:===================================>                 (77 + 39) / 116][Stage 175:========================================>            (89 + 27) / 116][Stage 175:============================================>        (98 + 18) / 116][Stage 175:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.887349634 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370487052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (71 + 46) / 117][Stage 176:=================================>                   (73 + 44) / 117][Stage 176:======================================>              (86 + 31) / 117][Stage 176:============================================>        (98 + 19) / 117][Stage 176:===================================================> (114 + 3) / 117]                                                                                [Stage 177:==================================>                  (76 + 42) / 118][Stage 177:=======================================>             (88 + 30) / 118][Stage 177:============================================>       (100 + 18) / 118][Stage 177:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.956602198 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388058453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:==============================>                      (66 + 47) / 113][Stage 178:=================================>                   (72 + 41) / 113][Stage 178:===========================================>         (93 + 20) / 113][Stage 178:=================================================>   (106 + 7) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:===========================>                         (60 + 54) / 114][Stage 179:==============================>                      (66 + 48) / 114][Stage 179:=====================================>               (80 + 34) / 114][Stage 179:==============================================>     (101 + 13) / 114]                                                                                Time elapsed: 3.115502096 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432557949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 60) / 121][Stage 180:==============================>                      (70 + 51) / 121][Stage 180:====================================>                (83 + 38) / 121][Stage 180:===============================================>    (110 + 11) / 121][Stage 180:====================================================>(119 + 2) / 121]                                                                                [Stage 181:==========================>                          (62 + 60) / 122][Stage 181:=============================>                       (69 + 53) / 122][Stage 181:=====================================>               (86 + 36) / 122][Stage 181:===========================================>        (101 + 21) / 122][Stage 181:====================================================>(120 + 2) / 122][Stage 181:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.245587857 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351205166 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===================================>                 (76 + 38) / 114][Stage 182:========================================>            (87 + 27) / 114][Stage 182:=============================================>       (98 + 16) / 114][Stage 182:=================================================>   (107 + 7) / 114][Stage 182:====================================================>(113 + 1) / 114]                                                                                [Stage 183:=======================================>             (85 + 30) / 115][Stage 183:===========================================>         (95 + 20) / 115][Stage 183:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 2.813919286 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=================================>                   (72 + 42) / 114][Stage 184:=====================================>               (81 + 33) / 114][Stage 184:============================================>        (95 + 19) / 114][Stage 184:==================================================>  (109 + 5) / 114]                                                                                [Stage 185:===================================>                 (76 + 39) / 115][Stage 185:===========================================>         (94 + 21) / 115][Stage 185:=============================================>      (101 + 14) / 115][Stage 185:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 2.866042509 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 223 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37130475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (70 + 45) / 115][Stage 186:=====================================>               (81 + 34) / 115][Stage 186:==============================================>     (103 + 12) / 115][Stage 186:===================================================> (112 + 3) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:================================>                    (72 + 44) / 116][Stage 187:========================================>            (88 + 28) / 116][Stage 187:==============================================>     (104 + 12) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.881405526 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459601981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (72 + 42) / 114][Stage 188:======================================>              (83 + 31) / 114][Stage 188:===========================================>         (93 + 21) / 114][Stage 188:==================================================>  (108 + 6) / 114][Stage 188:====================================================>(112 + 2) / 114]                                                                                [Stage 189:====================================>                (79 + 36) / 115][Stage 189:=========================================>           (90 + 25) / 115][Stage 189:===============================================>    (105 + 10) / 115][Stage 189:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.99825801 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378225778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (70 + 45) / 115][Stage 190:======================================>              (84 + 31) / 115][Stage 190:===========================================>         (95 + 20) / 115][Stage 190:=================================================>   (108 + 7) / 115]                                                                                [Stage 191:=================================>                   (73 + 43) / 116][Stage 191:=======================================>             (87 + 29) / 116][Stage 191:===========================================>         (96 + 20) / 116][Stage 191:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.988875214 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:====================================>                (79 + 36) / 115][Stage 192:=========================================>           (90 + 25) / 115][Stage 192:===============================================>    (104 + 11) / 115][Stage 192:==================================================>  (110 + 5) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:===============================>                     (68 + 48) / 116][Stage 193:=====================================>               (81 + 35) / 116][Stage 193:==========================================>          (93 + 23) / 116][Stage 193:================================================>    (107 + 9) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.258915111 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==================================>                  (75 + 40) / 115][Stage 194:=======================================>             (86 + 29) / 115][Stage 194:==============================================>     (102 + 13) / 115][Stage 194:==================================================>  (110 + 5) / 115]                                                                                [Stage 195:====================================>                (80 + 36) / 116][Stage 195:=========================================>           (90 + 26) / 116][Stage 195:==================================================>  (110 + 6) / 116][Stage 195:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.961264892 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401782707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (62 + 60) / 122][Stage 196:=================================>                   (78 + 44) / 122][Stage 196:=======================================>             (92 + 30) / 122][Stage 196:===============================================>    (111 + 11) / 122][Stage 196:====================================================>(120 + 2) / 122]                                                                                [Stage 197:============================>                        (67 + 56) / 123][Stage 197:===================================>                 (83 + 40) / 123][Stage 197:============================================>       (105 + 18) / 123][Stage 197:=================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.246261087 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344391213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (82 + 33) / 115][Stage 198:=========================================>           (91 + 24) / 115][Stage 198:==============================================>     (102 + 13) / 115]                                                                                [Stage 199:=====================================>               (83 + 33) / 116][Stage 199:============================================>        (98 + 18) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.353337901 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353240064 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (70 + 44) / 114][Stage 200:=======================================>             (84 + 30) / 114][Stage 200:============================================>        (95 + 19) / 114][Stage 200:==============================================>      (99 + 15) / 114][Stage 200:===================================================> (110 + 4) / 114][Stage 200:====================================================>(113 + 1) / 114]                                                                                [Stage 201:==================================>                  (74 + 41) / 115][Stage 201:=========================================>           (89 + 26) / 115][Stage 201:=============================================>       (99 + 16) / 115][Stage 201:=================================================>   (107 + 8) / 115][Stage 201:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.201828504 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 22:04:23 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:45588) dropped. RpcEnv already stopped.
17/05/29 22:04:23 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:45588) dropped. RpcEnv already stopped.

real	9m48.401s
user	11m30.812s
sys	0m29.380s
