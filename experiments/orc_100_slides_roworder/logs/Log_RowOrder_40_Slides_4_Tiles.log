Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 22:14:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:14:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:14:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:14:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 22:14:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 22:14:48 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529221438-0689).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.381259383 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (51 + 64) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:=========================================>             (88 + 28) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 13.496260136 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.788786905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (41 + 80) / 121][Stage 2:=========================>                             (57 + 64) / 121][Stage 2:===========================>                           (60 + 61) / 121][Stage 2:===========================>                           (61 + 60) / 121][Stage 2:=============================>                         (65 + 56) / 121][Stage 2:=================================>                     (73 + 48) / 121][Stage 2:==========================================>            (94 + 27) / 121][Stage 2:=================================================>    (111 + 10) / 121][Stage 2:=====================================================> (118 + 3) / 121]                                                                                [Stage 3:==========================>                            (59 + 63) / 122][Stage 3:============================>                          (63 + 59) / 122][Stage 3:===============================>                       (70 + 52) / 122][Stage 3:===================================>                   (79 + 43) / 122][Stage 3:=========================================>             (91 + 31) / 122][Stage 3:==============================================>       (104 + 18) / 122][Stage 3:=====================================================> (119 + 3) / 122][Stage 3:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.478082645 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  pa rtitionIndex = 49  OR  partitionIndex = 50 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.676442006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=================================>                     (69 + 45) / 114][Stage 4:=====================================>                 (78 + 36) / 114][Stage 4:========================================>              (83 + 31) / 114][Stage 4:=============================================>         (94 + 20) / 114][Stage 4:===============================================>       (99 + 15) / 114][Stage 4:===================================================>   (107 + 7) / 114][Stage 4:======================================================>(113 + 1) / 114]                                                                                [Stage 5:====================================>                  (76 + 39) / 115][Stage 5:=====================================>                 (79 + 36) / 115][Stage 5:=======================================>               (83 + 32) / 115][Stage 5:=============================================>         (96 + 19) / 115][Stage 5:===============================================>      (102 + 13) / 115][Stage 5:===================================================>   (108 + 7) / 115][Stage 5:=====================================================> (112 + 3) / 115][Stage 5:======================================================>(114 + 1) / 115]                                                                                Time elapsed: 5.589076347 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 214  OR  partitionIndex = 215 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.724873032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==============================>                        (64 + 51) / 115][Stage 6:=================================>                     (70 + 45) / 115][Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:==============================================>        (98 + 17) / 115][Stage 6:===================================================>   (107 + 8) / 115][Stage 6:=====================================================> (111 + 4) / 115][Stage 6:=====================================================> (112 + 3) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:==================================>                    (73 + 43) / 116][Stage 7:=====================================>                 (79 + 37) / 116][Stage 7:========================================>              (85 + 31) / 116][Stage 7:==========================================>            (90 + 26) / 116][Stage 7:===============================================>      (101 + 15) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.781214606 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 99  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.618952702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 62) / 122][Stage 8:===========================>                           (61 + 61) / 122][Stage 8:===============================>                       (70 + 52) / 122][Stage 8:====================================>                  (81 + 41) / 122][Stage 8:========================================>              (89 + 33) / 122][Stage 8:=========================================>             (93 + 29) / 122][Stage 8:================================================>     (110 + 12) / 122][Stage 8:======================================================>(121 + 1) / 122]                                                                                [Stage 9:============================>                          (64 + 59) / 123][Stage 9:==============================>                        (69 + 54) / 123][Stage 9:======================================>                (86 + 37) / 123][Stage 9:===============================================>      (109 + 14) / 123][Stage 9:=====================================================> (120 + 3) / 123]                                                                                Time elapsed: 4.319232693 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR   partitionIndex = 192  OR  partitionIndex = 193 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508569047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (71 + 43) / 114][Stage 10:=======================================>              (84 + 30) / 114][Stage 10:===========================================>          (92 + 22) / 114][Stage 10:==============================================>      (100 + 14) / 114][Stage 10:================================================>    (104 + 10) / 114][Stage 10:===================================================>  (108 + 6) / 114][Stage 10:=====================================================>(113 + 1) / 114]                                                                                [Stage 11:================================>                     (69 + 46) / 115][Stage 11:======================================>               (82 + 33) / 115][Stage 11:============================================>         (94 + 21) / 115][Stage 11:===================================================>  (109 + 6) / 115][Stage 11:====================================================> (111 + 4) / 115][Stage 11:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.916344485 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  pa rtitionIndex = 91  OR  partitionIndex = 104 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53981937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==============================>                       (64 + 51) / 115][Stage 12:=================================>                    (71 + 44) / 115][Stage 12:====================================>                 (77 + 38) / 115][Stage 12:=========================================>            (88 + 27) / 115][Stage 12:=============================================>        (96 + 19) / 115][Stage 12:===============================================>     (104 + 11) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:================================>                     (69 + 47) / 116][Stage 13:===================================>                  (76 + 40) / 116][Stage 13:=========================================>            (89 + 27) / 116][Stage 13:==============================================>      (102 + 14) / 116][Stage 13:===============================================>     (105 + 11) / 116][Stage 13:==================================================>   (108 + 8) / 116][Stage 13:===================================================>  (111 + 5) / 116][Stage 13:=====================================================>(114 + 2) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.430336171 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49022588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (70 + 47) / 117][Stage 14:=================================>                    (72 + 45) / 117][Stage 14:===================================>                  (76 + 41) / 117][Stage 14:=======================================>              (86 + 31) / 117][Stage 14:============================================>         (97 + 20) / 117][Stage 14:==============================================>      (103 + 14) / 117][Stage 14:===================================================>  (111 + 6) / 117][Stage 14:=====================================================>(116 + 1) / 117]                                                                                [Stage 15:================================>                     (72 + 46) / 118][Stage 15:=================================>                    (74 + 44) / 118][Stage 15:=====================================>                (83 + 35) / 118][Stage 15:==========================================>           (92 + 26) / 118][Stage 15:=============================================>       (101 + 17) / 118][Stage 15:===============================================>     (105 + 13) / 118][Stage 15:===================================================>  (113 + 5) / 118][Stage 15:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.617733042 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR   partitionIndex = 160  OR  partitionIndex = 161 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (71 + 46) / 117][Stage 16:===================================>                  (76 + 41) / 117][Stage 16:========================================>             (87 + 30) / 117][Stage 16:==============================================>      (102 + 15) / 117][Stage 16:==================================================>   (109 + 8) / 117][Stage 16:=====================================================>(116 + 1) / 117]                                                                                [Stage 17:================================>                     (72 + 46) / 118][Stage 17:==================================>                   (76 + 42) / 118][Stage 17:======================================>               (84 + 34) / 118][Stage 17:============================================>         (97 + 21) / 118][Stage 17:================================================>    (107 + 11) / 118][Stage 17:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 4.267948829 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR   partitionIndex = 219  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506901961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (70 + 44) / 114][Stage 18:=======================================>              (84 + 30) / 114][Stage 18:=============================================>        (95 + 19) / 114][Stage 18:=================================================>    (105 + 9) / 114][Stage 18:==================================================>   (106 + 8) / 114][Stage 18:=====================================================>(112 + 2) / 114]                                                                                [Stage 19:======================================>               (83 + 32) / 115][Stage 19:===========================================>          (92 + 23) / 115][Stage 19:===============================================>     (102 + 13) / 115][Stage 19:===================================================>  (109 + 6) / 115][Stage 19:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.54377826 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78  OR  pa rtitionIndex = 92  OR  partitionIndex = 93 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 92  OR  partitionIndex = 93 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.536975222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (60 + 61) / 121][Stage 20:===========================>                          (62 + 59) / 121][Stage 20:================================>                     (73 + 48) / 121][Stage 20:==========================================>           (95 + 26) / 121][Stage 20:=================================================>    (112 + 9) / 121]                                                                                [Stage 21:===========================>                          (63 + 59) / 122][Stage 21:================================>                     (74 + 48) / 122][Stage 21:========================================>             (91 + 31) / 122][Stage 21:=============================================>       (105 + 17) / 122][Stage 21:================================================>    (111 + 11) / 122][Stage 21:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.738091863 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR   partitionIndex = 240  OR  partitionIndex = 241 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556380108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (61 + 61) / 122][Stage 22:===========================>                          (63 + 59) / 122][Stage 22:=================================>                    (75 + 47) / 122][Stage 22:========================================>             (92 + 30) / 122][Stage 22:==============================================>      (107 + 15) / 122][Stage 22:=====================================================>(121 + 1) / 122]                                                                                [Stage 23:==========================>                           (61 + 62) / 123][Stage 23:==============================>                       (70 + 53) / 123][Stage 23:====================================>                 (84 + 39) / 123][Stage 23:================================================>    (113 + 10) / 123][Stage 23:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.353231126 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR   partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428628931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (79 + 36) / 115][Stage 24:========================================>             (87 + 28) / 115][Stage 24:===========================================>          (93 + 22) / 115][Stage 24:==============================================>      (100 + 15) / 115][Stage 24:===================================================>  (109 + 6) / 115]                                                                                [Stage 25:======================================>               (82 + 34) / 116][Stage 25:===========================================>          (94 + 22) / 116][Stage 25:==================================================>   (109 + 7) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.990710702 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520102476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==========================>                           (60 + 62) / 122][Stage 26:===========================>                          (62 + 60) / 122][Stage 26:======================================>               (86 + 36) / 122][Stage 26:===============================================>     (109 + 13) / 122][Stage 26:=====================================================>(121 + 1) / 122]                                                                                [Stage 27:============================>                         (64 + 59) / 123][Stage 27:===============================>                      (72 + 51) / 123][Stage 27:=====================================>                (85 + 38) / 123][Stage 27:===========================================>         (102 + 21) / 123][Stage 27:===================================================>  (117 + 6) / 123][Stage 27:===================================================>  (118 + 5) / 123][Stage 27:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.017128589 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542256386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:====================================>                 (77 + 37) / 114][Stage 28:=========================================>            (87 + 27) / 114][Stage 28:==============================================>      (100 + 14) / 114][Stage 28:===================================================>  (109 + 5) / 114][Stage 28:=====================================================>(113 + 1) / 114]                                                                                [Stage 29:====================================>                 (77 + 38) / 115][Stage 29:==========================================>           (90 + 25) / 115][Stage 29:==============================================>       (99 + 16) / 115][Stage 29:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.90178639 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 18  OR  partitionIndex = 19 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463684317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=================================>                    (72 + 43) / 115][Stage 30:========================================>             (86 + 29) / 115][Stage 30:============================================>         (94 + 21) / 115][Stage 30:==============================================>      (100 + 15) / 115][Stage 30:=================================================>    (106 + 9) / 115][Stage 30:===================================================>  (110 + 5) / 115][Stage 30:=====================================================>(113 + 2) / 115]                                                                                [Stage 31:===============================>                      (68 + 48) / 116][Stage 31:====================================>                 (78 + 38) / 116][Stage 31:========================================>             (88 + 28) / 116][Stage 31:==============================================>      (102 + 14) / 116][Stage 31:===================================================>  (110 + 6) / 116][Stage 31:=====================================================>(114 + 2) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.833042369 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234  OR   partitionIndex = 248  OR  partitionIndex = 249 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 248  OR  partitionIndex = 249 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.540499262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (70 + 45) / 115][Stage 32:======================================>               (82 + 33) / 115][Stage 32:===============================================>     (103 + 12) / 115][Stage 32:====================================================> (111 + 4) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:================================>                     (69 + 47) / 116][Stage 33:=======================================>              (84 + 32) / 116][Stage 33:=============================================>       (100 + 16) / 116][Stage 33:====================================================> (112 + 4) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.05584531 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484469664 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (61 + 60) / 121][Stage 34:=============================>                        (65 + 56) / 121][Stage 34:=================================>                    (76 + 45) / 121][Stage 34:=======================================>              (89 + 32) / 121][Stage 34:===============================================>     (109 + 12) / 121][Stage 34:====================================================> (117 + 4) / 121]                                                                                [Stage 35:===========================>                          (63 + 59) / 122][Stage 35:===============================>                      (72 + 50) / 122][Stage 35:=======================================>              (89 + 33) / 122][Stage 35:===============================================>     (109 + 13) / 122][Stage 35:====================================================> (119 + 3) / 122][Stage 35:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.099574815 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 28  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 28  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404986314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (83 + 32) / 115][Stage 36:=============================================>        (97 + 18) / 115][Stage 36:===================================================>  (109 + 6) / 115]                                                                                [Stage 37:=======================================>              (84 + 32) / 116][Stage 37:=========================================>            (90 + 26) / 116][Stage 37:==============================================>      (102 + 14) / 116][Stage 37:==================================================>   (109 + 7) / 116][Stage 37:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.875715142 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR   partitionIndex = 129  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511658679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 61) / 122][Stage 38:============================>                         (64 + 58) / 122][Stage 38:====================================>                 (82 + 40) / 122][Stage 38:===========================================>          (98 + 24) / 122][Stage 38:===================================================>  (116 + 6) / 122][Stage 38:====================================================> (118 + 4) / 122]                                                                                [Stage 39:==========================>                           (61 + 62) / 123][Stage 39:================================>                     (75 + 48) / 123][Stage 39:===========================================>         (102 + 21) / 123][Stage 39:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.609769072 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR   partitionIndex = 200  OR  partitionIndex = 201 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472729706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (83 + 32) / 115][Stage 40:==========================================>           (90 + 25) / 115][Stage 40:===============================================>     (104 + 11) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:=========================================>            (89 + 27) / 116][Stage 41:=============================================>        (98 + 18) / 116][Stage 41:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.692817255 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  pa rtitionIndex = 95  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (80 + 35) / 115][Stage 42:=========================================>            (88 + 27) / 115][Stage 42:==============================================>       (99 + 16) / 115][Stage 42:====================================================> (111 + 4) / 115]                                                                                [Stage 43:=======================================>              (84 + 32) / 116][Stage 43:==========================================>           (92 + 24) / 116][Stage 43:==============================================>      (102 + 14) / 116][Stage 43:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.897978651 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  par titionIndex = 23  OR  partitionIndex = 36 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:========================================>             (86 + 29) / 115][Stage 44:===========================================>          (93 + 22) / 115][Stage 44:===============================================>     (103 + 12) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:========================================>             (86 + 30) / 116][Stage 45:==============================================>       (99 + 17) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:=====================================================>(114 + 2) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.288554221 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR   partitionIndex = 173  OR  partitionIndex = 188 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.546319643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (61 + 60) / 121][Stage 46:============================>                         (64 + 57) / 121][Stage 46:===================================>                  (79 + 42) / 121][Stage 46:===========================================>         (100 + 21) / 121][Stage 46:====================================================> (118 + 3) / 121]                                                                                [Stage 47:===========================>                          (62 + 60) / 122][Stage 47:================================>                     (74 + 48) / 122][Stage 47:======================================>               (86 + 36) / 122][Stage 47:=============================================>       (105 + 17) / 122][Stage 47:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.596693153 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446076927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (71 + 43) / 114][Stage 48:=====================================>                (80 + 34) / 114][Stage 48:=============================================>        (96 + 18) / 114][Stage 48:===============================================>     (102 + 12) / 114][Stage 48:====================================================> (111 + 3) / 114][Stage 48:=====================================================>(112 + 2) / 114]                                                                                [Stage 49:==================================>                   (74 + 41) / 115][Stage 49:========================================>             (86 + 29) / 115][Stage 49:==============================================>       (98 + 17) / 115][Stage 49:==================================================>   (107 + 8) / 115][Stage 49:===================================================>  (110 + 5) / 115][Stage 49:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.419380164 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47149256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 61) / 122][Stage 50:=============================>                        (66 + 56) / 122][Stage 50:===================================>                  (81 + 41) / 122][Stage 50:===========================================>         (101 + 21) / 122][Stage 50:====================================================> (118 + 4) / 122][Stage 50:=====================================================>(120 + 2) / 122]                                                                                [Stage 51:===========================>                          (62 + 61) / 123][Stage 51:=============================>                        (68 + 55) / 123][Stage 51:=====================================>                (86 + 37) / 123][Stage 51:=============================================>       (106 + 17) / 123][Stage 51:====================================================> (120 + 3) / 123][Stage 51:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.761747565 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 238  OR   partitionIndex = 252  OR  partitionIndex = 253 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237  OR  partitionIndex = 238  OR  partitionIndex = 252  OR  partitionIndex = 253 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403394427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (71 + 46) / 117][Stage 52:==================================>                   (75 + 42) / 117][Stage 52:==========================================>           (92 + 25) / 117][Stage 52:=================================================>    (108 + 9) / 117][Stage 52:====================================================> (114 + 3) / 117][Stage 52:=====================================================>(116 + 1) / 117]                                                                                [Stage 53:=================================>                    (73 + 45) / 118][Stage 53:=====================================>                (81 + 37) / 118][Stage 53:============================================>         (97 + 21) / 118][Stage 53:==================================================>   (111 + 7) / 118]                                                                                Time elapsed: 3.269750853 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 250  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454805296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (61 + 61) / 122][Stage 54:==============================>                       (69 + 53) / 122][Stage 54:======================================>               (88 + 34) / 122][Stage 54:==================================================>   (113 + 9) / 122][Stage 54:====================================================> (119 + 3) / 122]                                                                                [Stage 55:===========================>                          (62 + 61) / 123][Stage 55:===============================>                      (72 + 51) / 123][Stage 55:==========================================>           (97 + 26) / 123][Stage 55:===================================================>  (118 + 5) / 123][Stage 55:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.342101105 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR   partitionIndex = 229  OR  partitionIndex = 244 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470689957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==========================>                           (60 + 62) / 122][Stage 56:===========================>                          (62 + 60) / 122][Stage 56:==============================>                       (70 + 52) / 122][Stage 56:========================================>             (92 + 30) / 122][Stage 56:===============================================>     (110 + 12) / 122]                                                                                [Stage 57:===========================>                          (62 + 61) / 123][Stage 57:================================>                     (74 + 49) / 123][Stage 57:========================================>             (93 + 30) / 123][Stage 57:===============================================>     (111 + 12) / 123][Stage 57:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.366344613 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR   partitionIndex = 193  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472193039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:>                                                       (0 + 0) / 121][Stage 58:==========================>                           (60 + 61) / 121][Stage 58:=============================>                        (65 + 56) / 121][Stage 58:=================================>                    (76 + 45) / 121][Stage 58:=============================================>       (103 + 18) / 121][Stage 58:=====================================================>(119 + 2) / 121]                                                                                [Stage 59:===========================>                          (62 + 60) / 122][Stage 59:==============================>                       (68 + 54) / 122][Stage 59:======================================>               (87 + 35) / 122][Stage 59:============================================>        (103 + 19) / 122][Stage 59:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.251357153 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 156  OR  partitionIndex = 157 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.56981673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:============================>                         (64 + 57) / 121][Stage 60:===============================>                      (71 + 50) / 121][Stage 60:=======================================>              (88 + 33) / 121][Stage 60:================================================>    (110 + 11) / 121][Stage 60:=====================================================>(120 + 1) / 121]                                                                                [Stage 61:===========================>                          (61 + 61) / 122][Stage 61:===============================>                      (71 + 51) / 122][Stage 61:===========================================>          (98 + 24) / 122][Stage 61:==================================================>   (115 + 7) / 122][Stage 61:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.538602577 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  pa rtitionIndex = 84  OR  partitionIndex = 85 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358691444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (82 + 33) / 115][Stage 62:========================================>             (87 + 28) / 115][Stage 62:==============================================>       (98 + 17) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:======================================>               (82 + 34) / 116][Stage 63:==========================================>           (92 + 24) / 116][Stage 63:================================================>    (106 + 10) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.601820788 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR   partitionIndex = 215  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420007626 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===============================>                      (67 + 48) / 115][Stage 64:=====================================>                (79 + 36) / 115][Stage 64:=============================================>        (97 + 18) / 115][Stage 64:===============================================>     (103 + 12) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:=====================================>                (80 + 36) / 116][Stage 65:==========================================>           (91 + 25) / 116][Stage 65:================================================>    (106 + 10) / 116][Stage 65:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.090171403 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR   partitionIndex = 223  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402574663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=======================================>              (84 + 30) / 114][Stage 66:============================================>         (93 + 21) / 114][Stage 66:==============================================>      (101 + 13) / 114][Stage 66:===================================================>  (108 + 6) / 114][Stage 66:====================================================> (111 + 3) / 114]                                                                                [Stage 67:======================================>               (82 + 33) / 115][Stage 67:============================================>         (94 + 21) / 115][Stage 67:================================================>    (105 + 10) / 115][Stage 67:==================================================>   (108 + 7) / 115][Stage 67:===================================================>  (110 + 5) / 115][Stage 67:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.436504565 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 126  OR  partitionIndex = 127 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 126  OR  partitionIndex = 127 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400158218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:====================================>                 (76 + 38) / 114][Stage 68:=========================================>            (88 + 26) / 114][Stage 68:==============================================>       (98 + 16) / 114][Stage 68:===================================================>  (108 + 6) / 114][Stage 68:=====================================================>(112 + 2) / 114]                                                                                [Stage 69:======================================>               (82 + 33) / 115][Stage 69:==========================================>           (90 + 25) / 115][Stage 69:===============================================>     (102 + 13) / 115][Stage 69:===================================================>  (110 + 5) / 115][Stage 69:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.383195048 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224  OR   partitionIndex = 225  OR  partitionIndex = 240 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444132597 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (61 + 60) / 121][Stage 70:=============================>                        (67 + 54) / 121][Stage 70:======================================>               (87 + 34) / 121][Stage 70:=================================================>    (112 + 9) / 121][Stage 70:=====================================================>(119 + 2) / 121]                                                                                [Stage 71:===========================>                          (63 + 59) / 122][Stage 71:==============================>                       (70 + 52) / 122][Stage 71:==========================================>           (95 + 27) / 122][Stage 71:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.175705345 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 17  OR  partitionIndex = 18 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395687031 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==================================>                   (74 + 41) / 115][Stage 72:========================================>             (87 + 28) / 115][Stage 72:==============================================>       (99 + 16) / 115][Stage 72:==================================================>   (108 + 7) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:==================================>                   (74 + 42) / 116][Stage 73:=======================================>              (84 + 32) / 116][Stage 73:============================================>         (95 + 21) / 116][Stage 73:================================================>    (106 + 10) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.065157295 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR   partitionIndex = 185  OR  partitionIndex = 186 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIndex = 186 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427854493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (71 + 46) / 117][Stage 74:===================================>                  (77 + 40) / 117][Stage 74:===========================================>          (95 + 22) / 117][Stage 74:====================================================> (113 + 4) / 117]                                                                                [Stage 75:================================>                     (72 + 46) / 118][Stage 75:===================================>                  (78 + 40) / 118][Stage 75:===========================================>          (94 + 24) / 118][Stage 75:=================================================>    (109 + 9) / 118][Stage 75:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.008541951 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394309167 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (71 + 43) / 114][Stage 76:=======================================>              (84 + 30) / 114][Stage 76:=============================================>        (96 + 18) / 114][Stage 76:=================================================>    (105 + 9) / 114][Stage 76:====================================================> (111 + 3) / 114]                                                                                [Stage 77:====================================>                 (78 + 37) / 115][Stage 77:==========================================>           (90 + 25) / 115][Stage 77:==============================================>      (100 + 15) / 115][Stage 77:=================================================>    (106 + 9) / 115][Stage 77:===================================================>  (110 + 5) / 115][Stage 77:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 4.502222204 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 61  OR  partitionIndex = 62 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 61  OR  partitionIndex = 62 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455682709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:================================>                     (73 + 48) / 121][Stage 78:=====================================>                (85 + 36) / 121][Stage 78:==================================================>   (113 + 8) / 121]                                                                                [Stage 79:============================>                         (64 + 58) / 122][Stage 79:==================================>                   (78 + 44) / 122][Stage 79:==========================================>           (95 + 27) / 122][Stage 79:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.143010381 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 122  OR  partitionIndex = 123 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 122  OR  partitionIndex = 123 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393471406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (71 + 46) / 117][Stage 80:========================================>             (87 + 30) / 117][Stage 80:==============================================>      (103 + 14) / 117][Stage 80:====================================================> (114 + 3) / 117]                                                                                [Stage 81:=================================>                    (74 + 44) / 118][Stage 81:========================================>             (88 + 30) / 118][Stage 81:===============================================>     (105 + 13) / 118][Stage 81:====================================================> (115 + 3) / 118][Stage 81:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.330804787 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95  OR  pa rtitionIndex = 108  OR  partitionIndex = 109 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429302633 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:>                                                       (0 + 0) / 122][Stage 82:===========================>                          (61 + 61) / 122][Stage 82:==============================>                       (68 + 54) / 122][Stage 82:======================================>               (86 + 36) / 122][Stage 82:===============================================>     (110 + 12) / 122][Stage 82:====================================================> (118 + 4) / 122]                                                                                [Stage 83:===========================>                          (63 + 60) / 123][Stage 83:================================>                     (75 + 48) / 123][Stage 83:==========================================>           (97 + 26) / 123][Stage 83:==================================================>   (116 + 7) / 123][Stage 83:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.582658479 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32  OR  pa rtitionIndex = 33  OR  partitionIndex = 48 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385193933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (71 + 46) / 117][Stage 84:======================================>               (83 + 34) / 117][Stage 84:=============================================>       (100 + 17) / 117][Stage 84:=====================================================>(115 + 2) / 117]                                                                                [Stage 85:================================>                     (72 + 46) / 118][Stage 85:====================================>                 (80 + 38) / 118][Stage 85:==========================================>           (92 + 26) / 118][Stage 85:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 2.853234821 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425692227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (62 + 60) / 122][Stage 86:===============================>                      (72 + 50) / 122][Stage 86:========================================>             (91 + 31) / 122][Stage 86:================================================>    (111 + 11) / 122]                                                                                [Stage 87:===========================>                          (62 + 61) / 123][Stage 87:===============================>                      (71 + 52) / 123][Stage 87:======================================>               (87 + 36) / 123][Stage 87:===================================================>  (117 + 6) / 123][Stage 87:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.394899799 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423618203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (61 + 60) / 121][Stage 88:============================>                         (64 + 57) / 121][Stage 88:====================================>                 (81 + 40) / 121][Stage 88:===============================================>     (108 + 13) / 121][Stage 88:====================================================> (118 + 3) / 121]                                                                                [Stage 89:============================>                         (64 + 58) / 122][Stage 89:=================================>                    (75 + 47) / 122][Stage 89:==========================================>           (96 + 26) / 122][Stage 89:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.154228994 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (61 + 60) / 121][Stage 90:=============================>                        (65 + 56) / 121][Stage 90:====================================>                 (81 + 40) / 121][Stage 90:==============================================>      (107 + 14) / 121][Stage 90:====================================================> (118 + 3) / 121]                                                                                [Stage 91:===========================>                          (62 + 60) / 122][Stage 91:==================================>                   (77 + 45) / 122][Stage 91:==========================================>           (95 + 27) / 122][Stage 91:===================================================>  (116 + 6) / 122][Stage 91:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.459390295 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 89  OR  partitionIndex = 90 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389752777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (71 + 46) / 117][Stage 92:==================================>                   (74 + 43) / 117][Stage 92:======================================>               (84 + 33) / 117][Stage 92:=============================================>       (101 + 16) / 117][Stage 92:===================================================>  (112 + 5) / 117]                                                                                [Stage 93:=================================>                    (73 + 45) / 118][Stage 93:====================================>                 (80 + 38) / 118][Stage 93:==========================================>           (93 + 25) / 118][Stage 93:==============================================>      (104 + 14) / 118][Stage 93:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.495942759 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 54  OR  partitionIndex = 55 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (71 + 46) / 117][Stage 94:==================================>                   (74 + 43) / 117][Stage 94:========================================>             (87 + 30) / 117][Stage 94:=============================================>       (101 + 16) / 117][Stage 94:====================================================> (114 + 3) / 117]                                                                                [Stage 95:================================>                     (72 + 46) / 118][Stage 95:==================================>                   (76 + 42) / 118][Stage 95:=======================================>              (86 + 32) / 118][Stage 95:============================================>        (100 + 18) / 118][Stage 95:==================================================>   (111 + 7) / 118]                                                                                Time elapsed: 3.223250652 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368460288 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:====================================>                 (77 + 37) / 114][Stage 96:============================================>         (93 + 21) / 114][Stage 96:================================================>    (104 + 10) / 114][Stage 96:===================================================>  (109 + 5) / 114]                                                                                [Stage 97:=====================================>                (79 + 36) / 115][Stage 97:=============================================>        (96 + 19) / 115][Stage 97:===============================================>     (104 + 11) / 115][Stage 97:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 2.912148256 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 152  OR  partitionIndex = 153 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 152  OR  partitionIndex = 153 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424165782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (61 + 61) / 122][Stage 98:===========================>                          (62 + 60) / 122][Stage 98:=====================================>                (85 + 37) / 122][Stage 98:=============================================>       (105 + 17) / 122][Stage 98:==================================================>   (115 + 7) / 122]                                                                                [Stage 99:============================>                         (65 + 58) / 123][Stage 99:=================================>                    (76 + 47) / 123][Stage 99:===========================================>         (100 + 23) / 123][Stage 99:==================================================>   (115 + 8) / 123][Stage 99:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.444802517 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 231  OR   partitionIndex = 246  OR  partitionIndex = 247 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370881831 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===================================>                 (77 + 37) / 114][Stage 100:=========================================>           (90 + 24) / 114][Stage 100:==============================================>      (99 + 15) / 114][Stage 100:==================================================>  (108 + 6) / 114]                                                                                [Stage 101:====================================>                (80 + 35) / 115][Stage 101:==========================================>          (93 + 22) / 115][Stage 101:=============================================>       (99 + 16) / 115][Stage 101:=================================================>   (108 + 7) / 115][Stage 101:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 2.978780457 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384272848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:======================================>              (82 + 32) / 114][Stage 102:========================================>            (88 + 26) / 114][Stage 102:============================================>        (95 + 19) / 114][Stage 102:=================================================>   (107 + 7) / 114][Stage 102:====================================================>(113 + 1) / 114]                                                                                [Stage 103:====================================>                (79 + 36) / 115][Stage 103:======================================>              (83 + 32) / 115][Stage 103:=============================================>       (99 + 16) / 115][Stage 103:==================================================>  (109 + 6) / 115][Stage 103:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.734313151 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86  OR  pa rtitionIndex = 87  OR  partitionIndex = 100 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351499404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:======================================>              (83 + 32) / 115][Stage 104:===========================================>         (94 + 21) / 115][Stage 104:=================================================>   (107 + 8) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:=======================================>             (87 + 29) / 116][Stage 105:============================================>       (100 + 16) / 116][Stage 105:=================================================>   (108 + 8) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.880136419 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  pa rtitionIndex = 31  OR  partitionIndex = 44 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38718183 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===================================>                 (76 + 38) / 114][Stage 106:=========================================>           (90 + 24) / 114][Stage 106:=============================================>       (98 + 16) / 114][Stage 106:=================================================>   (106 + 8) / 114][Stage 106:===================================================> (111 + 3) / 114]                                                                                [Stage 107:===================================>                 (78 + 37) / 115][Stage 107:===========================================>         (94 + 21) / 115][Stage 107:=============================================>      (101 + 14) / 115][Stage 107:================================================>    (106 + 9) / 115][Stage 107:==================================================>  (109 + 6) / 115][Stage 107:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.708736584 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 102  OR   partitionIndex = 116  OR  partitionIndex = 117 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 116  OR  partitionIndex = 117 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366294882 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (70 + 44) / 114][Stage 108:====================================>                (79 + 35) / 114][Stage 108:===========================================>         (93 + 21) / 114][Stage 108:===============================================>    (104 + 10) / 114][Stage 108:===================================================> (110 + 4) / 114]                                                                                [Stage 109:======================================>              (83 + 32) / 115][Stage 109:==========================================>          (92 + 23) / 115][Stage 109:==============================================>     (103 + 12) / 115][Stage 109:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.041663623 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438337076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (61 + 61) / 122][Stage 110:===========================>                         (64 + 58) / 122][Stage 110:==================================>                  (80 + 42) / 122][Stage 110:===========================================>         (99 + 23) / 122][Stage 110:=================================================>   (114 + 8) / 122]                                                                                [Stage 111:===========================>                         (63 + 60) / 123][Stage 111:===============================>                     (72 + 51) / 123][Stage 111:=========================================>           (96 + 27) / 123][Stage 111:===============================================>    (112 + 11) / 123]                                                                                Time elapsed: 3.341132873 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR   partitionIndex = 172  OR  partitionIndex = 173 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412503922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 60) / 121][Stage 112:===============================>                     (71 + 50) / 121][Stage 112:========================================>            (92 + 29) / 121][Stage 112:===============================================>    (110 + 11) / 121]                                                                                [Stage 113:===========================>                         (63 + 59) / 122][Stage 113:================================>                    (74 + 48) / 122][Stage 113:=========================================>           (96 + 26) / 122][Stage 113:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.115611352 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 213 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 213 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392307115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=================================>                   (73 + 41) / 114][Stage 114:=======================================>             (85 + 29) / 114][Stage 114:===========================================>         (94 + 20) / 114][Stage 114:=================================================>   (106 + 8) / 114][Stage 114:====================================================>(112 + 2) / 114]                                                                                [Stage 115:==================================>                  (74 + 41) / 115][Stage 115:=======================================>             (85 + 30) / 115][Stage 115:=============================================>      (100 + 15) / 115][Stage 115:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 2.735600709 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62  OR  pa rtitionIndex = 63  OR  partitionIndex = 72 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377603795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 45) / 117][Stage 116:====================================>                (80 + 37) / 117][Stage 116:============================================>        (98 + 19) / 117][Stage 116:==================================================>  (111 + 6) / 117]                                                                                [Stage 117:================================>                    (73 + 45) / 118][Stage 117:===================================>                 (79 + 39) / 118][Stage 117:============================================>       (100 + 18) / 118][Stage 117:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.256184489 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368369842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (71 + 46) / 117][Stage 118:=================================>                   (73 + 44) / 117][Stage 118:======================================>              (85 + 32) / 117][Stage 118:============================================>       (101 + 16) / 117][Stage 118:====================================================>(116 + 1) / 117]                                                                                [Stage 119:================================>                    (73 + 45) / 118][Stage 119:======================================>              (86 + 32) / 118][Stage 119:=============================================>      (103 + 15) / 118][Stage 119:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.259725129 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR   partitionIndex = 152  OR  partitionIndex = 153 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 152  OR  partitionIndex = 153 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370604325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=================================>                   (73 + 41) / 114][Stage 120:=========================================>           (89 + 25) / 114][Stage 120:=============================================>      (100 + 14) / 114][Stage 120:==================================================>  (108 + 6) / 114][Stage 120:====================================================>(113 + 1) / 114]                                                                                [Stage 121:===================================>                 (78 + 37) / 115][Stage 121:=========================================>           (90 + 25) / 115][Stage 121:=============================================>      (101 + 14) / 115][Stage 121:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 2.879460527 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 157  OR  partitionIndex = 158 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 157  OR  partitionIndex = 158 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=====================================>               (81 + 33) / 114][Stage 122:===========================================>         (93 + 21) / 114][Stage 122:================================================>    (105 + 9) / 114][Stage 122:===================================================> (111 + 3) / 114]                                                                                [Stage 123:======================================>              (84 + 31) / 115][Stage 123:============================================>        (97 + 18) / 115][Stage 123:===============================================>    (105 + 10) / 115][Stage 123:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.931030391 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  p artitionIndex = 101  OR  partitionIndex = 116 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40581067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 61) / 121][Stage 124:==============================>                      (70 + 51) / 121][Stage 124:=======================================>             (91 + 30) / 121][Stage 124:=============================================>      (107 + 14) / 121][Stage 124:====================================================>(119 + 2) / 121]                                                                                [Stage 125:==========================>                          (62 + 60) / 122][Stage 125:=============================>                       (69 + 53) / 122][Stage 125:====================================>                (83 + 39) / 122][Stage 125:===========================================>        (101 + 21) / 122][Stage 125:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.359733367 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 84  OR  partitionIndex = 85 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403433227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (62 + 59) / 121][Stage 126:================================>                    (75 + 46) / 121][Stage 126:========================================>            (93 + 28) / 121][Stage 126:===================================================> (117 + 4) / 121]                                                                                [Stage 127:=============================>                       (67 + 55) / 122][Stage 127:===================================>                 (82 + 40) / 122][Stage 127:=========================================>           (96 + 26) / 122][Stage 127:==================================================>  (116 + 6) / 122][Stage 127:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.368149534 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333595575 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=====================================>               (81 + 34) / 115][Stage 128:===========================================>         (95 + 20) / 115][Stage 128:==============================================>     (103 + 12) / 115][Stage 128:====================================================>(113 + 2) / 115]                                                                                [Stage 129:=====================================>               (83 + 33) / 116][Stage 129:========================================>            (89 + 27) / 116][Stage 129:============================================>        (97 + 19) / 116][Stage 129:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.709907692 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225  OR   partitionIndex = 240  OR  partitionIndex = 241 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240  OR  partitionIndex = 241 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393075592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==============================>                      (66 + 49) / 115][Stage 130:==================================>                  (74 + 41) / 115][Stage 130:========================================>            (88 + 27) / 115][Stage 130:===========================================>         (94 + 21) / 115][Stage 130:================================================>    (106 + 9) / 115]                                                                                [Stage 131:==================================>                  (75 + 41) / 116][Stage 131:==========================================>          (92 + 24) / 116][Stage 131:================================================>    (107 + 9) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.899252435 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201  OR   partitionIndex = 216  OR  partitionIndex = 217 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216  OR  partitionIndex = 217 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399370699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 60) / 121][Stage 132:============================>                        (65 + 56) / 121][Stage 132:==================================>                  (78 + 43) / 121][Stage 132:============================================>       (104 + 17) / 121][Stage 132:====================================================>(119 + 2) / 121]                                                                                [Stage 133:==========================>                          (62 + 60) / 122][Stage 133:=============================>                       (68 + 54) / 122][Stage 133:=======================================>             (91 + 31) / 122][Stage 133:===============================================>    (111 + 11) / 122][Stage 133:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.311247167 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (63 + 58) / 121][Stage 134:==================================>                  (78 + 43) / 121][Stage 134:==========================================>          (96 + 25) / 121][Stage 134:===================================================> (118 + 3) / 121]                                                                                [Stage 135:===========================>                         (63 + 59) / 122][Stage 135:==================================>                  (79 + 43) / 122][Stage 135:===========================================>        (102 + 20) / 122][Stage 135:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.151153096 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400879621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 60) / 121][Stage 136:=============================>                       (68 + 53) / 121][Stage 136:==========================================>          (97 + 24) / 121][Stage 136:===================================================> (117 + 4) / 121]                                                                                [Stage 137:===========================>                         (64 + 58) / 122][Stage 137:================================>                    (75 + 47) / 122][Stage 137:=========================================>           (95 + 27) / 122][Stage 137:=================================================>   (115 + 7) / 122][Stage 137:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.480176178 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  pa rtitionIndex = 104  OR  partitionIndex = 105 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428341196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 61) / 122][Stage 138:============================>                        (65 + 57) / 122][Stage 138:===================================>                 (82 + 40) / 122][Stage 138:============================================>       (104 + 18) / 122][Stage 138:====================================================>(120 + 2) / 122]                                                                                [Stage 139:============================>                        (67 + 56) / 123][Stage 139:==================================>                  (80 + 43) / 123][Stage 139:==============================================>     (109 + 14) / 123][Stage 139:==================================================>  (117 + 6) / 123][Stage 139:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.763142301 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376007868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (67 + 48) / 115][Stage 140:===================================>                 (76 + 39) / 115][Stage 140:=========================================>           (90 + 25) / 115][Stage 140:==================================================>  (109 + 6) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:================================>                    (71 + 45) / 116][Stage 141:=========================================>           (90 + 26) / 116][Stage 141:==============================================>     (103 + 13) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.734601163 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 94  OR  partitionIndex = 95 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 94  OR  partitionIndex = 95 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403657623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (63 + 58) / 121][Stage 142:================================>                    (74 + 47) / 121][Stage 142:==========================================>          (97 + 24) / 121][Stage 142:==================================================>  (116 + 5) / 121][Stage 142:====================================================>(120 + 1) / 121]                                                                                [Stage 143:==========================>                          (62 + 60) / 122][Stage 143:===============================>                     (72 + 50) / 122][Stage 143:=====================================>               (86 + 36) / 122][Stage 143:=================================================>   (113 + 9) / 122][Stage 143:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.278956104 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 30  OR  partitionIndex = 31 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370397779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==================================>                  (74 + 41) / 115][Stage 144:=========================================>           (89 + 26) / 115][Stage 144:==============================================>     (102 + 13) / 115][Stage 144:==================================================>  (109 + 6) / 115]                                                                                [Stage 145:===============================>                     (68 + 48) / 116][Stage 145:===================================>                 (77 + 39) / 116][Stage 145:=============================================>       (99 + 17) / 116][Stage 145:=================================================>   (109 + 7) / 116][Stage 145:==================================================>  (111 + 5) / 116][Stage 145:====================================================>(114 + 2) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.302968956 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 42  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366897214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (71 + 46) / 117][Stage 146:=================================>                   (75 + 42) / 117][Stage 146:======================================>              (85 + 32) / 117][Stage 146:============================================>       (100 + 17) / 117][Stage 146:===================================================> (114 + 3) / 117]                                                                                [Stage 147:================================>                    (73 + 45) / 118][Stage 147:====================================>                (81 + 37) / 118][Stage 147:======================================>              (86 + 32) / 118][Stage 147:============================================>       (100 + 18) / 118][Stage 147:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.646047529 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364723571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 45) / 117][Stage 148:=====================================>               (83 + 34) / 117][Stage 148:===========================================>         (96 + 21) / 117][Stage 148:===================================================> (114 + 3) / 117]                                                                                [Stage 149:================================>                    (72 + 46) / 118][Stage 149:===================================>                 (78 + 40) / 118][Stage 149:======================================>              (85 + 33) / 118][Stage 149:==============================================>     (106 + 12) / 118][Stage 149:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.130403198 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 26  OR  partitionIndex = 27 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370687797 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===================================>                 (76 + 39) / 115][Stage 150:=======================================>             (85 + 30) / 115][Stage 150:=============================================>      (101 + 14) / 115][Stage 150:===================================================> (111 + 4) / 115]                                                                                [Stage 151:===============================>                     (69 + 47) / 116][Stage 151:========================================>            (89 + 27) / 116][Stage 151:=============================================>      (102 + 14) / 116][Stage 151:===============================================>    (106 + 10) / 116][Stage 151:====================================================>(114 + 2) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.755395768 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108  OR  p artitionIndex = 109  OR  partitionIndex = 124 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408556346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===========================>                         (63 + 59) / 122][Stage 152:==============================>                      (71 + 51) / 122][Stage 152:=======================================>             (92 + 30) / 122][Stage 152:===============================================>    (111 + 11) / 122]                                                                                [Stage 153:============================>                        (65 + 58) / 123][Stage 153:================================>                    (76 + 47) / 123][Stage 153:==========================================>          (98 + 25) / 123][Stage 153:=================================================>   (115 + 8) / 123][Stage 153:====================================================>(121 + 2) / 123][Stage 153:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.69872354 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348660788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:====================================>                (78 + 36) / 114][Stage 154:=========================================>           (89 + 25) / 114][Stage 154:=============================================>      (100 + 14) / 114][Stage 154:=================================================>   (107 + 7) / 114][Stage 154:====================================================>(112 + 2) / 114]                                                                                [Stage 155:=====================================>               (82 + 33) / 115][Stage 155:==========================================>          (93 + 22) / 115][Stage 155:==============================================>     (103 + 12) / 115][Stage 155:==================================================>  (110 + 5) / 115][Stage 155:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.285940884 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356192038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=================================>                   (71 + 43) / 114][Stage 156:========================================>            (88 + 26) / 114][Stage 156:=============================================>       (97 + 17) / 114][Stage 156:==============================================>     (103 + 11) / 114][Stage 156:=================================================>   (107 + 7) / 114][Stage 156:====================================================>(113 + 1) / 114]                                                                                [Stage 157:===================================>                 (76 + 39) / 115][Stage 157:========================================>            (88 + 27) / 115][Stage 157:=============================================>       (98 + 17) / 115][Stage 157:================================================>    (106 + 9) / 115][Stage 157:=================================================>   (108 + 7) / 115][Stage 157:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.498597377 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 222  OR  partitionIndex = 223 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374937241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=================================>                   (73 + 42) / 115][Stage 158:=========================================>           (91 + 24) / 115][Stage 158:===============================================>    (105 + 10) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:=================================>                   (74 + 42) / 116][Stage 159:======================================>              (85 + 31) / 116][Stage 159:============================================>        (97 + 19) / 116][Stage 159:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.719707448 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151  OR   partitionIndex = 164  OR  partitionIndex = 165 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406593421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 60) / 121][Stage 160:===============================>                     (73 + 48) / 121][Stage 160:========================================>            (92 + 29) / 121][Stage 160:=================================================>   (114 + 7) / 121][Stage 160:====================================================>(120 + 1) / 121]                                                                                [Stage 161:==========================>                          (61 + 61) / 122][Stage 161:===============================>                     (72 + 50) / 122][Stage 161:=====================================>               (86 + 36) / 122][Stage 161:==============================================>     (108 + 14) / 122][Stage 161:===================================================> (119 + 3) / 122][Stage 161:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.559090721 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR   partitionIndex = 191  OR  partitionIndex = 200 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409311184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (61 + 60) / 121][Stage 162:============================>                        (65 + 56) / 121][Stage 162:==================================>                  (78 + 43) / 121][Stage 162:============================================>       (104 + 17) / 121][Stage 162:====================================================>(120 + 1) / 121]                                                                                [Stage 163:==========================>                          (62 + 60) / 122][Stage 163:============================>                        (66 + 56) / 122][Stage 163:===================================>                 (82 + 40) / 122][Stage 163:=============================================>      (107 + 15) / 122][Stage 163:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.256073008 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  par titionIndex = 19  OR  partitionIndex = 32 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333260807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:======================================>              (84 + 31) / 115][Stage 164:===========================================>         (94 + 21) / 115][Stage 164:===================================================> (112 + 3) / 115]                                                                                [Stage 165:======================================>              (84 + 32) / 116][Stage 165:==========================================>          (93 + 23) / 116][Stage 165:===============================================>    (106 + 10) / 116][Stage 165:===================================================> (112 + 4) / 116][Stage 165:====================================================>(114 + 2) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.102170346 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR   partitionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410793285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 60) / 121][Stage 166:==============================>                      (69 + 52) / 121][Stage 166:====================================>                (83 + 38) / 121][Stage 166:=============================================>      (105 + 16) / 121][Stage 166:===================================================> (118 + 3) / 121]                                                                                [Stage 167:============================>                        (65 + 57) / 122][Stage 167:====================================>                (83 + 39) / 122][Stage 167:==========================================>          (98 + 24) / 122][Stage 167:==================================================>  (116 + 6) / 122][Stage 167:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.54674463 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339098013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:======================================>              (84 + 31) / 115][Stage 168:=============================================>       (98 + 17) / 115][Stage 168:===================================================> (112 + 3) / 115]                                                                                [Stage 169:=======================================>             (86 + 30) / 116][Stage 169:============================================>        (98 + 18) / 116][Stage 169:=================================================>   (108 + 8) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.553917455 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 152  OR  partitionIndex = 247 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 152  OR  partitionIndex = 247 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412131306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 60) / 121][Stage 170:===========================>                         (62 + 59) / 121][Stage 170:=================================>                   (77 + 44) / 121][Stage 170:==========================================>          (98 + 23) / 121][Stage 170:===================================================> (118 + 3) / 121]                                                                                [Stage 171:==========================>                          (62 + 60) / 122][Stage 171:==============================>                      (71 + 51) / 122][Stage 171:========================================>            (94 + 28) / 122][Stage 171:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.228552575 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  pa rtitionIndex = 96  OR  partitionIndex = 97 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331481422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (81 + 34) / 115][Stage 172:=========================================>           (89 + 26) / 115][Stage 172:==============================================>     (103 + 12) / 115][Stage 172:====================================================>(114 + 1) / 115]                                                                                [Stage 173:======================================>              (84 + 32) / 116][Stage 173:=========================================>           (90 + 26) / 116][Stage 173:=============================================>       (99 + 17) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.716801301 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150  OR   partitionIndex = 151  OR  partitionIndex = 164 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389261656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (61 + 60) / 121][Stage 174:============================>                        (65 + 56) / 121][Stage 174:==================================>                  (79 + 42) / 121][Stage 174:==========================================>         (100 + 21) / 121][Stage 174:===================================================> (118 + 3) / 121]                                                                                [Stage 175:============================>                        (66 + 56) / 122][Stage 175:================================>                    (75 + 47) / 122][Stage 175:========================================>            (93 + 29) / 122][Stage 175:===================================================> (118 + 4) / 122][Stage 175:====================================================>(120 + 2) / 122][Stage 175:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.720023013 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368890369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===================================>                 (76 + 38) / 114][Stage 176:========================================>            (87 + 27) / 114][Stage 176:===========================================>         (93 + 21) / 114][Stage 176:=============================================>      (100 + 14) / 114][Stage 176:==================================================>  (108 + 6) / 114][Stage 176:====================================================>(113 + 1) / 114]                                                                                [Stage 177:===================================>                 (77 + 38) / 115][Stage 177:=========================================>           (90 + 25) / 115][Stage 177:=============================================>      (101 + 14) / 115][Stage 177:================================================>    (106 + 9) / 115][Stage 177:=================================================>   (108 + 7) / 115][Stage 177:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.393911074 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 171  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==================================>                  (74 + 40) / 114][Stage 178:========================================>            (88 + 26) / 114][Stage 178:==============================================>     (101 + 13) / 114][Stage 178:=================================================>   (106 + 8) / 114][Stage 178:===================================================> (110 + 4) / 114]                                                                                [Stage 179:===================================>                 (78 + 37) / 115][Stage 179:==========================================>          (93 + 22) / 115][Stage 179:==============================================>     (102 + 13) / 115]                                                                                Time elapsed: 2.908860334 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368758608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (71 + 46) / 117][Stage 180:======================================>              (84 + 33) / 117][Stage 180:===========================================>         (97 + 20) / 117][Stage 180:===================================================> (113 + 4) / 117]                                                                                [Stage 181:================================>                    (72 + 46) / 118][Stage 181:==================================>                  (76 + 42) / 118][Stage 181:=========================================>           (93 + 25) / 118][Stage 181:=================================================>   (110 + 8) / 118][Stage 181:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.367663552 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR   partitionIndex = 212  OR  partitionIndex = 213 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 212  OR  partitionIndex = 213 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391372616 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:============================>                        (60 + 53) / 113][Stage 182:=================================>                   (71 + 42) / 113][Stage 182:=========================================>           (88 + 25) / 113][Stage 182:==================================================>  (107 + 6) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:=============================>                       (63 + 51) / 114][Stage 183:====================================>                (79 + 35) / 114][Stage 183:===============================================>    (104 + 10) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.161631127 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 154  OR  partitionIndex = 155 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 154  OR  partitionIndex = 155 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461594865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (80 + 34) / 114][Stage 184:=========================================>           (89 + 25) / 114][Stage 184:=============================================>       (98 + 16) / 114][Stage 184:==================================================>  (109 + 5) / 114][Stage 184:===================================================> (111 + 3) / 114]                                                                                [Stage 185:=====================================>               (82 + 33) / 115][Stage 185:===========================================>         (94 + 21) / 115][Stage 185:==============================================>     (103 + 12) / 115][Stage 185:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.202914495 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR   partitionIndex = 201  OR  partitionIndex = 216 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401482968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:>                                                      (0 + 0) / 121][Stage 186:==========================>                          (61 + 60) / 121][Stage 186:==============================>                      (69 + 52) / 121][Stage 186:===================================>                 (81 + 40) / 121][Stage 186:==============================================>     (108 + 13) / 121][Stage 186:====================================================>(119 + 2) / 121]                                                                                [Stage 187:==============================>                      (70 + 52) / 122][Stage 187:=================================>                   (78 + 44) / 122][Stage 187:===========================================>        (101 + 21) / 122][Stage 187:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.375186229 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  pa rtitionIndex = 72  OR  partitionIndex = 73 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368128906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (72 + 42) / 114][Stage 188:=====================================>               (81 + 33) / 114][Stage 188:============================================>        (96 + 18) / 114][Stage 188:===============================================>    (104 + 10) / 114][Stage 188:==================================================>  (109 + 5) / 114][Stage 188:====================================================>(113 + 1) / 114]                                                                                [Stage 189:==================================>                  (75 + 40) / 115][Stage 189:=========================================>           (90 + 25) / 115][Stage 189:==============================================>     (103 + 12) / 115][Stage 189:==================================================>  (109 + 6) / 115][Stage 189:===================================================> (111 + 4) / 115][Stage 189:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.759696711 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 249  OR  partitionIndex = 250 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==================================>                  (74 + 40) / 114][Stage 190:=========================================>           (90 + 24) / 114][Stage 190:=============================================>      (100 + 14) / 114][Stage 190:==================================================>  (108 + 6) / 114][Stage 190:====================================================>(112 + 2) / 114]                                                                                [Stage 191:======================================>              (83 + 32) / 115][Stage 191:===========================================>         (94 + 21) / 115][Stage 191:==============================================>     (103 + 12) / 115][Stage 191:=================================================>   (107 + 8) / 115][Stage 191:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.297776423 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR   partitionIndex = 159  OR  partitionIndex = 172 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:====================================>                (79 + 35) / 114][Stage 192:==========================================>          (92 + 22) / 114][Stage 192:==============================================>     (102 + 12) / 114][Stage 192:================================================>    (105 + 9) / 114][Stage 192:====================================================>(113 + 1) / 114]                                                                                [Stage 193:====================================>                (79 + 36) / 115][Stage 193:===========================================>         (94 + 21) / 115][Stage 193:===============================================>    (105 + 10) / 115][Stage 193:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.12474312 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 209  OR  partitionIndex = 210 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 209  OR  partitionIndex = 210 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364148599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (71 + 46) / 117][Stage 194:====================================>                (80 + 37) / 117][Stage 194:=======================================>             (87 + 30) / 117][Stage 194:============================================>       (101 + 16) / 117][Stage 194:====================================================>(115 + 2) / 117]                                                                                [Stage 195:================================>                    (72 + 46) / 118][Stage 195:=================================>                   (75 + 43) / 118][Stage 195:=======================================>             (88 + 30) / 118][Stage 195:============================================>       (100 + 18) / 118][Stage 195:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.428327299 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 213  OR  partitionIndex = 214 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 213  OR  partitionIndex = 214 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359230332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (71 + 46) / 117][Stage 196:==================================>                  (76 + 41) / 117][Stage 196:======================================>              (84 + 33) / 117][Stage 196:============================================>       (100 + 17) / 117][Stage 196:=================================================>   (110 + 7) / 117][Stage 196:====================================================>(116 + 1) / 117]                                                                                [Stage 197:================================>                    (72 + 46) / 118][Stage 197:=================================>                   (75 + 43) / 118][Stage 197:=====================================>               (84 + 34) / 118][Stage 197:=============================================>      (103 + 15) / 118][Stage 197:==================================================>  (113 + 5) / 118][Stage 197:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.485501966 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36  OR  pa rtitionIndex = 37  OR  partitionIndex = 52 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 52 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363719798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:====================================>                (79 + 35) / 114][Stage 198:=========================================>           (89 + 25) / 114][Stage 198:=============================================>       (97 + 17) / 114][Stage 198:==================================================>  (108 + 6) / 114][Stage 198:====================================================>(112 + 2) / 114]                                                                                [Stage 199:====================================>                (79 + 36) / 115][Stage 199:=========================================>           (90 + 25) / 115][Stage 199:============================================>        (96 + 19) / 115][Stage 199:==============================================>     (103 + 12) / 115][Stage 199:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 4.676249659 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 246  OR  partitionIndex = 247 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 246  OR  partitionIndex = 247 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39812886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (61 + 61) / 122][Stage 200:=============================>                       (68 + 54) / 122][Stage 200:=====================================>               (87 + 35) / 122][Stage 200:=============================================>      (107 + 15) / 122]                                                                                [Stage 201:==========================>                          (62 + 61) / 123][Stage 201:============================>                        (66 + 57) / 123][Stage 201:==================================>                  (80 + 43) / 123][Stage 201:=========================================>           (97 + 26) / 123][Stage 201:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.390071157 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 22:24:50 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:37238) dropped. RpcEnv already stopped.
17/05/29 22:24:50 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:37238) dropped. RpcEnv already stopped.

real	10m32.143s
user	11m55.436s
sys	0m59.600s
