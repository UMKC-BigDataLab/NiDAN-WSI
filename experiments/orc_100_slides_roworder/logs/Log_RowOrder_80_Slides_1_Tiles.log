Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 00:42:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:42:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:42:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:42:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 00:42:29 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 00:42:40 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530004229-0703).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.397929182 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=========>                                             (19 + 96) / 115][Stage 0:=========================>                             (53 + 62) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:========================================>              (86 + 30) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 13.176601126 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==========================>                            (55 + 60) / 115][Stage 2:===============================>                       (66 + 49) / 115][Stage 2:================================>                      (67 + 48) / 115][Stage 2:=================================>                     (71 + 44) / 115][Stage 2:=====================================>                 (78 + 37) / 115][Stage 2:=========================================>             (86 + 29) / 115][Stage 2:===========================================>           (90 + 25) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:=============================================>         (96 + 19) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:===============================>                       (67 + 49) / 116][Stage 3:================================>                      (68 + 48) / 116][Stage 3:=================================>                     (71 + 45) / 116][Stage 3:====================================>                  (77 + 39) / 116][Stage 3:=======================================>               (84 + 32) / 116][Stage 3:=============================================>         (95 + 21) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:================================================>     (104 + 12) / 116][Stage 3:====================================================>  (110 + 6) / 116][Stage 3:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.615177612 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.724613186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=======================>                               (49 + 64) / 113][Stage 4:===========================>                           (56 + 57) / 113][Stage 4:==============================>                        (62 + 51) / 113][Stage 4:================================>                      (66 + 47) / 113][Stage 4:===================================>                   (72 + 41) / 113][Stage 4:=========================================>             (85 + 28) / 113][Stage 4:===============================================>       (98 + 15) / 113][Stage 4:=====================================================> (110 + 3) / 113]                                                                                [Stage 5:===========================>                           (57 + 57) / 114][Stage 5:=============================>                         (62 + 52) / 114][Stage 5:==================================>                    (72 + 42) / 114][Stage 5:=======================================>               (82 + 32) / 114][Stage 5:===============================================>       (99 + 15) / 114][Stage 5:===================================================>   (106 + 8) / 114][Stage 5:=====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.490421976 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:============================>                          (59 + 54) / 113][Stage 6:=============================>                         (60 + 53) / 113][Stage 6:==================================>                    (71 + 42) / 113][Stage 6:=========================================>             (86 + 27) / 113][Stage 6:================================================>     (101 + 12) / 113][Stage 6:====================================================>  (108 + 5) / 113][Stage 6:======================================================>(112 + 1) / 113]                                                                                [Stage 7:============================>                          (60 + 54) / 114][Stage 7:=============================>                         (61 + 53) / 114][Stage 7:=================================>                     (70 + 44) / 114][Stage 7:============================================>          (92 + 22) / 114][Stage 7:=================================================>    (104 + 10) / 114][Stage 7:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.08201047 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.766873229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 62) / 122][Stage 8:===========================>                           (61 + 61) / 122][Stage 8:===========================>                           (62 + 60) / 122][Stage 8:================================>                      (71 + 51) / 122][Stage 8:=======================================>               (88 + 34) / 122][Stage 8:=============================================>        (103 + 19) / 122][Stage 8:======================================================>(121 + 1) / 122]                                                                                [Stage 9:===========================>                           (62 + 61) / 123][Stage 9:=============================>                         (67 + 56) / 123][Stage 9:===================================>                   (79 + 44) / 123][Stage 9:==========================================>            (95 + 28) / 123][Stage 9:===============================================>      (109 + 14) / 123][Stage 9:=====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.681120495 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.575435025 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (71 + 46) / 117][Stage 10:==================================>                   (74 + 43) / 117][Stage 10:========================================>             (88 + 29) / 117][Stage 10:==============================================>      (102 + 15) / 117][Stage 10:===================================================>  (112 + 5) / 117][Stage 10:=====================================================>(116 + 1) / 117]                                                                                [Stage 11:================================>                     (72 + 46) / 118][Stage 11:==================================>                   (75 + 43) / 118][Stage 11:======================================>               (84 + 34) / 118][Stage 11:=============================================>       (101 + 17) / 118][Stage 11:==================================================>   (110 + 8) / 118][Stage 11:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.743324372 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57526074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (71 + 43) / 114][Stage 12:=======================================>              (84 + 30) / 114][Stage 12:============================================>         (93 + 21) / 114][Stage 12:=================================================>    (105 + 9) / 114][Stage 12:===================================================>  (109 + 5) / 114][Stage 12:=====================================================>(112 + 2) / 114][Stage 12:=====================================================>(113 + 1) / 114]                                                                                [Stage 13:=================================>                    (72 + 43) / 115][Stage 13:======================================>               (82 + 33) / 115][Stage 13:===========================================>          (93 + 22) / 115][Stage 13:===============================================>     (103 + 12) / 115][Stage 13:===================================================>  (110 + 5) / 115][Stage 13:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.873396955 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.559174963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (55 + 58) / 113][Stage 14:============================>                         (59 + 54) / 113][Stage 14:=================================>                    (70 + 43) / 113][Stage 14:===========================================>          (91 + 22) / 113][Stage 14:===================================================>  (108 + 5) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:===========================>                          (57 + 57) / 114][Stage 15:==============================>                       (65 + 49) / 114][Stage 15:====================================>                 (77 + 37) / 114][Stage 15:============================================>         (93 + 21) / 114][Stage 15:==============================================>      (101 + 13) / 114][Stage 15:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.703272294 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.623706178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 62) / 122][Stage 16:===============================>                      (72 + 50) / 122][Stage 16:=======================================>              (90 + 32) / 122][Stage 16:==============================================>      (108 + 14) / 122][Stage 16:====================================================> (118 + 4) / 122][Stage 16:====================================================> (119 + 3) / 122]                                                                                [Stage 17:===========================>                          (62 + 61) / 123][Stage 17:============================>                         (66 + 57) / 123][Stage 17:====================================>                 (82 + 41) / 123][Stage 17:=============================================>       (106 + 17) / 123][Stage 17:===================================================>  (117 + 6) / 123][Stage 17:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.653175455 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (61 + 61) / 122][Stage 18:==============================>                       (68 + 54) / 122][Stage 18:=======================================>              (90 + 32) / 122][Stage 18:=============================================>       (105 + 17) / 122][Stage 18:================================================>    (112 + 10) / 122][Stage 18:====================================================> (119 + 3) / 122]                                                                                [Stage 19:===========================>                          (63 + 60) / 123][Stage 19:==================================>                   (79 + 44) / 123][Stage 19:===========================================>         (100 + 23) / 123][Stage 19:====================================================> (119 + 4) / 123][Stage 19:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.646735083 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.56594789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (59 + 62) / 121][Stage 20:==========================>                           (60 + 61) / 121][Stage 20:===============================>                      (70 + 51) / 121][Stage 20:=====================================>                (85 + 36) / 121][Stage 20:================================================>    (110 + 11) / 121][Stage 20:=====================================================>(120 + 1) / 121]                                                                                [Stage 21:===========================>                          (61 + 61) / 122][Stage 21:============================>                         (64 + 58) / 122][Stage 21:===================================>                  (80 + 42) / 122][Stage 21:==============================================>      (107 + 15) / 122]                                                                                Time elapsed: 3.406311022 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443301388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:========================================>             (86 + 29) / 115][Stage 22:============================================>         (94 + 21) / 115][Stage 22:===================================================>  (109 + 6) / 115]                                                                                [Stage 23:======================================>               (83 + 33) / 116][Stage 23:============================================>         (96 + 20) / 116][Stage 23:==================================================>   (109 + 7) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.987862466 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504937538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==================================>                   (73 + 42) / 115][Stage 24:=========================================>            (88 + 27) / 115][Stage 24:=================================================>    (106 + 9) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:================================>                     (69 + 47) / 116][Stage 25:======================================>               (83 + 33) / 116][Stage 25:==========================================>           (92 + 24) / 116][Stage 25:==============================================>      (101 + 15) / 116][Stage 25:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.017155155 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.568639504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (61 + 60) / 121][Stage 26:============================>                         (64 + 57) / 121][Stage 26:===================================>                  (79 + 42) / 121][Stage 26:=============================================>       (104 + 17) / 121][Stage 26:====================================================> (117 + 4) / 121]                                                                                [Stage 27:===========================>                          (62 + 60) / 122][Stage 27:==============================>                       (68 + 54) / 122][Stage 27:=========================================>            (93 + 29) / 122][Stage 27:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.152387244 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421871763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (82 + 33) / 115][Stage 28:========================================>             (86 + 29) / 115][Stage 28:==============================================>      (100 + 15) / 115][Stage 28:================================================>    (105 + 10) / 115][Stage 28:===================================================>  (109 + 6) / 115][Stage 28:====================================================> (112 + 3) / 115]                                                                                [Stage 29:=======================================>              (85 + 31) / 116][Stage 29:============================================>         (95 + 21) / 116][Stage 29:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.084398584 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503627259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (71 + 46) / 117][Stage 30:=================================>                    (73 + 44) / 117][Stage 30:==========================================>           (91 + 26) / 117][Stage 30:===================================================>  (112 + 5) / 117][Stage 30:=====================================================>(116 + 1) / 117]                                                                                [Stage 31:================================>                     (72 + 46) / 118][Stage 31:===================================>                  (77 + 41) / 118][Stage 31:============================================>        (100 + 18) / 118]                                                                                Time elapsed: 2.758515806 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.569325843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (71 + 46) / 117][Stage 32:=======================================>              (85 + 32) / 117][Stage 32:===========================================>          (94 + 23) / 117][Stage 32:================================================>    (107 + 10) / 117][Stage 32:=====================================================>(116 + 1) / 117]                                                                                [Stage 33:================================>                     (72 + 46) / 118][Stage 33:===================================>                  (77 + 41) / 118][Stage 33:========================================>             (88 + 30) / 118][Stage 33:=============================================>       (101 + 17) / 118][Stage 33:==================================================>   (110 + 8) / 118][Stage 33:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.551055004 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470661601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (71 + 46) / 117][Stage 34:=================================>                    (73 + 44) / 117][Stage 34:======================================>               (83 + 34) / 117][Stage 34:==============================================>      (102 + 15) / 117][Stage 34:====================================================> (114 + 3) / 117]                                                                                [Stage 35:================================>                     (72 + 46) / 118][Stage 35:===================================>                  (78 + 40) / 118][Stage 35:=======================================>              (86 + 32) / 118][Stage 35:=============================================>       (102 + 16) / 118][Stage 35:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.306205517 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505700549 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (62 + 60) / 122][Stage 36:=================================>                    (75 + 47) / 122][Stage 36:==========================================>           (96 + 26) / 122][Stage 36:================================================>    (112 + 10) / 122][Stage 36:====================================================> (118 + 4) / 122]                                                                                [Stage 37:===========================>                          (62 + 61) / 123][Stage 37:=============================>                        (67 + 56) / 123][Stage 37:=======================================>              (91 + 32) / 123][Stage 37:===========================================>         (102 + 21) / 123][Stage 37:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.565261326 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440399466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:====================================>                 (78 + 36) / 114][Stage 38:===========================================>          (91 + 23) / 114][Stage 38:================================================>    (104 + 10) / 114][Stage 38:===================================================>  (108 + 6) / 114][Stage 38:=====================================================>(113 + 1) / 114]                                                                                [Stage 39:======================================>               (81 + 34) / 115][Stage 39:============================================>         (95 + 20) / 115][Stage 39:==============================================>      (101 + 14) / 115][Stage 39:==================================================>   (108 + 7) / 115][Stage 39:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.491985642 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516760096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==========================>                           (60 + 61) / 121][Stage 40:===========================>                          (62 + 59) / 121][Stage 40:=================================>                    (76 + 45) / 121][Stage 40:==============================================>      (106 + 15) / 121]                                                                                [Stage 41:===========================>                          (63 + 59) / 122][Stage 41:=================================>                    (76 + 46) / 122][Stage 41:==========================================>           (97 + 25) / 122][Stage 41:==================================================>   (115 + 7) / 122][Stage 41:=====================================================>(120 + 2) / 122][Stage 41:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.2108518 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470636452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (71 + 46) / 117][Stage 42:==================================>                   (74 + 43) / 117][Stage 42:==========================================>           (91 + 26) / 117][Stage 42:================================================>    (107 + 10) / 117]                                                                                [Stage 43:=================================>                    (73 + 45) / 118][Stage 43:=====================================>                (83 + 35) / 118][Stage 43:============================================>        (100 + 18) / 118][Stage 43:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.881490301 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433970506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===================================>                  (74 + 40) / 114][Stage 44:========================================>             (85 + 29) / 114][Stage 44:=============================================>        (97 + 17) / 114][Stage 44:==================================================>   (107 + 7) / 114][Stage 44:=====================================================>(112 + 2) / 114]                                                                                [Stage 45:=======================================>              (85 + 30) / 115][Stage 45:=========================================>            (89 + 26) / 115][Stage 45:==============================================>      (101 + 14) / 115][Stage 45:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.08868686 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555406188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=====================================>                (79 + 35) / 114][Stage 46:============================================>         (93 + 21) / 114][Stage 46:===============================================>     (102 + 12) / 114][Stage 46:==================================================>   (107 + 7) / 114][Stage 46:===================================================>  (109 + 5) / 114][Stage 46:====================================================> (111 + 3) / 114][Stage 46:=====================================================>(112 + 2) / 114]                                                                                [Stage 47:=================================>                    (72 + 43) / 115][Stage 47:========================================>             (87 + 28) / 115][Stage 47:==============================================>      (100 + 15) / 115][Stage 47:==================================================>   (107 + 8) / 115][Stage 47:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.670745051 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498607336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (61 + 60) / 121][Stage 48:===============================>                      (70 + 51) / 121][Stage 48:=======================================>              (89 + 32) / 121][Stage 48:==================================================>   (114 + 7) / 121]                                                                                [Stage 49:===========================>                          (62 + 60) / 122][Stage 49:===============================>                      (72 + 50) / 122][Stage 49:========================================>             (91 + 31) / 122][Stage 49:===============================================>     (110 + 12) / 122][Stage 49:===================================================>  (116 + 6) / 122][Stage 49:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.497677245 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379328329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=======================================>              (84 + 31) / 115][Stage 50:===========================================>          (92 + 23) / 115][Stage 50:==================================================>   (108 + 7) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:========================================>             (88 + 28) / 116][Stage 51:=============================================>        (98 + 18) / 116][Stage 51:==================================================>   (109 + 7) / 116][Stage 51:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.835999131 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406103549 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (71 + 46) / 117][Stage 52:======================================>               (84 + 33) / 117][Stage 52:==============================================>      (102 + 15) / 117][Stage 52:=====================================================>(116 + 1) / 117]                                                                                [Stage 53:================================>                     (72 + 46) / 118][Stage 53:=================================>                    (74 + 44) / 118][Stage 53:==========================================>           (92 + 26) / 118][Stage 53:=================================================>    (109 + 9) / 118][Stage 53:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.969185496 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:=================================>                    (72 + 45) / 117][Stage 54:===================================>                  (77 + 40) / 117][Stage 54:===========================================>          (94 + 23) / 117][Stage 54:==================================================>   (110 + 7) / 117]                                                                                [Stage 55:================================>                     (72 + 46) / 118][Stage 55:===================================>                  (77 + 41) / 118][Stage 55:============================================>         (98 + 20) / 118][Stage 55:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.970316272 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450330089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (61 + 60) / 121][Stage 56:===========================>                          (62 + 59) / 121][Stage 56:===============================>                      (70 + 51) / 121][Stage 56:===========================================>          (97 + 24) / 121][Stage 56:===================================================>  (115 + 6) / 121]                                                                                [Stage 57:===========================>                          (61 + 61) / 122][Stage 57:==============================>                       (69 + 53) / 122][Stage 57:===================================>                  (80 + 42) / 122][Stage 57:============================================>        (103 + 19) / 122][Stage 57:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.013665076 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39957509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:========================================>             (86 + 29) / 115][Stage 58:============================================>         (94 + 21) / 115][Stage 58:===================================================>  (110 + 5) / 115]                                                                                [Stage 59:========================================>             (87 + 29) / 116][Stage 59:==============================================>      (102 + 14) / 116][Stage 59:====================================================> (112 + 4) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.747356512 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462803608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:============================>                         (59 + 54) / 113][Stage 60:================================>                     (68 + 45) / 113][Stage 60:===========================================>          (92 + 21) / 113][Stage 60:=================================================>    (104 + 9) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:==================================>                   (72 + 42) / 114][Stage 61:===========================================>          (91 + 23) / 114][Stage 61:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.23487835 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447647961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (73 + 42) / 115][Stage 62:=======================================>              (84 + 31) / 115][Stage 62:=============================================>        (97 + 18) / 115][Stage 62:===============================================>     (103 + 12) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:===============================>                      (68 + 48) / 116][Stage 63:======================================>               (83 + 33) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:===============================================>     (105 + 11) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.145765682 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==============================>                       (66 + 49) / 115][Stage 64:=====================================>                (79 + 36) / 115][Stage 64:============================================>         (95 + 20) / 115][Stage 64:===============================================>     (104 + 11) / 115][Stage 64:===================================================>  (110 + 5) / 115]                                                                                [Stage 65:==================================>                   (75 + 41) / 116][Stage 65:======================================>               (83 + 33) / 116][Stage 65:==============================================>      (101 + 15) / 116][Stage 65:==================================================>   (109 + 7) / 116][Stage 65:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.194179606 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454765716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==========================>                           (60 + 61) / 121][Stage 66:============================>                         (63 + 58) / 121][Stage 66:=================================>                    (76 + 45) / 121][Stage 66:=============================================>       (104 + 17) / 121][Stage 66:==================================================>   (114 + 7) / 121][Stage 66:====================================================> (117 + 4) / 121][Stage 66:=====================================================>(119 + 2) / 121]                                                                                [Stage 67:===========================>                          (63 + 59) / 122][Stage 67:===============================>                      (71 + 51) / 122][Stage 67:========================================>             (91 + 31) / 122][Stage 67:==================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.489006272 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405930533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (71 + 46) / 117][Stage 68:=================================>                    (73 + 44) / 117][Stage 68:=====================================>                (81 + 36) / 117][Stage 68:================================================>    (106 + 11) / 117][Stage 68:=====================================================>(116 + 1) / 117]                                                                                [Stage 69:=================================>                    (73 + 45) / 118][Stage 69:======================================>               (85 + 33) / 118][Stage 69:============================================>        (100 + 18) / 118][Stage 69:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.13506161 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369584752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:========================================>             (86 + 29) / 115][Stage 70:============================================>         (95 + 20) / 115][Stage 70:==================================================>   (107 + 8) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:======================================>               (83 + 33) / 116][Stage 71:===========================================>          (94 + 22) / 116][Stage 71:==================================================>   (108 + 8) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.696253558 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442850652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==========================>                           (60 + 62) / 122][Stage 72:===========================>                          (62 + 60) / 122][Stage 72:===============================>                      (72 + 50) / 122][Stage 72:=============================================>       (104 + 18) / 122][Stage 72:================================================>    (112 + 10) / 122][Stage 72:=====================================================>(121 + 1) / 122]                                                                                [Stage 73:===========================>                          (62 + 61) / 123][Stage 73:============================>                         (65 + 58) / 123][Stage 73:====================================>                 (82 + 41) / 123][Stage 73:===========================================>         (102 + 21) / 123][Stage 73:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.196121244 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (61 + 61) / 122][Stage 74:==============================>                       (69 + 53) / 122][Stage 74:=======================================>              (90 + 32) / 122][Stage 74:===================================================>  (116 + 6) / 122]                                                                                [Stage 75:===========================>                          (63 + 60) / 123][Stage 75:==============================>                       (69 + 54) / 123][Stage 75:========================================>             (93 + 30) / 123][Stage 75:==================================================>   (116 + 7) / 123][Stage 75:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.104130537 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436150353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (71 + 46) / 117][Stage 76:==================================>                   (74 + 43) / 117][Stage 76:===========================================>          (94 + 23) / 117][Stage 76:=====================================================>(115 + 2) / 117]                                                                                [Stage 77:================================>                     (72 + 46) / 118][Stage 77:=======================================>              (86 + 32) / 118][Stage 77:==============================================>      (103 + 15) / 118][Stage 77:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.823987129 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394401369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==================================>                   (73 + 41) / 114][Stage 78:======================================>               (82 + 32) / 114][Stage 78:=============================================>        (95 + 19) / 114][Stage 78:===============================================>     (102 + 12) / 114][Stage 78:====================================================> (111 + 3) / 114]                                                                                [Stage 79:==================================>                   (73 + 42) / 115][Stage 79:=======================================>              (85 + 30) / 115][Stage 79:===============================================>     (102 + 13) / 115][Stage 79:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 2.932943249 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440945029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (62 + 59) / 121][Stage 80:=================================>                    (76 + 45) / 121][Stage 80:=======================================>              (89 + 32) / 121][Stage 80:===============================================>     (108 + 13) / 121]                                                                                [Stage 81:===========================>                          (61 + 61) / 122][Stage 81:============================>                         (64 + 58) / 122][Stage 81:==============================>                       (70 + 52) / 122][Stage 81:==========================================>           (95 + 27) / 122][Stage 81:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.119968347 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 222 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461460635 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==========================>                           (60 + 61) / 121][Stage 82:================================>                     (73 + 48) / 121][Stage 82:========================================>             (90 + 31) / 121][Stage 82:================================================>    (110 + 11) / 121]                                                                                [Stage 83:============================>                         (65 + 57) / 122][Stage 83:==================================>                   (79 + 43) / 122][Stage 83:==========================================>           (97 + 25) / 122][Stage 83:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.93382587 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413722202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===============================>                      (68 + 47) / 115][Stage 84:=====================================>                (79 + 36) / 115][Stage 84:===========================================>          (92 + 23) / 115][Stage 84:==================================================>   (107 + 8) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:================================>                     (69 + 47) / 116][Stage 85:====================================>                 (78 + 38) / 116][Stage 85:=============================================>        (97 + 19) / 116][Stage 85:==================================================>   (108 + 8) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.963724542 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429552729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===============================>                      (68 + 47) / 115][Stage 86:====================================>                 (78 + 37) / 115][Stage 86:==========================================>           (91 + 24) / 115][Stage 86:===============================================>     (103 + 12) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:================================>                     (70 + 46) / 116][Stage 87:=====================================>                (80 + 36) / 116][Stage 87:=============================================>        (97 + 19) / 116][Stage 87:==================================================>   (108 + 8) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.937192013 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447770256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (61 + 61) / 122][Stage 88:==============================>                       (68 + 54) / 122][Stage 88:======================================>               (87 + 35) / 122][Stage 88:===============================================>     (109 + 13) / 122][Stage 88:=====================================================>(121 + 1) / 122]                                                                                [Stage 89:===========================>                          (62 + 61) / 123][Stage 89:===============================>                      (72 + 51) / 123][Stage 89:======================================>               (88 + 35) / 123][Stage 89:==============================================>      (109 + 14) / 123][Stage 89:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.428454871 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388635692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (71 + 46) / 117][Stage 90:===================================>                  (76 + 41) / 117][Stage 90:==========================================>           (91 + 26) / 117][Stage 90:===============================================>     (105 + 12) / 117][Stage 90:====================================================> (114 + 3) / 117]                                                                                [Stage 91:================================>                     (72 + 46) / 118][Stage 91:=================================>                    (73 + 45) / 118][Stage 91:=====================================>                (83 + 35) / 118][Stage 91:=========================================>            (90 + 28) / 118][Stage 91:================================================>    (108 + 10) / 118][Stage 91:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.403917715 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426974283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (61 + 61) / 122][Stage 92:================================>                     (74 + 48) / 122][Stage 92:===========================================>          (99 + 23) / 122][Stage 92:===================================================>  (117 + 5) / 122]                                                                                [Stage 93:===========================>                          (63 + 60) / 123][Stage 93:================================>                     (75 + 48) / 123][Stage 93:==========================================>           (96 + 27) / 123][Stage 93:==================================================>   (115 + 8) / 123][Stage 93:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.102437541 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 61) / 122][Stage 94:=============================>                        (66 + 56) / 122][Stage 94:====================================>                 (83 + 39) / 122][Stage 94:===============================================>     (109 + 13) / 122][Stage 94:=====================================================>(120 + 2) / 122]                                                                                [Stage 95:=============================>                        (67 + 56) / 123][Stage 95:======================================>               (88 + 35) / 123][Stage 95:=============================================>       (106 + 17) / 123][Stage 95:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.144031526 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435162706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (62 + 59) / 121][Stage 96:=================================>                    (75 + 46) / 121][Stage 96:============================================>         (99 + 22) / 121][Stage 96:===================================================>  (115 + 6) / 121][Stage 96:=====================================================>(120 + 1) / 121]                                                                                [Stage 97:===========================>                          (62 + 60) / 122][Stage 97:==============================>                       (68 + 54) / 122][Stage 97:======================================>               (87 + 35) / 122][Stage 97:=============================================>       (105 + 17) / 122]                                                                                Time elapsed: 3.016339252 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 247 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 247 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.54023456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==========================>                           (60 + 61) / 121][Stage 98:==============================>                       (68 + 53) / 121][Stage 98:=====================================>                (83 + 38) / 121][Stage 98:================================================>    (110 + 11) / 121][Stage 98:=====================================================>(120 + 1) / 121]                                                                                [Stage 99:===========================>                          (62 + 60) / 122][Stage 99:===============================>                      (71 + 51) / 122][Stage 99:========================================>             (91 + 31) / 122][Stage 99:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.966323912 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416628911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 61) / 121][Stage 100:===========================>                         (63 + 58) / 121][Stage 100:==================================>                  (79 + 42) / 121][Stage 100:===========================================>        (101 + 20) / 121][Stage 100:===================================================> (118 + 3) / 121]                                                                                [Stage 101:==========================>                          (62 + 60) / 122][Stage 101:==============================>                      (70 + 52) / 122][Stage 101:===================================>                 (81 + 41) / 122][Stage 101:=================================================>   (115 + 7) / 122][Stage 101:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.89395879 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432368377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:============================>                        (64 + 57) / 121][Stage 102:===============================>                     (73 + 48) / 121][Stage 102:=======================================>             (91 + 30) / 121][Stage 102:=================================================>   (114 + 7) / 121][Stage 102:====================================================>(119 + 2) / 121]                                                                                [Stage 103:==========================>                          (62 + 60) / 122][Stage 103:=============================>                       (67 + 55) / 122][Stage 103:====================================>                (84 + 38) / 122][Stage 103:===========================================>        (101 + 21) / 122][Stage 103:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.185596351 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433189583 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 60) / 121][Stage 104:=============================>                       (68 + 53) / 121][Stage 104:==========================================>          (96 + 25) / 121][Stage 104:=================================================>   (112 + 9) / 121][Stage 104:====================================================>(120 + 1) / 121]                                                                                [Stage 105:==========================>                          (62 + 60) / 122][Stage 105:==============================>                      (70 + 52) / 122][Stage 105:=====================================>               (86 + 36) / 122][Stage 105:==============================================>     (109 + 13) / 122][Stage 105:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.155116009 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376015336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===================================>                 (77 + 37) / 114][Stage 106:========================================>            (88 + 26) / 114][Stage 106:=============================================>       (98 + 16) / 114][Stage 106:=================================================>   (107 + 7) / 114][Stage 106:====================================================>(113 + 1) / 114]                                                                                [Stage 107:===================================>                 (76 + 39) / 115][Stage 107:========================================>            (88 + 27) / 115][Stage 107:============================================>        (97 + 18) / 115][Stage 107:===============================================>    (105 + 10) / 115][Stage 107:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.255972294 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345161363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (83 + 32) / 115][Stage 108:=========================================>           (90 + 25) / 115][Stage 108:===============================================>    (104 + 11) / 115][Stage 108:===================================================> (112 + 3) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:======================================>              (85 + 31) / 116][Stage 109:==========================================>          (92 + 24) / 116][Stage 109:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.676296773 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370530188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (71 + 46) / 117][Stage 110:=====================================>               (82 + 35) / 117][Stage 110:============================================>        (98 + 19) / 117][Stage 110:==============================================>     (105 + 12) / 117][Stage 110:====================================================>(116 + 1) / 117]                                                                                [Stage 111:=================================>                   (74 + 44) / 118][Stage 111:========================================>            (90 + 28) / 118][Stage 111:==============================================>     (105 + 13) / 118][Stage 111:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.111448115 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376262653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:====================================>                (79 + 35) / 114][Stage 112:=========================================>           (89 + 25) / 114][Stage 112:===========================================>         (94 + 20) / 114][Stage 112:=================================================>   (107 + 7) / 114][Stage 112:====================================================>(112 + 2) / 114][Stage 112:====================================================>(113 + 1) / 114]                                                                                [Stage 113:====================================>                (79 + 36) / 115][Stage 113:=========================================>           (91 + 24) / 115][Stage 113:==============================================>     (102 + 13) / 115][Stage 113:==================================================>  (110 + 5) / 115][Stage 113:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.20509614 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 254 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437263686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:============================>                        (65 + 56) / 121][Stage 114:===============================>                     (72 + 49) / 121][Stage 114:======================================>              (89 + 32) / 121][Stage 114:===================================================> (118 + 3) / 121]                                                                                [Stage 115:============================>                        (65 + 57) / 122][Stage 115:=================================>                   (78 + 44) / 122][Stage 115:===========================================>        (103 + 19) / 122][Stage 115:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.908713804 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362422998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (70 + 44) / 114][Stage 116:====================================>                (78 + 36) / 114][Stage 116:=====================================>               (81 + 33) / 114][Stage 116:=============================================>       (98 + 16) / 114][Stage 116:===============================================>    (104 + 10) / 114][Stage 116:===================================================> (111 + 3) / 114]                                                                                [Stage 117:====================================>                (80 + 35) / 115][Stage 117:============================================>        (96 + 19) / 115][Stage 117:=================================================>   (107 + 8) / 115][Stage 117:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.222634676 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429956964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (61 + 60) / 121][Stage 118:============================>                        (66 + 55) / 121][Stage 118:======================================>              (88 + 33) / 121][Stage 118:==============================================>     (108 + 13) / 121][Stage 118:====================================================>(119 + 2) / 121]                                                                                [Stage 119:==========================>                          (62 + 60) / 122][Stage 119:=============================>                       (67 + 55) / 122][Stage 119:==================================>                  (79 + 43) / 122][Stage 119:============================================>       (105 + 17) / 122][Stage 119:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.064143678 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345934662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:========================================>            (87 + 28) / 115][Stage 120:===============================================>    (104 + 11) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:======================================>              (85 + 31) / 116][Stage 121:============================================>        (98 + 18) / 116][Stage 121:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.683341523 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411125588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 61) / 122][Stage 122:=================================>                   (76 + 46) / 122][Stage 122:=======================================>             (90 + 32) / 122][Stage 122:===============================================>    (112 + 10) / 122][Stage 122:===================================================> (119 + 3) / 122]                                                                                [Stage 123:==========================>                          (61 + 62) / 123][Stage 123:=============================>                       (68 + 55) / 123][Stage 123:==================================>                  (79 + 44) / 123][Stage 123:============================================>       (106 + 17) / 123][Stage 123:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.168654599 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383453322 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (69 + 46) / 115][Stage 124:=====================================>               (81 + 34) / 115][Stage 124:==========================================>          (92 + 23) / 115][Stage 124:==============================================>     (102 + 13) / 115][Stage 124:====================================================>(113 + 2) / 115]                                                                                [Stage 125:================================>                    (72 + 44) / 116][Stage 125:=======================================>             (87 + 29) / 116][Stage 125:===========================================>         (95 + 21) / 116][Stage 125:==============================================>     (104 + 12) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.148806385 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335306171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=====================================>               (82 + 33) / 115][Stage 126:=======================================>             (86 + 29) / 115][Stage 126:=============================================>       (99 + 16) / 115][Stage 126:==================================================>  (109 + 6) / 115]                                                                                [Stage 127:=======================================>             (86 + 30) / 116][Stage 127:============================================>       (100 + 16) / 116][Stage 127:=================================================>   (109 + 7) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.884688157 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406725367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 61) / 122][Stage 128:===========================>                         (64 + 58) / 122][Stage 128:===================================>                 (81 + 41) / 122][Stage 128:=============================================>      (107 + 15) / 122][Stage 128:====================================================>(121 + 1) / 122]                                                                                [Stage 129:===========================>                         (63 + 60) / 123][Stage 129:================================>                    (76 + 47) / 123][Stage 129:=========================================>           (96 + 27) / 123][Stage 129:===============================================>    (113 + 10) / 123][Stage 129:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.199878691 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404369686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (62 + 60) / 122][Stage 130:================================>                    (74 + 48) / 122][Stage 130:===========================================>         (99 + 23) / 122][Stage 130:===================================================> (118 + 4) / 122]                                                                                [Stage 131:===========================>                         (64 + 59) / 123][Stage 131:================================>                    (76 + 47) / 123][Stage 131:==========================================>          (98 + 25) / 123][Stage 131:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 2.905330819 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400021789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 62) / 122][Stage 132:===========================>                         (63 + 59) / 122][Stage 132:====================================>                (83 + 39) / 122][Stage 132:==============================================>     (109 + 13) / 122][Stage 132:====================================================>(121 + 1) / 122]                                                                                [Stage 133:===========================>                         (64 + 59) / 123][Stage 133:==============================>                      (70 + 53) / 123][Stage 133:=====================================>               (86 + 37) / 123][Stage 133:=================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.140674426 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 237 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408270614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 60) / 121][Stage 134:============================>                        (64 + 57) / 121][Stage 134:=================================>                   (77 + 44) / 121][Stage 134:==========================================>          (98 + 23) / 121][Stage 134:===================================================> (118 + 3) / 121]                                                                                [Stage 135:==========================>                          (62 + 60) / 122][Stage 135:=============================>                       (69 + 53) / 122][Stage 135:======================================>              (89 + 33) / 122][Stage 135:============================================>       (105 + 17) / 122]                                                                                Time elapsed: 2.878956262 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367110581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:>                                                      (0 + 0) / 117][Stage 136:================================>                    (71 + 46) / 117][Stage 136:==================================>                  (76 + 41) / 117][Stage 136:===========================================>         (95 + 22) / 117][Stage 136:==================================================>  (112 + 5) / 117]                                                                                [Stage 137:================================>                    (72 + 46) / 118][Stage 137:====================================>                (82 + 36) / 118][Stage 137:============================================>        (98 + 20) / 118][Stage 137:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 2.837017172 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376235853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (71 + 46) / 117][Stage 138:==================================>                  (77 + 40) / 117][Stage 138:========================================>            (90 + 27) / 117][Stage 138:==================================================>  (111 + 6) / 117]                                                                                [Stage 139:================================>                    (72 + 46) / 118][Stage 139:=====================================>               (83 + 35) / 118][Stage 139:============================================>       (102 + 16) / 118][Stage 139:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.021611028 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335710184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (82 + 33) / 115][Stage 140:=========================================>           (89 + 26) / 115][Stage 140:==============================================>     (102 + 13) / 115][Stage 140:===================================================> (112 + 3) / 115]                                                                                [Stage 141:=====================================>               (82 + 34) / 116][Stage 141:===========================================>         (95 + 21) / 116][Stage 141:==================================================>  (110 + 6) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.895067797 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 239 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406649194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 60) / 121][Stage 142:==============================>                      (69 + 52) / 121][Stage 142:======================================>              (87 + 34) / 121][Stage 142:==============================================>     (109 + 12) / 121][Stage 142:====================================================>(120 + 1) / 121]                                                                                [Stage 143:==========================>                          (62 + 60) / 122][Stage 143:===========================>                         (63 + 59) / 122][Stage 143:=================================>                   (77 + 45) / 122][Stage 143:===========================================>        (101 + 21) / 122][Stage 143:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.020662416 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402864942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (63 + 59) / 122][Stage 144:=================================>                   (76 + 46) / 122][Stage 144:=======================================>             (91 + 31) / 122][Stage 144:===================================================> (119 + 3) / 122]                                                                                [Stage 145:============================>                        (66 + 57) / 123][Stage 145:====================================>                (84 + 39) / 123][Stage 145:==========================================>         (101 + 22) / 123][Stage 145:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 2.973826827 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (63 + 59) / 122][Stage 146:=================================>                   (77 + 45) / 122][Stage 146:=========================================>           (95 + 27) / 122][Stage 146:===================================================> (118 + 4) / 122]                                                                                [Stage 147:===========================>                         (64 + 59) / 123][Stage 147:===================================>                 (82 + 41) / 123][Stage 147:==========================================>         (100 + 23) / 123][Stage 147:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 2.865880467 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365814061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (71 + 46) / 117][Stage 148:==================================>                  (77 + 40) / 117][Stage 148:===========================================>         (96 + 21) / 117][Stage 148:==================================================>  (111 + 6) / 117]                                                                                [Stage 149:=================================>                   (75 + 43) / 118][Stage 149:=======================================>             (88 + 30) / 118][Stage 149:==============================================>     (105 + 13) / 118][Stage 149:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.814414642 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419265489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (61 + 61) / 122][Stage 150:==============================>                      (70 + 52) / 122][Stage 150:=====================================>               (87 + 35) / 122][Stage 150:==================================================>  (116 + 6) / 122]                                                                                [Stage 151:============================>                        (65 + 58) / 123][Stage 151:================================>                    (75 + 48) / 123][Stage 151:==========================================>          (98 + 25) / 123][Stage 151:==============================================>     (111 + 12) / 123]                                                                                Time elapsed: 2.957486441 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361570664 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (71 + 46) / 117][Stage 152:=================================>                   (73 + 44) / 117][Stage 152:=======================================>             (87 + 30) / 117][Stage 152:==============================================>     (104 + 13) / 117][Stage 152:====================================================>(116 + 1) / 117]                                                                                [Stage 153:================================>                    (73 + 45) / 118][Stage 153:====================================>                (81 + 37) / 118][Stage 153:=========================================>           (93 + 25) / 118][Stage 153:=================================================>   (110 + 8) / 118]                                                                                Time elapsed: 2.962149706 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399517427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (61 + 60) / 121][Stage 154:============================>                        (64 + 57) / 121][Stage 154:=====================================>               (85 + 36) / 121][Stage 154:=============================================>      (105 + 16) / 121][Stage 154:===================================================> (118 + 3) / 121]                                                                                [Stage 155:==========================>                          (62 + 60) / 122][Stage 155:=============================>                       (67 + 55) / 122][Stage 155:====================================>                (85 + 37) / 122][Stage 155:============================================>       (104 + 18) / 122][Stage 155:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.981070606 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363353416 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (71 + 46) / 117][Stage 156:====================================>                (81 + 36) / 117][Stage 156:=========================================>           (91 + 26) / 117][Stage 156:=================================================>   (109 + 8) / 117][Stage 156:====================================================>(116 + 1) / 117]                                                                                [Stage 157:================================>                    (72 + 46) / 118][Stage 157:=================================>                   (74 + 44) / 118][Stage 157:====================================>                (82 + 36) / 118][Stage 157:============================================>       (100 + 18) / 118][Stage 157:==================================================>  (112 + 6) / 118][Stage 157:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.337837696 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404551344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (62 + 60) / 122][Stage 158:==================================>                  (79 + 43) / 122][Stage 158:===========================================>        (102 + 20) / 122][Stage 158:===================================================> (118 + 4) / 122][Stage 158:====================================================>(121 + 1) / 122]                                                                                [Stage 159:==========================>                          (62 + 61) / 123][Stage 159:==============================>                      (70 + 53) / 123][Stage 159:====================================>                (85 + 38) / 123][Stage 159:===========================================>        (102 + 21) / 123][Stage 159:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.125419739 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336993921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=====================================>               (81 + 34) / 115][Stage 160:========================================>            (87 + 28) / 115][Stage 160:===============================================>    (105 + 10) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:======================================>              (85 + 31) / 116][Stage 161:============================================>        (97 + 19) / 116][Stage 161:=================================================>   (109 + 7) / 116][Stage 161:====================================================>(114 + 2) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.18959934 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372703506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===============================>                     (68 + 47) / 115][Stage 162:===================================>                 (76 + 39) / 115][Stage 162:=============================================>       (98 + 17) / 115][Stage 162:=================================================>   (107 + 8) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:=================================>                   (73 + 43) / 116][Stage 163:==========================================>          (92 + 24) / 116][Stage 163:================================================>    (107 + 9) / 116][Stage 163:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.836783521 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363589292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:======================================>              (83 + 32) / 115][Stage 164:===========================================>         (94 + 21) / 115][Stage 164:==================================================>  (109 + 6) / 115]                                                                                [Stage 165:======================================>              (85 + 31) / 116][Stage 165:==========================================>          (92 + 24) / 116][Stage 165:===============================================>    (106 + 10) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.701703929 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334582758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:======================================>              (83 + 32) / 115][Stage 166:=========================================>           (91 + 24) / 115][Stage 166:=================================================>   (108 + 7) / 115]                                                                                [Stage 167:======================================>              (85 + 31) / 116][Stage 167:==========================================>          (92 + 24) / 116][Stage 167:==============================================>     (104 + 12) / 116][Stage 167:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.790094665 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365661625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (71 + 46) / 117][Stage 168:=================================>                   (73 + 44) / 117][Stage 168:=======================================>             (87 + 30) / 117][Stage 168:=============================================>      (103 + 14) / 117][Stage 168:====================================================>(115 + 2) / 117]                                                                                [Stage 169:================================>                    (72 + 46) / 118][Stage 169:===================================>                 (79 + 39) / 118][Stage 169:============================================>        (98 + 20) / 118][Stage 169:=================================================>   (110 + 8) / 118][Stage 169:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.207722275 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376173648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (71 + 43) / 114][Stage 170:=======================================>             (84 + 30) / 114][Stage 170:===========================================>         (93 + 21) / 114][Stage 170:==============================================>     (103 + 11) / 114][Stage 170:===================================================> (110 + 4) / 114][Stage 170:====================================================>(113 + 1) / 114]                                                                                [Stage 171:======================================>              (83 + 32) / 115][Stage 171:=============================================>       (99 + 16) / 115][Stage 171:=================================================>   (108 + 7) / 115][Stage 171:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.156395171 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355150678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==================================>                  (75 + 39) / 114][Stage 172:========================================>            (88 + 26) / 114][Stage 172:===========================================>         (94 + 20) / 114][Stage 172:===============================================>    (104 + 10) / 114][Stage 172:====================================================>(112 + 2) / 114]                                                                                [Stage 173:====================================>                (79 + 36) / 115][Stage 173:========================================>            (88 + 27) / 115][Stage 173:===============================================>    (104 + 11) / 115][Stage 173:==================================================>  (109 + 6) / 115][Stage 173:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.128018071 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364461371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (73 + 41) / 114][Stage 174:=======================================>             (84 + 30) / 114][Stage 174:==============================================>      (99 + 15) / 114][Stage 174:=================================================>   (107 + 7) / 114][Stage 174:===================================================> (111 + 3) / 114]                                                                                [Stage 175:=====================================>               (82 + 33) / 115][Stage 175:===========================================>         (95 + 20) / 115][Stage 175:==============================================>     (103 + 12) / 115][Stage 175:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.071644808 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 245 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414762371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (60 + 62) / 122][Stage 176:=============================>                       (68 + 54) / 122][Stage 176:==================================>                  (80 + 42) / 122][Stage 176:============================================>       (104 + 18) / 122][Stage 176:====================================================>(120 + 2) / 122]                                                                                [Stage 177:==========================>                          (62 + 61) / 123][Stage 177:=================================>                   (78 + 45) / 123][Stage 177:==========================================>         (100 + 23) / 123][Stage 177:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.041614216 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377008249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=====================================>               (81 + 33) / 114][Stage 178:============================================>        (96 + 18) / 114][Stage 178:================================================>    (105 + 9) / 114][Stage 178:==================================================>  (109 + 5) / 114]                                                                                [Stage 179:===================================>                 (78 + 37) / 115][Stage 179:===========================================>         (94 + 21) / 115][Stage 179:===============================================>    (104 + 11) / 115][Stage 179:===================================================> (112 + 3) / 115][Stage 179:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.157881071 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384007942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (71 + 46) / 117][Stage 180:====================================>                (81 + 36) / 117][Stage 180:============================================>       (101 + 16) / 117][Stage 180:====================================================>(115 + 2) / 117]                                                                                [Stage 181:================================>                    (72 + 46) / 118][Stage 181:====================================>                (82 + 36) / 118][Stage 181:==========================================>          (94 + 24) / 118][Stage 181:==================================================>  (113 + 5) / 118][Stage 181:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 2.854815242 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365618675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:====================================>                (78 + 36) / 114][Stage 182:===========================================>         (93 + 21) / 114][Stage 182:==============================================>     (103 + 11) / 114][Stage 182:===================================================> (110 + 4) / 114]                                                                                [Stage 183:======================================>              (83 + 32) / 115][Stage 183:=========================================>           (91 + 24) / 115][Stage 183:===============================================>    (105 + 10) / 115][Stage 183:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 2.940728456 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375467111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===================================>                 (76 + 39) / 115][Stage 184:==========================================>          (92 + 23) / 115][Stage 184:=============================================>      (100 + 15) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:================================>                    (71 + 45) / 116][Stage 185:========================================>            (88 + 28) / 116][Stage 185:==============================================>     (103 + 13) / 116][Stage 185:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.959391892 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===============================>                     (68 + 47) / 115][Stage 186:====================================>                (80 + 35) / 115][Stage 186:=============================================>       (98 + 17) / 115][Stage 186:=================================================>   (108 + 7) / 115][Stage 186:====================================================>(113 + 2) / 115]                                                                                [Stage 187:==============================>                      (67 + 49) / 116][Stage 187:=====================================>               (82 + 34) / 116][Stage 187:===========================================>         (96 + 20) / 116][Stage 187:=================================================>   (109 + 7) / 116][Stage 187:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.077973285 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367975629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (71 + 46) / 117][Stage 188:===================================>                 (79 + 38) / 117][Stage 188:===========================================>         (97 + 20) / 117][Stage 188:===================================================> (113 + 4) / 117]                                                                                [Stage 189:=================================>                   (74 + 44) / 118][Stage 189:========================================>            (90 + 28) / 118][Stage 189:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.735529668 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (71 + 46) / 117][Stage 190:=================================>                   (73 + 44) / 117][Stage 190:=========================================>           (91 + 26) / 117][Stage 190:==================================================>  (111 + 6) / 117][Stage 190:====================================================>(116 + 1) / 117]                                                                                [Stage 191:================================>                    (72 + 46) / 118][Stage 191:=================================>                   (75 + 43) / 118][Stage 191:=========================================>           (92 + 26) / 118][Stage 191:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 2.888728256 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415319162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (61 + 60) / 121][Stage 192:===========================>                         (62 + 59) / 121][Stage 192:===================================>                 (80 + 41) / 121][Stage 192:=========================================>           (94 + 27) / 121][Stage 192:=================================================>   (112 + 9) / 121][Stage 192:====================================================>(120 + 1) / 121]                                                                                [Stage 193:============================>                        (66 + 56) / 122][Stage 193:===================================>                 (81 + 41) / 122][Stage 193:==========================================>          (97 + 25) / 122][Stage 193:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.176330711 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338838313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:======================================>              (84 + 31) / 115][Stage 194:==========================================>          (92 + 23) / 115][Stage 194:=============================================>       (99 + 16) / 115][Stage 194:=================================================>   (108 + 7) / 115][Stage 194:====================================================>(114 + 1) / 115]                                                                                [Stage 195:=====================================>               (82 + 34) / 116][Stage 195:=========================================>           (90 + 26) / 116][Stage 195:=============================================>      (101 + 15) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:==================================================>  (111 + 5) / 116][Stage 195:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.439464629 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351254251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===================================>                 (77 + 37) / 114][Stage 196:=======================================>             (85 + 29) / 114][Stage 196:===========================================>         (93 + 21) / 114][Stage 196:==============================================>     (101 + 13) / 114][Stage 196:====================================================>(113 + 1) / 114]                                                                                [Stage 197:===================================>                 (77 + 38) / 115][Stage 197:======================================>              (84 + 31) / 115][Stage 197:=========================================>           (91 + 24) / 115][Stage 197:===============================================>    (104 + 11) / 115][Stage 197:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.137313916 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384969656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (71 + 46) / 117][Stage 198:=================================>                   (74 + 43) / 117][Stage 198:======================================>              (85 + 32) / 117][Stage 198:==========================================>          (94 + 23) / 117][Stage 198:===================================================> (114 + 3) / 117]                                                                                [Stage 199:================================>                    (72 + 46) / 118][Stage 199:=================================>                   (75 + 43) / 118][Stage 199:=====================================>               (83 + 35) / 118][Stage 199:=========================================>           (92 + 26) / 118][Stage 199:============================================>       (102 + 16) / 118][Stage 199:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.250867984 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.329490815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (79 + 36) / 115][Stage 200:========================================>            (87 + 28) / 115][Stage 200:=============================================>       (99 + 16) / 115][Stage 200:==================================================>  (109 + 6) / 115]                                                                                [Stage 201:======================================>              (84 + 32) / 116][Stage 201:==========================================>          (93 + 23) / 116][Stage 201:=============================================>       (99 + 17) / 116][Stage 201:===================================================> (113 + 3) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.880522033 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m46.184s
user	11m27.228s
sys	0m28.012s
