Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 20:50:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:51:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:51:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:51:01 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 20:51:03 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 20:51:13 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529205102-0681).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.351958967 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 115) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:============================>                          (60 + 56) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.967823368 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.711081657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================================>                    (72 + 43) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:=======================================>               (83 + 32) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:===================================================>   (108 + 7) / 115]                                                                                [Stage 3:=====================================>                 (79 + 37) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:=======================================>               (84 + 32) / 116][Stage 3:==========================================>            (89 + 27) / 116][Stage 3:===============================================>      (102 + 14) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:=====================================================> (113 + 3) / 116][Stage 3:======================================================>(114 + 2) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.422289782 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.684759449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===============================>                       (66 + 49) / 115][Stage 4:================================>                      (68 + 47) / 115][Stage 4:=================================>                     (70 + 45) / 115][Stage 4:==================================>                    (73 + 42) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:==============================================>        (98 + 17) / 115][Stage 4:===============================================>      (102 + 13) / 115][Stage 4:==================================================>    (106 + 9) / 115][Stage 4:=====================================================> (112 + 3) / 115]                                                                                [Stage 5:============================>                          (60 + 56) / 116][Stage 5:==================================>                    (72 + 44) / 116][Stage 5:===================================>                   (74 + 42) / 116][Stage 5:====================================>                  (78 + 38) / 116][Stage 5:========================================>              (85 + 31) / 116][Stage 5:=============================================>         (95 + 21) / 116][Stage 5:==============================================>        (99 + 17) / 116][Stage 5:==============================================>       (100 + 16) / 116][Stage 5:================================================>     (105 + 11) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.200112799 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.752347876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (61 + 60) / 121][Stage 6:==============================>                        (66 + 55) / 121][Stage 6:=================================>                     (73 + 48) / 121][Stage 6:=======================================>               (87 + 34) / 121][Stage 6:===========================================>           (95 + 26) / 121][Stage 6:=================================================>    (110 + 11) / 121][Stage 6:======================================================>(120 + 1) / 121]                                                                                [Stage 7:===========================>                           (62 + 60) / 122][Stage 7:=============================>                         (66 + 56) / 122][Stage 7:==================================>                    (77 + 45) / 122][Stage 7:============================================>         (100 + 22) / 122][Stage 7:===================================================>   (115 + 7) / 122]                                                                                Time elapsed: 4.032640008 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 190  OR  partitionIndex = 191 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 190  OR  partitionIndex = 191 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:>                                                        (0 + 0) / 121][Stage 8:===========================>                           (61 + 60) / 121][Stage 8:=============================>                         (64 + 57) / 121][Stage 8:==================================>                    (75 + 46) / 121][Stage 8:=======================================>               (87 + 34) / 121][Stage 8:=================================================>    (111 + 10) / 121]                                                                                [Stage 9:===========================>                           (62 + 60) / 122][Stage 9:===============================>                       (70 + 52) / 122][Stage 9:====================================>                  (80 + 42) / 122][Stage 9:============================================>         (100 + 22) / 122][Stage 9:=================================================>    (111 + 11) / 122][Stage 9:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.038686423 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 181  OR  partitionIndex = 182 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 181  OR  partitionIndex = 182 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.5364136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===============================>                      (69 + 48) / 117][Stage 10:================================>                     (71 + 46) / 117][Stage 10:==================================>                   (74 + 43) / 117][Stage 10:======================================>               (84 + 33) / 117][Stage 10:===========================================>          (94 + 23) / 117][Stage 10:==============================================>      (102 + 15) / 117][Stage 10:===================================================>  (111 + 6) / 117][Stage 10:====================================================> (114 + 3) / 117]                                                                                [Stage 11:================================>                     (72 + 46) / 118][Stage 11:=================================>                    (74 + 44) / 118][Stage 11:=====================================>                (83 + 35) / 118][Stage 11:===========================================>          (94 + 24) / 118][Stage 11:================================================>    (107 + 11) / 118][Stage 11:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 4.425384233 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487619424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:======================================>               (81 + 34) / 115][Stage 12:=======================================>              (84 + 31) / 115][Stage 12:==============================================>       (98 + 17) / 115][Stage 12:===================================================>  (110 + 5) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=====================================>                (81 + 35) / 116][Stage 13:========================================>             (88 + 28) / 116][Stage 13:=============================================>        (98 + 18) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.06837985 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 34  OR  pa rtitionIndex = 48  OR  partitionIndex = 49 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 48  OR  partitionIndex = 49 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.583140097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===================================>                  (74 + 40) / 114][Stage 14:=======================================>              (84 + 30) / 114][Stage 14:==========================================>           (89 + 25) / 114][Stage 14:=============================================>        (95 + 19) / 114][Stage 14:===============================================>     (103 + 11) / 114][Stage 14:===================================================>  (108 + 6) / 114][Stage 14:=====================================================>(112 + 2) / 114]                                                                                [Stage 15:==================================>                   (73 + 42) / 115][Stage 15:=========================================>            (88 + 27) / 115][Stage 15:============================================>         (94 + 21) / 115][Stage 15:=============================================>        (97 + 18) / 115][Stage 15:===============================================>     (104 + 11) / 115][Stage 15:===================================================>  (110 + 5) / 115][Stage 15:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 4.900084619 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445823563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=====================================>                (79 + 36) / 115][Stage 16:======================================>               (83 + 32) / 115][Stage 16:=============================================>        (97 + 18) / 115][Stage 16:===================================================>  (110 + 5) / 115]                                                                                [Stage 17:=======================================>              (84 + 32) / 116][Stage 17:===========================================>          (94 + 22) / 116][Stage 17:==================================================>   (108 + 8) / 116][Stage 17:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.942631729 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521686926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (71 + 46) / 117][Stage 18:===================================>                  (76 + 41) / 117][Stage 18:==========================================>           (91 + 26) / 117][Stage 18:=============================================>       (101 + 16) / 117][Stage 18:===================================================>  (112 + 5) / 117][Stage 18:=====================================================>(115 + 2) / 117]                                                                                [Stage 19:================================>                     (72 + 46) / 118][Stage 19:=======================================>              (87 + 31) / 118][Stage 19:===============================================>     (105 + 13) / 118][Stage 19:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.603983865 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 227  OR   partitionIndex = 242  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 227  OR  partitionIndex = 242  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.546838854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (66 + 49) / 115][Stage 20:=================================>                    (71 + 44) / 115][Stage 20:======================================>               (82 + 33) / 115][Stage 20:==============================================>       (99 + 16) / 115][Stage 20:================================================>    (105 + 10) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:==================================>                   (74 + 42) / 116][Stage 21:========================================>             (88 + 28) / 116][Stage 21:=============================================>        (98 + 18) / 116][Stage 21:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.266641408 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 28  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 28  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469884871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===============================>                      (68 + 49) / 117][Stage 22:===============================>                      (69 + 48) / 117][Stage 22:==================================>                   (75 + 42) / 117][Stage 22:==========================================>           (93 + 24) / 117][Stage 22:================================================>    (107 + 10) / 117][Stage 22:====================================================> (113 + 4) / 117]                                                                                [Stage 23:==============================>                       (66 + 52) / 118][Stage 23:==================================>                   (76 + 42) / 118][Stage 23:======================================>               (85 + 33) / 118][Stage 23:==============================================>      (103 + 15) / 118][Stage 23:=================================================>    (109 + 9) / 118][Stage 23:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.929611044 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR   partitionIndex = 216  OR  partitionIndex = 217 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 216  OR  partitionIndex = 217 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (71 + 46) / 117][Stage 24:==================================>                   (75 + 42) / 117][Stage 24:=======================================>              (86 + 31) / 117][Stage 24:===========================================>          (95 + 22) / 117][Stage 24:==============================================>      (102 + 15) / 117][Stage 24:===================================================>  (111 + 6) / 117]                                                                                [Stage 25:================================>                     (72 + 46) / 118][Stage 25:===================================>                  (78 + 40) / 118][Stage 25:===========================================>          (94 + 24) / 118][Stage 25:================================================>    (108 + 10) / 118][Stage 25:==================================================>   (110 + 8) / 118]                                                                                Time elapsed: 4.034482911 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 22  OR  partitionIndex = 23 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.579520017 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (61 + 60) / 121][Stage 26:==============================>                       (68 + 53) / 121][Stage 26:===================================>                  (80 + 41) / 121][Stage 26:==============================================>      (107 + 14) / 121][Stage 26:====================================================> (118 + 3) / 121]                                                                                [Stage 27:===========================>                          (61 + 61) / 122][Stage 27:=============================>                        (66 + 56) / 122][Stage 27:====================================>                 (82 + 40) / 122][Stage 27:===========================================>          (99 + 23) / 122][Stage 27:===================================================>  (116 + 6) / 122][Stage 27:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.493522354 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR   partitionIndex = 155  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530380181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 60) / 121][Stage 28:============================>                         (64 + 57) / 121][Stage 28:===================================>                  (79 + 42) / 121][Stage 28:============================================>        (102 + 19) / 121][Stage 28:===================================================>  (116 + 5) / 121]                                                                                [Stage 29:===========================>                          (62 + 60) / 122][Stage 29:==============================>                       (70 + 52) / 122][Stage 29:=========================================>            (94 + 28) / 122][Stage 29:================================================>    (111 + 11) / 122][Stage 29:====================================================> (119 + 3) / 122][Stage 29:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.851608397 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 157  OR  partitionIndex = 158 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 157  OR  partitionIndex = 158 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526643443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (62 + 59) / 121][Stage 30:==============================>                       (69 + 52) / 121][Stage 30:=========================================>            (92 + 29) / 121][Stage 30:==============================================>      (107 + 14) / 121][Stage 30:====================================================> (118 + 3) / 121]                                                                                [Stage 31:==============================>                       (68 + 54) / 122][Stage 31:==================================>                   (78 + 44) / 122][Stage 31:===========================================>          (99 + 23) / 122][Stage 31:===================================================>  (116 + 6) / 122][Stage 31:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.63718412 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 146  OR  partitionIndex = 147 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 146  OR  partitionIndex = 147 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446504881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (82 + 33) / 115][Stage 32:=========================================>            (89 + 26) / 115][Stage 32:================================================>    (105 + 10) / 115][Stage 32:====================================================> (112 + 3) / 115]                                                                                [Stage 33:=======================================>              (85 + 31) / 116][Stage 33:============================================>         (96 + 20) / 116][Stage 33:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.812742442 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  par titionIndex = 23  OR  partitionIndex = 36 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=====================================>                (80 + 35) / 115][Stage 34:=======================================>              (85 + 30) / 115][Stage 34:===============================================>     (102 + 13) / 115][Stage 34:====================================================> (111 + 4) / 115]                                                                                [Stage 35:=======================================>              (84 + 32) / 116][Stage 35:==========================================>           (92 + 24) / 116][Stage 35:===============================================>     (105 + 11) / 116][Stage 35:===================================================>  (111 + 5) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.158703102 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 89  OR  partitionIndex = 90 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444916862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (72 + 42) / 114][Stage 36:=======================================>              (84 + 30) / 114][Stage 36:============================================>         (93 + 21) / 114][Stage 36:=================================================>    (105 + 9) / 114][Stage 36:====================================================> (110 + 4) / 114][Stage 36:=====================================================>(112 + 2) / 114]                                                                                [Stage 37:===================================>                  (76 + 39) / 115][Stage 37:=======================================>              (84 + 31) / 115][Stage 37:===========================================>          (93 + 22) / 115][Stage 37:==============================================>      (101 + 14) / 115][Stage 37:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.341680281 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 148  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 148  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432703767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=====================================>                (80 + 34) / 114][Stage 38:============================================>         (93 + 21) / 114][Stage 38:===============================================>     (103 + 11) / 114][Stage 38:====================================================> (110 + 4) / 114][Stage 38:=====================================================>(112 + 2) / 114]                                                                                [Stage 39:=======================================>              (84 + 31) / 115][Stage 39:==============================================>       (99 + 16) / 115][Stage 39:==================================================>   (107 + 8) / 115][Stage 39:===================================================>  (109 + 6) / 115][Stage 39:====================================================> (111 + 4) / 115][Stage 39:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.446457109 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR   partitionIndex = 193  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491519319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (61 + 60) / 121][Stage 40:==============================>                       (69 + 52) / 121][Stage 40:====================================>                 (81 + 40) / 121][Stage 40:=============================================>       (105 + 16) / 121][Stage 40:====================================================> (118 + 3) / 121]                                                                                [Stage 41:============================>                         (64 + 58) / 122][Stage 41:==================================>                   (77 + 45) / 122][Stage 41:===========================================>          (98 + 24) / 122][Stage 41:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.36029819 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492219718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (69 + 46) / 115][Stage 42:========================================>             (86 + 29) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:====================================================> (112 + 3) / 115]                                                                                [Stage 43:==================================>                   (74 + 42) / 116][Stage 43:==========================================>           (92 + 24) / 116][Stage 43:=================================================>    (107 + 9) / 116][Stage 43:====================================================> (112 + 4) / 116][Stage 43:====================================================> (113 + 3) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.224874955 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 213  OR  partitionIndex = 214 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 213  OR  partitionIndex = 214 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52785648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=======================================>              (84 + 31) / 115][Stage 44:============================================>         (94 + 21) / 115][Stage 44:===================================================>  (109 + 6) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:=======================================>              (84 + 32) / 116][Stage 45:===========================================>          (93 + 23) / 116][Stage 45:==================================================>   (108 + 8) / 116][Stage 45:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.841589842 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477102926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:============================>                         (59 + 54) / 113][Stage 46:===============================>                      (65 + 48) / 113][Stage 46:=======================================>              (82 + 31) / 113][Stage 46:=================================================>    (104 + 9) / 113][Stage 46:===================================================>  (108 + 5) / 113]                                                                                [Stage 47:============================>                         (60 + 54) / 114][Stage 47:=================================>                    (70 + 44) / 114][Stage 47:=======================================>              (84 + 30) / 114][Stage 47:==============================================>       (99 + 15) / 114]                                                                                Time elapsed: 3.304327974 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239  OR   partitionIndex = 253  OR  partitionIndex = 254 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 238  OR  partitionIndex = 239  OR  partitionIndex = 253  OR  partitionIndex = 254 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46725051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==================================>                   (74 + 41) / 115][Stage 48:==========================================>           (90 + 25) / 115][Stage 48:==================================================>   (108 + 7) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:================================>                     (69 + 47) / 116][Stage 49:====================================>                 (79 + 37) / 116][Stage 49:==========================================>           (91 + 25) / 116][Stage 49:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.796541062 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26  OR  pa rtitionIndex = 27  OR  partitionIndex = 40 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==============================>                       (66 + 49) / 115][Stage 50:=====================================>                (80 + 35) / 115][Stage 50:==========================================>           (90 + 25) / 115][Stage 50:====================================================> (111 + 4) / 115]                                                                                [Stage 51:=================================>                    (73 + 43) / 116][Stage 51:========================================>             (88 + 28) / 116][Stage 51:==============================================>       (99 + 17) / 116][Stage 51:==================================================>   (109 + 7) / 116][Stage 51:=====================================================>(114 + 2) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.784428742 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR   partitionIndex = 129  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504674952 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:==========================>                           (60 + 61) / 121][Stage 52:==============================>                       (68 + 53) / 121][Stage 52:=======================================>              (88 + 33) / 121][Stage 52:================================================>    (110 + 11) / 121]                                                                                [Stage 53:===========================>                          (62 + 60) / 122][Stage 53:===============================>                      (72 + 50) / 122][Stage 53:=========================================>            (93 + 29) / 122][Stage 53:==============================================>      (107 + 15) / 122][Stage 53:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.291778737 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490904037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (83 + 32) / 115][Stage 54:===============================================>     (102 + 13) / 115][Stage 54:=====================================================>(113 + 2) / 115][Stage 54:=====================================================>(114 + 1) / 115]                                                                                [Stage 55:=========================================>            (89 + 27) / 116][Stage 55:==============================================>      (101 + 15) / 116][Stage 55:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.765728955 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146  OR   partitionIndex = 147  OR  partitionIndex = 160 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376342814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (81 + 34) / 115][Stage 56:========================================>             (86 + 29) / 115][Stage 56:==============================================>      (100 + 15) / 115][Stage 56:=====================================================>(113 + 2) / 115]                                                                                [Stage 57:========================================>             (87 + 29) / 116][Stage 57:==============================================>      (102 + 14) / 116][Stage 57:====================================================> (112 + 4) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.718462137 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR   partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427003089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (71 + 46) / 117][Stage 58:=================================>                    (73 + 44) / 117][Stage 58:=========================================>            (90 + 27) / 117][Stage 58:==============================================>      (102 + 15) / 117][Stage 58:==================================================>   (110 + 7) / 117]                                                                                [Stage 59:================================>                     (72 + 46) / 118][Stage 59:====================================>                 (80 + 38) / 118][Stage 59:===========================================>          (96 + 22) / 118][Stage 59:================================================>    (107 + 11) / 118][Stage 59:===================================================>  (113 + 5) / 118][Stage 59:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.586780868 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418018393 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (71 + 46) / 117][Stage 60:=================================>                    (72 + 45) / 117][Stage 60:======================================>               (84 + 33) / 117][Stage 60:=============================================>       (100 + 17) / 117][Stage 60:====================================================> (114 + 3) / 117]                                                                                [Stage 61:================================>                     (72 + 46) / 118][Stage 61:==================================>                   (75 + 43) / 118][Stage 61:=====================================>                (82 + 36) / 118][Stage 61:============================================>         (97 + 21) / 118][Stage 61:===================================================>  (112 + 6) / 118][Stage 61:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.343191286 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479735522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==============================>                       (66 + 49) / 115][Stage 62:===================================>                  (76 + 39) / 115][Stage 62:==========================================>           (91 + 24) / 115][Stage 62:===============================================>     (102 + 13) / 115][Stage 62:===================================================>  (110 + 5) / 115]                                                                                [Stage 63:===================================>                  (76 + 40) / 116][Stage 63:========================================>             (87 + 29) / 116][Stage 63:=================================================>    (107 + 9) / 116][Stage 63:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.066124762 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  pa rtitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (70 + 45) / 115][Stage 64:======================================>               (81 + 34) / 115][Stage 64:============================================>         (94 + 21) / 115][Stage 64:================================================>    (105 + 10) / 115][Stage 64:====================================================> (112 + 3) / 115]                                                                                [Stage 65:====================================>                 (78 + 38) / 116][Stage 65:==========================================>           (92 + 24) / 116][Stage 65:===============================================>     (104 + 12) / 116][Stage 65:===================================================>  (111 + 5) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.708424208 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 20  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 20  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426332789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (71 + 46) / 117][Stage 66:==================================>                   (74 + 43) / 117][Stage 66:=====================================>                (81 + 36) / 117][Stage 66:=============================================>       (100 + 17) / 117][Stage 66:====================================================> (113 + 4) / 117]                                                                                [Stage 67:=================================>                    (74 + 44) / 118][Stage 67:=====================================>                (83 + 35) / 118][Stage 67:=============================================>       (101 + 17) / 118][Stage 67:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.240462593 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453437715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (62 + 60) / 122][Stage 68:=============================>                        (66 + 56) / 122][Stage 68:======================================>               (87 + 35) / 122][Stage 68:==============================================>      (107 + 15) / 122][Stage 68:====================================================> (119 + 3) / 122]                                                                                [Stage 69:==========================>                           (61 + 62) / 123][Stage 69:============================>                         (65 + 58) / 123][Stage 69:==================================>                   (79 + 44) / 123][Stage 69:============================================>        (104 + 19) / 123][Stage 69:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.288696449 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 99  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441031561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (61 + 60) / 121][Stage 70:=============================>                        (67 + 54) / 121][Stage 70:========================================>             (91 + 30) / 121][Stage 70:==============================================>      (106 + 15) / 121][Stage 70:====================================================> (117 + 4) / 121]                                                                                [Stage 71:==============================>                       (69 + 53) / 122][Stage 71:====================================>                 (82 + 40) / 122][Stage 71:===========================================>          (98 + 24) / 122][Stage 71:====================================================> (118 + 4) / 122][Stage 71:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.485772069 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210  OR   partitionIndex = 211  OR  partitionIndex = 224 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356870702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=====================================>                (80 + 35) / 115][Stage 72:=========================================>            (89 + 26) / 115][Stage 72:==============================================>       (98 + 17) / 115][Stage 72:====================================================> (111 + 4) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=========================================>            (90 + 26) / 116][Stage 73:=============================================>        (98 + 18) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.946048497 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363869799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=======================================>              (85 + 30) / 115][Stage 74:==============================================>      (101 + 14) / 115][Stage 74:====================================================> (111 + 4) / 115]                                                                                [Stage 75:======================================>               (83 + 33) / 116][Stage 75:=============================================>        (98 + 18) / 116][Stage 75:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.59438325 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380502151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (71 + 43) / 114][Stage 76:=======================================>              (83 + 31) / 114][Stage 76:=============================================>        (95 + 19) / 114][Stage 76:==================================================>   (106 + 8) / 114][Stage 76:=====================================================>(112 + 2) / 114]                                                                                [Stage 77:==================================>                   (73 + 42) / 115][Stage 77:=======================================>              (84 + 31) / 115][Stage 77:============================================>         (95 + 20) / 115][Stage 77:===============================================>     (103 + 12) / 115][Stage 77:===================================================>  (109 + 6) / 115][Stage 77:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.310778335 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72  OR  pa rtitionIndex = 73  OR  partitionIndex = 88 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390305706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=======================================>              (83 + 31) / 114][Stage 78:==========================================>           (89 + 25) / 114][Stage 78:==============================================>      (101 + 13) / 114][Stage 78:====================================================> (111 + 3) / 114][Stage 78:=====================================================>(113 + 1) / 114]                                                                                [Stage 79:========================================>             (87 + 28) / 115][Stage 79:============================================>         (94 + 21) / 115][Stage 79:==============================================>      (101 + 14) / 115][Stage 79:==================================================>   (108 + 7) / 115]                                                                                Time elapsed: 3.253359581 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389797226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:====================================>                 (78 + 36) / 114][Stage 80:=============================================>        (95 + 19) / 114][Stage 80:===============================================>     (102 + 12) / 114][Stage 80:====================================================> (111 + 3) / 114][Stage 80:=====================================================>(113 + 1) / 114]                                                                                [Stage 81:==================================>                   (73 + 42) / 115][Stage 81:=========================================>            (88 + 27) / 115][Stage 81:=============================================>        (97 + 18) / 115][Stage 81:==================================================>   (107 + 8) / 115][Stage 81:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.168905962 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418426372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==============================>                       (66 + 49) / 115][Stage 82:====================================>                 (78 + 37) / 115][Stage 82:=============================================>        (96 + 19) / 115][Stage 82:================================================>    (105 + 10) / 115][Stage 82:=====================================================>(113 + 2) / 115]                                                                                [Stage 83:=================================>                    (71 + 45) / 116][Stage 83:=======================================>              (84 + 32) / 116][Stage 83:==============================================>       (99 + 17) / 116][Stage 83:===================================================>  (111 + 5) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.150979949 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363135139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:======================================>               (83 + 32) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:=================================================>    (106 + 9) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:=======================================>              (85 + 31) / 116][Stage 85:============================================>         (95 + 21) / 116][Stage 85:=================================================>    (107 + 9) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.664265991 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232  OR   partitionIndex = 233  OR  partitionIndex = 248 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552001425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:============================>                         (63 + 58) / 121][Stage 86:===============================>                      (71 + 50) / 121][Stage 86:========================================>             (91 + 30) / 121][Stage 86:================================================>    (111 + 10) / 121]                                                                                [Stage 87:===========================>                          (62 + 60) / 122][Stage 87:================================>                     (74 + 48) / 122][Stage 87:=========================================>            (93 + 29) / 122][Stage 87:================================================>    (111 + 11) / 122][Stage 87:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.340254852 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 54  OR  partitionIndex = 55 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385905027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==================================>                   (73 + 41) / 114][Stage 88:=========================================>            (88 + 26) / 114][Stage 88:==============================================>       (98 + 16) / 114][Stage 88:================================================>    (104 + 10) / 114][Stage 88:=====================================================>(113 + 1) / 114]                                                                                [Stage 89:====================================>                 (78 + 37) / 115][Stage 89:========================================>             (87 + 28) / 115][Stage 89:==============================================>       (98 + 17) / 115][Stage 89:==============================================>      (101 + 14) / 115][Stage 89:===================================================>  (110 + 5) / 115][Stage 89:=====================================================>(113 + 2) / 115][Stage 89:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 5.24627376 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432020604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (62 + 60) / 122][Stage 90:==============================>                       (70 + 52) / 122][Stage 90:=======================================>              (90 + 32) / 122][Stage 90:===============================================>     (109 + 13) / 122][Stage 90:=====================================================>(121 + 1) / 122]                                                                                [Stage 91:===========================>                          (62 + 61) / 123][Stage 91:============================>                         (66 + 57) / 123][Stage 91:=================================>                    (77 + 46) / 123][Stage 91:==============================================>      (109 + 14) / 123][Stage 91:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.497271832 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR   partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396321582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===============================>                      (68 + 47) / 115][Stage 92:=====================================>                (80 + 35) / 115][Stage 92:============================================>         (94 + 21) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:================================>                     (70 + 46) / 116][Stage 93:====================================>                 (79 + 37) / 116][Stage 93:==========================================>           (91 + 25) / 116][Stage 93:===============================================>     (103 + 13) / 116][Stage 93:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.027900826 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426437067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 61) / 122][Stage 94:=============================>                        (67 + 55) / 122][Stage 94:======================================>               (87 + 35) / 122][Stage 94:==================================================>   (115 + 7) / 122]                                                                                [Stage 95:===========================>                          (62 + 61) / 123][Stage 95:==============================>                       (70 + 53) / 123][Stage 95:====================================>                 (84 + 39) / 123][Stage 95:===============================================>     (110 + 13) / 123][Stage 95:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.330456553 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375454852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:================================>                     (71 + 46) / 117][Stage 96:===================================>                  (76 + 41) / 117][Stage 96:==========================================>           (92 + 25) / 117][Stage 96:=====================================================>(115 + 2) / 117]                                                                                [Stage 97:================================>                     (72 + 46) / 118][Stage 97:==================================>                   (75 + 43) / 118][Stage 97:======================================>               (85 + 33) / 118][Stage 97:===============================================>     (105 + 13) / 118]                                                                                Time elapsed: 3.009701712 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 221  OR  partitionIndex = 222 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 221  OR  partitionIndex = 222 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368362375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=================================>                    (71 + 43) / 114][Stage 98:=======================================>              (84 + 30) / 114][Stage 98:=============================================>        (97 + 17) / 114][Stage 98:=================================================>    (105 + 9) / 114][Stage 98:====================================================> (111 + 3) / 114]                                                                                [Stage 99:===================================>                  (76 + 39) / 115][Stage 99:========================================>             (87 + 28) / 115][Stage 99:=============================================>        (96 + 19) / 115][Stage 99:================================================>    (105 + 10) / 115][Stage 99:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.968752212 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107  OR   partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392073344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (70 + 45) / 115][Stage 100:====================================>                (79 + 36) / 115][Stage 100:=========================================>           (91 + 24) / 115][Stage 100:===============================================>    (105 + 10) / 115][Stage 100:===================================================> (112 + 3) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:==================================>                  (75 + 41) / 116][Stage 101:========================================>            (88 + 28) / 116][Stage 101:=============================================>      (101 + 15) / 116][Stage 101:==================================================>  (110 + 6) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.439385395 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 250  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348145125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (79 + 36) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:======================================>              (84 + 32) / 116][Stage 103:=========================================>           (90 + 26) / 116][Stage 103:=============================================>      (101 + 15) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.529623091 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR   partitionIndex = 200  OR  partitionIndex = 201 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463356767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 46) / 117][Stage 104:==================================>                  (76 + 41) / 117][Stage 104:===========================================>         (95 + 22) / 117][Stage 104:==================================================>  (111 + 6) / 117]                                                                                [Stage 105:================================>                    (72 + 46) / 118][Stage 105:====================================>                (82 + 36) / 118][Stage 105:===========================================>         (96 + 22) / 118][Stage 105:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.14637554 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39990422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (71 + 46) / 117][Stage 106:================================>                    (72 + 45) / 117][Stage 106:=======================================>             (88 + 29) / 117][Stage 106:=============================================>      (102 + 15) / 117][Stage 106:====================================================>(116 + 1) / 117]                                                                                [Stage 107:================================>                    (72 + 46) / 118][Stage 107:=================================>                   (75 + 43) / 118][Stage 107:========================================>            (90 + 28) / 118][Stage 107:============================================>       (102 + 16) / 118][Stage 107:==================================================>  (112 + 6) / 118][Stage 107:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.271677696 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 81  OR  partitionIndex = 82 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353664242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (83 + 32) / 115][Stage 108:=========================================>           (91 + 24) / 115][Stage 108:==============================================>     (102 + 13) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:======================================>              (84 + 32) / 116][Stage 109:=========================================>           (91 + 25) / 116][Stage 109:===============================================>    (105 + 11) / 116][Stage 109:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.894988345 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR   partitionIndex = 242  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 242  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37806351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 45) / 117][Stage 110:==================================>                  (77 + 40) / 117][Stage 110:============================================>       (101 + 16) / 117][Stage 110:===================================================> (114 + 3) / 117]                                                                                [Stage 111:================================>                    (72 + 46) / 118][Stage 111:=================================>                   (75 + 43) / 118][Stage 111:===========================================>         (96 + 22) / 118][Stage 111:==================================================>  (112 + 6) / 118][Stage 111:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.376041281 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 30  OR  partitionIndex = 31 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39798962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:============================>                        (60 + 53) / 113][Stage 112:===================================>                 (75 + 38) / 113][Stage 112:=============================================>       (96 + 17) / 113][Stage 112:==================================================>  (108 + 5) / 113]                                                                                [Stage 113:============================>                        (61 + 53) / 114][Stage 113:================================>                    (69 + 45) / 114][Stage 113:=========================================>           (89 + 25) / 114][Stage 113:==================================================>  (108 + 6) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.492686922 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 249  OR  partitionIndex = 250 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381586028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===============================>                     (68 + 47) / 115][Stage 114:===================================>                 (77 + 38) / 115][Stage 114:==========================================>          (93 + 22) / 115][Stage 114:=============================================>      (101 + 14) / 115][Stage 114:==================================================>  (110 + 5) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:==================================>                  (76 + 40) / 116][Stage 115:========================================>            (88 + 28) / 116][Stage 115:=============================================>       (99 + 17) / 116][Stage 115:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.195244431 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429772863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:=============================>                       (68 + 53) / 121][Stage 116:========================================>            (92 + 29) / 121][Stage 116:===================================================> (118 + 3) / 121]                                                                                [Stage 117:===========================>                         (63 + 59) / 122][Stage 117:================================>                    (74 + 48) / 122][Stage 117:=======================================>             (91 + 31) / 122][Stage 117:==============================================>     (110 + 12) / 122][Stage 117:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.143958476 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR   partitionIndex = 173  OR  partitionIndex = 188 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407985115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (61 + 60) / 121][Stage 118:===========================>                         (63 + 58) / 121][Stage 118:=================================>                   (77 + 44) / 121][Stage 118:============================================>       (104 + 17) / 121][Stage 118:=================================================>   (114 + 7) / 121]                                                                                [Stage 119:===========================>                         (63 + 59) / 122][Stage 119:================================>                    (75 + 47) / 122][Stage 119:==========================================>         (100 + 22) / 122][Stage 119:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.348389391 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388057665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===================================>                 (76 + 38) / 114][Stage 120:=========================================>           (89 + 25) / 114][Stage 120:=============================================>       (97 + 17) / 114][Stage 120:==============================================>     (103 + 11) / 114]                                                                                [Stage 121:===================================>                 (78 + 37) / 115][Stage 121:=========================================>           (91 + 24) / 115][Stage 121:===========================================>         (95 + 20) / 115][Stage 121:===============================================>    (104 + 11) / 115][Stage 121:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.11987634 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  par titionIndex = 19  OR  partitionIndex = 32 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403986316 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (72 + 43) / 115][Stage 122:========================================>            (87 + 28) / 115][Stage 122:==============================================>     (102 + 13) / 115][Stage 122:==================================================>  (109 + 6) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:================================>                    (71 + 45) / 116][Stage 123:====================================>                (80 + 36) / 116][Stage 123:============================================>        (97 + 19) / 116][Stage 123:================================================>    (107 + 9) / 116][Stage 123:===================================================> (113 + 3) / 116][Stage 123:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.942702003 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169  OR   partitionIndex = 184  OR  partitionIndex = 185 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 184  OR  partitionIndex = 185 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344031806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=======================================>             (85 + 30) / 115][Stage 124:===========================================>         (95 + 20) / 115][Stage 124:==================================================>  (110 + 5) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:=====================================>               (83 + 33) / 116][Stage 125:==========================================>          (94 + 22) / 116][Stage 125:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.552787829 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407149694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (61 + 60) / 121][Stage 126:===============================>                     (71 + 50) / 121][Stage 126:========================================>            (92 + 29) / 121][Stage 126:============================================>       (104 + 17) / 121][Stage 126:==================================================>  (116 + 5) / 121]                                                                                [Stage 127:===========================>                         (63 + 59) / 122][Stage 127:================================>                    (74 + 48) / 122][Stage 127:========================================>            (94 + 28) / 122][Stage 127:=================================================>   (113 + 9) / 122][Stage 127:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.512073484 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 61) / 121][Stage 128:============================>                        (65 + 56) / 121][Stage 128:=================================>                   (76 + 45) / 121][Stage 128:==========================================>          (96 + 25) / 121][Stage 128:=================================================>   (114 + 7) / 121]                                                                                [Stage 129:============================>                        (66 + 56) / 122][Stage 129:==================================>                  (79 + 43) / 122][Stage 129:==========================================>          (97 + 25) / 122][Stage 129:=================================================>   (115 + 7) / 122][Stage 129:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.465223787 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR   partitionIndex = 201  OR  partitionIndex = 216 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405044255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 61) / 122][Stage 130:============================>                        (65 + 57) / 122][Stage 130:====================================>                (85 + 37) / 122][Stage 130:============================================>       (105 + 17) / 122][Stage 130:==================================================>  (116 + 6) / 122]                                                                                [Stage 131:==========================>                          (61 + 62) / 123][Stage 131:=============================>                       (69 + 54) / 123][Stage 131:=====================================>               (86 + 37) / 123][Stage 131:=========================================>           (96 + 27) / 123][Stage 131:==================================================>  (117 + 6) / 123][Stage 131:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.458842729 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342225207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=======================================>             (85 + 30) / 115][Stage 132:==========================================>          (93 + 22) / 115][Stage 132:================================================>    (106 + 9) / 115]                                                                                [Stage 133:====================================>                (80 + 36) / 116][Stage 133:========================================>            (89 + 27) / 116][Stage 133:=============================================>      (102 + 14) / 116][Stage 133:==================================================>  (111 + 5) / 116][Stage 133:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.713759718 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 189  OR  partitionIndex = 190 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 189  OR  partitionIndex = 190 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359350898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===================================>                 (77 + 37) / 114][Stage 134:==========================================>          (92 + 22) / 114][Stage 134:==============================================>     (101 + 13) / 114][Stage 134:====================================================>(113 + 1) / 114]                                                                                [Stage 135:==================================>                  (74 + 41) / 115][Stage 135:========================================>            (88 + 27) / 115][Stage 135:=============================================>      (100 + 15) / 115][Stage 135:===============================================>    (105 + 10) / 115][Stage 135:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 2.93960567 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339743107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (81 + 34) / 115][Stage 136:========================================>            (87 + 28) / 115][Stage 136:============================================>        (96 + 19) / 115][Stage 136:================================================>    (106 + 9) / 115]                                                                                [Stage 137:=====================================>               (83 + 33) / 116][Stage 137:==========================================>          (92 + 24) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:==================================================>  (111 + 5) / 116][Stage 137:===================================================> (113 + 3) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.071969314 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 221 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 221 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400849756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:============================>                        (64 + 57) / 121][Stage 138:==================================>                  (79 + 42) / 121][Stage 138:==========================================>          (98 + 23) / 121][Stage 138:===================================================> (117 + 4) / 121]                                                                                [Stage 139:============================>                        (66 + 56) / 122][Stage 139:====================================>                (83 + 39) / 122][Stage 139:===========================================>        (101 + 21) / 122][Stage 139:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.302440683 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  pa rtitionIndex = 55  OR  partitionIndex = 64 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341597807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (82 + 33) / 115][Stage 140:=========================================>           (90 + 25) / 115][Stage 140:==============================================>     (102 + 13) / 115][Stage 140:===================================================> (112 + 3) / 115]                                                                                [Stage 141:=====================================>               (81 + 35) / 116][Stage 141:==========================================>          (92 + 24) / 116][Stage 141:===============================================>    (105 + 11) / 116][Stage 141:===================================================> (112 + 4) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.722326788 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  pa rtitionIndex = 44  OR  partitionIndex = 45 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400671316 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (62 + 59) / 121][Stage 142:==============================>                      (69 + 52) / 121][Stage 142:=====================================>               (85 + 36) / 121][Stage 142:==============================================>     (108 + 13) / 121]                                                                                [Stage 143:==========================>                          (62 + 60) / 122][Stage 143:=================================>                   (77 + 45) / 122][Stage 143:=========================================>           (96 + 26) / 122][Stage 143:==============================================>     (109 + 13) / 122]                                                                                Time elapsed: 3.144742742 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23  OR  pa rtitionIndex = 36  OR  partitionIndex = 37 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342293125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:======================================>              (84 + 31) / 115][Stage 144:=============================================>       (99 + 16) / 115][Stage 144:=================================================>   (108 + 7) / 115]                                                                                [Stage 145:=========================================>           (90 + 26) / 116][Stage 145:=============================================>      (101 + 15) / 116][Stage 145:=================================================>   (109 + 7) / 116][Stage 145:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.942560854 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR   partitionIndex = 172  OR  partitionIndex = 173 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419883606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (61 + 60) / 121][Stage 146:=============================>                       (68 + 53) / 121][Stage 146:======================================>              (89 + 32) / 121][Stage 146:==============================================>     (109 + 12) / 121][Stage 146:===================================================> (118 + 3) / 121]                                                                                [Stage 147:===========================>                         (63 + 59) / 122][Stage 147:=============================>                       (69 + 53) / 122][Stage 147:==========================================>          (98 + 24) / 122][Stage 147:===============================================>    (112 + 10) / 122][Stage 147:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.55541155 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  pa rtitionIndex = 80  OR  partitionIndex = 81 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 80  OR  partitionIndex = 81 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35400794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (84 + 31) / 115][Stage 148:=============================================>      (101 + 14) / 115][Stage 148:===================================================> (112 + 3) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:========================================>            (88 + 28) / 116][Stage 149:=============================================>       (99 + 17) / 116][Stage 149:===================================================> (113 + 3) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.872969757 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 222  OR  partitionIndex = 223 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342735725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (81 + 34) / 115][Stage 150:========================================>            (87 + 28) / 115][Stage 150:=============================================>       (98 + 17) / 115][Stage 150:===================================================> (112 + 3) / 115]                                                                                [Stage 151:=======================================>             (86 + 30) / 116][Stage 151:==========================================>          (94 + 22) / 116][Stage 151:================================================>    (107 + 9) / 116][Stage 151:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.746480641 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415134369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (62 + 60) / 122][Stage 152:==============================>                      (71 + 51) / 122][Stage 152:=======================================>             (90 + 32) / 122][Stage 152:=================================================>   (113 + 9) / 122]                                                                                [Stage 153:============================>                        (66 + 57) / 123][Stage 153:===================================>                 (82 + 41) / 123][Stage 153:==========================================>         (101 + 22) / 123][Stage 153:==================================================>  (117 + 6) / 123][Stage 153:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.404812403 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355810158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=================================>                   (71 + 43) / 114][Stage 154:=======================================>             (84 + 30) / 114][Stage 154:============================================>        (96 + 18) / 114][Stage 154:==============================================>     (103 + 11) / 114][Stage 154:==================================================>  (109 + 5) / 114]                                                                                [Stage 155:====================================>                (79 + 36) / 115][Stage 155:=========================================>           (89 + 26) / 115][Stage 155:=============================================>      (100 + 15) / 115][Stage 155:===============================================>    (105 + 10) / 115][Stage 155:====================================================>(113 + 2) / 115][Stage 155:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.708407157 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR   partitionIndex = 223  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=================================>                   (71 + 43) / 114][Stage 156:========================================>            (87 + 27) / 114][Stage 156:============================================>        (95 + 19) / 114][Stage 156:=============================================>      (100 + 14) / 114][Stage 156:===================================================> (111 + 3) / 114]                                                                                [Stage 157:=================================>                   (72 + 43) / 115][Stage 157:=========================================>           (90 + 25) / 115][Stage 157:=============================================>      (101 + 14) / 115][Stage 157:================================================>    (106 + 9) / 115][Stage 157:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.006344064 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR   partitionIndex = 160  OR  partitionIndex = 161 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=================================>                   (72 + 42) / 114][Stage 158:========================================>            (87 + 27) / 114][Stage 158:=============================================>       (98 + 16) / 114][Stage 158:=================================================>   (106 + 8) / 114][Stage 158:===================================================> (110 + 4) / 114]                                                                                [Stage 159:=================================>                   (72 + 43) / 115][Stage 159:=========================================>           (90 + 25) / 115][Stage 159:=============================================>       (99 + 16) / 115][Stage 159:=================================================>   (107 + 8) / 115][Stage 159:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.004644905 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR   partitionIndex = 241  OR  partitionIndex = 242 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 241  OR  partitionIndex = 242 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407894691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (63 + 59) / 122][Stage 160:===============================>                     (73 + 49) / 122][Stage 160:=======================================>             (91 + 31) / 122][Stage 160:=================================================>   (113 + 9) / 122]                                                                                [Stage 161:==========================>                          (61 + 62) / 123][Stage 161:===============================>                     (73 + 50) / 123][Stage 161:======================================>              (90 + 33) / 123][Stage 161:===============================================>    (112 + 11) / 123][Stage 161:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.48120436 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 102  OR   partitionIndex = 116  OR  partitionIndex = 117 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 116  OR  partitionIndex = 117 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404132053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:============================>                        (64 + 57) / 121][Stage 162:===============================>                     (71 + 50) / 121][Stage 162:=========================================>           (95 + 26) / 121][Stage 162:===================================================> (117 + 4) / 121]                                                                                [Stage 163:==========================>                          (62 + 60) / 122][Stage 163:==============================>                      (70 + 52) / 122][Stage 163:===================================>                 (81 + 41) / 122][Stage 163:===========================================>        (102 + 20) / 122][Stage 163:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.366794498 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 17  OR  partitionIndex = 18 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362905514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===================================>                 (76 + 38) / 114][Stage 164:=========================================>           (90 + 24) / 114][Stage 164:===============================================>    (104 + 10) / 114][Stage 164:===================================================> (110 + 4) / 114]                                                                                [Stage 165:===================================>                 (77 + 38) / 115][Stage 165:========================================>            (88 + 27) / 115][Stage 165:============================================>        (97 + 18) / 115][Stage 165:================================================>    (106 + 9) / 115][Stage 165:==================================================>  (109 + 6) / 115][Stage 165:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 6.257500675 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 84  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 84  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399633576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:============================>                        (64 + 57) / 121][Stage 166:====================================>                (83 + 38) / 121][Stage 166:=============================================>      (106 + 15) / 121][Stage 166:===================================================> (118 + 3) / 121]                                                                                [Stage 167:============================>                        (65 + 57) / 122][Stage 167:=================================>                   (77 + 45) / 122][Stage 167:==========================================>          (97 + 25) / 122][Stage 167:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.230325524 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19  OR  pa rtitionIndex = 32  OR  partitionIndex = 33 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371190529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (72 + 45) / 117][Stage 168:==================================>                  (76 + 41) / 117][Stage 168:=======================================>             (88 + 29) / 117][Stage 168:================================================>    (108 + 9) / 117]                                                                                [Stage 169:================================>                    (72 + 46) / 118][Stage 169:=====================================>               (84 + 34) / 118][Stage 169:============================================>        (99 + 19) / 118][Stage 169:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 2.999931802 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 162  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395024337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (71 + 44) / 115][Stage 170:====================================>                (79 + 36) / 115][Stage 170:==========================================>          (93 + 22) / 115][Stage 170:=================================================>   (108 + 7) / 115]                                                                                [Stage 171:=================================>                   (74 + 42) / 116][Stage 171:=======================================>             (87 + 29) / 116][Stage 171:=============================================>      (101 + 15) / 116][Stage 171:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.946027509 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 152  OR  partitionIndex = 153 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376306607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=================================>                   (72 + 43) / 115][Stage 172:========================================>            (87 + 28) / 115][Stage 172:===============================================>    (104 + 11) / 115][Stage 172:====================================================>(114 + 1) / 115]                                                                                [Stage 173:================================>                    (71 + 45) / 116][Stage 173:=======================================>             (87 + 29) / 116][Stage 173:==========================================>          (94 + 22) / 116][Stage 173:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.681742983 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  pa rtitionIndex = 40  OR  partitionIndex = 41 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359751476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=======================================>             (85 + 29) / 114][Stage 174:============================================>        (95 + 19) / 114][Stage 174:=================================================>   (106 + 8) / 114][Stage 174:=================================================>   (107 + 7) / 114][Stage 174:===================================================> (110 + 4) / 114]                                                                                [Stage 175:=====================================>               (82 + 33) / 115][Stage 175:===========================================>         (95 + 20) / 115][Stage 175:=============================================>      (101 + 14) / 115][Stage 175:==================================================>  (109 + 6) / 115][Stage 175:===================================================> (111 + 4) / 115][Stage 175:===================================================> (112 + 3) / 115][Stage 175:====================================================>(113 + 2) / 115][Stage 175:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 5.047307407 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 21  OR  partitionIndex = 22 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377852706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (71 + 46) / 117][Stage 176:=================================>                   (73 + 44) / 117][Stage 176:=======================================>             (87 + 30) / 117][Stage 176:===============================================>    (106 + 11) / 117][Stage 176:====================================================>(116 + 1) / 117]                                                                                [Stage 177:================================>                    (72 + 46) / 118][Stage 177:=================================>                   (75 + 43) / 118][Stage 177:========================================>            (91 + 27) / 118][Stage 177:================================================>    (109 + 9) / 118][Stage 177:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.238705655 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 94  OR  partitionIndex = 95 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 94  OR  partitionIndex = 95 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (72 + 45) / 117][Stage 178:==================================>                  (77 + 40) / 117][Stage 178:=============================================>      (103 + 14) / 117][Stage 178:==================================================>  (112 + 5) / 117]                                                                                [Stage 179:================================>                    (73 + 45) / 118][Stage 179:====================================>                (81 + 37) / 118][Stage 179:============================================>       (100 + 18) / 118][Stage 179:===================================================> (115 + 3) / 118][Stage 179:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.190844099 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347290241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:======================================>              (83 + 32) / 115][Stage 180:===========================================>         (94 + 21) / 115][Stage 180:================================================>    (106 + 9) / 115]                                                                                [Stage 181:======================================>              (84 + 32) / 116][Stage 181:===========================================>         (96 + 20) / 116][Stage 181:===============================================>    (105 + 11) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.636799322 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR   partitionIndex = 116  OR  partitionIndex = 117 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395778417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (62 + 59) / 121][Stage 182:=================================>                   (77 + 44) / 121][Stage 182:===========================================>        (101 + 20) / 121][Stage 182:====================================================>(120 + 1) / 121]                                                                                [Stage 183:==========================>                          (62 + 60) / 122][Stage 183:=============================>                       (69 + 53) / 122][Stage 183:===================================>                 (82 + 40) / 122][Stage 183:=================================================>   (113 + 9) / 122][Stage 183:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.192702756 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 243 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 243 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336651907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (82 + 33) / 115][Stage 184:=========================================>           (90 + 25) / 115][Stage 184:=================================================>   (107 + 8) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:=====================================>               (82 + 34) / 116][Stage 185:========================================>            (89 + 27) / 116][Stage 185:===============================================>    (106 + 10) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.64037506 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  pa rtitionIndex = 45  OR  partitionIndex = 60 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 60 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.32911631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (84 + 31) / 115][Stage 186:=========================================>           (90 + 25) / 115][Stage 186:=================================================>   (107 + 8) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:=====================================>               (83 + 33) / 116][Stage 187:=========================================>           (91 + 25) / 116][Stage 187:==============================================>     (103 + 13) / 116][Stage 187:===================================================> (113 + 3) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.812061734 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337049366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:====================================>                (80 + 35) / 115][Stage 188:========================================>            (88 + 27) / 115][Stage 188:===============================================>    (104 + 11) / 115][Stage 188:====================================================>(113 + 2) / 115]                                                                                [Stage 189:========================================>            (88 + 28) / 116][Stage 189:=============================================>      (101 + 15) / 116][Stage 189:==================================================>  (111 + 5) / 116][Stage 189:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.369733862 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 171  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408293109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (61 + 61) / 122][Stage 190:============================>                        (65 + 57) / 122][Stage 190:===================================>                 (81 + 41) / 122][Stage 190:==========================================>         (100 + 22) / 122][Stage 190:===================================================> (118 + 4) / 122]                                                                                [Stage 191:============================>                        (67 + 56) / 123][Stage 191:==================================>                  (81 + 42) / 123][Stage 191:=============================================>      (107 + 16) / 123][Stage 191:==================================================>  (118 + 5) / 123][Stage 191:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.488970139 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164  OR   partitionIndex = 165  OR  partitionIndex = 180 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 180 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391960557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:====================================>                (78 + 36) / 114][Stage 192:==========================================>          (91 + 23) / 114][Stage 192:==============================================>     (102 + 12) / 114][Stage 192:===================================================> (110 + 4) / 114]                                                                                [Stage 193:=======================================>             (85 + 30) / 115][Stage 193:=============================================>      (101 + 14) / 115][Stage 193:=================================================>   (107 + 8) / 115][Stage 193:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.838512494 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===================================>                 (76 + 38) / 114][Stage 194:=========================================>           (90 + 24) / 114][Stage 194:==============================================>     (103 + 11) / 114][Stage 194:==================================================>  (108 + 6) / 114]                                                                                [Stage 195:===================================>                 (78 + 37) / 115][Stage 195:=========================================>           (89 + 26) / 115][Stage 195:==============================================>     (103 + 12) / 115][Stage 195:==================================================>  (109 + 6) / 115][Stage 195:==================================================>  (110 + 5) / 115][Stage 195:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.724729495 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 107  OR  p artitionIndex = 122  OR  partitionIndex = 123 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 107  OR  partitionIndex = 122  OR  partitionIndex = 123 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44591313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==================================>                  (75 + 39) / 114][Stage 196:===========================================>         (93 + 21) / 114][Stage 196:==============================================>     (102 + 12) / 114][Stage 196:==================================================>  (108 + 6) / 114][Stage 196:====================================================>(112 + 2) / 114]                                                                                [Stage 197:=================================>                   (73 + 42) / 115][Stage 197:==========================================>          (92 + 23) / 115][Stage 197:=============================================>       (98 + 17) / 115][Stage 197:===============================================>    (105 + 10) / 115][Stage 197:==================================================>  (109 + 6) / 115][Stage 197:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.175020318 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 214  OR  partitionIndex = 215 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437596813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (63 + 58) / 121][Stage 198:==============================>                      (70 + 51) / 121][Stage 198:=======================================>             (91 + 30) / 121][Stage 198:==================================================>  (115 + 6) / 121]                                                                                [Stage 199:==========================>                          (62 + 60) / 122][Stage 199:============================>                        (65 + 57) / 122][Stage 199:=================================>                   (78 + 44) / 122][Stage 199:=============================================>      (107 + 15) / 122][Stage 199:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.184246712 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372255627 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (72 + 45) / 117][Stage 200:====================================>                (81 + 36) / 117][Stage 200:============================================>        (98 + 19) / 117][Stage 200:===================================================> (113 + 4) / 117]                                                                                [Stage 201:================================>                    (72 + 46) / 118][Stage 201:===================================>                 (78 + 40) / 118][Stage 201:===========================================>         (96 + 22) / 118][Stage 201:=================================================>   (111 + 7) / 118][Stage 201:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.252158956 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m23.750s
user	11m50.588s
sys	0m58.304s
