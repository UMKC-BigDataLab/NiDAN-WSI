Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/30 01:34:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:34:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:34:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:34:24 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/30 01:34:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/30 01:34:36 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170530013425-0708).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.426714393 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 14.032198767 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 252  OR  partitionIndex = 253 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.81334966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================>                                  (45 + 77) / 122][Stage 2:=======================>                               (52 + 70) / 122][Stage 2:===========================>                           (60 + 62) / 122][Stage 2:===========================>                           (62 + 60) / 122][Stage 2:================================>                      (73 + 49) / 122][Stage 2:========================================>              (89 + 33) / 122][Stage 2:===================================================>   (114 + 8) / 122]                                                                                [Stage 3:===========================>                           (61 + 62) / 123][Stage 3:===========================>                           (62 + 61) / 123][Stage 3:============================>                          (63 + 60) / 123][Stage 3:=============================>                         (67 + 56) / 123][Stage 3:=======================================>               (88 + 35) / 123][Stage 3:==============================================>       (106 + 17) / 123][Stage 3:====================================================>  (118 + 5) / 123][Stage 3:=====================================================> (120 + 3) / 123]                                                                                Time elapsed: 4.855532738 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.62739565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (70 + 47) / 117][Stage 4:=================================>                     (71 + 46) / 117][Stage 4:===================================>                   (75 + 42) / 117][Stage 4:=====================================>                 (80 + 37) / 117][Stage 4:=======================================>               (84 + 33) / 117][Stage 4:=========================================>             (89 + 28) / 117][Stage 4:==============================================>       (100 + 17) / 117][Stage 4:=====================================================> (114 + 3) / 117][Stage 4:======================================================>(116 + 1) / 117]                                                                                [Stage 5:================================>                      (70 + 48) / 118][Stage 5:=================================>                     (72 + 46) / 118][Stage 5:====================================>                  (79 + 39) / 118][Stage 5:=======================================>               (85 + 33) / 118][Stage 5:========================================>              (87 + 31) / 118][Stage 5:===========================================>           (93 + 25) / 118][Stage 5:===================================================>   (110 + 8) / 118][Stage 5:=====================================================> (115 + 3) / 118][Stage 5:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 5.073059117 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (69 + 48) / 117][Stage 6:==================================>                    (74 + 43) / 117][Stage 6:====================================>                  (78 + 39) / 117][Stage 6:=======================================>               (85 + 32) / 117][Stage 6:===========================================>           (92 + 25) / 117][Stage 6:================================================>     (104 + 13) / 117][Stage 6:=====================================================> (113 + 4) / 117]                                                                                [Stage 7:=================================>                     (72 + 46) / 118][Stage 7:==================================>                    (75 + 43) / 118][Stage 7:====================================>                  (78 + 40) / 118][Stage 7:======================================>                (83 + 35) / 118][Stage 7:=========================================>             (89 + 29) / 118][Stage 7:=============================================>        (100 + 18) / 118][Stage 7:==================================================>    (109 + 9) / 118][Stage 7:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.499898383 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 124 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.722501835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==========================>                            (59 + 62) / 121][Stage 8:============================>                          (63 + 58) / 121][Stage 8:================================>                      (71 + 50) / 121][Stage 8:========================================>              (88 + 33) / 121][Stage 8:=============================================>        (103 + 18) / 121][Stage 8:==================================================>    (112 + 9) / 121]                                                                                [Stage 9:===========================>                           (61 + 61) / 122][Stage 9:=============================>                         (65 + 57) / 122][Stage 9:=================================>                     (74 + 48) / 122][Stage 9:==========================================>            (94 + 28) / 122][Stage 9:=================================================>    (111 + 11) / 122][Stage 9:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.917800237 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 244 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 244 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.627439762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (60 + 61) / 121][Stage 10:============================>                         (64 + 57) / 121][Stage 10:==================================>                   (77 + 44) / 121][Stage 10:=========================================>            (93 + 28) / 121][Stage 10:=============================================>       (105 + 16) / 121][Stage 10:====================================================> (117 + 4) / 121]                                                                                [Stage 11:===========================>                          (62 + 60) / 122][Stage 11:===============================>                      (72 + 50) / 122][Stage 11:======================================>               (88 + 34) / 122][Stage 11:=============================================>       (105 + 17) / 122][Stage 11:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.660368013 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487442517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (79 + 36) / 115][Stage 12:======================================>               (82 + 33) / 115][Stage 12:===========================================>          (93 + 22) / 115][Stage 12:==================================================>   (107 + 8) / 115][Stage 12:====================================================> (112 + 3) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=====================================>                (81 + 35) / 116][Stage 13:=======================================>              (85 + 31) / 116][Stage 13:================================================>    (106 + 10) / 116][Stage 13:===================================================>  (111 + 5) / 116][Stage 13:=====================================================>(114 + 2) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.117690573 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:======================================>               (83 + 32) / 115][Stage 14:============================================>         (94 + 21) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:=======================================>              (84 + 32) / 116][Stage 15:=============================================>        (97 + 19) / 116][Stage 15:================================================>    (106 + 10) / 116][Stage 15:===================================================>  (110 + 6) / 116][Stage 15:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.191640676 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 85 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 85 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.60397701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (61 + 60) / 121][Stage 16:===========================>                          (62 + 59) / 121][Stage 16:================================>                     (73 + 48) / 121][Stage 16:========================================>             (90 + 31) / 121][Stage 16:=================================================>    (112 + 9) / 121][Stage 16:=====================================================>(120 + 1) / 121]                                                                                [Stage 17:===========================>                          (62 + 60) / 122][Stage 17:==============================>                       (68 + 54) / 122][Stage 17:===================================>                  (80 + 42) / 122][Stage 17:===========================================>          (99 + 23) / 122][Stage 17:==================================================>   (113 + 9) / 122][Stage 17:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.580919982 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 184 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 184 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507615868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===================================>                  (75 + 39) / 114][Stage 18:=========================================>            (87 + 27) / 114][Stage 18:=============================================>        (96 + 18) / 114][Stage 18:===============================================>     (102 + 12) / 114][Stage 18:=================================================>    (105 + 9) / 114][Stage 18:===================================================>  (109 + 5) / 114][Stage 18:====================================================> (111 + 3) / 114][Stage 18:=====================================================>(113 + 1) / 114]                                                                                [Stage 19:===================================>                  (75 + 40) / 115][Stage 19:=========================================>            (88 + 27) / 115][Stage 19:=============================================>        (97 + 18) / 115][Stage 19:==============================================>      (101 + 14) / 115][Stage 19:===============================================>     (104 + 11) / 115][Stage 19:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.054987023 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542219348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (65 + 50) / 115][Stage 20:==================================>                   (74 + 41) / 115][Stage 20:==========================================>           (90 + 25) / 115][Stage 20:================================================>    (105 + 10) / 115][Stage 20:====================================================> (111 + 4) / 115]                                                                                [Stage 21:=================================>                    (71 + 45) / 116][Stage 21:=====================================>                (80 + 36) / 116][Stage 21:==========================================>           (91 + 25) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:=================================================>    (107 + 9) / 116][Stage 21:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.477439354 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 49 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573169696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (61 + 60) / 121][Stage 22:=============================>                        (65 + 56) / 121][Stage 22:======================================>               (87 + 34) / 121][Stage 22:===============================================>     (109 + 12) / 121]                                                                                [Stage 23:===========================>                          (62 + 60) / 122][Stage 23:=================================>                    (75 + 47) / 122][Stage 23:========================================>             (92 + 30) / 122][Stage 23:================================================>    (111 + 11) / 122][Stage 23:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.347106427 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.560550504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 61) / 121][Stage 24:===========================>                          (61 + 60) / 121][Stage 24:==================================>                   (77 + 44) / 121][Stage 24:==========================================>           (96 + 25) / 121][Stage 24:===============================================>     (108 + 13) / 121][Stage 24:===================================================>  (116 + 5) / 121][Stage 24:=====================================================>(120 + 1) / 121]                                                                                [Stage 25:===========================>                          (62 + 60) / 122][Stage 25:===============================>                      (71 + 51) / 122][Stage 25:===========================================>         (101 + 21) / 122][Stage 25:===================================================>  (116 + 6) / 122][Stage 25:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.750087726 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.557703537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==============================>                       (66 + 49) / 115][Stage 26:===================================>                  (75 + 40) / 115][Stage 26:=======================================>              (84 + 31) / 115][Stage 26:==============================================>      (100 + 15) / 115][Stage 26:===================================================>  (109 + 6) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:==================================>                   (75 + 41) / 116][Stage 27:=========================================>            (89 + 27) / 116][Stage 27:==============================================>       (99 + 17) / 116][Stage 27:===============================================>     (103 + 13) / 116][Stage 27:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.682411283 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520875455 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 60) / 121][Stage 28:=============================>                        (67 + 54) / 121][Stage 28:==================================>                   (78 + 43) / 121][Stage 28:===========================================>          (98 + 23) / 121][Stage 28:=================================================>    (112 + 9) / 121]                                                                                [Stage 29:===========================>                          (63 + 59) / 122][Stage 29:===============================>                      (72 + 50) / 122][Stage 29:========================================>             (92 + 30) / 122][Stage 29:===============================================>     (109 + 13) / 122][Stage 29:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.399676791 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441331921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==================================>                   (73 + 41) / 114][Stage 30:===========================================>          (92 + 22) / 114][Stage 30:==============================================>      (100 + 14) / 114][Stage 30:==================================================>   (106 + 8) / 114][Stage 30:=====================================================>(112 + 2) / 114][Stage 30:=====================================================>(113 + 1) / 114]                                                                                [Stage 31:===================================>                  (76 + 39) / 115][Stage 31:=======================================>              (85 + 30) / 115][Stage 31:=============================================>        (97 + 18) / 115][Stage 31:=================================================>    (106 + 9) / 115][Stage 31:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.272090831 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 208 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472177068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (82 + 33) / 115][Stage 32:===========================================>          (93 + 22) / 115][Stage 32:==================================================>   (107 + 8) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:=====================================>                (80 + 36) / 116][Stage 33:=========================================>            (90 + 26) / 116][Stage 33:=============================================>        (97 + 19) / 116][Stage 33:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.872808827 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505774158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (61 + 60) / 121][Stage 34:=============================>                        (67 + 54) / 121][Stage 34:====================================>                 (82 + 39) / 121][Stage 34:============================================>        (102 + 19) / 121][Stage 34:=====================================================>(120 + 1) / 121]                                                                                [Stage 35:===========================>                          (62 + 60) / 122][Stage 35:==============================>                       (69 + 53) / 122][Stage 35:====================================>                 (83 + 39) / 122][Stage 35:==============================================>      (108 + 14) / 122][Stage 35:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.259596542 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507056748 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 60) / 121][Stage 36:===============================>                      (70 + 51) / 121][Stage 36:========================================>             (91 + 30) / 121][Stage 36:=================================================>    (112 + 9) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:===============================>                      (71 + 51) / 122][Stage 37:======================================>               (86 + 36) / 122][Stage 37:==============================================>      (106 + 16) / 122][Stage 37:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.266568353 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407838465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:======================================>               (83 + 32) / 115][Stage 38:==============================================>       (98 + 17) / 115][Stage 38:===================================================>  (109 + 6) / 115][Stage 38:=====================================================>(113 + 2) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:========================================>             (88 + 28) / 116][Stage 39:=============================================>        (97 + 19) / 116][Stage 39:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.932193398 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 250 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402635518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=====================================>                (79 + 36) / 115][Stage 40:=======================================>              (85 + 30) / 115][Stage 40:===========================================>          (93 + 22) / 115][Stage 40:================================================>    (105 + 10) / 115]                                                                                [Stage 41:=======================================>              (84 + 32) / 116][Stage 41:===========================================>          (94 + 22) / 116][Stage 41:================================================>    (106 + 10) / 116][Stage 41:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.830819489 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452277308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (66 + 49) / 115][Stage 42:=====================================>                (79 + 36) / 115][Stage 42:============================================>         (95 + 20) / 115][Stage 42:===============================================>     (104 + 11) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=================================>                    (73 + 43) / 116][Stage 43:========================================>             (87 + 29) / 116][Stage 43:==============================================>       (99 + 17) / 116][Stage 43:==================================================>   (108 + 8) / 116][Stage 43:===================================================>  (111 + 5) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.026604964 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481688662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (69 + 46) / 115][Stage 44:======================================>               (82 + 33) / 115][Stage 44:============================================>         (95 + 20) / 115][Stage 44:===================================================>  (109 + 6) / 115][Stage 44:====================================================> (112 + 3) / 115]                                                                                [Stage 45:================================>                     (70 + 46) / 116][Stage 45:========================================>             (88 + 28) / 116][Stage 45:==============================================>       (99 + 17) / 116][Stage 45:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.071597562 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450427929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:====================================>                 (76 + 38) / 114][Stage 46:==========================================>           (90 + 24) / 114][Stage 46:===============================================>     (102 + 12) / 114][Stage 46:=================================================>    (105 + 9) / 114][Stage 46:=====================================================>(112 + 2) / 114]                                                                                [Stage 47:====================================>                 (77 + 38) / 115][Stage 47:===========================================>          (92 + 23) / 115][Stage 47:===============================================>     (102 + 13) / 115][Stage 47:====================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.133332668 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464433029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (69 + 46) / 115][Stage 48:======================================>               (81 + 34) / 115][Stage 48:=================================================>    (106 + 9) / 115][Stage 48:=====================================================>(113 + 2) / 115]                                                                                [Stage 49:======================================>               (82 + 34) / 116][Stage 49:=============================================>        (97 + 19) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.075289556 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415036159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==================================>                   (72 + 42) / 114][Stage 50:=======================================>              (83 + 31) / 114][Stage 50:=============================================>        (97 + 17) / 114][Stage 50:===================================================>  (109 + 5) / 114][Stage 50:=====================================================>(112 + 2) / 114][Stage 50:=====================================================>(113 + 1) / 114]                                                                                [Stage 51:==================================>                   (73 + 42) / 115][Stage 51:=========================================>            (88 + 27) / 115][Stage 51:==============================================>      (101 + 14) / 115][Stage 51:=================================================>    (106 + 9) / 115][Stage 51:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.258352095 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 152 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 152 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466246442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (61 + 61) / 122][Stage 52:============================>                         (65 + 57) / 122][Stage 52:=========================================>            (93 + 29) / 122][Stage 52:====================================================> (119 + 3) / 122]                                                                                [Stage 53:===========================>                          (63 + 60) / 123][Stage 53:==================================>                   (78 + 45) / 123][Stage 53:===========================================>          (98 + 25) / 123][Stage 53:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 3.101149662 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521347078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:====================================>                 (77 + 37) / 114][Stage 54:=========================================>            (88 + 26) / 114][Stage 54:==============================================>      (101 + 13) / 114][Stage 54:====================================================> (111 + 3) / 114]                                                                                [Stage 55:=====================================>                (79 + 36) / 115][Stage 55:==========================================>           (90 + 25) / 115][Stage 55:============================================>         (94 + 21) / 115][Stage 55:================================================>    (105 + 10) / 115][Stage 55:====================================================> (111 + 4) / 115][Stage 55:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.658266481 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423944133 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (71 + 46) / 117][Stage 56:=================================>                    (73 + 44) / 117][Stage 56:=========================================>            (90 + 27) / 117][Stage 56:================================================>    (107 + 10) / 117][Stage 56:===================================================>  (112 + 5) / 117]                                                                                [Stage 57:================================>                     (72 + 46) / 118][Stage 57:===================================>                  (77 + 41) / 118][Stage 57:==========================================>           (93 + 25) / 118][Stage 57:===============================================>     (106 + 12) / 118][Stage 57:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.281191423 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386466368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (81 + 34) / 115][Stage 58:==========================================>           (91 + 24) / 115][Stage 58:==============================================>      (101 + 14) / 115][Stage 58:====================================================> (111 + 4) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:=====================================>                (81 + 35) / 116][Stage 59:==========================================>           (92 + 24) / 116][Stage 59:=============================================>       (100 + 16) / 116][Stage 59:====================================================> (112 + 4) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.231675005 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 242 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450983965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (61 + 60) / 121][Stage 60:=============================>                        (66 + 55) / 121][Stage 60:===================================>                  (80 + 41) / 121][Stage 60:==============================================>      (107 + 14) / 121]                                                                                [Stage 61:==========================>                           (60 + 62) / 122][Stage 61:================================>                     (73 + 49) / 122][Stage 61:========================================>             (92 + 30) / 122][Stage 61:==================================================>   (113 + 9) / 122][Stage 61:====================================================> (118 + 4) / 122][Stage 61:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.259354135 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40435854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (71 + 46) / 117][Stage 62:=================================>                    (73 + 44) / 117][Stage 62:=======================================>              (86 + 31) / 117][Stage 62:=================================================>    (108 + 9) / 117]                                                                                [Stage 63:=================================>                    (73 + 45) / 118][Stage 63:====================================>                 (80 + 38) / 118][Stage 63:===============================================>     (106 + 12) / 118][Stage 63:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 2.964504695 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide71;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (71 + 46) / 117][Stage 64:========================================>             (88 + 29) / 117][Stage 64:===============================================>     (104 + 13) / 117][Stage 64:====================================================> (114 + 3) / 117]                                                                                [Stage 65:=================================>                    (74 + 44) / 118][Stage 65:=========================================>            (90 + 28) / 118][Stage 65:=================================================>    (109 + 9) / 118]                                                                                Time elapsed: 2.947669661 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 250  OR  partitionIndex = 251 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465848289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==========================>                           (60 + 62) / 122][Stage 66:===============================>                      (71 + 51) / 122][Stage 66:======================================>               (87 + 35) / 122][Stage 66:===============================================>     (110 + 12) / 122][Stage 66:=====================================================>(121 + 1) / 122]                                                                                [Stage 67:=============================>                        (67 + 56) / 123][Stage 67:===================================>                  (81 + 42) / 123][Stage 67:==============================================>      (107 + 16) / 123][Stage 67:====================================================> (119 + 4) / 123][Stage 67:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.282465528 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382629968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=====================================>                (80 + 35) / 115][Stage 68:==========================================>           (91 + 24) / 115][Stage 68:===============================================>     (103 + 12) / 115][Stage 68:====================================================> (112 + 3) / 115]                                                                                [Stage 69:========================================>             (86 + 30) / 116][Stage 69:==============================================>      (102 + 14) / 116][Stage 69:====================================================> (112 + 4) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.035285882 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.522158713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (79 + 35) / 114][Stage 70:==========================================>           (89 + 25) / 114][Stage 70:==============================================>       (99 + 15) / 114][Stage 70:================================================>    (104 + 10) / 114][Stage 70:=====================================================>(112 + 2) / 114]                                                                                [Stage 71:======================================>               (82 + 33) / 115][Stage 71:==============================================>       (98 + 17) / 115][Stage 71:===============================================>     (102 + 13) / 115][Stage 71:====================================================> (111 + 4) / 115][Stage 71:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.33801341 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369596894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (82 + 33) / 115][Stage 72:============================================>         (95 + 20) / 115][Stage 72:===============================================>     (102 + 13) / 115][Stage 72:====================================================> (111 + 4) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:===========================================>          (93 + 23) / 116][Stage 73:===============================================>     (103 + 13) / 116][Stage 73:====================================================> (112 + 4) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.837834998 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473305748 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (61 + 61) / 122][Stage 74:==============================>                       (68 + 54) / 122][Stage 74:========================================>             (92 + 30) / 122][Stage 74:==================================================>   (115 + 7) / 122][Stage 74:=====================================================>(121 + 1) / 122]                                                                                [Stage 75:==========================>                           (61 + 62) / 123][Stage 75:============================>                         (65 + 58) / 123][Stage 75:====================================>                 (82 + 41) / 123][Stage 75:============================================>        (103 + 20) / 123]                                                                                Time elapsed: 3.072990822 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==========================>                           (60 + 62) / 122][Stage 76:============================>                         (65 + 57) / 122][Stage 76:===============================>                      (71 + 51) / 122][Stage 76:==========================================>           (95 + 27) / 122][Stage 76:====================================================> (118 + 4) / 122]                                                                                [Stage 77:==========================>                           (61 + 62) / 123][Stage 77:================================>                     (73 + 50) / 123][Stage 77:=========================================>            (94 + 29) / 123][Stage 77:===============================================>     (110 + 13) / 123]                                                                                Time elapsed: 3.171951069 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440866826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===============================>                      (67 + 48) / 115][Stage 78:=====================================>                (80 + 35) / 115][Stage 78:===========================================>          (93 + 22) / 115][Stage 78:===============================================>     (104 + 11) / 115]                                                                                [Stage 79:=================================>                    (71 + 45) / 116][Stage 79:=========================================>            (89 + 27) / 116][Stage 79:===============================================>     (103 + 13) / 116][Stage 79:===================================================>  (110 + 6) / 116][Stage 79:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.223208442 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 48 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434302548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:============================>                         (59 + 54) / 113][Stage 80:=============================>                        (62 + 51) / 113][Stage 80:======================================>               (81 + 32) / 113][Stage 80:=============================================>        (96 + 17) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:=============================>                        (63 + 51) / 114][Stage 81:==================================>                   (73 + 41) / 114][Stage 81:============================================>         (93 + 21) / 114][Stage 81:====================================================> (111 + 3) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.246964838 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412390898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:====================================>                 (76 + 38) / 114][Stage 82:=========================================>            (88 + 26) / 114][Stage 82:================================================>    (104 + 10) / 114][Stage 82:====================================================> (111 + 3) / 114]                                                                                [Stage 83:=====================================>                (79 + 36) / 115][Stage 83:==========================================>           (90 + 25) / 115][Stage 83:===============================================>     (104 + 11) / 115][Stage 83:====================================================> (112 + 3) / 115][Stage 83:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.382502138 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446307209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (62 + 60) / 122][Stage 84:==================================>                   (77 + 45) / 122][Stage 84:===========================================>          (99 + 23) / 122][Stage 84:====================================================> (118 + 4) / 122]                                                                                [Stage 85:=============================>                        (68 + 55) / 123][Stage 85:=================================>                    (76 + 47) / 123][Stage 85:===========================================>          (98 + 25) / 123][Stage 85:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.011109545 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 237 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388246187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (71 + 43) / 114][Stage 86:=======================================>              (84 + 30) / 114][Stage 86:=============================================>        (97 + 17) / 114][Stage 86:===============================================>     (103 + 11) / 114][Stage 86:===================================================>  (109 + 5) / 114][Stage 86:=====================================================>(112 + 2) / 114]                                                                                [Stage 87:=======================================>              (84 + 31) / 115][Stage 87:=============================================>        (96 + 19) / 115][Stage 87:===============================================>     (104 + 11) / 115][Stage 87:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.293246469 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372976935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (82 + 33) / 115][Stage 88:=========================================>            (88 + 27) / 115][Stage 88:==============================================>       (98 + 17) / 115][Stage 88:====================================================> (112 + 3) / 115][Stage 88:=====================================================>(113 + 2) / 115]                                                                                [Stage 89:======================================>               (82 + 34) / 116][Stage 89:============================================>         (95 + 21) / 116][Stage 89:================================================>    (106 + 10) / 116][Stage 89:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.257528733 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 188 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 188 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400899554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (71 + 46) / 117][Stage 90:=================================>                    (73 + 44) / 117][Stage 90:=====================================>                (82 + 35) / 117][Stage 90:==============================================>      (103 + 14) / 117][Stage 90:===================================================>  (111 + 6) / 117]                                                                                [Stage 91:================================>                     (72 + 46) / 118][Stage 91:==================================>                   (76 + 42) / 118][Stage 91:===========================================>          (96 + 22) / 118][Stage 91:==================================================>   (110 + 8) / 118][Stage 91:====================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.363724458 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368965878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=====================================>                (79 + 36) / 115][Stage 92:=========================================>            (88 + 27) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:========================================>             (86 + 30) / 116][Stage 93:===========================================>          (93 + 23) / 116][Stage 93:==============================================>      (102 + 14) / 116][Stage 93:====================================================> (112 + 4) / 116][Stage 93:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.148183472 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (83 + 32) / 115][Stage 94:=========================================>            (89 + 26) / 115][Stage 94:=================================================>    (106 + 9) / 115][Stage 94:====================================================> (111 + 4) / 115]                                                                                [Stage 95:========================================>             (86 + 30) / 116][Stage 95:==============================================>       (99 + 17) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.791310892 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391101147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=================================>                    (71 + 43) / 114][Stage 96:========================================>             (85 + 29) / 114][Stage 96:===========================================>          (92 + 22) / 114][Stage 96:===============================================>     (103 + 11) / 114][Stage 96:====================================================> (110 + 4) / 114][Stage 96:=====================================================>(113 + 1) / 114]                                                                                [Stage 97:====================================>                 (78 + 37) / 115][Stage 97:=========================================>            (89 + 26) / 115][Stage 97:==============================================>      (100 + 15) / 115][Stage 97:===============================================>     (104 + 11) / 115][Stage 97:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.25443039 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441769902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==========================>                           (60 + 61) / 121][Stage 98:=============================>                        (65 + 56) / 121][Stage 98:======================================>               (86 + 35) / 121][Stage 98:================================================>    (110 + 11) / 121]                                                                                [Stage 99:============================>                         (64 + 58) / 122][Stage 99:================================>                     (74 + 48) / 122][Stage 99:=========================================>            (94 + 28) / 122][Stage 99:==================================================>   (113 + 9) / 122][Stage 99:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.076670213 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386829268 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (71 + 43) / 114][Stage 100:=======================================>             (85 + 29) / 114][Stage 100:=============================================>       (97 + 17) / 114][Stage 100:================================================>    (105 + 9) / 114][Stage 100:====================================================>(112 + 2) / 114]                                                                                [Stage 101:=================================>                   (72 + 43) / 115][Stage 101:=====================================>               (81 + 34) / 115][Stage 101:============================================>        (97 + 18) / 115][Stage 101:================================================>    (106 + 9) / 115][Stage 101:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.105818354 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406294234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=================================>                   (73 + 42) / 115][Stage 102:======================================>              (84 + 31) / 115][Stage 102:==========================================>          (93 + 22) / 115][Stage 102:===================================================> (111 + 4) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:====================================>                (80 + 36) / 116][Stage 103:==========================================>          (92 + 24) / 116][Stage 103:===================================================> (112 + 4) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.000152358 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458613043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 62) / 122][Stage 104:===============================>                     (72 + 50) / 122][Stage 104:=======================================>             (91 + 31) / 122][Stage 104:==============================================>     (109 + 13) / 122]                                                                                [Stage 105:===========================>                         (63 + 60) / 123][Stage 105:=============================>                       (68 + 55) / 123][Stage 105:=======================================>             (91 + 32) / 123][Stage 105:=================================================>   (114 + 9) / 123]                                                                                Time elapsed: 3.130984655 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (62 + 60) / 122][Stage 106:===============================>                     (72 + 50) / 122][Stage 106:=====================================>               (87 + 35) / 122][Stage 106:===========================================>        (103 + 19) / 122]                                                                                [Stage 107:==========================>                          (62 + 61) / 123][Stage 107:=============================>                       (69 + 54) / 123][Stage 107:========================================>            (94 + 29) / 123][Stage 107:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.105384406 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 224 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483500294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (71 + 46) / 117][Stage 108:=================================>                   (74 + 43) / 117][Stage 108:========================================>            (89 + 28) / 117][Stage 108:==================================================>  (111 + 6) / 117]                                                                                [Stage 109:================================>                    (73 + 45) / 118][Stage 109:===================================>                 (80 + 38) / 118][Stage 109:========================================>            (91 + 27) / 118][Stage 109:=================================================>   (110 + 8) / 118][Stage 109:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.026630441 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396721587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===================================>                 (76 + 39) / 115][Stage 110:=======================================>             (86 + 29) / 115][Stage 110:================================================>    (106 + 9) / 115][Stage 110:===================================================> (111 + 4) / 115]                                                                                [Stage 111:================================>                    (72 + 44) / 116][Stage 111:======================================>              (84 + 32) / 116][Stage 111:===========================================>         (95 + 21) / 116][Stage 111:================================================>    (107 + 9) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.693173856 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393048655 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (71 + 44) / 115][Stage 112:====================================>                (80 + 35) / 115][Stage 112:=========================================>           (90 + 25) / 115][Stage 112:==============================================>     (102 + 13) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:=================================>                   (73 + 43) / 116][Stage 113:======================================>              (85 + 31) / 116][Stage 113:===========================================>         (96 + 20) / 116][Stage 113:=================================================>   (108 + 8) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.285250243 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 119 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428835121 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 60) / 121][Stage 114:=================================>                   (76 + 45) / 121][Stage 114:=========================================>           (95 + 26) / 121][Stage 114:==================================================>  (116 + 5) / 121]                                                                                [Stage 115:==========================>                          (62 + 60) / 122][Stage 115:===============================>                     (72 + 50) / 122][Stage 115:========================================>            (93 + 29) / 122][Stage 115:==============================================>     (108 + 14) / 122][Stage 115:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.243450436 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462073165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:==================================>                  (78 + 43) / 121][Stage 116:===========================================>        (102 + 19) / 121][Stage 116:=================================================>   (113 + 8) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:===============================>                     (73 + 49) / 122][Stage 117:======================================>              (88 + 34) / 122][Stage 117:=============================================>      (106 + 16) / 122][Stage 117:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.205998126 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411199487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===============================>                     (68 + 47) / 115][Stage 118:====================================>                (80 + 35) / 115][Stage 118:============================================>        (96 + 19) / 115][Stage 118:==================================================>  (109 + 6) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=================================>                   (73 + 43) / 116][Stage 119:========================================>            (88 + 28) / 116][Stage 119:===============================================>    (106 + 10) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.919743502 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461240055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:================================>                    (71 + 46) / 117][Stage 120:=====================================>               (82 + 35) / 117][Stage 120:===============================================>    (106 + 11) / 117][Stage 120:====================================================>(116 + 1) / 117]                                                                                [Stage 121:=================================>                   (74 + 44) / 118][Stage 121:===================================>                 (80 + 38) / 118][Stage 121:===========================================>         (96 + 22) / 118][Stage 121:=================================================>   (111 + 7) / 118]                                                                                Time elapsed: 2.907604571 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41531024 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 60) / 121][Stage 122:===========================>                         (62 + 59) / 121][Stage 122:===============================>                     (72 + 49) / 121][Stage 122:==========================================>          (96 + 25) / 121][Stage 122:====================================================>(120 + 1) / 121]                                                                                [Stage 123:==========================>                          (62 + 60) / 122][Stage 123:==================================>                  (79 + 43) / 122][Stage 123:===========================================>        (103 + 19) / 122][Stage 123:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.101255162 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408191379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (63 + 58) / 121][Stage 124:=================================>                   (77 + 44) / 121][Stage 124:==========================================>          (98 + 23) / 121][Stage 124:==================================================>  (116 + 5) / 121]                                                                                [Stage 125:===========================>                         (63 + 59) / 122][Stage 125:=================================>                   (77 + 45) / 122][Stage 125:===========================================>         (99 + 23) / 122][Stage 125:==================================================>  (116 + 6) / 122][Stage 125:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.221977749 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 240 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412592775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (61 + 61) / 122][Stage 126:=============================>                       (69 + 53) / 122][Stage 126:===================================>                 (82 + 40) / 122][Stage 126:===============================================>    (112 + 10) / 122][Stage 126:====================================================>(120 + 2) / 122]                                                                                [Stage 127:==========================>                          (62 + 61) / 123][Stage 127:==============================>                      (71 + 52) / 123][Stage 127:=====================================>               (87 + 36) / 123][Stage 127:===========================================>        (102 + 21) / 123][Stage 127:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.19739951 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413083498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (64 + 58) / 122][Stage 128:================================>                    (75 + 47) / 122][Stage 128:===========================================>        (102 + 20) / 122][Stage 128:=================================================>   (115 + 7) / 122]                                                                                [Stage 129:============================>                        (65 + 58) / 123][Stage 129:===================================>                 (83 + 40) / 123][Stage 129:=============================================>      (107 + 16) / 123][Stage 129:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.022351662 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide64;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 61) / 122][Stage 130:============================>                        (66 + 56) / 122][Stage 130:====================================>                (84 + 38) / 122][Stage 130:==========================================>          (97 + 25) / 122][Stage 130:=================================================>   (115 + 7) / 122]                                                                                [Stage 131:===========================>                         (64 + 59) / 123][Stage 131:===============================>                     (72 + 51) / 123][Stage 131:=========================================>           (97 + 26) / 123]                                                                                Time elapsed: 2.978576159 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 61) / 122][Stage 132:==================================>                  (80 + 42) / 122][Stage 132:=============================================>      (106 + 16) / 122][Stage 132:==================================================>  (116 + 6) / 122]                                                                                [Stage 133:===========================>                         (64 + 59) / 123][Stage 133:===================================>                 (82 + 41) / 123][Stage 133:========================================>            (95 + 28) / 123][Stage 133:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 3.37455524 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364814701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (79 + 35) / 114][Stage 134:========================================>            (87 + 27) / 114][Stage 134:=============================================>       (98 + 16) / 114][Stage 134:=================================================>   (107 + 7) / 114][Stage 134:====================================================>(112 + 2) / 114]                                                                                [Stage 135:=====================================>               (81 + 34) / 115][Stage 135:=========================================>           (90 + 25) / 115][Stage 135:===============================================>    (104 + 11) / 115][Stage 135:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 3.166663492 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375614733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==================================>                  (74 + 41) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:=============================================>      (101 + 14) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:=================================>                   (74 + 42) / 116][Stage 137:============================================>        (97 + 19) / 116][Stage 137:=================================================>   (109 + 7) / 116][Stage 137:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.898381029 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379557426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==============================>                      (66 + 49) / 115][Stage 138:=================================>                   (73 + 42) / 115][Stage 138:===========================================>         (94 + 21) / 115][Stage 138:==================================================>  (109 + 6) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:===============================>                     (69 + 47) / 116][Stage 139:======================================>              (84 + 32) / 116][Stage 139:============================================>       (100 + 16) / 116][Stage 139:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.796538352 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370986551 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (71 + 46) / 117][Stage 140:====================================>                (80 + 37) / 117][Stage 140:=============================================>      (103 + 14) / 117][Stage 140:====================================================>(116 + 1) / 117]                                                                                [Stage 141:================================>                    (72 + 46) / 118][Stage 141:===================================>                 (80 + 38) / 118][Stage 141:============================================>       (100 + 18) / 118][Stage 141:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.037855328 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41762735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 60) / 121][Stage 142:============================>                        (66 + 55) / 121][Stage 142:==================================>                  (79 + 42) / 121][Stage 142:============================================>       (103 + 18) / 121][Stage 142:====================================================>(119 + 2) / 121]                                                                                [Stage 143:============================>                        (66 + 56) / 122][Stage 143:===================================>                 (82 + 40) / 122][Stage 143:============================================>       (104 + 18) / 122][Stage 143:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.116323891 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide78;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (62 + 59) / 121][Stage 144:================================>                    (75 + 46) / 121][Stage 144:=========================================>           (94 + 27) / 121][Stage 144:=================================================>   (113 + 8) / 121][Stage 144:====================================================>(120 + 1) / 121]                                                                                [Stage 145:==========================>                          (62 + 60) / 122][Stage 145:==============================>                      (71 + 51) / 122][Stage 145:=======================================>             (91 + 31) / 122][Stage 145:===============================================>    (112 + 10) / 122][Stage 145:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.246836737 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 220 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 220 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380275588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==============================>                      (66 + 49) / 115][Stage 146:==================================>                  (75 + 40) / 115][Stage 146:==========================================>          (93 + 22) / 115][Stage 146:=================================================>   (107 + 8) / 115][Stage 146:=================================================>   (108 + 7) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:================================>                    (71 + 45) / 116][Stage 147:=======================================>             (86 + 30) / 116][Stage 147:=============================================>       (99 + 17) / 116][Stage 147:================================================>    (107 + 9) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.10064222 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 122 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 122 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===============================>                     (68 + 47) / 115][Stage 148:====================================>                (79 + 36) / 115][Stage 148:==========================================>          (92 + 23) / 115][Stage 148:===============================================>    (105 + 10) / 115][Stage 148:==================================================>  (110 + 5) / 115]                                                                                [Stage 149:================================>                    (71 + 45) / 116][Stage 149:======================================>              (85 + 31) / 116][Stage 149:=============================================>       (99 + 17) / 116][Stage 149:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.172749308 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392850354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===============================>                     (69 + 46) / 115][Stage 150:======================================>              (83 + 32) / 115][Stage 150:=============================================>      (100 + 15) / 115][Stage 150:==================================================>  (109 + 6) / 115]                                                                                [Stage 151:=================================>                   (74 + 42) / 116][Stage 151:=========================================>           (90 + 26) / 116][Stage 151:==============================================>     (103 + 13) / 116][Stage 151:===================================================> (113 + 3) / 116][Stage 151:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.40718284 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375213722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (71 + 46) / 117][Stage 152:================================>                    (72 + 45) / 117][Stage 152:========================================>            (90 + 27) / 117][Stage 152:==================================================>  (112 + 5) / 117][Stage 152:====================================================>(116 + 1) / 117]                                                                                [Stage 153:================================>                    (73 + 45) / 118][Stage 153:===================================>                 (78 + 40) / 118][Stage 153:==========================================>          (94 + 24) / 118][Stage 153:=================================================>   (110 + 8) / 118]                                                                                Time elapsed: 2.98756205 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361948228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=====================================>               (80 + 34) / 114][Stage 154:==========================================>          (92 + 22) / 114][Stage 154:===============================================>    (104 + 10) / 114][Stage 154:==================================================>  (109 + 5) / 114]                                                                                [Stage 155:=====================================>               (81 + 34) / 115][Stage 155:=========================================>           (90 + 25) / 115][Stage 155:================================================>    (106 + 9) / 115][Stage 155:==================================================>  (109 + 6) / 115][Stage 155:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.021074589 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411438709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 62) / 122][Stage 156:=============================>                       (67 + 55) / 122][Stage 156:====================================>                (83 + 39) / 122][Stage 156:==============================================>     (108 + 14) / 122]                                                                                [Stage 157:===========================>                         (64 + 59) / 123][Stage 157:==================================>                  (80 + 43) / 123][Stage 157:===========================================>        (104 + 19) / 123][Stage 157:===================================================> (119 + 4) / 123][Stage 157:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.092020706 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364587549 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (80 + 34) / 114][Stage 158:========================================>            (88 + 26) / 114][Stage 158:==============================================>     (103 + 11) / 114][Stage 158:===================================================> (110 + 4) / 114][Stage 158:====================================================>(113 + 1) / 114]                                                                                [Stage 159:====================================>                (79 + 36) / 115][Stage 159:==========================================>          (93 + 22) / 115][Stage 159:================================================>    (106 + 9) / 115][Stage 159:===================================================> (112 + 3) / 115]                                                                                Time elapsed: 2.868966077 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36966379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (71 + 46) / 117][Stage 160:=================================>                   (73 + 44) / 117][Stage 160:=======================================>             (87 + 30) / 117][Stage 160:===========================================>         (97 + 20) / 117][Stage 160:====================================================>(115 + 2) / 117]                                                                                [Stage 161:================================>                    (72 + 46) / 118][Stage 161:====================================>                (82 + 36) / 118][Stage 161:========================================>            (91 + 27) / 118][Stage 161:==============================================>     (106 + 12) / 118][Stage 161:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.039378602 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408043477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 61) / 121][Stage 162:==============================>                      (70 + 51) / 121][Stage 162:=======================================>             (90 + 31) / 121][Stage 162:==============================================>     (109 + 12) / 121][Stage 162:====================================================>(119 + 2) / 121]                                                                                [Stage 163:==========================>                          (62 + 60) / 122][Stage 163:=============================>                       (67 + 55) / 122][Stage 163:====================================>                (85 + 37) / 122][Stage 163:=================================================>   (113 + 9) / 122][Stage 163:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.098025954 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385099341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (71 + 46) / 117][Stage 164:====================================>                (81 + 36) / 117][Stage 164:==========================================>          (93 + 24) / 117][Stage 164:===================================================> (114 + 3) / 117]                                                                                [Stage 165:================================>                    (73 + 45) / 118][Stage 165:=====================================>               (83 + 35) / 118][Stage 165:=============================================>      (104 + 14) / 118][Stage 165:=================================================>   (111 + 7) / 118]                                                                                Time elapsed: 3.076943907 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355696849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (82 + 33) / 115][Stage 166:========================================>            (87 + 28) / 115][Stage 166:=============================================>      (101 + 14) / 115][Stage 166:=================================================>   (108 + 7) / 115][Stage 166:====================================================>(113 + 2) / 115]                                                                                [Stage 167:=====================================>               (81 + 35) / 116][Stage 167:=======================================>             (86 + 30) / 116][Stage 167:============================================>        (98 + 18) / 116][Stage 167:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.894733568 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 244  OR  partitionIndex = 245 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415491417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 61) / 122][Stage 168:==============================>                      (70 + 52) / 122][Stage 168:====================================>                (83 + 39) / 122][Stage 168:============================================>       (104 + 18) / 122][Stage 168:===================================================> (119 + 3) / 122]                                                                                [Stage 169:==========================>                          (61 + 62) / 123][Stage 169:==============================>                      (71 + 52) / 123][Stage 169:==================================>                  (81 + 42) / 123][Stage 169:=============================================>      (108 + 15) / 123][Stage 169:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.115985204 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373283937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===================================>                 (77 + 37) / 114][Stage 170:============================================>        (95 + 19) / 114][Stage 170:===============================================>    (104 + 10) / 114][Stage 170:===================================================> (111 + 3) / 114][Stage 170:====================================================>(113 + 1) / 114]                                                                                [Stage 171:===================================>                 (76 + 39) / 115][Stage 171:========================================>            (87 + 28) / 115][Stage 171:===========================================>         (95 + 20) / 115][Stage 171:===============================================>    (105 + 10) / 115][Stage 171:==================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.066342194 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34321674 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:======================================>              (83 + 32) / 115][Stage 172:=========================================>           (89 + 26) / 115][Stage 172:================================================>    (106 + 9) / 115][Stage 172:====================================================>(113 + 2) / 115]                                                                                [Stage 173:=====================================>               (83 + 33) / 116][Stage 173:=========================================>           (91 + 25) / 116][Stage 173:==============================================>     (103 + 13) / 116][Stage 173:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.921188831 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40905572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (61 + 60) / 121][Stage 174:============================>                        (65 + 56) / 121][Stage 174:===================================>                 (81 + 40) / 121][Stage 174:==============================================>     (109 + 12) / 121][Stage 174:===================================================> (118 + 3) / 121]                                                                                [Stage 175:===========================>                         (63 + 59) / 122][Stage 175:==============================>                      (71 + 51) / 122][Stage 175:=======================================>             (91 + 31) / 122][Stage 175:==============================================>     (109 + 13) / 122][Stage 175:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.985071167 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242  OR  partitionIndex = 243 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 242  OR  partitionIndex = 243 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38934115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (71 + 46) / 117][Stage 176:===================================>                 (79 + 38) / 117][Stage 176:===========================================>         (96 + 21) / 117][Stage 176:==================================================>  (111 + 6) / 117]                                                                                [Stage 177:================================>                    (73 + 45) / 118][Stage 177:=======================================>             (89 + 29) / 118][Stage 177:============================================>       (102 + 16) / 118][Stage 177:==================================================>  (113 + 5) / 118]                                                                                Time elapsed: 2.980286278 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356026827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:====================================>                (79 + 35) / 114][Stage 178:=========================================>           (89 + 25) / 114][Stage 178:==============================================>      (99 + 15) / 114][Stage 178:=================================================>   (106 + 8) / 114][Stage 178:====================================================>(112 + 2) / 114]                                                                                [Stage 179:==================================>                  (74 + 41) / 115][Stage 179:=========================================>           (90 + 25) / 115][Stage 179:=============================================>       (98 + 17) / 115][Stage 179:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 2.94016775 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341771465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=======================================>             (86 + 29) / 115][Stage 180:=============================================>      (100 + 15) / 115][Stage 180:==================================================>  (110 + 5) / 115]                                                                                [Stage 181:=======================================>             (86 + 30) / 116][Stage 181:============================================>       (100 + 16) / 116][Stage 181:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.550567112 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406599914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:======================================>              (84 + 31) / 115][Stage 182:============================================>        (96 + 19) / 115][Stage 182:==================================================>  (110 + 5) / 115]                                                                                [Stage 183:========================================>            (89 + 27) / 116][Stage 183:=============================================>      (102 + 14) / 116][Stage 183:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.539889336 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406459933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (63 + 58) / 121][Stage 184:==============================>                      (70 + 51) / 121][Stage 184:==========================================>          (97 + 24) / 121][Stage 184:=================================================>   (114 + 7) / 121]                                                                                [Stage 185:=============================>                       (69 + 53) / 122][Stage 185:====================================>                (85 + 37) / 122][Stage 185:===========================================>         (99 + 23) / 122][Stage 185:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 2.967814124 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414428019 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (62 + 60) / 122][Stage 186:================================>                    (74 + 48) / 122][Stage 186:===========================================>        (101 + 21) / 122][Stage 186:====================================================>(120 + 2) / 122]                                                                                [Stage 187:===========================>                         (64 + 59) / 123][Stage 187:==================================>                  (79 + 44) / 123][Stage 187:===========================================>        (103 + 20) / 123][Stage 187:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 2.991532138 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365364221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (71 + 46) / 117][Stage 188:==================================>                  (77 + 40) / 117][Stage 188:=============================================>      (102 + 15) / 117][Stage 188:====================================================>(116 + 1) / 117]                                                                                [Stage 189:================================>                    (72 + 46) / 118][Stage 189:=================================>                   (75 + 43) / 118][Stage 189:========================================>            (91 + 27) / 118][Stage 189:===============================================>    (107 + 11) / 118][Stage 189:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.07981162 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340111926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:======================================>              (83 + 32) / 115][Stage 190:===========================================>         (95 + 20) / 115][Stage 190:=================================================>   (107 + 8) / 115]                                                                                [Stage 191:======================================>              (84 + 32) / 116][Stage 191:============================================>        (97 + 19) / 116][Stage 191:==================================================>  (110 + 6) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.542457794 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387621949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==============================>                      (66 + 49) / 115][Stage 192:==================================>                  (75 + 40) / 115][Stage 192:===========================================>         (95 + 20) / 115][Stage 192:==================================================>  (110 + 5) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:==================================>                  (76 + 40) / 116][Stage 193:==========================================>          (94 + 22) / 116][Stage 193:===============================================>    (105 + 11) / 116][Stage 193:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.978293765 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376279431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===============================>                     (68 + 47) / 115][Stage 194:======================================>              (84 + 31) / 115][Stage 194:===========================================>         (95 + 20) / 115][Stage 194:==================================================>  (109 + 6) / 115]                                                                                [Stage 195:==================================>                  (75 + 41) / 116][Stage 195:========================================>            (88 + 28) / 116][Stage 195:==============================================>     (104 + 12) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.70153135 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339726541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:========================================>            (88 + 27) / 115][Stage 196:============================================>        (97 + 18) / 115][Stage 196:==================================================>  (109 + 6) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:=====================================>               (81 + 35) / 116][Stage 197:=========================================>           (90 + 26) / 116][Stage 197:===============================================>    (106 + 10) / 116][Stage 197:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.73412384 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248  OR  partitionIndex = 249 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 248  OR  partitionIndex = 249 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42814611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (64 + 58) / 122][Stage 198:================================>                    (74 + 48) / 122][Stage 198:===========================================>        (101 + 21) / 122][Stage 198:==================================================>  (117 + 5) / 122]                                                                                [Stage 199:============================>                        (66 + 57) / 123][Stage 199:====================================>                (84 + 39) / 123][Stage 199:=============================================>      (107 + 16) / 123][Stage 199:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.008864602 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 246  OR  partitionIndex = 247 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355459233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (81 + 33) / 114][Stage 200:==========================================>          (92 + 22) / 114][Stage 200:==============================================>     (101 + 13) / 114][Stage 200:====================================================>(113 + 1) / 114]                                                                                [Stage 201:===================================>                 (77 + 38) / 115][Stage 201:==========================================>          (92 + 23) / 115][Stage 201:==============================================>     (103 + 12) / 115][Stage 201:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.766971906 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m50.988s
user	11m31.552s
sys	0m35.200s
