Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 21:32:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:32:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:32:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:32:50 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 21:32:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:33:03 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529213252-0685).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.419124019 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:==============>                                        (30 + 85) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 14.232533214 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 150  OR  partitionIndex = 151 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 150  OR  partitionIndex = 151 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================>                                  (43 + 72) / 115][Stage 2:=============================>                         (62 + 53) / 115][Stage 2:================================>                      (67 + 48) / 115][Stage 2:=================================>                     (69 + 46) / 115][Stage 2:===================================>                   (74 + 41) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:==========================================>            (88 + 27) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:==============================================>       (100 + 15) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:================================>                      (69 + 47) / 116][Stage 3:===================================>                   (74 + 42) / 116][Stage 3:===================================>                   (75 + 41) / 116][Stage 3:====================================>                  (78 + 38) / 116][Stage 3:=========================================>             (87 + 29) / 116][Stage 3:============================================>          (93 + 23) / 116][Stage 3:=============================================>         (95 + 21) / 116][Stage 3:==============================================>       (100 + 16) / 116][Stage 3:================================================>     (104 + 12) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:====================================================>  (110 + 6) / 116][Stage 3:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 6.459664942 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.805156281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==========================>                            (58 + 64) / 122][Stage 4:===========================>                           (62 + 60) / 122][Stage 4:===============================>                       (69 + 53) / 122][Stage 4:================================>                      (72 + 50) / 122][Stage 4:====================================>                  (81 + 41) / 122][Stage 4:===========================================>           (96 + 26) / 122][Stage 4:================================================>     (109 + 13) / 122][Stage 4:===================================================>   (115 + 7) / 122][Stage 4:=====================================================> (119 + 3) / 122]                                                                                [Stage 5:===========================>                           (61 + 62) / 123][Stage 5:===============================>                       (70 + 53) / 123][Stage 5:====================================>                  (81 + 42) / 123][Stage 5:==========================================>            (95 + 28) / 123][Stage 5:================================================>     (110 + 13) / 123][Stage 5:=====================================================> (119 + 4) / 123][Stage 5:======================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.956986432 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR   partitionIndex = 188  OR  partitionIndex = 189 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 188  OR  partitionIndex = 189 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (60 + 62) / 122][Stage 6:===========================>                           (61 + 61) / 122][Stage 6:=============================>                         (65 + 57) / 122][Stage 6:==================================>                    (76 + 46) / 122][Stage 6:==========================================>            (94 + 28) / 122][Stage 6:=================================================>    (111 + 11) / 122][Stage 6:=====================================================> (119 + 3) / 122]                                                                                [Stage 7:===========================>                           (62 + 61) / 123][Stage 7:=============================>                         (66 + 57) / 123][Stage 7:==================================>                    (77 + 46) / 123][Stage 7:=======================================>               (89 + 34) / 123][Stage 7:===========================================>          (100 + 23) / 123][Stage 7:=====================================================> (119 + 4) / 123][Stage 7:======================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.693549627 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  pa rtitionIndex = 55  OR  partitionIndex = 64 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542916301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:======================================>                (80 + 35) / 115][Stage 8:=========================================>             (86 + 29) / 115][Stage 8:=============================================>         (96 + 19) / 115][Stage 8:=====================================================> (111 + 4) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:=====================================>                 (80 + 36) / 116][Stage 9:=======================================>               (84 + 32) / 116][Stage 9:==========================================>            (90 + 26) / 116][Stage 9:==============================================>        (98 + 18) / 116][Stage 9:================================================>     (105 + 11) / 116][Stage 9:====================================================>  (110 + 6) / 116][Stage 9:======================================================>(114 + 2) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.749778381 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  pa rtitionIndex = 84  OR  partitionIndex = 85 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.654110382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (61 + 61) / 122][Stage 10:=============================>                        (66 + 56) / 122][Stage 10:====================================>                 (83 + 39) / 122][Stage 10:===========================================>          (99 + 23) / 122][Stage 10:===========================================>         (101 + 21) / 122][Stage 10:===================================================>  (116 + 6) / 122]                                                                                [Stage 11:==========================>                           (61 + 62) / 123][Stage 11:============================>                         (66 + 57) / 123][Stage 11:==================================>                   (78 + 45) / 123][Stage 11:=========================================>            (94 + 29) / 123][Stage 11:==============================================>      (107 + 16) / 123][Stage 11:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 4.179099724 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 213  OR  partitionIndex = 214 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 213  OR  partitionIndex = 214 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.642103637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 62) / 122][Stage 12:===========================>                          (63 + 59) / 122][Stage 12:==================================>                   (77 + 45) / 122][Stage 12:==========================================>           (97 + 25) / 122][Stage 12:==================================================>   (115 + 7) / 122]                                                                                [Stage 13:===========================>                          (62 + 61) / 123][Stage 13:=============================>                        (67 + 56) / 123][Stage 13:=================================>                    (76 + 47) / 123][Stage 13:==========================================>           (96 + 27) / 123][Stage 13:==================================================>   (114 + 9) / 123][Stage 13:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 3.919012543 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 17  OR  partitionIndex = 18 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (61 + 61) / 122][Stage 14:===========================>                          (62 + 60) / 122][Stage 14:================================>                     (73 + 49) / 122][Stage 14:==========================================>           (96 + 26) / 122][Stage 14:================================================>    (112 + 10) / 122][Stage 14:=====================================================>(121 + 1) / 122]                                                                                [Stage 15:===========================>                          (62 + 61) / 123][Stage 15:==============================>                       (69 + 54) / 123][Stage 15:=================================>                    (76 + 47) / 123][Stage 15:=========================================>            (95 + 28) / 123][Stage 15:=============================================>       (106 + 17) / 123][Stage 15:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.665177646 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR   partitionIndex = 159  OR  partitionIndex = 172 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525433192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===================================>                  (74 + 40) / 114][Stage 16:=========================================>            (87 + 27) / 114][Stage 16:============================================>         (93 + 21) / 114][Stage 16:=================================================>    (105 + 9) / 114][Stage 16:===================================================>  (109 + 5) / 114][Stage 16:=====================================================>(112 + 2) / 114]                                                                                [Stage 17:====================================>                 (77 + 38) / 115][Stage 17:========================================>             (86 + 29) / 115][Stage 17:=============================================>        (97 + 18) / 115][Stage 17:==============================================>      (101 + 14) / 115][Stage 17:=================================================>    (106 + 9) / 115][Stage 17:====================================================> (111 + 4) / 115][Stage 17:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 4.20812532 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 125  OR  partitionIndex = 126 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 125  OR  partitionIndex = 126 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57644471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:============================>                         (59 + 54) / 113][Stage 18:================================>                     (67 + 46) / 113][Stage 18:========================================>             (85 + 28) / 113][Stage 18:===============================================>     (101 + 12) / 113][Stage 18:==================================================>   (106 + 7) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:==============================>                       (65 + 49) / 114][Stage 19:======================================>               (82 + 32) / 114][Stage 19:============================================>         (94 + 20) / 114][Stage 19:====================================================> (110 + 4) / 114][Stage 19:=====================================================>(112 + 2) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.209180596 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488667498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=====================================>                (79 + 35) / 114][Stage 20:===========================================>          (91 + 23) / 114][Stage 20:==============================================>       (99 + 15) / 114][Stage 20:================================================>    (104 + 10) / 114][Stage 20:===================================================>  (109 + 5) / 114][Stage 20:====================================================> (111 + 3) / 114][Stage 20:=====================================================>(113 + 1) / 114]                                                                                [Stage 21:====================================>                 (77 + 38) / 115][Stage 21:==========================================>           (90 + 25) / 115][Stage 21:==============================================>      (100 + 15) / 115][Stage 21:====================================================> (111 + 4) / 115][Stage 21:====================================================> (112 + 3) / 115][Stage 21:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.945015019 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 53  OR  partitionIndex = 54 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53  OR  partitionIndex = 54 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516729987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==================================>                   (73 + 42) / 115][Stage 22:=======================================>              (85 + 30) / 115][Stage 22:==============================================>      (100 + 15) / 115][Stage 22:==================================================>   (107 + 8) / 115][Stage 22:=====================================================>(114 + 1) / 115]                                                                                [Stage 23:=================================>                    (72 + 44) / 116][Stage 23:==========================================>           (91 + 25) / 116][Stage 23:=============================================>        (97 + 19) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:================================================>    (106 + 10) / 116][Stage 23:===================================================>  (111 + 5) / 116][Stage 23:====================================================> (113 + 3) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.210936032 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==============================>                       (66 + 49) / 115][Stage 24:===================================>                  (75 + 40) / 115][Stage 24:==========================================>           (91 + 24) / 115][Stage 24:===============================================>     (102 + 13) / 115][Stage 24:===================================================>  (110 + 5) / 115][Stage 24:====================================================> (112 + 3) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:================================>                     (69 + 47) / 116][Stage 25:=====================================>                (80 + 36) / 116][Stage 25:==========================================>           (91 + 25) / 116][Stage 25:==================================================>   (108 + 8) / 116][Stage 25:====================================================> (113 + 3) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.54414002 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 2  OR  part itionIndex = 16  OR  partitionIndex = 17 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 2  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421719632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==================================>                   (73 + 42) / 115][Stage 26:=========================================>            (89 + 26) / 115][Stage 26:==============================================>       (99 + 16) / 115][Stage 26:===============================================>     (102 + 13) / 115][Stage 26:===============================================>     (103 + 12) / 115][Stage 26:====================================================> (112 + 3) / 115]                                                                                [Stage 27:========================================>             (86 + 30) / 116][Stage 27:==============================================>       (99 + 17) / 116][Stage 27:===============================================>     (105 + 11) / 116][Stage 27:===================================================>  (110 + 6) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.179663085 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR   partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521129888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===================================>                  (74 + 40) / 114][Stage 28:==========================================>           (90 + 24) / 114][Stage 28:==============================================>      (100 + 14) / 114][Stage 28:=================================================>    (105 + 9) / 114][Stage 28:===================================================>  (109 + 5) / 114][Stage 28:====================================================> (111 + 3) / 114][Stage 28:=====================================================>(113 + 1) / 114]                                                                                [Stage 29:===================================>                  (76 + 39) / 115][Stage 29:=========================================>            (88 + 27) / 115][Stage 29:=============================================>        (96 + 19) / 115][Stage 29:=================================================>    (106 + 9) / 115][Stage 29:===================================================>  (109 + 6) / 115][Stage 29:====================================================> (111 + 4) / 115][Stage 29:====================================================> (112 + 3) / 115][Stage 29:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.071397381 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 30  OR  partitionIndex = 31 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===================================>                  (74 + 40) / 114][Stage 30:======================================>               (81 + 33) / 114][Stage 30:===========================================>          (92 + 22) / 114][Stage 30:==============================================>      (101 + 13) / 114][Stage 30:====================================================> (111 + 3) / 114][Stage 30:=====================================================>(113 + 1) / 114]                                                                                [Stage 31:======================================>               (82 + 33) / 115][Stage 31:==============================================>       (98 + 17) / 115][Stage 31:===============================================>     (104 + 11) / 115][Stage 31:====================================================> (112 + 3) / 115][Stage 31:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 4.711945447 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  pa rtitionIndex = 40  OR  partitionIndex = 41 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571900645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (61 + 61) / 122][Stage 32:=============================>                        (66 + 56) / 122][Stage 32:===================================>                  (80 + 42) / 122][Stage 32:==========================================>           (97 + 25) / 122][Stage 32:==================================================>   (115 + 7) / 122][Stage 32:====================================================> (119 + 3) / 122]                                                                                [Stage 33:===========================>                          (62 + 61) / 123][Stage 33:===============================>                      (72 + 51) / 123][Stage 33:====================================>                 (82 + 41) / 123][Stage 33:==========================================>           (97 + 26) / 123][Stage 33:===============================================>     (111 + 12) / 123][Stage 33:===================================================>  (117 + 6) / 123][Stage 33:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 4.17714381 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (61 + 61) / 122][Stage 34:============================>                         (64 + 58) / 122][Stage 34:==================================>                   (78 + 44) / 122][Stage 34:===========================================>         (101 + 21) / 122][Stage 34:====================================================> (118 + 4) / 122][Stage 34:====================================================> (119 + 3) / 122]                                                                                [Stage 35:============================>                         (64 + 59) / 123][Stage 35:================================>                     (74 + 49) / 123][Stage 35:========================================>             (92 + 31) / 123][Stage 35:==============================================>      (109 + 14) / 123][Stage 35:====================================================> (119 + 4) / 123][Stage 35:====================================================> (120 + 3) / 123][Stage 35:=====================================================>(121 + 2) / 123][Stage 35:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.501466481 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126  OR   partitionIndex = 127  OR  partitionIndex = 128 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464715905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==============================>                       (66 + 49) / 115][Stage 36:=================================>                    (72 + 43) / 115][Stage 36:=======================================>              (85 + 30) / 115][Stage 36:=============================================>        (96 + 19) / 115][Stage 36:===============================================>     (102 + 13) / 115][Stage 36:==================================================>   (108 + 7) / 115][Stage 36:=====================================================>(113 + 2) / 115]                                                                                [Stage 37:===================================>                  (77 + 39) / 116][Stage 37:=========================================>            (89 + 27) / 116][Stage 37:=============================================>        (97 + 19) / 116][Stage 37:===============================================>     (104 + 12) / 116][Stage 37:===================================================>  (110 + 6) / 116][Stage 37:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.830963158 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR   partitionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504986359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==========================>                           (60 + 62) / 122][Stage 38:===========================>                          (62 + 60) / 122][Stage 38:===============================>                      (71 + 51) / 122][Stage 38:=========================================>            (94 + 28) / 122][Stage 38:==================================================>   (113 + 9) / 122][Stage 38:===================================================>  (117 + 5) / 122]                                                                                [Stage 39:===========================>                          (63 + 60) / 123][Stage 39:==============================>                       (70 + 53) / 123][Stage 39:===========================================>         (101 + 22) / 123][Stage 39:===================================================>  (117 + 6) / 123][Stage 39:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.723212896 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 57  OR  partitionIndex = 58 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404891483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=======================================>              (85 + 30) / 115][Stage 40:============================================>         (94 + 21) / 115][Stage 40:===============================================>     (104 + 11) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:========================================>             (86 + 30) / 116][Stage 41:============================================>         (95 + 21) / 116][Stage 41:===============================================>     (103 + 13) / 116][Stage 41:====================================================> (112 + 4) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.036516163 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR   partitionIndex = 169  OR  partitionIndex = 184 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 184 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477577748 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===============================>                      (67 + 48) / 115][Stage 42:=====================================>                (80 + 35) / 115][Stage 42:===========================================>          (93 + 22) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:===================================================>  (109 + 6) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:====================================>                 (78 + 38) / 116][Stage 43:==========================================>           (91 + 25) / 116][Stage 43:==================================================>   (108 + 8) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.697060079 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 16  OR  partitionIndex = 17 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460778102 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (69 + 46) / 115][Stage 44:======================================>               (83 + 32) / 115][Stage 44:==========================================>           (91 + 24) / 115][Stage 44:===============================================>     (103 + 12) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:===============================>                      (68 + 48) / 116][Stage 45:=====================================>                (80 + 36) / 116][Stage 45:=========================================>            (89 + 27) / 116][Stage 45:===============================================>     (104 + 12) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:===================================================>  (110 + 6) / 116][Stage 45:=====================================================>(114 + 2) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.020628489 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR   partitionIndex = 219  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449751998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (71 + 46) / 117][Stage 46:======================================>               (83 + 34) / 117][Stage 46:=============================================>        (99 + 18) / 117][Stage 46:=====================================================>(115 + 2) / 117]                                                                                [Stage 47:================================>                     (72 + 46) / 118][Stage 47:=================================>                    (74 + 44) / 118][Stage 47:======================================>               (85 + 33) / 118][Stage 47:================================================>    (107 + 11) / 118][Stage 47:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.200083757 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433671931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (71 + 43) / 114][Stage 48:======================================>               (82 + 32) / 114][Stage 48:===========================================>          (92 + 22) / 114][Stage 48:==============================================>      (101 + 13) / 114][Stage 48:===================================================>  (108 + 6) / 114][Stage 48:====================================================> (111 + 3) / 114][Stage 48:=====================================================>(112 + 2) / 114]                                                                                [Stage 49:======================================>               (81 + 34) / 115][Stage 49:===========================================>          (92 + 23) / 115][Stage 49:===============================================>     (103 + 12) / 115][Stage 49:===================================================>  (109 + 6) / 115][Stage 49:=====================================================>(113 + 2) / 115][Stage 49:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.980215014 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  pa rtitionIndex = 83  OR  partitionIndex = 96 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435609892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:====================================>                 (76 + 38) / 114][Stage 50:=======================================>              (84 + 30) / 114][Stage 50:==============================================>       (98 + 16) / 114][Stage 50:================================================>    (104 + 10) / 114][Stage 50:==================================================>   (107 + 7) / 114][Stage 50:=====================================================>(112 + 2) / 114]                                                                                [Stage 51:===================================>                  (76 + 39) / 115][Stage 51:============================================>         (95 + 20) / 115][Stage 51:==============================================>      (101 + 14) / 115][Stage 51:==================================================>   (107 + 8) / 115][Stage 51:===================================================>  (110 + 5) / 115][Stage 51:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.823083287 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  pa rtitionIndex = 100  OR  partitionIndex = 101 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397800758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (79 + 36) / 115][Stage 52:======================================>               (83 + 32) / 115][Stage 52:==============================================>       (98 + 17) / 115][Stage 52:====================================================> (111 + 4) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:=======================================>              (84 + 32) / 116][Stage 53:=========================================>            (89 + 27) / 116][Stage 53:==============================================>       (99 + 17) / 116][Stage 53:==================================================>   (109 + 7) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.087908488 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  pa rtitionIndex = 97  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489373489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (61 + 60) / 121][Stage 54:===========================>                          (62 + 59) / 121][Stage 54:====================================>                 (82 + 39) / 121][Stage 54:==========================================>           (96 + 25) / 121][Stage 54:===================================================>  (115 + 6) / 121][Stage 54:=====================================================>(120 + 1) / 121]                                                                                [Stage 55:===========================>                          (61 + 61) / 122][Stage 55:=============================>                        (66 + 56) / 122][Stage 55:====================================>                 (82 + 40) / 122][Stage 55:============================================>        (103 + 19) / 122][Stage 55:==================================================>   (115 + 7) / 122][Stage 55:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.557130948 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160  OR   partitionIndex = 161  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490987969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==========================>                           (60 + 61) / 121][Stage 56:=============================>                        (66 + 55) / 121][Stage 56:==================================>                   (77 + 44) / 121][Stage 56:==============================================>      (106 + 15) / 121][Stage 56:====================================================> (117 + 4) / 121][Stage 56:=====================================================>(119 + 2) / 121][Stage 56:=====================================================>(120 + 1) / 121]                                                                                [Stage 57:===========================>                          (62 + 60) / 122][Stage 57:===============================>                      (71 + 51) / 122][Stage 57:==================================>                   (79 + 43) / 122][Stage 57:===========================================>         (101 + 21) / 122][Stage 57:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.670472404 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 82  OR  partitionIndex = 83 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401204958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (79 + 36) / 115][Stage 58:=======================================>              (85 + 30) / 115][Stage 58:============================================>         (95 + 20) / 115][Stage 58:====================================================> (111 + 4) / 115]                                                                                [Stage 59:=======================================>              (85 + 31) / 116][Stage 59:============================================>         (95 + 21) / 116][Stage 59:===============================================>     (103 + 13) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.872950327 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391852775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=======================================>              (84 + 31) / 115][Stage 60:==========================================>           (91 + 24) / 115][Stage 60:==================================================>   (107 + 8) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:========================================>             (88 + 28) / 116][Stage 61:=============================================>        (97 + 19) / 116][Stage 61:===============================================>     (104 + 12) / 116][Stage 61:====================================================> (112 + 4) / 116][Stage 61:=====================================================>(114 + 2) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.624248021 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  pa rtitionIndex = 104  OR  partitionIndex = 105 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40808692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (71 + 46) / 117][Stage 62:=================================>                    (72 + 45) / 117][Stage 62:========================================>             (88 + 29) / 117][Stage 62:=============================================>       (100 + 17) / 117][Stage 62:=====================================================>(116 + 1) / 117]                                                                                [Stage 63:================================>                     (72 + 46) / 118][Stage 63:=====================================>                (82 + 36) / 118][Stage 63:===========================================>          (95 + 23) / 118][Stage 63:====================================================> (114 + 4) / 118][Stage 63:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.536581848 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 99  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483684305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (71 + 46) / 117][Stage 64:=================================>                    (73 + 44) / 117][Stage 64:=====================================>                (81 + 36) / 117][Stage 64:=============================================>       (100 + 17) / 117][Stage 64:====================================================> (113 + 4) / 117][Stage 64:=====================================================>(116 + 1) / 117]                                                                                [Stage 65:================================>                     (72 + 46) / 118][Stage 65:==================================>                   (75 + 43) / 118][Stage 65:======================================>               (84 + 34) / 118][Stage 65:============================================>        (100 + 18) / 118][Stage 65:===================================================>  (113 + 5) / 118]                                                                                Time elapsed: 3.37713287 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 186  OR  partitionIndex = 187 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 186  OR  partitionIndex = 187 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398186035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (72 + 42) / 114][Stage 66:========================================>             (85 + 29) / 114][Stage 66:==========================================>           (89 + 25) / 114][Stage 66:==============================================>       (98 + 16) / 114][Stage 66:==================================================>   (107 + 7) / 114]                                                                                [Stage 67:======================================>               (82 + 33) / 115][Stage 67:===========================================>          (92 + 23) / 115][Stage 67:==============================================>      (100 + 15) / 115][Stage 67:===================================================>  (110 + 5) / 115][Stage 67:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.081258147 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR   partitionIndex = 246  OR  partitionIndex = 247 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455390234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (61 + 60) / 121][Stage 68:=============================>                        (65 + 56) / 121][Stage 68:=====================================>                (85 + 36) / 121][Stage 68:==================================================>   (113 + 8) / 121][Stage 68:=====================================================>(120 + 1) / 121]                                                                                [Stage 69:===========================>                          (62 + 60) / 122][Stage 69:=============================>                        (66 + 56) / 122][Stage 69:=====================================>                (85 + 37) / 122][Stage 69:==============================================>      (108 + 14) / 122][Stage 69:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.239667518 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406736398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===============================>                      (68 + 47) / 115][Stage 70:=====================================>                (79 + 36) / 115][Stage 70:===========================================>          (93 + 22) / 115][Stage 70:==================================================>   (108 + 7) / 115][Stage 70:=====================================================>(113 + 2) / 115]                                                                                [Stage 71:=================================>                    (73 + 43) / 116][Stage 71:======================================>               (83 + 33) / 116][Stage 71:=============================================>        (97 + 19) / 116][Stage 71:==================================================>   (108 + 8) / 116][Stage 71:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.029833785 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 162  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455011653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 61) / 122][Stage 72:============================>                         (64 + 58) / 122][Stage 72:===================================>                  (81 + 41) / 122][Stage 72:============================================>        (103 + 19) / 122][Stage 72:===================================================>  (116 + 6) / 122]                                                                                [Stage 73:===========================>                          (62 + 61) / 123][Stage 73:==============================>                       (70 + 53) / 123][Stage 73:======================================>               (87 + 36) / 123][Stage 73:================================================>    (112 + 11) / 123][Stage 73:====================================================> (119 + 4) / 123][Stage 73:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.605596516 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95  OR  pa rtitionIndex = 108  OR  partitionIndex = 109 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44525853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (61 + 60) / 121][Stage 74:=============================>                        (66 + 55) / 121][Stage 74:===================================>                  (80 + 41) / 121][Stage 74:================================================>    (110 + 11) / 121]                                                                                [Stage 75:===========================>                          (62 + 60) / 122][Stage 75:==============================>                       (69 + 53) / 122][Stage 75:======================================>               (87 + 35) / 122][Stage 75:==============================================>      (108 + 14) / 122]                                                                                Time elapsed: 3.00278319 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  pa rtitionIndex = 31  OR  partitionIndex = 44 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380714008 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=======================================>              (84 + 31) / 115][Stage 76:===========================================>          (93 + 22) / 115][Stage 76:===============================================>     (103 + 12) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:=======================================>              (85 + 31) / 116][Stage 77:=============================================>        (97 + 19) / 116][Stage 77:=================================================>    (107 + 9) / 116][Stage 77:====================================================> (113 + 3) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.157427754 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 80  OR  partitionIndex = 81 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=====================================>                (80 + 35) / 115][Stage 78:========================================>             (86 + 29) / 115][Stage 78:=============================================>        (96 + 19) / 115][Stage 78:===================================================>  (110 + 5) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:=====================================>                (81 + 35) / 116][Stage 79:=========================================>            (89 + 27) / 116][Stage 79:===============================================>     (103 + 13) / 116][Stage 79:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.726985852 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR   partitionIndex = 249  OR  partitionIndex = 250 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458249273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:==========================>                           (60 + 62) / 122][Stage 80:===========================>                          (63 + 59) / 122][Stage 80:===================================>                  (80 + 42) / 122][Stage 80:===========================================>         (100 + 22) / 122][Stage 80:===================================================>  (116 + 6) / 122]                                                                                [Stage 81:===========================>                          (63 + 60) / 123][Stage 81:================================>                     (75 + 48) / 123][Stage 81:========================================>             (93 + 30) / 123][Stage 81:=============================================>       (106 + 17) / 123][Stage 81:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.494154146 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR   partitionIndex = 224  OR  partitionIndex = 225 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405634175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (71 + 44) / 115][Stage 82:========================================>             (86 + 29) / 115][Stage 82:=============================================>        (97 + 18) / 115][Stage 82:===================================================>  (110 + 5) / 115]                                                                                [Stage 83:================================>                     (69 + 47) / 116][Stage 83:======================================>               (83 + 33) / 116][Stage 83:============================================>         (96 + 20) / 116][Stage 83:==================================================>   (108 + 8) / 116][Stage 83:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.099556672 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 221 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 221 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===================================>                  (76 + 39) / 115][Stage 84:=======================================>              (85 + 30) / 115][Stage 84:===============================================>     (102 + 13) / 115][Stage 84:==================================================>   (107 + 8) / 115]                                                                                [Stage 85:================================>                     (69 + 47) / 116][Stage 85:=========================================>            (89 + 27) / 116][Stage 85:==============================================>       (99 + 17) / 116][Stage 85:===================================================>  (111 + 5) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.132897921 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR   partitionIndex = 176  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:====================================>                 (77 + 38) / 115][Stage 86:=======================================>              (84 + 31) / 115][Stage 86:==============================================>      (101 + 14) / 115][Stage 86:==================================================>   (108 + 7) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:===============================>                      (67 + 49) / 116][Stage 87:====================================>                 (78 + 38) / 116][Stage 87:============================================>         (96 + 20) / 116][Stage 87:==================================================>   (109 + 7) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.055201552 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  pa rtitionIndex = 80  OR  partitionIndex = 81 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 80  OR  partitionIndex = 81 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458674272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==========================>                           (60 + 62) / 122][Stage 88:==============================>                       (70 + 52) / 122][Stage 88:======================================>               (87 + 35) / 122][Stage 88:================================================>    (111 + 11) / 122]                                                                                [Stage 89:===========================>                          (63 + 60) / 123][Stage 89:=================================>                    (77 + 46) / 123][Stage 89:=======================================>              (90 + 33) / 123][Stage 89:===============================================>     (110 + 13) / 123][Stage 89:=====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.17568701 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR   partitionIndex = 129  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412447996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:====================================>                 (77 + 38) / 115][Stage 90:=========================================>            (89 + 26) / 115][Stage 90:================================================>    (105 + 10) / 115][Stage 90:====================================================> (111 + 4) / 115]                                                                                [Stage 91:==================================>                   (74 + 42) / 116][Stage 91:=========================================>            (89 + 27) / 116][Stage 91:===============================================>     (103 + 13) / 116][Stage 91:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.939335529 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR   partitionIndex = 168  OR  partitionIndex = 169 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.523730573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==========================>                           (60 + 61) / 121][Stage 92:============================>                         (64 + 57) / 121][Stage 92:===================================>                  (79 + 42) / 121][Stage 92:============================================>         (99 + 22) / 121][Stage 92:====================================================> (117 + 4) / 121]                                                                                [Stage 93:============================>                         (65 + 57) / 122][Stage 93:===================================>                  (81 + 41) / 122][Stage 93:============================================>        (103 + 19) / 122][Stage 93:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.246444567 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385731067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (71 + 46) / 117][Stage 94:==================================>                   (75 + 42) / 117][Stage 94:==========================================>           (91 + 26) / 117][Stage 94:================================================>    (107 + 10) / 117]                                                                                [Stage 95:================================>                     (72 + 46) / 118][Stage 95:=====================================>                (81 + 37) / 118][Stage 95:============================================>         (98 + 20) / 118][Stage 95:===================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.101090197 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR   partitionIndex = 128  OR  partitionIndex = 129 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:================================>                     (71 + 46) / 117][Stage 96:===================================>                  (76 + 41) / 117][Stage 96:=========================================>            (89 + 28) / 117][Stage 96:==================================================>   (110 + 7) / 117][Stage 96:=====================================================>(115 + 2) / 117]                                                                                [Stage 97:================================>                     (72 + 46) / 118][Stage 97:==================================>                   (75 + 43) / 118][Stage 97:==========================================>           (93 + 25) / 118][Stage 97:==================================================>   (110 + 8) / 118][Stage 97:=====================================================>(116 + 2) / 118][Stage 97:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.285177895 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR   partitionIndex = 244  OR  partitionIndex = 245 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 244  OR  partitionIndex = 245 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389189927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==============================>                       (66 + 49) / 115][Stage 98:===================================>                  (75 + 40) / 115][Stage 98:=========================================>            (89 + 26) / 115][Stage 98:===============================================>     (102 + 13) / 115][Stage 98:==================================================>   (107 + 8) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=================================>                    (71 + 45) / 116][Stage 99:======================================>               (83 + 33) / 116][Stage 99:=============================================>        (97 + 19) / 116][Stage 99:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.060825999 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32  OR  pa rtitionIndex = 33  OR  partitionIndex = 48 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===============================>                     (68 + 47) / 115][Stage 100:====================================>                (80 + 35) / 115][Stage 100:===============================================>    (104 + 11) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:================================>                    (72 + 44) / 116][Stage 101:======================================>              (84 + 32) / 116][Stage 101:==========================================>          (93 + 23) / 116][Stage 101:============================================>        (97 + 19) / 116][Stage 101:==================================================>  (111 + 5) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.551881481 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR   partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40065233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (70 + 45) / 115][Stage 102:====================================>                (80 + 35) / 115][Stage 102:============================================>        (96 + 19) / 115][Stage 102:==============================================>     (103 + 12) / 115][Stage 102:===================================================> (112 + 3) / 115]                                                                                [Stage 103:===============================>                     (69 + 47) / 116][Stage 103:=====================================>               (82 + 34) / 116][Stage 103:===========================================>         (95 + 21) / 116][Stage 103:=================================================>   (109 + 7) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.002888614 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377230102 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 46) / 117][Stage 104:=================================>                   (73 + 44) / 117][Stage 104:=========================================>           (91 + 26) / 117][Stage 104:=================================================>   (110 + 7) / 117]                                                                                [Stage 105:================================>                    (73 + 45) / 118][Stage 105:======================================>              (85 + 33) / 118][Stage 105:=============================================>      (104 + 14) / 118][Stage 105:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.111952507 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72  OR  pa rtitionIndex = 73  OR  partitionIndex = 88 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 45) / 117][Stage 106:=======================================>             (87 + 30) / 117][Stage 106:==============================================>     (105 + 12) / 117][Stage 106:====================================================>(116 + 1) / 117]                                                                                [Stage 107:================================>                    (72 + 46) / 118][Stage 107:====================================>                (81 + 37) / 118][Stage 107:==========================================>          (94 + 24) / 118][Stage 107:==================================================>  (112 + 6) / 118][Stage 107:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.182420348 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232  OR   partitionIndex = 233  OR  partitionIndex = 248 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419716616 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 62) / 122][Stage 108:=============================>                       (67 + 55) / 122][Stage 108:================================>                    (75 + 47) / 122][Stage 108:============================================>       (105 + 17) / 122][Stage 108:===================================================> (118 + 4) / 122]                                                                                [Stage 109:==========================>                          (62 + 61) / 123][Stage 109:============================>                        (67 + 56) / 123][Stage 109:=================================>                   (77 + 46) / 123][Stage 109:=======================================>             (91 + 32) / 123][Stage 109:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.276259195 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182  OR   partitionIndex = 183  OR  partitionIndex = 192 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349458833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (81 + 34) / 115][Stage 110:=========================================>           (90 + 25) / 115][Stage 110:===============================================>    (105 + 10) / 115][Stage 110:====================================================>(113 + 2) / 115]                                                                                [Stage 111:======================================>              (85 + 31) / 116][Stage 111:===========================================>         (96 + 20) / 116][Stage 111:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.689468744 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427127277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 61) / 122][Stage 112:=============================>                       (67 + 55) / 122][Stage 112:====================================>                (85 + 37) / 122][Stage 112:===============================================>    (111 + 11) / 122][Stage 112:====================================================>(120 + 2) / 122]                                                                                [Stage 113:===========================>                         (64 + 59) / 123][Stage 113:===============================>                     (72 + 51) / 123][Stage 113:=======================================>             (91 + 32) / 123][Stage 113:===============================================>    (113 + 10) / 123][Stage 113:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.628450202 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106  OR   partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418276514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 60) / 121][Stage 114:=============================>                       (68 + 53) / 121][Stage 114:=======================================>             (91 + 30) / 121][Stage 114:===============================================>    (110 + 11) / 121]                                                                                [Stage 115:===========================>                         (63 + 59) / 122][Stage 115:===============================>                     (72 + 50) / 122][Stage 115:=========================================>           (95 + 27) / 122][Stage 115:=================================================>   (115 + 7) / 122][Stage 115:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.418314432 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99  OR  pa rtitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428235217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (62 + 60) / 122][Stage 116:=============================>                       (68 + 54) / 122][Stage 116:=========================================>           (95 + 27) / 122][Stage 116:===============================================>    (112 + 10) / 122]                                                                                [Stage 117:==========================>                          (62 + 61) / 123][Stage 117:============================>                        (67 + 56) / 123][Stage 117:==================================>                  (80 + 43) / 123][Stage 117:===========================================>        (104 + 19) / 123][Stage 117:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.478955709 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415751592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (63 + 58) / 121][Stage 118:================================>                    (74 + 47) / 121][Stage 118:=======================================>             (91 + 30) / 121][Stage 118:==================================================>  (116 + 5) / 121]                                                                                [Stage 119:==========================>                          (62 + 60) / 122][Stage 119:================================>                    (74 + 48) / 122][Stage 119:=======================================>             (91 + 31) / 122][Stage 119:==============================================>     (109 + 13) / 122][Stage 119:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.46341334 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR   partitionIndex = 200  OR  partitionIndex = 201 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339734687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (81 + 34) / 115][Stage 120:=========================================>           (89 + 26) / 115][Stage 120:==============================================>     (103 + 12) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:======================================>              (85 + 31) / 116][Stage 121:=============================================>       (99 + 17) / 116][Stage 121:===================================================> (113 + 3) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.697519595 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420857533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 60) / 121][Stage 122:============================>                        (64 + 57) / 121][Stage 122:===============================>                     (72 + 49) / 121][Stage 122:===========================================>         (99 + 22) / 121][Stage 122:===================================================> (118 + 3) / 121]                                                                                [Stage 123:===========================>                         (63 + 59) / 122][Stage 123:===================================>                 (81 + 41) / 122][Stage 123:===========================================>        (103 + 19) / 122][Stage 123:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.248971068 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344269228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=====================================>               (81 + 34) / 115][Stage 124:===========================================>         (94 + 21) / 115][Stage 124:=================================================>   (107 + 8) / 115][Stage 124:===================================================> (112 + 3) / 115]                                                                                [Stage 125:======================================>              (85 + 31) / 116][Stage 125:===========================================>         (95 + 21) / 116][Stage 125:===================================================> (112 + 4) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.768897314 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 182  OR  partitionIndex = 183 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 182  OR  partitionIndex = 183 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379742699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:================================>                    (71 + 46) / 117][Stage 126:=================================>                   (73 + 44) / 117][Stage 126:=====================================>               (83 + 34) / 117][Stage 126:============================================>        (99 + 18) / 117][Stage 126:====================================================>(116 + 1) / 117]                                                                                [Stage 127:================================>                    (72 + 46) / 118][Stage 127:=================================>                   (74 + 44) / 118][Stage 127:=======================================>             (89 + 29) / 118][Stage 127:==============================================>     (105 + 13) / 118][Stage 127:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.426895679 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 216  OR  partitionIndex = 217 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343133548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (83 + 32) / 115][Stage 128:===========================================>         (95 + 20) / 115][Stage 128:=================================================>   (107 + 8) / 115][Stage 128:====================================================>(113 + 2) / 115]                                                                                [Stage 129:====================================>                (80 + 36) / 116][Stage 129:===========================================>         (96 + 20) / 116][Stage 129:==================================================>  (110 + 6) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.599348276 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  pa rtitionIndex = 80  OR  partitionIndex = 81 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 80  OR  partitionIndex = 81 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397033265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (71 + 46) / 117][Stage 130:================================>                    (72 + 45) / 117][Stage 130:=====================================>               (83 + 34) / 117][Stage 130:============================================>       (101 + 16) / 117][Stage 130:==================================================>  (111 + 6) / 117]                                                                                [Stage 131:================================>                    (72 + 46) / 118][Stage 131:==================================>                  (77 + 41) / 118][Stage 131:=======================================>             (89 + 29) / 118][Stage 131:==============================================>     (106 + 12) / 118][Stage 131:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.100186571 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 210  OR  partitionIndex = 211 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 210  OR  partitionIndex = 211 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41662475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 60) / 121][Stage 132:============================>                        (65 + 56) / 121][Stage 132:=====================================>               (86 + 35) / 121][Stage 132:==============================================>     (109 + 12) / 121]                                                                                [Stage 133:============================>                        (66 + 56) / 122][Stage 133:===================================>                 (82 + 40) / 122][Stage 133:============================================>       (105 + 17) / 122][Stage 133:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.217911925 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  pa rtitionIndex = 96  OR  partitionIndex = 97 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418011211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 60) / 121][Stage 134:============================>                        (64 + 57) / 121][Stage 134:===================================>                 (80 + 41) / 121][Stage 134:===========================================>        (102 + 19) / 121][Stage 134:==================================================>  (115 + 6) / 121]                                                                                [Stage 135:==========================>                          (62 + 60) / 122][Stage 135:=============================>                       (68 + 54) / 122][Stage 135:===================================>                 (81 + 41) / 122][Stage 135:============================================>       (105 + 17) / 122][Stage 135:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.173732569 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  pa rtitionIndex = 44  OR  partitionIndex = 45 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398763744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (62 + 59) / 121][Stage 136:===============================>                     (71 + 50) / 121][Stage 136:==========================================>         (100 + 21) / 121][Stage 136:==================================================>  (116 + 5) / 121]                                                                                [Stage 137:===========================>                         (63 + 59) / 122][Stage 137:===============================>                     (73 + 49) / 122][Stage 137:=========================================>           (95 + 27) / 122][Stage 137:=================================================>   (114 + 8) / 122][Stage 137:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.180471129 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  pa rtitionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352262629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===================================>                 (77 + 37) / 114][Stage 138:==========================================>          (91 + 23) / 114][Stage 138:=============================================>       (98 + 16) / 114][Stage 138:=================================================>   (106 + 8) / 114][Stage 138:====================================================>(112 + 2) / 114][Stage 138:====================================================>(113 + 1) / 114]                                                                                [Stage 139:=====================================>               (81 + 34) / 115][Stage 139:=========================================>           (89 + 26) / 115][Stage 139:============================================>        (97 + 18) / 115][Stage 139:==================================================>  (109 + 6) / 115][Stage 139:===================================================> (112 + 3) / 115][Stage 139:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 5.182604206 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 154  OR  partitionIndex = 155 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 154  OR  partitionIndex = 155 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363086412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==================================>                  (74 + 40) / 114][Stage 140:=======================================>             (85 + 29) / 114][Stage 140:=============================================>       (97 + 17) / 114][Stage 140:===============================================>    (104 + 10) / 114][Stage 140:====================================================>(112 + 2) / 114]                                                                                [Stage 141:=================================>                   (73 + 42) / 115][Stage 141:=========================================>           (90 + 25) / 115][Stage 141:==============================================>     (102 + 13) / 115][Stage 141:===================================================> (111 + 4) / 115][Stage 141:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.026295134 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  part itionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (73 + 41) / 114][Stage 142:=====================================>               (81 + 33) / 114][Stage 142:===========================================>         (94 + 20) / 114][Stage 142:==============================================>     (103 + 11) / 114][Stage 142:==================================================>  (108 + 6) / 114]                                                                                [Stage 143:========================================>            (87 + 28) / 115][Stage 143:============================================>        (97 + 18) / 115][Stage 143:===============================================>    (105 + 10) / 115][Stage 143:==================================================>  (109 + 6) / 115][Stage 143:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.809056414 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 18  OR  partitionIndex = 19 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (73 + 41) / 114][Stage 144:======================================>              (83 + 31) / 114][Stage 144:==========================================>          (92 + 22) / 114][Stage 144:==============================================>     (103 + 11) / 114][Stage 144:==================================================>  (108 + 6) / 114]                                                                                [Stage 145:====================================>                (79 + 36) / 115][Stage 145:=========================================>           (90 + 25) / 115][Stage 145:===============================================>    (104 + 11) / 115][Stage 145:===================================================> (111 + 4) / 115][Stage 145:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.063936688 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR   partitionIndex = 245  OR  partitionIndex = 246 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 245  OR  partitionIndex = 246 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:====================================>                (78 + 36) / 114][Stage 146:===========================================>         (93 + 21) / 114][Stage 146:==============================================>     (102 + 12) / 114][Stage 146:===================================================> (110 + 4) / 114]                                                                                [Stage 147:====================================>                (80 + 35) / 115][Stage 147:============================================>        (96 + 19) / 115][Stage 147:==============================================>     (102 + 13) / 115][Stage 147:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 3.023012185 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR   partitionIndex = 191  OR  partitionIndex = 200 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363285611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 45) / 117][Stage 148:====================================>                (80 + 37) / 117][Stage 148:===========================================>         (96 + 21) / 117][Stage 148:===================================================> (114 + 3) / 117]                                                                                [Stage 149:================================>                    (73 + 45) / 118][Stage 149:=====================================>               (83 + 35) / 118][Stage 149:============================================>        (99 + 19) / 118][Stage 149:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.070886257 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  pa rtitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (71 + 46) / 117][Stage 150:=====================================>               (82 + 35) / 117][Stage 150:=============================================>      (102 + 15) / 117][Stage 150:====================================================>(115 + 2) / 117]                                                                                [Stage 151:================================>                    (73 + 45) / 118][Stage 151:=====================================>               (83 + 35) / 118][Stage 151:================================================>    (109 + 9) / 118][Stage 151:====================================================>(116 + 2) / 118][Stage 151:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.354166301 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366959752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=================================>                   (73 + 42) / 115][Stage 152:===================================>                 (77 + 38) / 115][Stage 152:==========================================>          (93 + 22) / 115][Stage 152:===================================================> (111 + 4) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:===============================>                     (70 + 46) / 116][Stage 153:===================================>                 (78 + 38) / 116][Stage 153:===========================================>         (96 + 20) / 116][Stage 153:==================================================>  (110 + 6) / 116][Stage 153:====================================================>(114 + 2) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.1436154 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 217  OR  partitionIndex = 218 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 217  OR  partitionIndex = 218 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3969921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (61 + 60) / 121][Stage 154:============================>                        (66 + 55) / 121][Stage 154:======================================>              (88 + 33) / 121][Stage 154:=================================================>   (113 + 8) / 121]                                                                                [Stage 155:==========================>                          (62 + 60) / 122][Stage 155:==============================>                      (70 + 52) / 122][Stage 155:======================================>              (88 + 34) / 122][Stage 155:==============================================>     (109 + 13) / 122][Stage 155:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.390074886 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39749264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 62) / 122][Stage 156:=============================>                       (67 + 55) / 122][Stage 156:====================================>                (83 + 39) / 122][Stage 156:==========================================>          (97 + 25) / 122][Stage 156:==================================================>  (116 + 6) / 122]                                                                                [Stage 157:===========================>                         (63 + 60) / 123][Stage 157:==============================>                      (71 + 52) / 123][Stage 157:=====================================>               (88 + 35) / 123][Stage 157:=============================================>      (108 + 15) / 123][Stage 157:==================================================>  (118 + 5) / 123][Stage 157:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.529381984 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  part itionIndex = 21  OR  partitionIndex = 22 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408527343 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (82 + 33) / 115][Stage 158:=========================================>           (91 + 24) / 115][Stage 158:=================================================>   (107 + 8) / 115]                                                                                [Stage 159:======================================>              (85 + 31) / 116][Stage 159:==========================================>          (94 + 22) / 116][Stage 159:=================================================>   (108 + 8) / 116][Stage 159:===================================================> (112 + 4) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.725744081 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 26  OR  partitionIndex = 27 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395268858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (68 + 47) / 115][Stage 160:====================================>                (79 + 36) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:==============================================>     (102 + 13) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:================================>                    (71 + 45) / 116][Stage 161:===================================>                 (78 + 38) / 116][Stage 161:===========================================>         (95 + 21) / 116][Stage 161:================================================>    (107 + 9) / 116][Stage 161:==================================================>  (111 + 5) / 116][Stage 161:===================================================> (113 + 3) / 116][Stage 161:====================================================>(114 + 2) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.074800041 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR   partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33460944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=====================================>               (82 + 33) / 115][Stage 162:=========================================>           (91 + 24) / 115][Stage 162:================================================>    (106 + 9) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:=====================================>               (81 + 35) / 116][Stage 163:=========================================>           (91 + 25) / 116][Stage 163:=================================================>   (109 + 7) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.704615109 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  pa rtitionIndex = 64  OR  partitionIndex = 65 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40355078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (61 + 60) / 121][Stage 164:============================>                        (65 + 56) / 121][Stage 164:==================================>                  (78 + 43) / 121][Stage 164:=============================================>      (105 + 16) / 121]                                                                                [Stage 165:==========================>                          (62 + 60) / 122][Stage 165:================================>                    (75 + 47) / 122][Stage 165:=========================================>           (95 + 27) / 122][Stage 165:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.095091062 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  pa rtitionIndex = 48  OR  partitionIndex = 49 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40331636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 60) / 121][Stage 166:============================>                        (65 + 56) / 121][Stage 166:=================================>                   (76 + 45) / 121][Stage 166:=============================================>      (105 + 16) / 121]                                                                                [Stage 167:===========================>                         (63 + 59) / 122][Stage 167:===============================>                     (72 + 50) / 122][Stage 167:========================================>            (94 + 28) / 122][Stage 167:===============================================>    (112 + 10) / 122][Stage 167:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.256823628 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  pa rtitionIndex = 49  OR  partitionIndex = 50 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399926899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 61) / 122][Stage 168:==============================>                      (70 + 52) / 122][Stage 168:======================================>              (89 + 33) / 122][Stage 168:=============================================>      (107 + 15) / 122]                                                                                [Stage 169:===========================>                         (64 + 59) / 123][Stage 169:==================================>                  (80 + 43) / 123][Stage 169:==========================================>          (99 + 24) / 123][Stage 169:===============================================>    (113 + 10) / 123]                                                                                Time elapsed: 3.031947499 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225  OR   partitionIndex = 240  OR  partitionIndex = 241 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240  OR  partitionIndex = 241 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 61) / 122][Stage 170:============================>                        (66 + 56) / 122][Stage 170:===================================>                 (82 + 40) / 122][Stage 170:=============================================>      (107 + 15) / 122][Stage 170:====================================================>(121 + 1) / 122]                                                                                [Stage 171:==========================>                          (62 + 61) / 123][Stage 171:=============================>                       (69 + 54) / 123][Stage 171:====================================>                (84 + 39) / 123][Stage 171:==============================================>     (111 + 12) / 123][Stage 171:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.403928086 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR   partitionIndex = 201  OR  partitionIndex = 216 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417956264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 60) / 121][Stage 172:===============================>                     (72 + 49) / 121][Stage 172:======================================>              (87 + 34) / 121][Stage 172:=============================================>      (105 + 16) / 121]                                                                                [Stage 173:============================>                        (65 + 57) / 122][Stage 173:=================================>                   (77 + 45) / 122][Stage 173:========================================>            (94 + 28) / 122][Stage 173:===============================================>    (111 + 11) / 122][Stage 173:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.280400747 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 235  OR   partitionIndex = 250  OR  partitionIndex = 251 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398900957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (61 + 61) / 122][Stage 174:=============================>                       (69 + 53) / 122][Stage 174:======================================>              (88 + 34) / 122][Stage 174:===============================================>    (112 + 10) / 122][Stage 174:====================================================>(120 + 2) / 122][Stage 174:====================================================>(121 + 1) / 122]                                                                                [Stage 175:==========================>                          (61 + 62) / 123][Stage 175:=============================>                       (68 + 55) / 123][Stage 175:======================================>              (90 + 33) / 123][Stage 175:==============================================>     (109 + 14) / 123][Stage 175:====================================================>(121 + 2) / 123][Stage 175:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.820492203 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 208  OR  partitionIndex = 209 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380345632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=================================>                   (71 + 43) / 114][Stage 176:=====================================>               (80 + 34) / 114][Stage 176:=============================================>       (97 + 17) / 114][Stage 176:=================================================>   (106 + 8) / 114][Stage 176:===================================================> (110 + 4) / 114][Stage 176:====================================================>(113 + 1) / 114]                                                                                [Stage 177:===================================>                 (76 + 39) / 115][Stage 177:========================================>            (88 + 27) / 115][Stage 177:============================================>        (96 + 19) / 115][Stage 177:================================================>    (106 + 9) / 115][Stage 177:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.074275921 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401046118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 62) / 122][Stage 178:===========================>                         (63 + 59) / 122][Stage 178:==================================>                  (79 + 43) / 122][Stage 178:=========================================>           (95 + 27) / 122][Stage 178:===================================================> (118 + 4) / 122]                                                                                [Stage 179:==========================>                          (62 + 61) / 123][Stage 179:===============================>                     (74 + 49) / 123][Stage 179:==========================================>          (98 + 25) / 123][Stage 179:=================================================>   (115 + 8) / 123]                                                                                Time elapsed: 3.18226627 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  pa rtitionIndex = 52  OR  partitionIndex = 53 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 52  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382735771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (59 + 54) / 113][Stage 180:================================>                    (69 + 44) / 113][Stage 180:========================================>            (86 + 27) / 113][Stage 180:===============================================>    (103 + 10) / 113]                                                                                [Stage 181:===========================>                         (60 + 54) / 114][Stage 181:===============================>                     (68 + 46) / 114][Stage 181:=========================================>           (90 + 24) / 114][Stage 181:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.202378434 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 124  OR  partitionIndex = 125 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (59 + 54) / 113][Stage 182:=================================>                   (72 + 41) / 113][Stage 182:===========================================>         (93 + 20) / 113][Stage 182:=================================================>   (105 + 8) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:=================================>                   (72 + 42) / 114][Stage 183:=======================================>             (86 + 28) / 114][Stage 183:===============================================>    (104 + 10) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.325815447 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  p artitionIndex = 101  OR  partitionIndex = 116 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361995085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (80 + 34) / 114][Stage 184:==========================================>          (92 + 22) / 114][Stage 184:==============================================>     (102 + 12) / 114][Stage 184:==================================================>  (109 + 5) / 114]                                                                                [Stage 185:====================================>                (79 + 36) / 115][Stage 185:===========================================>         (95 + 20) / 115][Stage 185:===============================================>    (104 + 11) / 115][Stage 185:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.908292963 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR   partitionIndex = 184  OR  partitionIndex = 185 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342020739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=======================================>             (85 + 30) / 115][Stage 186:===============================================>    (105 + 10) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:=====================================>               (81 + 35) / 116][Stage 187:===========================================>         (95 + 21) / 116][Stage 187:===================================================> (112 + 4) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.790081047 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 89  OR  partitionIndex = 90 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403827577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (62 + 60) / 122][Stage 188:===============================>                     (73 + 49) / 122][Stage 188:=======================================>             (90 + 32) / 122][Stage 188:==============================================>     (109 + 13) / 122][Stage 188:===================================================> (119 + 3) / 122]                                                                                [Stage 189:============================>                        (65 + 58) / 123][Stage 189:===================================>                 (83 + 40) / 123][Stage 189:==========================================>         (101 + 22) / 123][Stage 189:=================================================>   (114 + 9) / 123][Stage 189:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.63731687 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  pa rtitionIndex = 56  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399556696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (61 + 61) / 122][Stage 190:=============================>                       (67 + 55) / 122][Stage 190:==================================>                  (79 + 43) / 122][Stage 190:============================================>       (104 + 18) / 122][Stage 190:====================================================>(120 + 2) / 122]                                                                                [Stage 191:===========================>                         (64 + 59) / 123][Stage 191:===================================>                 (83 + 40) / 123][Stage 191:===========================================>        (103 + 20) / 123][Stage 191:=================================================>   (116 + 7) / 123][Stage 191:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.424408385 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  pa rtitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349174001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:====================================>                (79 + 35) / 114][Stage 192:==============================================>      (99 + 15) / 114][Stage 192:================================================>    (105 + 9) / 114][Stage 192:=================================================>   (107 + 7) / 114][Stage 192:====================================================>(113 + 1) / 114]                                                                                [Stage 193:=====================================>               (82 + 33) / 115][Stage 193:===========================================>         (95 + 20) / 115][Stage 193:================================================>    (106 + 9) / 115][Stage 193:==================================================>  (110 + 5) / 115][Stage 193:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.225020745 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 231  OR   partitionIndex = 246  OR  partitionIndex = 247 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367472165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===============================>                     (68 + 47) / 115][Stage 194:===================================>                 (78 + 37) / 115][Stage 194:==========================================>          (93 + 22) / 115][Stage 194:=============================================>      (100 + 15) / 115][Stage 194:=================================================>   (107 + 8) / 115][Stage 194:==================================================>  (109 + 6) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:================================>                    (72 + 44) / 116][Stage 195:========================================>            (88 + 28) / 116][Stage 195:===============================================>    (105 + 11) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.903462897 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 146  OR  partitionIndex = 147 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 146  OR  partitionIndex = 147 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395329113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (62 + 59) / 121][Stage 196:==============================>                      (70 + 51) / 121][Stage 196:=======================================>             (91 + 30) / 121][Stage 196:==============================================>     (108 + 13) / 121][Stage 196:===================================================> (117 + 4) / 121]                                                                                [Stage 197:===========================>                         (64 + 58) / 122][Stage 197:================================>                    (74 + 48) / 122][Stage 197:============================================>       (104 + 18) / 122][Stage 197:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.290286759 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78  OR  pa rtitionIndex = 92  OR  partitionIndex = 93 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 92  OR  partitionIndex = 93 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413347158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (61 + 61) / 122][Stage 198:=============================>                       (67 + 55) / 122][Stage 198:====================================>                (85 + 37) / 122][Stage 198:============================================>       (104 + 18) / 122][Stage 198:====================================================>(121 + 1) / 122]                                                                                [Stage 199:==========================>                          (62 + 61) / 123][Stage 199:=============================>                       (68 + 55) / 123][Stage 199:====================================>                (85 + 38) / 123][Stage 199:===============================================>    (113 + 10) / 123][Stage 199:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.386630404 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362221783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (71 + 46) / 117][Stage 200:=================================>                   (75 + 42) / 117][Stage 200:========================================>            (90 + 27) / 117][Stage 200:============================================>       (101 + 16) / 117][Stage 200:=================================================>   (110 + 7) / 117][Stage 200:====================================================>(116 + 1) / 117]                                                                                [Stage 201:================================>                    (72 + 46) / 118][Stage 201:=================================>                   (74 + 44) / 118][Stage 201:=======================================>             (88 + 30) / 118][Stage 201:=============================================>      (103 + 15) / 118][Stage 201:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.494669552 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 21:43:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:43592) dropped. RpcEnv already stopped.
17/05/29 21:43:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:59618) dropped. RpcEnv already stopped.
17/05/29 21:43:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:43592) dropped. RpcEnv already stopped.
17/05/29 21:43:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:59618) dropped. RpcEnv already stopped.

real	10m44.057s
user	11m53.756s
sys	1m0.312s
