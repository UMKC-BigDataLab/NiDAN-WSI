Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 23:48:11 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:48:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:48:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:48:26 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 23:48:28 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 23:48:39 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529234828-0698).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.435990916 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========>                                           (25 + 90) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==========================>                            (55 + 61) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.741089467 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex =  73  OR  partitionIndex = 88 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.909894541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (40 + 82) / 122][Stage 2:========================>                              (54 + 68) / 122][Stage 2:========================>                              (55 + 67) / 122][Stage 2:===========================>                           (60 + 62) / 122][Stage 2:============================>                          (63 + 59) / 122][Stage 2:=============================>                         (66 + 56) / 122][Stage 2:==================================>                    (76 + 46) / 122][Stage 2:========================================>              (90 + 32) / 122][Stage 2:================================================>     (109 + 13) / 122][Stage 2:=====================================================> (118 + 4) / 122]                                                                                [Stage 3:=========================>                             (58 + 65) / 123][Stage 3:============================>                          (63 + 60) / 123][Stage 3:==============================>                        (68 + 55) / 123][Stage 3:=================================>                     (74 + 49) / 123][Stage 3:========================================>              (91 + 32) / 123][Stage 3:================================================>     (110 + 13) / 123][Stage 3:=====================================================> (120 + 3) / 123][Stage 3:======================================================>(122 + 1) / 123]                                                                                Time elapsed: 5.529075775 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIn dex = 172  OR  partitionIndex = 173 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.627831247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (70 + 47) / 117][Stage 4:==================================>                    (73 + 44) / 117][Stage 4:===================================>                   (75 + 42) / 117][Stage 4:=======================================>               (85 + 32) / 117][Stage 4:============================================>          (95 + 22) / 117][Stage 4:=================================================>    (107 + 10) / 117][Stage 4:====================================================>  (112 + 5) / 117][Stage 4:======================================================>(115 + 2) / 117]                                                                                [Stage 5:==================================>                    (73 + 45) / 118][Stage 5:==================================>                    (75 + 43) / 118][Stage 5:======================================>                (83 + 35) / 118][Stage 5:===========================================>           (93 + 25) / 118][Stage 5:==============================================>       (101 + 17) / 118][Stage 5:====================================================>  (113 + 5) / 118][Stage 5:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.882001681 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex =  41  OR  partitionIndex = 56 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.61453354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:========================================>              (84 + 31) / 115][Stage 6:==========================================>            (88 + 27) / 115][Stage 6:=============================================>         (95 + 20) / 115][Stage 6:===============================================>      (101 + 14) / 115][Stage 6:==================================================>    (106 + 9) / 115][Stage 6:=====================================================> (112 + 3) / 115]                                                                                [Stage 7:=====================================>                 (80 + 36) / 116][Stage 7:========================================>              (85 + 31) / 116][Stage 7:=============================================>         (96 + 20) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:================================================>     (105 + 11) / 116][Stage 7:====================================================>  (110 + 6) / 116][Stage 7:======================================================>(114 + 2) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.464342883 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  pa rtitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex =  88  OR  partitionIndex = 89 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.582470158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (59 + 56) / 115][Stage 8:===============================>                       (66 + 49) / 115][Stage 8:=================================>                     (71 + 44) / 115][Stage 8:=======================================>               (82 + 33) / 115][Stage 8:============================================>          (94 + 21) / 115][Stage 8:===============================================>       (99 + 16) / 115][Stage 8:=================================================>    (105 + 10) / 115][Stage 8:===================================================>   (107 + 8) / 115][Stage 8:===================================================>   (108 + 7) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:==============================>                        (65 + 51) / 116][Stage 9:=================================>                     (71 + 45) / 116][Stage 9:=====================================>                 (79 + 37) / 116][Stage 9:======================================>                (81 + 35) / 116][Stage 9:===========================================>           (92 + 24) / 116][Stage 9:==============================================>        (98 + 18) / 116][Stage 9:=================================================>    (106 + 10) / 116][Stage 9:=====================================================> (113 + 3) / 116][Stage 9:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.307577322 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIn dex = 240  OR  partitionIndex = 241 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240  OR  partitionIndex = 241 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==============================>                       (66 + 49) / 115][Stage 10:=================================>                    (71 + 44) / 115][Stage 10:======================================>               (82 + 33) / 115][Stage 10:=======================================>              (84 + 31) / 115][Stage 10:========================================>             (86 + 29) / 115][Stage 10:============================================>         (95 + 20) / 115][Stage 10:===============================================>     (104 + 11) / 115][Stage 10:====================================================> (111 + 4) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:=============================>                        (64 + 52) / 116][Stage 11:=================================>                    (71 + 45) / 116][Stage 11:====================================>                 (79 + 37) / 116][Stage 11:========================================>             (87 + 29) / 116][Stage 11:===========================================>          (94 + 22) / 116][Stage 11:===============================================>     (104 + 12) / 116][Stage 11:===================================================>  (110 + 6) / 116][Stage 11:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.563630091 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 198  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==============================>                       (66 + 49) / 115][Stage 12:=================================>                    (71 + 44) / 115][Stage 12:====================================>                 (78 + 37) / 115][Stage 12:======================================>               (83 + 32) / 115][Stage 12:===========================================>          (92 + 23) / 115][Stage 12:===============================================>     (102 + 13) / 115][Stage 12:===================================================>  (110 + 5) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:================================>                     (69 + 47) / 116][Stage 13:===================================>                  (76 + 40) / 116][Stage 13:======================================>               (83 + 33) / 116][Stage 13:=======================================>              (84 + 32) / 116][Stage 13:=========================================>            (90 + 26) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:=================================================>    (107 + 9) / 116][Stage 13:====================================================> (113 + 3) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.377167433 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex =  108  OR  partitionIndex = 109 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.753572277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=======================>                              (52 + 70) / 122][Stage 14:=======================>                              (53 + 69) / 122][Stage 14:===============================>                      (72 + 50) / 122][Stage 14:==================================>                   (79 + 43) / 122][Stage 14:=======================================>              (90 + 32) / 122][Stage 14:============================================>        (102 + 20) / 122][Stage 14:================================================>    (111 + 11) / 122][Stage 14:=====================================================>(121 + 1) / 122]                                                                                [Stage 15:==========================>                           (61 + 62) / 123][Stage 15:================================>                     (73 + 50) / 123][Stage 15:===================================>                  (81 + 42) / 123][Stage 15:========================================>             (93 + 30) / 123][Stage 15:===========================================>         (101 + 22) / 123][Stage 15:==============================================>      (108 + 15) / 123][Stage 15:==================================================>   (116 + 7) / 123]                                                                                Time elapsed: 5.374342619 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR   partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIn dex = 219  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.647459316 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (61 + 61) / 122][Stage 16:===========================>                          (63 + 59) / 122][Stage 16:===================================>                  (81 + 41) / 122][Stage 16:===========================================>         (100 + 22) / 122][Stage 16:===================================================>  (116 + 6) / 122][Stage 16:====================================================> (119 + 3) / 122]                                                                                [Stage 17:===========================>                          (63 + 60) / 123][Stage 17:=================================>                    (76 + 47) / 123][Stage 17:========================================>             (93 + 30) / 123][Stage 17:=============================================>       (105 + 18) / 123][Stage 17:==============================================>      (109 + 14) / 123][Stage 17:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 4.774498043 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR   partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 238  OR  partitionIn dex = 252  OR  partitionIndex = 253 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 238  OR  partitionIndex = 252  OR  partitionIndex = 253 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491463623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (79 + 36) / 115][Stage 18:======================================>               (82 + 33) / 115][Stage 18:=========================================>            (89 + 26) / 115][Stage 18:===============================================>     (103 + 12) / 115][Stage 18:==================================================>   (108 + 7) / 115]                                                                                [Stage 19:======================================>               (83 + 33) / 116][Stage 19:=========================================>            (90 + 26) / 116][Stage 19:==============================================>      (102 + 14) / 116][Stage 19:====================================================> (113 + 3) / 116][Stage 19:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.296979704 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex =  105  OR  partitionIndex = 120 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 120 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477626796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=====================================>                (79 + 36) / 115][Stage 20:======================================>               (83 + 32) / 115][Stage 20:============================================>         (94 + 21) / 115][Stage 20:================================================>    (105 + 10) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:======================================>               (83 + 33) / 116][Stage 21:=========================================>            (90 + 26) / 116][Stage 21:============================================>         (96 + 20) / 116][Stage 21:===============================================>     (105 + 11) / 116][Stage 21:===================================================>  (111 + 5) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.17918646 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104  OR  p artitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionInd ex = 121  OR  partitionIndex = 122 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.561759773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (61 + 60) / 121][Stage 22:=============================>                        (67 + 54) / 121][Stage 22:====================================>                 (81 + 40) / 121][Stage 22:===============================================>     (108 + 13) / 121][Stage 22:=====================================================>(120 + 1) / 121]                                                                                [Stage 23:===========================>                          (62 + 60) / 122][Stage 23:===============================>                      (72 + 50) / 122][Stage 23:======================================>               (88 + 34) / 122][Stage 23:==============================================>      (108 + 14) / 122][Stage 23:===================================================>  (117 + 5) / 122][Stage 23:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 6.072199292 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 11 8  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide36;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (59 + 62) / 121][Stage 24:============================>                         (64 + 57) / 121][Stage 24:===============================>                      (70 + 51) / 121][Stage 24:======================================>               (86 + 35) / 121][Stage 24:===============================================>     (109 + 12) / 121][Stage 24:=====================================================>(120 + 1) / 121]                                                                                [Stage 25:=============================>                        (66 + 56) / 122][Stage 25:=================================>                    (75 + 47) / 122][Stage 25:===========================================>         (101 + 21) / 122][Stage 25:===================================================>  (116 + 6) / 122][Stage 25:====================================================> (119 + 3) / 122][Stage 25:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 5.041757153 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  pa rtitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex =  80  OR  partitionIndex = 81 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 80  OR  partitionIndex = 81 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524536521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (71 + 46) / 117][Stage 26:=================================>                    (73 + 44) / 117][Stage 26:=======================================>              (85 + 32) / 117][Stage 26:==============================================>      (102 + 15) / 117][Stage 26:====================================================> (113 + 4) / 117][Stage 26:=====================================================>(115 + 2) / 117]                                                                                [Stage 27:=================================>                    (73 + 45) / 118][Stage 27:======================================>               (84 + 34) / 118][Stage 27:=============================================>        (99 + 19) / 118][Stage 27:==============================================>      (104 + 14) / 118][Stage 27:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.845092268 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 16  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32   OR  partitionIndex = 33 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.529232309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 60) / 121][Stage 28:================================>                     (72 + 49) / 121][Stage 28:=====================================>                (85 + 36) / 121][Stage 28:=============================================>       (104 + 17) / 121][Stage 28:====================================================> (117 + 4) / 121][Stage 28:=====================================================>(119 + 2) / 121]                                                                                [Stage 29:=============================>                        (66 + 56) / 122][Stage 29:===================================>                  (81 + 41) / 122][Stage 29:============================================>        (102 + 20) / 122][Stage 29:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.320352091 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.533240875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (61 + 60) / 121][Stage 30:============================>                         (63 + 58) / 121][Stage 30:==================================>                   (77 + 44) / 121][Stage 30:=========================================>            (92 + 29) / 121][Stage 30:==================================================>   (113 + 8) / 121][Stage 30:=====================================================>(120 + 1) / 121]                                                                                [Stage 31:===========================>                          (62 + 60) / 122][Stage 31:==============================>                       (68 + 54) / 122][Stage 31:=====================================>                (85 + 37) / 122][Stage 31:===========================================>         (101 + 21) / 122][Stage 31:================================================>    (112 + 10) / 122][Stage 31:=====================================================>(120 + 2) / 122][Stage 31:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.132589394 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 92  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 121  OR  partitionIndex  = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 92  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (61 + 60) / 121][Stage 32:=============================>                        (66 + 55) / 121][Stage 32:======================================>               (86 + 35) / 121][Stage 32:=============================================>       (104 + 17) / 121][Stage 32:=====================================================>(120 + 1) / 121]                                                                                [Stage 33:===========================>                          (62 + 60) / 122][Stage 33:=============================>                        (66 + 56) / 122][Stage 33:===================================>                  (80 + 42) / 122][Stage 33:===========================================>          (98 + 24) / 122][Stage 33:===================================================>  (116 + 6) / 122][Stage 33:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.357007346 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex =  86  OR  partitionIndex = 87 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459798697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===================================>                  (75 + 39) / 114][Stage 34:=========================================>            (88 + 26) / 114][Stage 34:=============================================>        (97 + 17) / 114][Stage 34:=================================================>    (105 + 9) / 114][Stage 34:====================================================> (110 + 4) / 114][Stage 34:=====================================================>(113 + 1) / 114]                                                                                [Stage 35:======================================>               (81 + 34) / 115][Stage 35:=============================================>        (97 + 18) / 115][Stage 35:===============================================>     (104 + 11) / 115][Stage 35:=====================================================>(113 + 2) / 115][Stage 35:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.408850913 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462888223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (71 + 44) / 115][Stage 36:======================================>               (81 + 34) / 115][Stage 36:===========================================>          (92 + 23) / 115][Stage 36:===============================================>     (103 + 12) / 115][Stage 36:==================================================>   (108 + 7) / 115][Stage 36:====================================================> (112 + 3) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:==================================>                   (74 + 42) / 116][Stage 37:===========================================>          (93 + 23) / 116][Stage 37:===============================================>     (104 + 12) / 116][Stage 37:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.477506157 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 225  OR   partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (70 + 45) / 115][Stage 38:======================================>               (82 + 33) / 115][Stage 38:==============================================>      (100 + 15) / 115][Stage 38:====================================================> (112 + 3) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:===============================>                      (68 + 48) / 116][Stage 39:=======================================>              (85 + 31) / 116][Stage 39:==============================================>      (101 + 15) / 116][Stage 39:===================================================>  (111 + 5) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.297679918 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 50   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===============================>                      (67 + 48) / 115][Stage 40:===================================>                  (75 + 40) / 115][Stage 40:===========================================>          (92 + 23) / 115][Stage 40:===============================================>     (104 + 11) / 115][Stage 40:===================================================>  (110 + 5) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:================================>                     (70 + 46) / 116][Stage 41:====================================>                 (79 + 37) / 116][Stage 41:==========================================>           (92 + 24) / 116][Stage 41:===============================================>     (103 + 13) / 116][Stage 41:=================================================>    (107 + 9) / 116][Stage 41:===================================================>  (111 + 5) / 116][Stage 41:====================================================> (113 + 3) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.404270705 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex =  86  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482190656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (66 + 49) / 115][Stage 42:====================================>                 (78 + 37) / 115][Stage 42:==========================================>           (90 + 25) / 115][Stage 42:==============================================>      (101 + 14) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:===================================================>  (109 + 6) / 115][Stage 42:====================================================> (111 + 4) / 115]                                                                                [Stage 43:=================================>                    (73 + 43) / 116][Stage 43:=======================================>              (85 + 31) / 116][Stage 43:=============================================>        (97 + 19) / 116][Stage 43:===================================================>  (111 + 5) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.613318731 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.519416325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 61) / 122][Stage 44:==============================>                       (68 + 54) / 122][Stage 44:=====================================>                (84 + 38) / 122][Stage 44:============================================>        (102 + 20) / 122][Stage 44:==================================================>   (115 + 7) / 122][Stage 44:===================================================>  (117 + 5) / 122]                                                                                [Stage 45:==========================>                           (61 + 62) / 123][Stage 45:===============================>                      (71 + 52) / 123][Stage 45:=======================================>              (89 + 34) / 123][Stage 45:==============================================>      (108 + 15) / 123][Stage 45:===================================================>  (117 + 6) / 123]                                                                                Time elapsed: 5.286732492 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR   partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIn dex = 180  OR  partitionIndex = 181 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 180  OR  partitionIndex = 181 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443296283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=================================>                    (71 + 43) / 114][Stage 46:=====================================>                (79 + 35) / 114][Stage 46:=============================================>        (97 + 17) / 114][Stage 46:===============================================>     (102 + 12) / 114][Stage 46:==================================================>   (106 + 8) / 114][Stage 46:=====================================================>(112 + 2) / 114]                                                                                [Stage 47:=====================================>                (80 + 35) / 115][Stage 47:============================================>         (94 + 21) / 115][Stage 47:===============================================>     (103 + 12) / 115][Stage 47:==================================================>   (107 + 8) / 115][Stage 47:====================================================> (112 + 3) / 115][Stage 47:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.581968283 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  pa rtitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex =  82  OR  partitionIndex = 83 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 83 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505251277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (62 + 60) / 122][Stage 48:==================================>                   (79 + 43) / 122][Stage 48:=============================================>       (104 + 18) / 122][Stage 48:====================================================> (118 + 4) / 122][Stage 48:=====================================================>(121 + 1) / 122]                                                                                [Stage 49:===========================>                          (62 + 61) / 123][Stage 49:==============================>                       (69 + 54) / 123][Stage 49:====================================>                 (83 + 40) / 123][Stage 49:==============================================>      (107 + 16) / 123][Stage 49:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 4.312874912 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex  = 120  OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473422657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==================================>                   (73 + 42) / 115][Stage 50:==========================================>           (90 + 25) / 115][Stage 50:===============================================>     (103 + 12) / 115][Stage 50:====================================================> (112 + 3) / 115]                                                                                [Stage 51:===================================>                  (76 + 40) / 116][Stage 51:===========================================>          (94 + 22) / 116][Stage 51:================================================>    (106 + 10) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.876923247 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  pa rtitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex =  55  OR  partitionIndex = 64 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (70 + 45) / 115][Stage 52:=====================================>                (79 + 36) / 115][Stage 52:=============================================>        (96 + 19) / 115][Stage 52:=====================================================>(113 + 2) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:====================================>                 (79 + 37) / 116][Stage 53:==========================================>           (91 + 25) / 116][Stage 53:==============================================>       (99 + 17) / 116][Stage 53:===============================================>     (104 + 12) / 116][Stage 53:==================================================>   (108 + 8) / 116][Stage 53:=====================================================>(114 + 2) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.782683348 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  pa rtitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex =  112  OR  partitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414083485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (82 + 33) / 115][Stage 54:========================================>             (87 + 28) / 115][Stage 54:=============================================>        (96 + 19) / 115][Stage 54:=================================================>    (106 + 9) / 115]                                                                                [Stage 55:======================================>               (82 + 34) / 116][Stage 55:===========================================>          (94 + 22) / 116][Stage 55:=================================================>    (107 + 9) / 116][Stage 55:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.758921199 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIn dex = 200  OR  partitionIndex = 201 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452507436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (82 + 32) / 114][Stage 56:==========================================>           (90 + 24) / 114][Stage 56:==============================================>      (101 + 13) / 114][Stage 56:====================================================> (111 + 3) / 114]                                                                                [Stage 57:======================================>               (81 + 34) / 115][Stage 57:==========================================>           (91 + 24) / 115][Stage 57:==============================================>       (98 + 17) / 115][Stage 57:================================================>    (105 + 10) / 115][Stage 57:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.419159196 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR   partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIn dex = 244  OR  partitionIndex = 245 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 244  OR  partitionIndex = 245 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:====================================>                 (76 + 38) / 114][Stage 58:========================================>             (85 + 29) / 114][Stage 58:=============================================>        (95 + 19) / 114][Stage 58:===================================================>  (108 + 6) / 114][Stage 58:====================================================> (111 + 3) / 114]                                                                                [Stage 59:======================================>               (82 + 33) / 115][Stage 59:==========================================>           (90 + 25) / 115][Stage 59:============================================>         (94 + 21) / 115][Stage 59:=================================================>    (106 + 9) / 115][Stage 59:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.324937657 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIn dex = 232  OR  partitionIndex = 233 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441124854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=================================>                    (72 + 43) / 115][Stage 60:========================================>             (87 + 28) / 115][Stage 60:===============================================>     (103 + 12) / 115][Stage 60:====================================================> (111 + 4) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:=====================================>                (80 + 36) / 116][Stage 61:===========================================>          (94 + 22) / 116][Stage 61:==================================================>   (108 + 8) / 116][Stage 61:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.091029162 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  pa rtitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex =  61  OR  partitionIndex = 62 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426963427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (72 + 42) / 114][Stage 62:========================================>             (85 + 29) / 114][Stage 62:============================================>         (93 + 21) / 114][Stage 62:===============================================>     (102 + 12) / 114][Stage 62:=====================================================>(112 + 2) / 114]                                                                                [Stage 63:======================================>               (82 + 33) / 115][Stage 63:=========================================>            (88 + 27) / 115][Stage 63:=============================================>        (97 + 18) / 115][Stage 63:=================================================>    (106 + 9) / 115][Stage 63:===================================================>  (110 + 5) / 115][Stage 63:====================================================> (112 + 3) / 115]                                                                                Time elapsed: 7.0635509 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIn dex = 128  OR  partitionIndex = 129 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429812792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:====================================>                 (78 + 37) / 115][Stage 64:=========================================>            (89 + 26) / 115][Stage 64:================================================>    (105 + 10) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:===============================>                      (68 + 48) / 116][Stage 65:======================================>               (82 + 34) / 116][Stage 65:===========================================>          (93 + 23) / 116][Stage 65:=================================================>    (107 + 9) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.011203206 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionIndex  = 118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45589902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (73 + 41) / 114][Stage 66:==========================================>           (89 + 25) / 114][Stage 66:==============================================>       (98 + 16) / 114][Stage 66:================================================>    (104 + 10) / 114][Stage 66:====================================================> (111 + 3) / 114][Stage 66:=====================================================>(113 + 1) / 114]                                                                                [Stage 67:====================================>                 (78 + 37) / 115][Stage 67:========================================>             (87 + 28) / 115][Stage 67:===============================================>     (102 + 13) / 115][Stage 67:===================================================>  (109 + 6) / 115][Stage 67:=====================================================>(113 + 2) / 115][Stage 67:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.795364025 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  par titionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 5 2  OR  partitionIndex = 53 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 22  OR  partitionIndex = 23  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 52  OR  partitionIndex = 53 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=================================>                    (70 + 44) / 114][Stage 68:=====================================>                (80 + 34) / 114][Stage 68:==========================================>           (89 + 25) / 114][Stage 68:===============================================>     (102 + 12) / 114][Stage 68:===================================================>  (108 + 6) / 114][Stage 68:=====================================================>(112 + 2) / 114]                                                                                [Stage 69:===================================>                  (76 + 39) / 115][Stage 69:======================================>               (83 + 32) / 115][Stage 69:=============================================>        (97 + 18) / 115][Stage 69:==================================================>   (107 + 8) / 115][Stage 69:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 8.70686709 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIn dex = 222  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41894141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===================================>                  (75 + 39) / 114][Stage 70:=======================================>              (84 + 30) / 114][Stage 70:=============================================>        (96 + 18) / 114][Stage 70:================================================>    (104 + 10) / 114][Stage 70:====================================================> (111 + 3) / 114]                                                                                [Stage 71:=====================================>                (79 + 36) / 115][Stage 71:=============================================>        (96 + 19) / 115][Stage 71:===============================================>     (104 + 11) / 115][Stage 71:==================================================>   (108 + 7) / 115][Stage 71:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.209341976 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110  OR   partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIn dex = 127  OR  partitionIndex = 128 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464950994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==========================>                           (60 + 62) / 122][Stage 72:=============================>                        (67 + 55) / 122][Stage 72:===================================>                  (80 + 42) / 122][Stage 72:===========================================>         (101 + 21) / 122][Stage 72:====================================================> (118 + 4) / 122]                                                                                [Stage 73:===========================>                          (62 + 61) / 123][Stage 73:============================>                         (66 + 57) / 123][Stage 73:====================================>                 (82 + 41) / 123][Stage 73:===========================================>         (102 + 21) / 123][Stage 73:===================================================>  (117 + 6) / 123][Stage 73:=====================================================>(121 + 2) / 123][Stage 73:======================================================(123 + 0) / 123]                                                                                Time elapsed: 4.319215309 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38182676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=====================================>                (79 + 36) / 115][Stage 74:========================================>             (87 + 28) / 115][Stage 74:============================================>         (95 + 20) / 115][Stage 74:================================================>    (105 + 10) / 115][Stage 74:==================================================>   (108 + 7) / 115]                                                                                [Stage 75:======================================>               (82 + 34) / 116][Stage 75:==========================================>           (92 + 24) / 116][Stage 75:==============================================>      (101 + 15) / 116][Stage 75:================================================>    (106 + 10) / 116][Stage 75:====================================================> (112 + 4) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.614424105 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR   partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIn dex = 144  OR  partitionIndex = 145 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 144  OR  partitionIndex = 145 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40953795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (71 + 46) / 117][Stage 76:===================================>                  (77 + 40) / 117][Stage 76:=========================================>            (89 + 28) / 117][Stage 76:=================================================>    (108 + 9) / 117][Stage 76:=====================================================>(116 + 1) / 117]                                                                                [Stage 77:================================>                     (72 + 46) / 118][Stage 77:==================================>                   (75 + 43) / 118][Stage 77:==========================================>           (93 + 25) / 118][Stage 77:===============================================>     (106 + 12) / 118][Stage 77:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.543750194 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIn dex = 173  OR  partitionIndex = 188 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480796921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (61 + 60) / 121][Stage 78:=================================>                    (76 + 45) / 121][Stage 78:=====================================>                (85 + 36) / 121][Stage 78:=================================================>    (112 + 9) / 121][Stage 78:=====================================================>(120 + 1) / 121]                                                                                [Stage 79:===========================>                          (62 + 60) / 122][Stage 79:==============================>                       (69 + 53) / 122][Stage 79:======================================>               (88 + 34) / 122][Stage 79:===========================================>         (100 + 22) / 122][Stage 79:==================================================>   (114 + 8) / 122][Stage 79:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.231266208 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR   partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIn dex = 217  OR  partitionIndex = 218 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417424244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:==============================>                       (66 + 49) / 115][Stage 80:====================================>                 (78 + 37) / 115][Stage 80:==========================================>           (91 + 24) / 115][Stage 80:==================================================>   (107 + 8) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:================================>                     (70 + 46) / 116][Stage 81:======================================>               (82 + 34) / 116][Stage 81:==========================================>           (91 + 25) / 116][Stage 81:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.79846984 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR   partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIn dex = 183  OR  partitionIndex = 192 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42099467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (70 + 44) / 114][Stage 82:========================================>             (86 + 28) / 114][Stage 82:=============================================>        (97 + 17) / 114][Stage 82:==================================================>   (107 + 7) / 114]                                                                                [Stage 83:======================================>               (83 + 32) / 115][Stage 83:============================================>         (95 + 20) / 115][Stage 83:===============================================>     (104 + 11) / 115][Stage 83:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 2.856358243 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex =  101  OR  partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410852251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (72 + 43) / 115][Stage 84:======================================>               (83 + 32) / 115][Stage 84:==========================================>           (90 + 25) / 115][Stage 84:==============================================>       (99 + 16) / 115][Stage 84:==================================================>   (108 + 7) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:================================>                     (70 + 46) / 116][Stage 85:=====================================>                (80 + 36) / 116][Stage 85:==========================================>           (91 + 25) / 116][Stage 85:===============================================>     (105 + 11) / 116][Stage 85:====================================================> (112 + 4) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.433435475 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex =  114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453160508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:================================>                     (69 + 46) / 115][Stage 86:=======================================>              (84 + 31) / 115][Stage 86:==============================================>      (101 + 14) / 115][Stage 86:=================================================>    (106 + 9) / 115][Stage 86:====================================================> (112 + 3) / 115]                                                                                [Stage 87:================================>                     (70 + 46) / 116][Stage 87:======================================>               (82 + 34) / 116][Stage 87:==============================================>       (99 + 17) / 116][Stage 87:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.967977661 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160  OR   partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIn dex = 177  OR  partitionIndex = 178 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIndex = 178 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417940903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==============================>                       (66 + 49) / 115][Stage 88:===================================>                  (76 + 39) / 115][Stage 88:===========================================>          (93 + 22) / 115][Stage 88:================================================>    (105 + 10) / 115][Stage 88:=====================================================>(113 + 2) / 115]                                                                                [Stage 89:================================>                     (69 + 47) / 116][Stage 89:======================================>               (83 + 33) / 116][Stage 89:==============================================>      (102 + 14) / 116][Stage 89:====================================================> (112 + 4) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.955302115 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 206  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456617394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (61 + 61) / 122][Stage 90:=============================>                        (66 + 56) / 122][Stage 90:====================================>                 (83 + 39) / 122][Stage 90:============================================>        (102 + 20) / 122][Stage 90:====================================================> (118 + 4) / 122][Stage 90:=====================================================>(121 + 1) / 122]                                                                                [Stage 91:===========================>                          (62 + 61) / 123][Stage 91:==============================>                       (69 + 54) / 123][Stage 91:====================================>                 (82 + 41) / 123][Stage 91:===========================================>         (102 + 21) / 123][Stage 91:================================================>    (113 + 10) / 123][Stage 91:===================================================>  (118 + 5) / 123][Stage 91:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.493775518 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  pa rtitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex  = 124  OR  partitionIndex = 125 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 124  OR  partitionIndex = 125 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397672225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==================================>                   (73 + 41) / 114][Stage 92:=======================================>              (84 + 30) / 114][Stage 92:=============================================>        (95 + 19) / 114][Stage 92:=================================================>    (105 + 9) / 114][Stage 92:==================================================>   (106 + 8) / 114][Stage 92:=====================================================>(112 + 2) / 114]                                                                                [Stage 93:========================================>             (86 + 29) / 115][Stage 93:============================================>         (95 + 20) / 115][Stage 93:===============================================>     (104 + 11) / 115][Stage 93:==================================================>   (108 + 7) / 115][Stage 93:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.398469076 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR   partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIn dex = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365946147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:========================================>             (86 + 29) / 115][Stage 94:============================================>         (94 + 21) / 115][Stage 94:==================================================>   (108 + 7) / 115][Stage 94:====================================================> (112 + 3) / 115]                                                                                [Stage 95:======================================>               (83 + 33) / 116][Stage 95:=========================================>            (89 + 27) / 116][Stage 95:=============================================>       (100 + 16) / 116][Stage 95:====================================================> (113 + 3) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.819231557 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIn dex = 214  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 214  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43372093 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:============================>                         (64 + 57) / 121][Stage 96:==================================>                   (77 + 44) / 121][Stage 96:=============================================>       (104 + 17) / 121][Stage 96:=====================================================>(120 + 1) / 121]                                                                                [Stage 97:===========================>                          (61 + 61) / 122][Stage 97:===============================>                      (72 + 50) / 122][Stage 97:======================================>               (88 + 34) / 122][Stage 97:==============================================>      (107 + 15) / 122][Stage 97:====================================================> (119 + 3) / 122][Stage 97:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.756708421 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40083477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:>                                                       (0 + 0) / 115][Stage 98:===============================>                      (67 + 48) / 115][Stage 98:========================================>             (87 + 28) / 115][Stage 98:==================================================>   (107 + 8) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:==================================>                   (75 + 41) / 116][Stage 99:============================================>         (95 + 21) / 116][Stage 99:=================================================>    (107 + 9) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.906374929 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  pa rtitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex  = 114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389546089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (73 + 41) / 114][Stage 100:======================================>              (83 + 31) / 114][Stage 100:===========================================>         (94 + 20) / 114][Stage 100:==============================================>     (102 + 12) / 114][Stage 100:==================================================>  (109 + 5) / 114][Stage 100:====================================================>(113 + 1) / 114]                                                                                [Stage 101:==================================>                  (74 + 41) / 115][Stage 101:========================================>            (88 + 27) / 115][Stage 101:=============================================>       (99 + 16) / 115][Stage 101:================================================>    (106 + 9) / 115][Stage 101:==================================================>  (110 + 5) / 115][Stage 101:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.297245037 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIn dex = 188  OR  partitionIndex = 189 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188  OR  partitionIndex = 189 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436252473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (61 + 61) / 122][Stage 102:==============================>                      (71 + 51) / 122][Stage 102:=========================================>           (96 + 26) / 122][Stage 102:===================================================> (118 + 4) / 122]                                                                                [Stage 103:===========================>                         (64 + 59) / 123][Stage 103:=============================>                       (69 + 54) / 123][Stage 103:====================================>                (84 + 39) / 123][Stage 103:=============================================>      (107 + 16) / 123][Stage 103:===================================================> (119 + 4) / 123]                                                                                Time elapsed: 4.172636204 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  pa rtitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionInde x = 116  OR  partitionIndex = 117 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427954598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:====================================>                (80 + 35) / 115][Stage 104:===========================================>         (95 + 20) / 115][Stage 104:===============================================>    (105 + 10) / 115][Stage 104:===================================================> (112 + 3) / 115]                                                                                [Stage 105:==================================>                  (76 + 40) / 116][Stage 105:==========================================>          (94 + 22) / 116][Stage 105:==============================================>     (104 + 12) / 116][Stage 105:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.089399192 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403803733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (67 + 48) / 115][Stage 106:===================================>                 (78 + 37) / 115][Stage 106:==========================================>          (93 + 22) / 115][Stage 106:===============================================>    (105 + 10) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:===============================>                     (70 + 46) / 116][Stage 107:=====================================>               (82 + 34) / 116][Stage 107:============================================>       (100 + 16) / 116][Stage 107:===================================================> (112 + 4) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.911085164 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 43  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42997566 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===========================>                         (63 + 58) / 121][Stage 108:=============================>                       (68 + 53) / 121][Stage 108:======================================>              (87 + 34) / 121][Stage 108:==============================================>     (109 + 12) / 121][Stage 108:====================================================>(120 + 1) / 121]                                                                                [Stage 109:==========================>                          (62 + 60) / 122][Stage 109:===============================>                     (72 + 50) / 122][Stage 109:=======================================>             (90 + 32) / 122][Stage 109:=================================================>   (113 + 9) / 122][Stage 109:==================================================>  (117 + 5) / 122][Stage 109:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.627260214 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420825983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:============================>                        (60 + 53) / 113][Stage 110:==============================>                      (66 + 47) / 113][Stage 110:======================================>              (82 + 31) / 113][Stage 110:==============================================>     (101 + 12) / 113]                                                                                [Stage 111:===========================>                         (60 + 54) / 114][Stage 111:================================>                    (70 + 44) / 114][Stage 111:======================================>              (83 + 31) / 114][Stage 111:================================================>    (105 + 9) / 114][Stage 111:====================================================>(112 + 2) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.696900661 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR   partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIn dex = 210  OR  partitionIndex = 211 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386985622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 45) / 117][Stage 112:==================================>                  (77 + 40) / 117][Stage 112:==========================================>          (94 + 23) / 117][Stage 112:==================================================>  (112 + 5) / 117]                                                                                [Stage 113:================================>                    (72 + 46) / 118][Stage 113:====================================>                (82 + 36) / 118][Stage 113:========================================>            (91 + 27) / 118][Stage 113:=============================================>      (104 + 14) / 118][Stage 113:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.408654114 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  par titionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 4 8  OR  partitionIndex = 49 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 48  OR  partitionIndex = 49 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434978028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:============================>                        (66 + 55) / 121][Stage 114:===================================>                 (82 + 39) / 121][Stage 114:===========================================>         (99 + 22) / 121][Stage 114:===================================================> (118 + 3) / 121]                                                                                [Stage 115:=============================>                       (67 + 55) / 122][Stage 115:===================================>                 (81 + 41) / 122][Stage 115:===========================================>        (101 + 21) / 122][Stage 115:==================================================>  (117 + 5) / 122][Stage 115:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.553673233 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  pa rtitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex =  60  OR  partitionIndex = 61 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372557214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (70 + 44) / 114][Stage 116:===================================>                 (76 + 38) / 114][Stage 116:========================================>            (88 + 26) / 114][Stage 116:===============================================>    (104 + 10) / 114][Stage 116:===================================================> (110 + 4) / 114][Stage 116:====================================================>(113 + 1) / 114]                                                                                [Stage 117:==================================>                  (75 + 40) / 115][Stage 117:======================================>              (83 + 32) / 115][Stage 117:===========================================>         (94 + 21) / 115][Stage 117:==============================================>     (102 + 13) / 115][Stage 117:===============================================>    (105 + 10) / 115][Stage 117:===================================================> (112 + 3) / 115][Stage 117:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 7.119034656 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  pa rtitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex =  80  OR  partitionIndex = 81 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374858938 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===================================>                 (77 + 37) / 114][Stage 118:=========================================>           (90 + 24) / 114][Stage 118:==============================================>     (102 + 12) / 114][Stage 118:==================================================>  (108 + 6) / 114]                                                                                [Stage 119:=====================================>               (82 + 33) / 115][Stage 119:============================================>        (97 + 18) / 115][Stage 119:===============================================>    (105 + 10) / 115][Stage 119:==================================================>  (109 + 6) / 115][Stage 119:===================================================> (112 + 3) / 115][Stage 119:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.604266313 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIn dex = 161  OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455887264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 60) / 121][Stage 120:=============================>                       (68 + 53) / 121][Stage 120:=====================================>               (85 + 36) / 121][Stage 120:===============================================>    (111 + 10) / 121][Stage 120:====================================================>(120 + 1) / 121]                                                                                [Stage 121:==========================>                          (62 + 60) / 122][Stage 121:=============================>                       (67 + 55) / 122][Stage 121:====================================>                (84 + 38) / 122][Stage 121:===========================================>        (102 + 20) / 122][Stage 121:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.604361929 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex =  94  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380755628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (71 + 46) / 117][Stage 122:=================================>                   (75 + 42) / 117][Stage 122:=======================================>             (87 + 30) / 117][Stage 122:==============================================>     (104 + 13) / 117][Stage 122:==================================================>  (112 + 5) / 117]                                                                                [Stage 123:=================================>                   (74 + 44) / 118][Stage 123:====================================>                (81 + 37) / 118][Stage 123:==========================================>          (95 + 23) / 118][Stage 123:===============================================>    (107 + 11) / 118][Stage 123:===================================================> (115 + 3) / 118][Stage 123:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.947939384 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378464683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=====================================>               (82 + 33) / 115][Stage 124:===========================================>         (94 + 21) / 115][Stage 124:==================================================>  (110 + 5) / 115]                                                                                [Stage 125:======================================>              (85 + 31) / 116][Stage 125:=============================================>      (102 + 14) / 116][Stage 125:===================================================> (112 + 4) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.607137002 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIn dex = 158  OR  partitionIndex = 159 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400577262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (66 + 49) / 115][Stage 126:=================================>                   (72 + 43) / 115][Stage 126:=======================================>             (86 + 29) / 115][Stage 126:=============================================>       (98 + 17) / 115][Stage 126:==================================================>  (109 + 6) / 115]                                                                                [Stage 127:==================================>                  (75 + 41) / 116][Stage 127:========================================>            (88 + 28) / 116][Stage 127:=============================================>       (99 + 17) / 116][Stage 127:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.940109219 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  pa rtitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex =  50  OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378688683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (82 + 32) / 114][Stage 128:===========================================>         (93 + 21) / 114][Stage 128:=============================================>      (100 + 14) / 114][Stage 128:=================================================>   (106 + 8) / 114][Stage 128:====================================================>(113 + 1) / 114]                                                                                [Stage 129:==================================>                  (74 + 41) / 115][Stage 129:======================================>              (84 + 31) / 115][Stage 129:========================================>            (88 + 27) / 115][Stage 129:===========================================>         (95 + 20) / 115][Stage 129:==============================================>     (103 + 12) / 115][Stage 129:==================================================>  (110 + 5) / 115][Stage 129:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 6.829671821 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIn dex = 236  OR  partitionIndex = 237 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430654875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 60) / 121][Stage 130:=============================>                       (68 + 53) / 121][Stage 130:=======================================>             (90 + 31) / 121][Stage 130:===============================================>    (111 + 10) / 121][Stage 130:====================================================>(120 + 1) / 121]                                                                                [Stage 131:===========================>                         (64 + 58) / 122][Stage 131:=================================>                   (77 + 45) / 122][Stage 131:=========================================>           (95 + 27) / 122][Stage 131:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 4.006057809 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  pa rtitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex =  112  OR  partitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 112  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41133388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:============================>                        (66 + 56) / 122][Stage 132:=================================>                   (76 + 46) / 122][Stage 132:=======================================>             (91 + 31) / 122][Stage 132:==============================================>     (109 + 13) / 122]                                                                                [Stage 133:==========================>                          (62 + 61) / 123][Stage 133:===============================>                     (74 + 49) / 123][Stage 133:===========================================>        (103 + 20) / 123][Stage 133:=================================================>   (116 + 7) / 123][Stage 133:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.492289939 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR   partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIn dex = 211  OR  partitionIndex = 224 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375020314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (71 + 46) / 117][Stage 134:=================================>                   (74 + 43) / 117][Stage 134:=========================================>           (91 + 26) / 117][Stage 134:=================================================>   (110 + 7) / 117][Stage 134:====================================================>(116 + 1) / 117]                                                                                [Stage 135:================================>                    (72 + 46) / 118][Stage 135:===================================>                 (80 + 38) / 118][Stage 135:=========================================>           (93 + 25) / 118][Stage 135:===============================================>    (108 + 10) / 118][Stage 135:===================================================> (115 + 3) / 118][Stage 135:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.421867489 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR   partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364097434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=======================================>             (85 + 29) / 114][Stage 136:=============================================>       (98 + 16) / 114][Stage 136:==============================================>     (103 + 11) / 114][Stage 136:===================================================> (111 + 3) / 114]                                                                                [Stage 137:===================================>                 (78 + 37) / 115][Stage 137:=========================================>           (89 + 26) / 115][Stage 137:=============================================>      (100 + 15) / 115][Stage 137:=================================================>   (108 + 7) / 115]                                                                                Time elapsed: 3.000081468 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411020238 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (60 + 62) / 122][Stage 138:============================>                        (65 + 57) / 122][Stage 138:====================================>                (84 + 38) / 122][Stage 138:=================================================>   (113 + 9) / 122][Stage 138:===================================================> (119 + 3) / 122]                                                                                [Stage 139:==========================>                          (62 + 61) / 123][Stage 139:============================>                        (66 + 57) / 123][Stage 139:==================================>                  (79 + 44) / 123][Stage 139:===========================================>        (102 + 21) / 123][Stage 139:==================================================>  (117 + 6) / 123][Stage 139:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.216052127 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 99  OR  partitionIndex =  114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386358893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (66 + 49) / 115][Stage 140:===================================>                 (77 + 38) / 115][Stage 140:============================================>        (96 + 19) / 115][Stage 140:================================================>    (106 + 9) / 115][Stage 140:==================================================>  (109 + 6) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:================================>                    (71 + 45) / 116][Stage 141:====================================>                (79 + 37) / 116][Stage 141:===========================================>         (95 + 21) / 116][Stage 141:===============================================>    (106 + 10) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.190367783 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex =  104  OR  partitionIndex = 105 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37942644 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (72 + 43) / 115][Stage 142:=========================================>           (91 + 24) / 115][Stage 142:===============================================>    (105 + 10) / 115][Stage 142:===================================================> (111 + 4) / 115]                                                                                [Stage 143:==================================>                  (75 + 41) / 116][Stage 143:==========================================>          (92 + 24) / 116][Stage 143:=================================================>   (109 + 7) / 116][Stage 143:===================================================> (113 + 3) / 116][Stage 143:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.029886431 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR   partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIn dex = 240  OR  partitionIndex = 241 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 240  OR  partitionIndex = 241 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413586781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 61) / 121][Stage 144:============================>                        (65 + 56) / 121][Stage 144:==================================>                  (78 + 43) / 121][Stage 144:==========================================>         (100 + 21) / 121][Stage 144:===================================================> (117 + 4) / 121]                                                                                [Stage 145:===========================>                         (63 + 59) / 122][Stage 145:=================================>                   (78 + 44) / 122][Stage 145:==========================================>         (100 + 22) / 122][Stage 145:=================================================>   (115 + 7) / 122][Stage 145:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.518982885 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR   partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIn dex = 248  OR  partitionIndex = 249 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39106292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==================================>                  (74 + 40) / 114][Stage 146:==========================================>          (91 + 23) / 114][Stage 146:=============================================>       (97 + 17) / 114][Stage 146:=================================================>   (107 + 7) / 114][Stage 146:====================================================>(113 + 1) / 114]                                                                                [Stage 147:===================================>                 (76 + 39) / 115][Stage 147:=========================================>           (89 + 26) / 115][Stage 147:============================================>        (97 + 18) / 115][Stage 147:=================================================>   (108 + 7) / 115][Stage 147:====================================================>(113 + 2) / 115][Stage 147:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.125123776 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide43;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=====================================>               (80 + 34) / 114][Stage 148:==========================================>          (91 + 23) / 114][Stage 148:==============================================>     (102 + 12) / 114][Stage 148:=================================================>   (106 + 8) / 114][Stage 148:====================================================>(113 + 1) / 114]                                                                                [Stage 149:====================================>                (79 + 36) / 115][Stage 149:==========================================>          (93 + 22) / 115][Stage 149:==============================================>     (102 + 13) / 115][Stage 149:=================================================>   (108 + 7) / 115][Stage 149:====================================================>(113 + 2) / 115][Stage 149:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.463867513 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR   partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIn dex = 147  OR  partitionIndex = 160 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382183663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (71 + 46) / 117][Stage 150:===================================>                 (78 + 39) / 117][Stage 150:==========================================>          (94 + 23) / 117][Stage 150:==================================================>  (112 + 5) / 117]                                                                                [Stage 151:=================================>                   (74 + 44) / 118][Stage 151:=======================================>             (89 + 29) / 118][Stage 151:=================================================>   (111 + 7) / 118][Stage 151:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.551244548 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26   OR  partitionIndex = 27 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361078225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===================================>                 (77 + 37) / 114][Stage 152:=========================================>           (89 + 25) / 114][Stage 152:===============================================>    (104 + 10) / 114][Stage 152:===================================================> (111 + 3) / 114]                                                                                [Stage 153:==================================>                  (74 + 41) / 115][Stage 153:======================================>              (84 + 31) / 115][Stage 153:===========================================>         (95 + 20) / 115][Stage 153:=================================================>   (107 + 8) / 115][Stage 153:=================================================>   (108 + 7) / 115][Stage 153:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.892089895 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  pa rtitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex =  62  OR  partitionIndex = 63 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide57;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=================================>                   (73 + 41) / 114][Stage 154:=======================================>             (86 + 28) / 114][Stage 154:=============================================>       (98 + 16) / 114][Stage 154:=================================================>   (107 + 7) / 114]                                                                                [Stage 155:=====================================>               (81 + 34) / 115][Stage 155:=========================================>           (90 + 25) / 115][Stage 155:=============================================>       (98 + 17) / 115][Stage 155:==================================================>  (110 + 5) / 115][Stage 155:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 6.353031754 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR   partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIn dex = 145  OR  partitionIndex = 146 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===================================>                 (77 + 37) / 114][Stage 156:===========================================>         (94 + 20) / 114][Stage 156:==============================================>     (101 + 13) / 114][Stage 156:=================================================>   (106 + 8) / 114]                                                                                [Stage 157:===================================>                 (78 + 37) / 115][Stage 157:=========================================>           (90 + 25) / 115][Stage 157:==============================================>     (102 + 13) / 115][Stage 157:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 2.835777556 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 241  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 241  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405681383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (62 + 59) / 121][Stage 158:================================>                    (74 + 47) / 121][Stage 158:======================================>              (88 + 33) / 121][Stage 158:============================================>       (104 + 17) / 121]                                                                                [Stage 159:==========================>                          (62 + 60) / 122][Stage 159:===============================>                     (72 + 50) / 122][Stage 159:======================================>              (88 + 34) / 122][Stage 159:===============================================>    (112 + 10) / 122][Stage 159:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.475875573 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR   partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIn dex = 184  OR  partitionIndex = 185 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363139927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (71 + 46) / 117][Stage 160:======================================>              (85 + 32) / 117][Stage 160:==============================================>     (105 + 12) / 117][Stage 160:==================================================>  (112 + 5) / 117]                                                                                [Stage 161:================================>                    (72 + 46) / 118][Stage 161:====================================>                (82 + 36) / 118][Stage 161:===========================================>         (97 + 21) / 118][Stage 161:================================================>    (109 + 9) / 118][Stage 161:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 4.056038943 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex =  56  OR  partitionIndex = 57 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56  OR  partitionIndex = 57 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419008446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (59 + 54) / 113][Stage 162:==============================>                      (66 + 47) / 113][Stage 162:======================================>              (83 + 30) / 113][Stage 162:==================================================>  (107 + 6) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:===========================>                         (60 + 54) / 114][Stage 163:==============================>                      (65 + 49) / 114][Stage 163:=================================>                   (73 + 41) / 114][Stage 163:==========================================>          (91 + 23) / 114][Stage 163:=================================================>   (107 + 7) / 114][Stage 163:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.194069883 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR   partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIn dex = 208  OR  partitionIndex = 209 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358895538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=====================================>               (80 + 34) / 114][Stage 164:=========================================>           (89 + 25) / 114][Stage 164:==============================================>     (102 + 12) / 114][Stage 164:====================================================>(112 + 2) / 114]                                                                                [Stage 165:======================================>              (83 + 32) / 115][Stage 165:==========================================>          (92 + 23) / 115][Stage 165:===============================================>    (104 + 11) / 115][Stage 165:===================================================> (111 + 4) / 115]                                                                                Time elapsed: 2.966904615 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR   partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIn dex = 245  OR  partitionIndex = 246 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413575295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 61) / 121][Stage 166:===============================>                     (71 + 50) / 121][Stage 166:=======================================>             (90 + 31) / 121][Stage 166:==============================================>     (109 + 12) / 121][Stage 166:===================================================> (118 + 3) / 121]                                                                                [Stage 167:==========================>                          (61 + 61) / 122][Stage 167:=============================>                       (69 + 53) / 122][Stage 167:=======================================>             (91 + 31) / 122][Stage 167:==============================================>     (110 + 12) / 122][Stage 167:====================================================>(120 + 2) / 122][Stage 167:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.493434508 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex =  114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide50;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 60) / 121][Stage 168:============================>                        (66 + 55) / 121][Stage 168:===================================>                 (80 + 41) / 121][Stage 168:==============================================>     (108 + 13) / 121][Stage 168:===================================================> (118 + 3) / 121]                                                                                [Stage 169:==========================>                          (62 + 60) / 122][Stage 169:=============================>                       (67 + 55) / 122][Stage 169:===================================>                 (81 + 41) / 122][Stage 169:==============================================>     (109 + 13) / 122][Stage 169:==================================================>  (117 + 5) / 122][Stage 169:====================================================>(120 + 2) / 122][Stage 169:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.592111974 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  par titionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 2 7  OR  partitionIndex = 40 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380317175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==================================>                  (75 + 40) / 115][Stage 170:======================================>              (83 + 32) / 115][Stage 170:=============================================>      (101 + 14) / 115][Stage 170:=================================================>   (108 + 7) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:===============================>                     (69 + 47) / 116][Stage 171:====================================>                (80 + 36) / 116][Stage 171:===========================================>         (96 + 20) / 116][Stage 171:=============================================>      (102 + 14) / 116][Stage 171:===============================================>    (105 + 11) / 116][Stage 171:================================================>    (107 + 9) / 116][Stage 171:=================================================>   (108 + 8) / 116][Stage 171:===================================================> (113 + 3) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.619531877 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex =  109  OR  partitionIndex = 124 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=================================>                   (73 + 42) / 115][Stage 172:=====================================>               (81 + 34) / 115][Stage 172:============================================>        (97 + 18) / 115][Stage 172:===================================================> (111 + 4) / 115]                                                                                [Stage 173:==============================>                      (67 + 49) / 116][Stage 173:===================================>                 (77 + 39) / 116][Stage 173:============================================>        (97 + 19) / 116][Stage 173:===================================================> (112 + 4) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.904178148 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 50   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360961019 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (72 + 42) / 114][Stage 174:=====================================>               (80 + 34) / 114][Stage 174:=============================================>       (98 + 16) / 114][Stage 174:==================================================>  (109 + 5) / 114][Stage 174:===================================================> (111 + 3) / 114][Stage 174:====================================================>(113 + 1) / 114]                                                                                [Stage 175:===================================>                 (78 + 37) / 115][Stage 175:========================================>            (87 + 28) / 115][Stage 175:============================================>        (97 + 18) / 115][Stage 175:==============================================>     (103 + 12) / 115][Stage 175:=================================================>   (108 + 7) / 115][Stage 175:===================================================> (111 + 4) / 115][Stage 175:===================================================> (112 + 3) / 115][Stage 175:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 8.625426757 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233  OR   partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427406957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (62 + 60) / 122][Stage 176:==============================>                      (71 + 51) / 122][Stage 176:====================================>                (85 + 37) / 122][Stage 176:=================================================>   (114 + 8) / 122]                                                                                [Stage 177:===========================>                         (63 + 60) / 123][Stage 177:=================================>                   (77 + 46) / 123][Stage 177:=======================================>             (92 + 31) / 123][Stage 177:==============================================>     (111 + 12) / 123][Stage 177:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 3.750748116 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex =  40  OR  partitionIndex = 41 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388909408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==============================>                      (67 + 48) / 115][Stage 178:==================================>                  (74 + 41) / 115][Stage 178:==========================================>          (93 + 22) / 115][Stage 178:=================================================>   (107 + 8) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:===============================>                     (69 + 47) / 116][Stage 179:===================================>                 (77 + 39) / 116][Stage 179:==========================================>          (93 + 23) / 116][Stage 179:=============================================>      (102 + 14) / 116][Stage 179:=================================================>   (109 + 7) / 116][Stage 179:===================================================> (113 + 3) / 116][Stage 179:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.840901327 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427037767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 61) / 122][Stage 180:============================>                        (65 + 57) / 122][Stage 180:====================================>                (85 + 37) / 122][Stage 180:===========================================>        (102 + 20) / 122][Stage 180:==================================================>  (117 + 5) / 122]                                                                                [Stage 181:==========================>                          (62 + 61) / 123][Stage 181:============================>                        (67 + 56) / 123][Stage 181:==================================>                  (79 + 44) / 123][Stage 181:============================================>       (105 + 18) / 123][Stage 181:===================================================> (119 + 4) / 123][Stage 181:====================================================>(121 + 2) / 123][Stage 181:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.949667194 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423278426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:============================>                        (65 + 56) / 121][Stage 182:==================================>                  (78 + 43) / 121][Stage 182:========================================>            (92 + 29) / 121][Stage 182:==================================================>  (116 + 5) / 121]                                                                                [Stage 183:============================>                        (65 + 57) / 122][Stage 183:==================================>                  (80 + 42) / 122][Stage 183:==========================================>         (100 + 22) / 122][Stage 183:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.79255774 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex =  118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368600819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 45) / 117][Stage 184:====================================>                (80 + 37) / 117][Stage 184:=============================================>      (102 + 15) / 117][Stage 184:===================================================> (113 + 4) / 117]                                                                                [Stage 185:================================>                    (73 + 45) / 118][Stage 185:====================================>                (81 + 37) / 118][Stage 185:============================================>        (98 + 20) / 118][Stage 185:=================================================>   (110 + 8) / 118]                                                                                Time elapsed: 3.421313533 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR   partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIn dex = 191  OR  partitionIndex = 200 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370016465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (71 + 46) / 117][Stage 186:=====================================>               (82 + 35) / 117][Stage 186:===========================================>         (97 + 20) / 117][Stage 186:===================================================> (113 + 4) / 117]                                                                                [Stage 187:================================>                    (73 + 45) / 118][Stage 187:=======================================>             (88 + 30) / 118][Stage 187:============================================>       (100 + 18) / 118][Stage 187:==============================================>     (106 + 12) / 118][Stage 187:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.438400889 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR   partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIn dex = 244  OR  partitionIndex = 245 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374843969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===============================>                     (69 + 46) / 115][Stage 188:======================================>              (83 + 32) / 115][Stage 188:===========================================>         (95 + 20) / 115][Stage 188:=================================================>   (108 + 7) / 115][Stage 188:====================================================>(113 + 2) / 115]                                                                                [Stage 189:====================================>                (80 + 36) / 116][Stage 189:==========================================>          (94 + 22) / 116][Stage 189:===============================================>    (106 + 10) / 116][Stage 189:==================================================>  (111 + 5) / 116][Stage 189:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.192592118 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIn dex = 201  OR  partitionIndex = 216 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405811289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (61 + 61) / 122][Stage 190:===========================>                         (64 + 58) / 122][Stage 190:=================================>                   (77 + 45) / 122][Stage 190:=========================================>           (96 + 26) / 122][Stage 190:=================================================>   (114 + 8) / 122]                                                                                [Stage 191:==========================>                          (62 + 61) / 123][Stage 191:=================================>                   (77 + 46) / 123][Stage 191:=========================================>           (97 + 26) / 123][Stage 191:==============================================>     (111 + 12) / 123][Stage 191:==================================================>  (117 + 6) / 123]                                                                                Time elapsed: 4.476135455 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 233  OR   partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412282601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (61 + 61) / 122][Stage 192:============================>                        (65 + 57) / 122][Stage 192:===================================>                 (82 + 40) / 122][Stage 192:=============================================>      (106 + 16) / 122][Stage 192:====================================================>(121 + 1) / 122]                                                                                [Stage 193:==========================>                          (62 + 61) / 123][Stage 193:==============================>                      (71 + 52) / 123][Stage 193:====================================>                (84 + 39) / 123][Stage 193:==========================================>         (100 + 23) / 123][Stage 193:==================================================>  (117 + 6) / 123][Stage 193:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.580906629 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR   partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIn dex = 192  OR  partitionIndex = 193 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407112552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 62) / 122][Stage 194:=============================>                       (69 + 53) / 122][Stage 194:=====================================>               (86 + 36) / 122][Stage 194:============================================>       (105 + 17) / 122][Stage 194:====================================================>(120 + 2) / 122]                                                                                [Stage 195:==========================>                          (61 + 62) / 123][Stage 195:============================>                        (67 + 56) / 123][Stage 195:=====================================>               (88 + 35) / 123][Stage 195:============================================>       (105 + 18) / 123]                                                                                Time elapsed: 3.945850707 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22   OR  partitionIndex = 23 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 23 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374598583 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==============================>                      (67 + 48) / 115][Stage 196:====================================>                (79 + 36) / 115][Stage 196:========================================>            (87 + 28) / 115][Stage 196:==============================================>     (102 + 13) / 115][Stage 196:===================================================> (112 + 3) / 115]                                                                                [Stage 197:===============================>                     (68 + 48) / 116][Stage 197:======================================>              (84 + 32) / 116][Stage 197:===========================================>         (96 + 20) / 116][Stage 197:=================================================>   (108 + 8) / 116][Stage 197:==================================================>  (110 + 6) / 116][Stage 197:==================================================>  (111 + 5) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.439268708 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 103  OR  partitionIndex = 1 18  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403758431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:======================================>              (83 + 32) / 115][Stage 198:=========================================>           (90 + 25) / 115][Stage 198:=============================================>      (100 + 15) / 115][Stage 198:===================================================> (112 + 3) / 115]                                                                                [Stage 199:=====================================>               (83 + 33) / 116][Stage 199:==========================================>          (93 + 23) / 116][Stage 199:===============================================>    (106 + 10) / 116][Stage 199:=================================================>   (109 + 7) / 116][Stage 199:==================================================>  (111 + 5) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.340151083 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  pa rtitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex =  31  OR  partitionIndex = 44 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418600706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (62 + 59) / 121][Stage 200:=================================>                   (76 + 45) / 121][Stage 200:======================================>              (87 + 34) / 121][Stage 200:===============================================>    (111 + 10) / 121]                                                                                [Stage 201:===========================>                         (63 + 59) / 122][Stage 201:================================>                    (75 + 47) / 122][Stage 201:========================================>            (93 + 29) / 122][Stage 201:===============================================>    (111 + 11) / 122][Stage 201:==================================================>  (116 + 6) / 122][Stage 201:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.631042648 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m56.987s
user	12m39.788s
sys	1m34.036s
