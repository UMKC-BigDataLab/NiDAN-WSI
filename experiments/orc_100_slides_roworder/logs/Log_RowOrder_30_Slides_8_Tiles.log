Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/29 21:43:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:43:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:43:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:43:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/29 21:43:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/29 21:43:48 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170529214337-0686).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.40671872 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:============>                                          (26 + 89) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:==========================>                            (56 + 60) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.571459813 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex =  41  OR  partitionIndex = 56 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 56 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.643366096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==============================>                        (63 + 51) / 114][Stage 2:=================================>                     (70 + 44) / 114][Stage 2:==================================>                    (71 + 43) / 114][Stage 2:====================================>                  (76 + 38) / 114][Stage 2:=========================================>             (85 + 29) / 114][Stage 2:===========================================>           (91 + 23) / 114][Stage 2:==============================================>        (96 + 18) / 114][Stage 2:==============================================>        (97 + 17) / 114][Stage 2:===============================================>      (100 + 14) / 114][Stage 2:================================================>     (102 + 12) / 114][Stage 2:===================================================>   (106 + 8) / 114][Stage 2:=====================================================> (111 + 3) / 114][Stage 2:======================================================>(113 + 1) / 114]                                                                                [Stage 3:==================================>                    (72 + 43) / 115][Stage 3:=====================================>                 (78 + 37) / 115][Stage 3:=======================================>               (82 + 33) / 115][Stage 3:==========================================>            (88 + 27) / 115][Stage 3:=============================================>         (95 + 20) / 115][Stage 3:===============================================>      (102 + 13) / 115][Stage 3:================================================>     (104 + 11) / 115][Stage 3:==================================================>    (106 + 9) / 115][Stage 3:===================================================>   (108 + 7) / 115][Stage 3:====================================================>  (110 + 5) / 115][Stage 3:=====================================================> (111 + 4) / 115][Stage 3:=====================================================> (112 + 3) / 115]                                                                                Time elapsed: 9.997326366 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 41  OR  pa rtitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.712819874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:============================>                          (58 + 55) / 113][Stage 4:=============================>                         (61 + 52) / 113][Stage 4:=================================>                     (69 + 44) / 113][Stage 4:====================================>                  (75 + 38) / 113][Stage 4:=============================================>         (93 + 20) / 113][Stage 4:================================================>     (101 + 12) / 113]                                                                                [Stage 5:============================>                          (59 + 55) / 114][Stage 5:=============================>                         (62 + 52) / 114][Stage 5:================================>                      (68 + 46) / 114][Stage 5:=====================================>                 (78 + 36) / 114][Stage 5:============================================>          (93 + 21) / 114][Stage 5:===================================================>   (107 + 7) / 114]                                                                                Time elapsed: 4.83667109 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 105  OR  p artitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionInd ex = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505554336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===================================>                   (75 + 40) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:===========================================>           (91 + 24) / 115][Stage 6:===============================================>      (101 + 14) / 115][Stage 6:=====================================================> (111 + 4) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:======================================>                (81 + 35) / 116][Stage 7:========================================>              (86 + 30) / 116][Stage 7:===========================================>           (92 + 24) / 116][Stage 7:================================================>     (104 + 12) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.840132396 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR   partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIn dex = 216  OR  partitionIndex = 217 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 216  OR  partitionIndex = 217 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=====================================>                 (79 + 36) / 115][Stage 8:========================================>              (84 + 31) / 115][Stage 8:============================================>          (92 + 23) / 115][Stage 8:==============================================>        (97 + 18) / 115][Stage 8:===================================================>   (107 + 8) / 115][Stage 8:=====================================================> (111 + 4) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:======================================>                (82 + 34) / 116][Stage 9:==========================================>            (90 + 26) / 116][Stage 9:=============================================>         (96 + 20) / 116][Stage 9:===============================================>      (103 + 13) / 116][Stage 9:=================================================>    (106 + 10) / 116][Stage 9:====================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.862213298 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 134  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 163  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 163  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:======================================>               (82 + 33) / 115][Stage 10:==========================================>           (91 + 24) / 115][Stage 10:===============================================>     (104 + 11) / 115][Stage 10:===================================================>  (110 + 5) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:======================================>               (83 + 33) / 116][Stage 11:============================================>         (96 + 20) / 116][Stage 11:===============================================>     (103 + 13) / 116][Stage 11:==================================================>   (109 + 7) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.50905722 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 43  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 43  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.593181838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (61 + 60) / 121][Stage 12:=============================>                        (67 + 54) / 121][Stage 12:==================================>                   (78 + 43) / 121][Stage 12:==========================================>           (96 + 25) / 121][Stage 12:===============================================>     (109 + 12) / 121][Stage 12:====================================================> (117 + 4) / 121]                                                                                [Stage 13:===========================>                          (62 + 60) / 122][Stage 13:================================>                     (74 + 48) / 122][Stage 13:=======================================>              (90 + 32) / 122][Stage 13:============================================>        (102 + 20) / 122][Stage 13:===================================================>  (116 + 6) / 122][Stage 13:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 5.006697516 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR   partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIn dex = 244  OR  partitionIndex = 245 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.593222498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (60 + 61) / 121][Stage 14:==============================>                       (68 + 53) / 121][Stage 14:====================================>                 (81 + 40) / 121][Stage 14:===========================================>         (100 + 21) / 121][Stage 14:=================================================>    (112 + 9) / 121][Stage 14:=====================================================>(120 + 1) / 121]                                                                                [Stage 15:===========================>                          (62 + 60) / 122][Stage 15:=============================>                        (67 + 55) / 122][Stage 15:====================================>                 (82 + 40) / 122][Stage 15:============================================>        (102 + 20) / 122][Stage 15:================================================>    (112 + 10) / 122][Stage 15:====================================================> (118 + 4) / 122][Stage 15:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.566591574 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIn dex = 225  OR  partitionIndex = 240 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 209  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.532666961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==================================>                   (72 + 42) / 114][Stage 16:=========================================>            (87 + 27) / 114][Stage 16:==============================================>       (98 + 16) / 114][Stage 16:=================================================>    (105 + 9) / 114][Stage 16:===================================================>  (109 + 5) / 114][Stage 16:=====================================================>(113 + 1) / 114]                                                                                [Stage 17:=====================================>                (79 + 36) / 115][Stage 17:============================================>         (94 + 21) / 115][Stage 17:===============================================>     (103 + 12) / 115][Stage 17:=================================================>    (106 + 9) / 115][Stage 17:===================================================>  (110 + 5) / 115]                                                                                Time elapsed: 3.787593403 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 206  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563499509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (61 + 60) / 121][Stage 18:===========================>                          (62 + 59) / 121][Stage 18:===============================>                      (70 + 51) / 121][Stage 18:=======================================>              (89 + 32) / 121][Stage 18:===============================================>     (109 + 12) / 121][Stage 18:====================================================> (117 + 4) / 121]                                                                                [Stage 19:===========================>                          (62 + 60) / 122][Stage 19:=================================>                    (75 + 47) / 122][Stage 19:========================================>             (92 + 30) / 122][Stage 19:============================================>        (103 + 19) / 122][Stage 19:===================================================>  (117 + 5) / 122][Stage 19:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.372809554 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 220  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 220  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535601061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (71 + 46) / 117][Stage 20:=========================================>            (90 + 27) / 117][Stage 20:===============================================>     (104 + 13) / 117][Stage 20:=====================================================>(115 + 2) / 117]                                                                                [Stage 21:================================>                     (72 + 46) / 118][Stage 21:====================================>                 (80 + 38) / 118][Stage 21:==========================================>           (93 + 25) / 118][Stage 21:============================================>        (100 + 18) / 118][Stage 21:==================================================>   (110 + 8) / 118][Stage 21:=====================================================>(116 + 2) / 118][Stage 21:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.192622682 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionIndex  = 118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467992903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:====================================>                 (76 + 38) / 114][Stage 22:========================================>             (85 + 29) / 114][Stage 22:==============================================>       (98 + 16) / 114][Stage 22:==================================================>   (106 + 8) / 114][Stage 22:====================================================> (110 + 4) / 114][Stage 22:=====================================================>(112 + 2) / 114][Stage 22:=====================================================>(113 + 1) / 114]                                                                                [Stage 23:=====================================>                (79 + 36) / 115][Stage 23:=========================================>            (88 + 27) / 115][Stage 23:==============================================>      (101 + 14) / 115][Stage 23:==================================================>   (108 + 7) / 115][Stage 23:=====================================================>(113 + 2) / 115][Stage 23:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 4.24017645 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563885648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 62) / 122][Stage 24:===========================>                          (63 + 59) / 122][Stage 24:================================>                     (74 + 48) / 122][Stage 24:==========================================>           (96 + 26) / 122][Stage 24:===============================================>     (110 + 12) / 122][Stage 24:==================================================>   (115 + 7) / 122][Stage 24:====================================================> (118 + 4) / 122]                                                                                [Stage 25:===========================>                          (63 + 60) / 123][Stage 25:===============================>                      (71 + 52) / 123][Stage 25:========================================>             (92 + 31) / 123][Stage 25:=============================================>       (105 + 18) / 123][Stage 25:===============================================>     (110 + 13) / 123][Stage 25:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 4.817128857 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86  OR  pa rtitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex  = 116  OR  partitionIndex = 117 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 116  OR  partitionIndex = 117 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473435063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (71 + 46) / 117][Stage 26:===================================>                  (77 + 40) / 117][Stage 26:=========================================>            (89 + 28) / 117][Stage 26:====================================================> (113 + 4) / 117]                                                                                [Stage 27:=================================>                    (74 + 44) / 118][Stage 27:====================================>                 (79 + 39) / 118][Stage 27:============================================>         (98 + 20) / 118][Stage 27:===================================================>  (112 + 6) / 118][Stage 27:====================================================> (115 + 3) / 118][Stage 27:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.956944649 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex =  122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.551996883 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 60) / 121][Stage 28:===============================>                      (70 + 51) / 121][Stage 28:====================================>                 (82 + 39) / 121][Stage 28:=============================================>       (104 + 17) / 121][Stage 28:=====================================================>(120 + 1) / 121]                                                                                [Stage 29:============================>                         (64 + 58) / 122][Stage 29:==================================>                   (78 + 44) / 122][Stage 29:===========================================>          (99 + 23) / 122][Stage 29:====================================================> (118 + 4) / 122][Stage 29:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.82385815 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  pa rtitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex =  83  OR  partitionIndex = 96 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449331556 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (71 + 46) / 117][Stage 30:=================================>                    (73 + 44) / 117][Stage 30:====================================>                 (80 + 37) / 117][Stage 30:============================================>         (96 + 21) / 117][Stage 30:===============================================>     (105 + 12) / 117]                                                                                [Stage 31:================================>                     (72 + 46) / 118][Stage 31:==================================>                   (75 + 43) / 118][Stage 31:=======================================>              (87 + 31) / 118][Stage 31:==============================================>      (103 + 15) / 118][Stage 31:==================================================>   (111 + 7) / 118][Stage 31:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.238996673 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 152  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 245  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 152  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 245  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512640452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===============================>                      (67 + 48) / 115][Stage 32:=====================================>                (80 + 35) / 115][Stage 32:============================================>         (95 + 20) / 115][Stage 32:==================================================>   (107 + 8) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:================================>                     (70 + 46) / 116][Stage 33:====================================>                 (78 + 38) / 116][Stage 33:===========================================>          (93 + 23) / 116][Stage 33:=================================================>    (107 + 9) / 116][Stage 33:==================================================>   (108 + 8) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.320720714 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 50   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521978414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:============================>                         (59 + 54) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:=====================================>                (79 + 34) / 113][Stage 34:=============================================>        (96 + 17) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:============================>                         (60 + 54) / 114][Stage 35:==============================>                       (65 + 49) / 114][Stage 35:====================================>                 (76 + 38) / 114][Stage 35:===========================================>          (91 + 23) / 114][Stage 35:===============================================>     (102 + 12) / 114][Stage 35:===================================================>  (108 + 6) / 114][Stage 35:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 5.200130513 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex =  100  OR  partitionIndex = 101 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434173611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (72 + 42) / 114][Stage 36:=======================================>              (84 + 30) / 114][Stage 36:==============================================>       (98 + 16) / 114][Stage 36:================================================>    (104 + 10) / 114][Stage 36:===================================================>  (108 + 6) / 114][Stage 36:=====================================================>(113 + 1) / 114]                                                                                [Stage 37:=================================>                    (72 + 43) / 115][Stage 37:========================================>             (86 + 29) / 115][Stage 37:=============================================>        (96 + 19) / 115][Stage 37:==================================================>   (107 + 8) / 115][Stage 37:=====================================================>(113 + 2) / 115][Stage 37:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.570653212 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIn dex = 237  OR  partitionIndex = 252 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237  OR  partitionIndex = 252 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471990461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=================================>                    (72 + 45) / 117][Stage 38:===================================>                  (76 + 41) / 117][Stage 38:=========================================>            (90 + 27) / 117][Stage 38:================================================>    (106 + 11) / 117]                                                                                [Stage 39:=================================>                    (73 + 45) / 118][Stage 39:=====================================>                (82 + 36) / 118][Stage 39:==========================================>           (93 + 25) / 118][Stage 39:=============================================>       (102 + 16) / 118][Stage 39:====================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.444081937 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 33  OR  par titionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 5 0  OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 48  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.626049079 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (61 + 61) / 122][Stage 40:==============================>                       (69 + 53) / 122][Stage 40:======================================>               (88 + 34) / 122][Stage 40:==============================================>      (108 + 14) / 122][Stage 40:=====================================================>(121 + 1) / 122]                                                                                [Stage 41:==========================>                           (61 + 62) / 123][Stage 41:===============================>                      (71 + 52) / 123][Stage 41:====================================>                 (84 + 39) / 123][Stage 41:=============================================>       (106 + 17) / 123][Stage 41:===================================================>  (118 + 5) / 123][Stage 41:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 3.727542926 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR   partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIn dex = 169  OR  partitionIndex = 184 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 184 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442660052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (71 + 46) / 117][Stage 42:==================================>                   (74 + 43) / 117][Stage 42:=========================================>            (89 + 28) / 117][Stage 42:=================================================>    (108 + 9) / 117]                                                                                [Stage 43:=================================>                    (73 + 45) / 118][Stage 43:====================================>                 (80 + 38) / 118][Stage 43:===========================================>          (95 + 23) / 118][Stage 43:===================================================>  (112 + 6) / 118][Stage 43:=====================================================>(116 + 2) / 118]                                                                                Time elapsed: 4.019897056 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 40  OR  pa rtitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex =  57  OR  partitionIndex = 58 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57  OR  partitionIndex = 58 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452606274 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (71 + 44) / 115][Stage 44:======================================>               (82 + 33) / 115][Stage 44:============================================>         (95 + 20) / 115][Stage 44:===============================================>     (104 + 11) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:====================================>                 (78 + 38) / 116][Stage 45:=========================================>            (89 + 27) / 116][Stage 45:============================================>         (95 + 21) / 116][Stage 45:==============================================>      (101 + 15) / 116][Stage 45:===================================================>  (111 + 5) / 116][Stage 45:====================================================> (113 + 3) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.639884483 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex =  118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445580152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (71 + 46) / 117][Stage 46:===================================>                  (76 + 41) / 117][Stage 46:==========================================>           (92 + 25) / 117][Stage 46:==================================================>   (109 + 8) / 117]                                                                                [Stage 47:=================================>                    (73 + 45) / 118][Stage 47:====================================>                 (80 + 38) / 118][Stage 47:===========================================>          (95 + 23) / 118][Stage 47:==================================================>   (110 + 8) / 118][Stage 47:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.720504652 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR   partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIn dex = 245  OR  partitionIndex = 246 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 1.169815033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (61 + 60) / 121][Stage 48:==============================>                       (69 + 52) / 121][Stage 48:=====================================>                (83 + 38) / 121][Stage 48:================================================>    (110 + 11) / 121][Stage 48:=====================================================>(120 + 1) / 121]                                                                                [Stage 49:===========================>                          (62 + 60) / 122][Stage 49:============================>                         (64 + 58) / 122][Stage 49:===================================>                  (80 + 42) / 122][Stage 49:=============================================>       (105 + 17) / 122][Stage 49:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.136750172 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  pa rtitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex =  101  OR  partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:>                                                       (0 + 0) / 121][Stage 50:===========================>                          (61 + 60) / 121][Stage 50:=============================>                        (67 + 54) / 121][Stage 50:======================================>               (87 + 34) / 121][Stage 50:==================================================>   (114 + 7) / 121][Stage 50:=====================================================>(120 + 1) / 121]                                                                                [Stage 51:===========================>                          (62 + 60) / 122][Stage 51:============================>                         (65 + 57) / 122][Stage 51:===================================>                  (80 + 42) / 122][Stage 51:============================================>        (102 + 20) / 122][Stage 51:==================================================>   (115 + 7) / 122][Stage 51:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.589256261 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR   partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIn dex = 185  OR  partitionIndex = 186 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409919022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (71 + 46) / 117][Stage 52:=================================>                    (73 + 44) / 117][Stage 52:=====================================>                (82 + 35) / 117][Stage 52:============================================>         (97 + 20) / 117][Stage 52:=====================================================>(116 + 1) / 117]                                                                                [Stage 53:================================>                     (72 + 46) / 118][Stage 53:==================================>                   (75 + 43) / 118][Stage 53:=======================================>              (86 + 32) / 118][Stage 53:==============================================>      (104 + 14) / 118][Stage 53:===================================================>  (113 + 5) / 118][Stage 53:====================================================> (114 + 4) / 118][Stage 53:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.888731243 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201  OR   partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIn dex = 218  OR  partitionIndex = 219 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402629599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (71 + 46) / 117][Stage 54:=================================>                    (72 + 45) / 117][Stage 54:=======================================>              (85 + 32) / 117][Stage 54:=============================================>       (101 + 16) / 117][Stage 54:=====================================================>(116 + 1) / 117]                                                                                [Stage 55:================================>                     (72 + 46) / 118][Stage 55:===================================>                  (77 + 41) / 118][Stage 55:==========================================>           (93 + 25) / 118][Stage 55:===============================================>     (106 + 12) / 118][Stage 55:=====================================================>(116 + 2) / 118][Stage 55:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.752673706 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  pa rtitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex =  73  OR  partitionIndex = 88 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 88 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399582378 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:========================================>             (86 + 29) / 115][Stage 56:=============================================>        (97 + 18) / 115][Stage 56:===================================================>  (109 + 6) / 115]                                                                                [Stage 57:=======================================>              (85 + 31) / 116][Stage 57:===========================================>          (93 + 23) / 116][Stage 57:==============================================>      (101 + 15) / 116][Stage 57:===================================================>  (111 + 5) / 116][Stage 57:====================================================> (112 + 4) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.119341813 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex  = 114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (80 + 35) / 115][Stage 58:========================================>             (86 + 29) / 115][Stage 58:==============================================>       (98 + 17) / 115][Stage 58:===================================================>  (110 + 5) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:=======================================>              (85 + 31) / 116][Stage 59:==============================================>       (99 + 17) / 116][Stage 59:==================================================>   (108 + 8) / 116][Stage 59:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.936634399 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 138  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 231  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 231  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (83 + 32) / 115][Stage 60:=============================================>        (97 + 18) / 115][Stage 60:=================================================>    (106 + 9) / 115][Stage 60:====================================================> (111 + 4) / 115]                                                                                [Stage 61:=======================================>              (85 + 31) / 116][Stage 61:============================================>         (96 + 20) / 116][Stage 61:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.784955041 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474258896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (61 + 61) / 122][Stage 62:==============================>                       (69 + 53) / 122][Stage 62:======================================>               (87 + 35) / 122][Stage 62:===============================================>     (109 + 13) / 122][Stage 62:====================================================> (119 + 3) / 122]                                                                                [Stage 63:===========================>                          (63 + 60) / 123][Stage 63:============================>                         (65 + 58) / 123][Stage 63:===================================>                  (81 + 42) / 123][Stage 63:==============================================>      (108 + 15) / 123][Stage 63:===================================================>  (117 + 6) / 123][Stage 63:===================================================>  (118 + 5) / 123]                                                                                Time elapsed: 4.63942189 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 142  OR   partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIn dex = 159  OR  partitionIndex = 172 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437562586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:===============================>                      (66 + 47) / 113][Stage 64:====================================>                 (77 + 36) / 113][Stage 64:==============================================>       (98 + 15) / 113][Stage 64:=====================================================>(111 + 2) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:============================>                         (60 + 54) / 114][Stage 65:==============================>                       (64 + 50) / 114][Stage 65:======================================>               (81 + 33) / 114][Stage 65:=============================================>        (96 + 18) / 114][Stage 65:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.817093467 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  part itionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 48   OR  partitionIndex = 49 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 48  OR  partitionIndex = 49 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395433535 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (71 + 46) / 117][Stage 66:====================================>                 (78 + 39) / 117][Stage 66:=========================================>            (90 + 27) / 117][Stage 66:=================================================>    (108 + 9) / 117]                                                                                [Stage 67:=================================>                    (74 + 44) / 118][Stage 67:======================================>               (85 + 33) / 118][Stage 67:===========================================>          (95 + 23) / 118][Stage 67:===================================================>  (112 + 6) / 118][Stage 67:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.412613266 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389417414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:====================================>                 (77 + 37) / 114][Stage 68:===========================================>          (91 + 23) / 114][Stage 68:==============================================>       (98 + 16) / 114][Stage 68:==============================================>      (101 + 13) / 114][Stage 68:=====================================================>(112 + 2) / 114][Stage 68:=====================================================>(113 + 1) / 114]                                                                                [Stage 69:=======================================>              (84 + 31) / 115][Stage 69:===========================================>          (92 + 23) / 115][Stage 69:===============================================>     (102 + 13) / 115][Stage 69:====================================================> (112 + 3) / 115][Stage 69:=====================================================>(113 + 2) / 115]                                                                                Time elapsed: 3.574011042 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 11 8  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399404016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (71 + 46) / 117][Stage 70:=====================================>                (81 + 36) / 117][Stage 70:=============================================>       (100 + 17) / 117][Stage 70:=====================================================>(115 + 2) / 117]                                                                                [Stage 71:================================>                     (72 + 46) / 118][Stage 71:==================================>                   (76 + 42) / 118][Stage 71:===========================================>          (95 + 23) / 118][Stage 71:================================================>    (108 + 10) / 118]                                                                                Time elapsed: 3.498502421 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR   partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413176419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (69 + 46) / 115][Stage 72:====================================>                 (78 + 37) / 115][Stage 72:===========================================>          (93 + 22) / 115][Stage 72:=================================================>    (106 + 9) / 115][Stage 72:====================================================> (111 + 4) / 115]                                                                                [Stage 73:==================================>                   (75 + 41) / 116][Stage 73:========================================>             (86 + 30) / 116][Stage 73:==============================================>      (102 + 14) / 116][Stage 73:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.96111311 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex =  109  OR  partitionIndex = 124 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 124 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362920487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (83 + 32) / 115][Stage 74:===========================================>          (92 + 23) / 115][Stage 74:===============================================>     (104 + 11) / 115][Stage 74:=====================================================>(113 + 2) / 115]                                                                                [Stage 75:======================================>               (82 + 34) / 116][Stage 75:===========================================>          (94 + 22) / 116][Stage 75:===============================================>     (103 + 13) / 116][Stage 75:=====================================================>(114 + 2) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.033627885 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=====================================>                (80 + 35) / 115][Stage 76:======================================>               (82 + 33) / 115][Stage 76:=============================================>        (97 + 18) / 115][Stage 76:===================================================>  (110 + 5) / 115]                                                                                [Stage 77:=======================================>              (85 + 31) / 116][Stage 77:===========================================>          (93 + 23) / 116][Stage 77:==============================================>      (102 + 14) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.777598561 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 92  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 121  OR  partitionIndex  = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 92  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383445771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==================================>                   (73 + 41) / 114][Stage 78:=========================================>            (87 + 27) / 114][Stage 78:============================================>         (94 + 20) / 114][Stage 78:================================================>    (104 + 10) / 114][Stage 78:===================================================>  (109 + 5) / 114]                                                                                [Stage 79:=========================================>            (88 + 27) / 115][Stage 79:=============================================>        (96 + 19) / 115][Stage 79:================================================>    (105 + 10) / 115][Stage 79:====================================================> (111 + 4) / 115][Stage 79:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.334630832 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR   partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIn dex = 155  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436712143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (62 + 60) / 122][Stage 80:==============================>                       (68 + 54) / 122][Stage 80:===========================================>          (98 + 24) / 122][Stage 80:================================================>    (112 + 10) / 122]                                                                                [Stage 81:==========================>                           (61 + 62) / 123][Stage 81:===============================>                      (71 + 52) / 123][Stage 81:====================================>                 (82 + 41) / 123][Stage 81:===========================================>         (100 + 23) / 123][Stage 81:==================================================>   (116 + 7) / 123][Stage 81:=====================================================>(121 + 2) / 123][Stage 81:=====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.931848467 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIn dex = 248  OR  partitionIndex = 249 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248  OR  partitionIndex = 249 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418545118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (72 + 42) / 114][Stage 82:=======================================>              (83 + 31) / 114][Stage 82:============================================>         (93 + 21) / 114][Stage 82:==================================================>   (106 + 8) / 114][Stage 82:====================================================> (111 + 3) / 114]                                                                                [Stage 83:====================================>                 (78 + 37) / 115][Stage 83:==========================================>           (90 + 25) / 115][Stage 83:===============================================>     (103 + 12) / 115][Stage 83:===================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.070828864 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 24  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex =  118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 24  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391568332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (71 + 43) / 114][Stage 84:=====================================>                (80 + 34) / 114][Stage 84:===========================================>          (92 + 22) / 114][Stage 84:==============================================>      (100 + 14) / 114][Stage 84:===================================================>  (108 + 6) / 114][Stage 84:=====================================================>(113 + 1) / 114]                                                                                [Stage 85:======================================>               (83 + 32) / 115][Stage 85:===========================================>          (93 + 22) / 115][Stage 85:===============================================>     (103 + 12) / 115][Stage 85:====================================================> (111 + 4) / 115][Stage 85:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.944308767 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 78  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex =  122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490289495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==========================>                           (60 + 62) / 122][Stage 86:===============================>                      (72 + 50) / 122][Stage 86:==========================================>           (95 + 27) / 122][Stage 86:==================================================>   (113 + 9) / 122][Stage 86:=====================================================>(121 + 1) / 122]                                                                                [Stage 87:===========================>                          (62 + 61) / 123][Stage 87:=============================>                        (68 + 55) / 123][Stage 87:====================================>                 (83 + 40) / 123][Stage 87:=============================================>       (105 + 18) / 123][Stage 87:====================================================> (120 + 3) / 123]                                                                                Time elapsed: 4.603389998 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26   OR  partitionIndex = 27 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396056652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==============================>                       (66 + 49) / 115][Stage 88:=====================================>                (79 + 36) / 115][Stage 88:=========================================>            (88 + 27) / 115][Stage 88:==============================================>      (101 + 14) / 115][Stage 88:===================================================>  (110 + 5) / 115][Stage 88:=====================================================>(113 + 2) / 115]                                                                                [Stage 89:==================================>                   (74 + 42) / 116][Stage 89:====================================>                 (79 + 37) / 116][Stage 89:==========================================>           (91 + 25) / 116][Stage 89:=============================================>        (98 + 18) / 116][Stage 89:==================================================>   (109 + 7) / 116][Stage 89:===================================================>  (111 + 5) / 116][Stage 89:====================================================> (113 + 3) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.757206348 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR   partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIn dex = 160  OR  partitionIndex = 161 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416310617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (70 + 45) / 115][Stage 90:======================================>               (81 + 34) / 115][Stage 90:=============================================>        (97 + 18) / 115][Stage 90:================================================>    (105 + 10) / 115][Stage 90:==================================================>   (108 + 7) / 115]                                                                                [Stage 91:=================================>                    (72 + 44) / 116][Stage 91:=========================================>            (89 + 27) / 116][Stage 91:=============================================>        (97 + 19) / 116][Stage 91:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.126083185 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR   partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIn dex = 145  OR  partitionIndex = 146 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409202195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===============================>                      (67 + 48) / 115][Stage 92:===================================>                  (75 + 40) / 115][Stage 92:=======================================>              (85 + 30) / 115][Stage 92:==============================================>       (99 + 16) / 115][Stage 92:================================================>    (105 + 10) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:===============================>                      (67 + 49) / 116][Stage 93:==================================>                   (75 + 41) / 116][Stage 93:========================================>             (86 + 30) / 116][Stage 93:==============================================>      (102 + 14) / 116][Stage 93:==================================================>   (108 + 8) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.274626438 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIn dex = 228  OR  partitionIndex = 229 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420343897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:==========================>                           (60 + 62) / 122][Stage 94:================================>                     (74 + 48) / 122][Stage 94:======================================>               (86 + 36) / 122][Stage 94:===============================================>     (109 + 13) / 122][Stage 94:====================================================> (119 + 3) / 122]                                                                                [Stage 95:===========================>                          (62 + 61) / 123][Stage 95:============================>                         (64 + 59) / 123][Stage 95:==================================>                   (79 + 44) / 123][Stage 95:============================================>        (104 + 19) / 123][Stage 95:====================================================> (119 + 4) / 123]                                                                                Time elapsed: 3.778879092 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR   partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIn dex = 184  OR  partitionIndex = 185 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 184  OR  partitionIndex = 185 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371101946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==================================>                   (72 + 42) / 114][Stage 96:=====================================>                (79 + 35) / 114][Stage 96:=========================================>            (87 + 27) / 114][Stage 96:=============================================>        (95 + 19) / 114][Stage 96:==================================================>   (107 + 7) / 114][Stage 96:=====================================================>(112 + 2) / 114][Stage 96:=====================================================>(113 + 1) / 114]                                                                                [Stage 97:=====================================>                (80 + 35) / 115][Stage 97:=========================================>            (88 + 27) / 115][Stage 97:===========================================>          (93 + 22) / 115][Stage 97:================================================>    (105 + 10) / 115][Stage 97:=====================================================>(114 + 1) / 115]                                                                                Time elapsed: 3.30631732 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  pa rtitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex =  112  OR  partitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 82  OR  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 112  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350999781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=====================================>                (79 + 36) / 115][Stage 98:======================================>               (83 + 32) / 115][Stage 98:==============================================>       (98 + 17) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:======================================>               (82 + 34) / 116][Stage 99:===========================================>          (94 + 22) / 116][Stage 99:================================================>    (106 + 10) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.868317258 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR   partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIn dex = 236  OR  partitionIndex = 237 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 223  OR  partitionIndex = 236  OR  partitionIndex = 237 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355339962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:====================================>                (80 + 35) / 115][Stage 100:=========================================>           (89 + 26) / 115][Stage 100:============================================>        (97 + 18) / 115][Stage 100:===============================================>    (104 + 11) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:======================================>              (84 + 32) / 116][Stage 101:=========================================>           (91 + 25) / 116][Stage 101:===============================================>    (105 + 11) / 116][Stage 101:==================================================>  (111 + 5) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.88596756 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 161  OR   partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 161  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 176  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417862015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (62 + 59) / 121][Stage 102:================================>                    (75 + 46) / 121][Stage 102:========================================>            (92 + 29) / 121][Stage 102:=================================================>   (114 + 7) / 121]                                                                                [Stage 103:==========================>                          (62 + 60) / 122][Stage 103:=============================>                       (67 + 55) / 122][Stage 103:=====================================>               (87 + 35) / 122][Stage 103:===============================================>    (111 + 11) / 122][Stage 103:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.489008215 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  pa rtitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex =  55  OR  partitionIndex = 64 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342101258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:====================================>                (80 + 35) / 115][Stage 104:=======================================>             (86 + 29) / 115][Stage 104:==============================================>     (103 + 12) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:=======================================>             (87 + 29) / 116][Stage 105:============================================>       (100 + 16) / 116][Stage 105:=================================================>   (109 + 7) / 116][Stage 105:==================================================>  (110 + 6) / 116][Stage 105:===================================================> (112 + 4) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.833025163 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  pa rtitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex  = 120  OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide22;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:========================================>            (87 + 28) / 115][Stage 106:=============================================>       (99 + 16) / 115][Stage 106:===================================================> (111 + 4) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:=====================================>               (81 + 35) / 116][Stage 107:==========================================>          (92 + 24) / 116][Stage 107:=================================================>   (108 + 8) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.763073805 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR   partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIn dex = 222  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 207  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 222  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393329649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (71 + 46) / 117][Stage 108:=================================>                   (75 + 42) / 117][Stage 108:===========================================>         (95 + 22) / 117][Stage 108:=================================================>   (110 + 7) / 117]                                                                                [Stage 109:================================>                    (73 + 45) / 118][Stage 109:====================================>                (82 + 36) / 118][Stage 109:=============================================>      (103 + 15) / 118][Stage 109:===================================================> (114 + 4) / 118][Stage 109:===================================================> (115 + 3) / 118]                                                                                Time elapsed: 3.567050844 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  pa rtitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex =  87  OR  partitionIndex = 100 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341545377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (82 + 33) / 115][Stage 110:=========================================>           (89 + 26) / 115][Stage 110:============================================>        (97 + 18) / 115][Stage 110:================================================>    (106 + 9) / 115]                                                                                [Stage 111:=====================================>               (83 + 33) / 116][Stage 111:===========================================>         (95 + 21) / 116][Stage 111:==============================================>     (104 + 12) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.840777378 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  pa rtitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionInde x = 116  OR  partitionIndex = 117 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3563375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:======================================>              (84 + 31) / 115][Stage 112:===========================================>         (94 + 21) / 115][Stage 112:================================================>    (106 + 9) / 115][Stage 112:===================================================> (112 + 3) / 115]                                                                                [Stage 113:=======================================>             (86 + 30) / 116][Stage 113:============================================>       (100 + 16) / 116][Stage 113:=================================================>   (109 + 7) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.98909147 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex =  64  OR  partitionIndex = 65 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410228272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 60) / 121][Stage 114:============================>                        (66 + 55) / 121][Stage 114:===================================>                 (80 + 41) / 121][Stage 114:==============================================>     (109 + 12) / 121][Stage 114:===================================================> (117 + 4) / 121]                                                                                [Stage 115:===========================>                         (63 + 59) / 122][Stage 115:================================>                    (74 + 48) / 122][Stage 115:========================================>            (93 + 29) / 122][Stage 115:=================================================>   (113 + 9) / 122][Stage 115:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.529957688 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  par titionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 4 8  OR  partitionIndex = 49 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 18  OR  partitionIndex = 19  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 34  OR  partitionIndex = 48  OR  partitionIndex = 49 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438658518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 61) / 122][Stage 116:==============================>                      (70 + 52) / 122][Stage 116:=======================================>             (90 + 32) / 122][Stage 116:=================================================>   (114 + 8) / 122]                                                                                [Stage 117:============================>                        (67 + 56) / 123][Stage 117:===============================>                     (74 + 49) / 123][Stage 117:======================================>              (90 + 33) / 123][Stage 117:=================================================>   (114 + 9) / 123][Stage 117:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.341828943 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 233  OR   partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIn dex = 250  OR  partitionIndex = 251 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 248  OR  partitionIndex = 249  OR  partitionIndex = 250  OR  partitionIndex = 251 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399539849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===============================>                     (68 + 47) / 115][Stage 118:====================================>                (80 + 35) / 115][Stage 118:==========================================>          (93 + 22) / 115][Stage 118:===============================================>    (105 + 10) / 115]                                                                                [Stage 119:==================================>                  (76 + 40) / 116][Stage 119:========================================>            (88 + 28) / 116][Stage 119:============================================>       (100 + 16) / 116][Stage 119:=================================================>   (109 + 7) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.959613477 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR   partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIn dex = 188  OR  partitionIndex = 189 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 188  OR  partitionIndex = 189 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342881256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:====================================>                (80 + 35) / 115][Stage 120:========================================>            (87 + 28) / 115][Stage 120:=============================================>      (101 + 14) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:======================================>              (85 + 31) / 116][Stage 121:============================================>        (97 + 19) / 116][Stage 121:================================================>    (107 + 9) / 116][Stage 121:===================================================> (113 + 3) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.930599488 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIn dex = 173  OR  partitionIndex = 188 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 157  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419866913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (59 + 54) / 113][Stage 122:==============================>                      (64 + 49) / 113][Stage 122:==================================>                  (74 + 39) / 113][Stage 122:==============================================>     (101 + 12) / 113][Stage 122:===================================================> (110 + 3) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:===========================>                         (60 + 54) / 114][Stage 123:===============================>                     (67 + 47) / 114][Stage 123:===================================>                 (77 + 37) / 114][Stage 123:============================================>        (96 + 18) / 114][Stage 123:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.615489238 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR   partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIn dex = 183  OR  partitionIndex = 192 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398378408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (68 + 47) / 115][Stage 124:======================================>              (83 + 32) / 115][Stage 124:===========================================>         (95 + 20) / 115][Stage 124:==============================================>     (102 + 13) / 115][Stage 124:====================================================>(113 + 2) / 115]                                                                                [Stage 125:==================================>                  (76 + 40) / 116][Stage 125:=========================================>           (91 + 25) / 116][Stage 125:=============================================>      (101 + 15) / 116][Stage 125:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.192583502 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 142  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 171  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366537221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==================================>                  (75 + 39) / 114][Stage 126:=========================================>           (89 + 25) / 114][Stage 126:=============================================>       (98 + 16) / 114][Stage 126:===============================================>    (104 + 10) / 114][Stage 126:===================================================> (111 + 3) / 114][Stage 126:====================================================>(113 + 1) / 114]                                                                                [Stage 127:======================================>              (83 + 32) / 115][Stage 127:===========================================>         (95 + 20) / 115][Stage 127:=================================================>   (107 + 8) / 115][Stage 127:==================================================>  (109 + 6) / 115]                                                                                Time elapsed: 3.298394223 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  pa rtitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex =  108  OR  partitionIndex = 109 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 108  OR  partitionIndex = 109 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335612013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=====================================>               (82 + 33) / 115][Stage 128:=========================================>           (90 + 25) / 115][Stage 128:===============================================>    (104 + 11) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:=====================================>               (83 + 33) / 116][Stage 129:=========================================>           (90 + 26) / 116][Stage 129:==============================================>     (103 + 13) / 116][Stage 129:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.715108033 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397544767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 60) / 121][Stage 130:============================>                        (66 + 55) / 121][Stage 130:====================================>                (83 + 38) / 121][Stage 130:===============================================>    (111 + 10) / 121][Stage 130:===================================================> (117 + 4) / 121]                                                                                [Stage 131:==========================>                          (62 + 60) / 122][Stage 131:============================>                        (66 + 56) / 122][Stage 131:==================================>                  (79 + 43) / 122][Stage 131:===========================================>        (103 + 19) / 122][Stage 131:===============================================>    (112 + 10) / 122][Stage 131:===================================================> (119 + 3) / 122][Stage 131:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.697820602 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408636108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 60) / 121][Stage 132:============================>                        (65 + 56) / 121][Stage 132:====================================>                (83 + 38) / 121][Stage 132:============================================>       (103 + 18) / 121][Stage 132:====================================================>(120 + 1) / 121]                                                                                [Stage 133:============================>                        (66 + 56) / 122][Stage 133:====================================>                (85 + 37) / 122][Stage 133:============================================>       (104 + 18) / 122][Stage 133:=================================================>   (113 + 9) / 122][Stage 133:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.24550494 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 212  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 241  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 212  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 241  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376588622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:>                                                      (0 + 0) / 115][Stage 134:==============================>                      (66 + 49) / 115][Stage 134:===================================>                 (78 + 37) / 115][Stage 134:============================================>        (96 + 19) / 115][Stage 134:=================================================>   (107 + 8) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:================================>                    (71 + 45) / 116][Stage 135:======================================>              (84 + 32) / 116][Stage 135:==========================================>          (93 + 23) / 116][Stage 135:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.856606238 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR   partitionIndex = 213  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIn dex = 229  OR  partitionIndex = 244 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 199  OR  partitionIndex = 213  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 244 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36753994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (71 + 46) / 117][Stage 136:===================================>                 (78 + 39) / 117][Stage 136:=======================================>             (87 + 30) / 117][Stage 136:==============================================>     (104 + 13) / 117][Stage 136:====================================================>(116 + 1) / 117]                                                                                [Stage 137:================================>                    (72 + 46) / 118][Stage 137:=================================>                   (74 + 44) / 118][Stage 137:=====================================>               (84 + 34) / 118][Stage 137:===========================================>         (96 + 22) / 118][Stage 137:===================================================> (115 + 3) / 118][Stage 137:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.753008628 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  pa rtitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex  = 120  OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (71 + 46) / 117][Stage 138:=================================>                   (74 + 43) / 117][Stage 138:======================================>              (84 + 33) / 117][Stage 138:============================================>       (100 + 17) / 117][Stage 138:==================================================>  (111 + 6) / 117][Stage 138:====================================================>(116 + 1) / 117]                                                                                [Stage 139:================================>                    (72 + 46) / 118][Stage 139:==================================>                  (77 + 41) / 118][Stage 139:=======================================>             (89 + 29) / 118][Stage 139:============================================>       (101 + 17) / 118][Stage 139:==================================================>  (113 + 5) / 118][Stage 139:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 4.572620121 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR   partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (71 + 46) / 117][Stage 140:================================>                    (72 + 45) / 117][Stage 140:======================================>              (85 + 32) / 117][Stage 140:===========================================>         (95 + 22) / 117][Stage 140:=================================================>   (110 + 7) / 117][Stage 140:====================================================>(115 + 2) / 117]                                                                                [Stage 141:================================>                    (72 + 46) / 118][Stage 141:==================================>                  (76 + 42) / 118][Stage 141:=====================================>               (83 + 35) / 118][Stage 141:===========================================>         (96 + 22) / 118][Stage 141:==================================================>  (112 + 6) / 118]                                                                                Time elapsed: 3.609662752 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  pa rtitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex =  40  OR  partitionIndex = 41 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 27  OR  partitionIndex = 40  OR  partitionIndex = 41 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350941435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===================================>                 (76 + 38) / 114][Stage 142:========================================>            (87 + 27) / 114][Stage 142:=============================================>       (98 + 16) / 114][Stage 142:=================================================>   (107 + 7) / 114][Stage 142:====================================================>(113 + 1) / 114]                                                                                [Stage 143:==================================>                  (75 + 40) / 115][Stage 143:=======================================>             (86 + 29) / 115][Stage 143:==========================================>          (93 + 22) / 115][Stage 143:=============================================>       (98 + 17) / 115][Stage 143:================================================>    (106 + 9) / 115][Stage 143:===================================================> (111 + 4) / 115][Stage 143:====================================================>(113 + 2) / 115][Stage 143:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 7.254945023 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIn dex = 178  OR  partitionIndex = 179 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 178  OR  partitionIndex = 179 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342025153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=======================================>             (85 + 30) / 115][Stage 144:============================================>        (96 + 19) / 115][Stage 144:==================================================>  (109 + 6) / 115][Stage 144:====================================================>(113 + 2) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:=====================================>               (82 + 34) / 116][Stage 145:==========================================>          (92 + 24) / 116][Stage 145:===============================================>    (106 + 10) / 116][Stage 145:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.92346484 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR   partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIn dex = 216  OR  partitionIndex = 217 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 216  OR  partitionIndex = 217 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400177005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (61 + 61) / 122][Stage 146:==============================>                      (71 + 51) / 122][Stage 146:========================================>            (93 + 29) / 122][Stage 146:==============================================>     (109 + 13) / 122][Stage 146:====================================================>(120 + 2) / 122]                                                                                [Stage 147:==========================>                          (61 + 62) / 123][Stage 147:==============================>                      (70 + 53) / 123][Stage 147:===================================>                 (82 + 41) / 123][Stage 147:=========================================>           (97 + 26) / 123][Stage 147:==================================================>  (118 + 5) / 123]                                                                                Time elapsed: 4.100886786 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  pa rtitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex =  113  OR  partitionIndex = 114 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 112  OR  partitionIndex = 113  OR  partitionIndex = 114 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343778773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=====================================>               (81 + 34) / 115][Stage 148:=========================================>           (89 + 26) / 115][Stage 148:=================================================>   (108 + 7) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:=====================================>               (83 + 33) / 116][Stage 149:==========================================>          (92 + 24) / 116][Stage 149:==============================================>     (103 + 13) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.483533302 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  pa rtitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex =  54  OR  partitionIndex = 55 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 52  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372262798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=================================>                   (71 + 43) / 114][Stage 150:=======================================>             (86 + 28) / 114][Stage 150:=============================================>      (100 + 14) / 114][Stage 150:================================================>    (105 + 9) / 114][Stage 150:==================================================>  (108 + 6) / 114][Stage 150:==================================================>  (109 + 5) / 114][Stage 150:===================================================> (110 + 4) / 114][Stage 150:===================================================> (111 + 3) / 114][Stage 150:====================================================>(113 + 1) / 114]                                                                                [Stage 151:===================================>                 (78 + 37) / 115][Stage 151:========================================>            (88 + 27) / 115][Stage 151:============================================>        (97 + 18) / 115][Stage 151:=============================================>      (101 + 14) / 115][Stage 151:===============================================>    (105 + 10) / 115][Stage 151:==================================================>  (110 + 5) / 115][Stage 151:====================================================>(113 + 2) / 115]                                                                                Time elapsed: 8.173143952 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR   partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIn dex = 208  OR  partitionIndex = 209 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413621246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:>                                                      (0 + 0) / 122][Stage 152:==========================>                          (61 + 61) / 122][Stage 152:=============================>                       (68 + 54) / 122][Stage 152:=====================================>               (87 + 35) / 122][Stage 152:=============================================>      (107 + 15) / 122][Stage 152:===================================================> (118 + 4) / 122][Stage 152:====================================================>(121 + 1) / 122]                                                                                [Stage 153:===========================>                         (64 + 59) / 123][Stage 153:=================================>                   (77 + 46) / 123][Stage 153:========================================>            (95 + 28) / 123][Stage 153:==============================================>     (111 + 12) / 123][Stage 153:====================================================>(122 + 1) / 123]                                                                                Time elapsed: 4.060934846 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  part itionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26   OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353492414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:====================================>                (79 + 35) / 114][Stage 154:=======================================>             (85 + 29) / 114][Stage 154:===========================================>         (94 + 20) / 114][Stage 154:=================================================>   (106 + 8) / 114][Stage 154:====================================================>(113 + 1) / 114]                                                                                [Stage 155:===================================>                 (76 + 39) / 115][Stage 155:========================================>            (88 + 27) / 115][Stage 155:============================================>        (96 + 19) / 115][Stage 155:=============================================>      (100 + 15) / 115][Stage 155:===============================================>    (105 + 10) / 115][Stage 155:==================================================>  (110 + 5) / 115][Stage 155:====================================================>(113 + 2) / 115][Stage 155:====================================================>(114 + 1) / 115]                                                                                Time elapsed: 6.823154115 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169  OR   partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405246544 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (61 + 60) / 121][Stage 156:============================>                        (65 + 56) / 121][Stage 156:==================================>                  (78 + 43) / 121][Stage 156:===========================================>        (102 + 19) / 121][Stage 156:===================================================> (117 + 4) / 121]                                                                                [Stage 157:===========================>                         (63 + 59) / 122][Stage 157:==============================>                      (71 + 51) / 122][Stage 157:==========================================>          (97 + 25) / 122][Stage 157:===================================================> (118 + 4) / 122][Stage 157:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.254529018 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  pa rtitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex =  30  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400949483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 61) / 121][Stage 158:=============================>                       (67 + 54) / 121][Stage 158:====================================>                (84 + 37) / 121][Stage 158:============================================>       (104 + 17) / 121][Stage 158:====================================================>(120 + 1) / 121]                                                                                [Stage 159:===========================>                         (63 + 59) / 122][Stage 159:=================================>                   (77 + 45) / 122][Stage 159:==========================================>         (100 + 22) / 122][Stage 159:===============================================>    (112 + 10) / 122][Stage 159:===================================================> (119 + 3) / 122][Stage 159:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.874178783 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR   partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIn dex = 216  OR  partitionIndex = 217 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 216  OR  partitionIndex = 217 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396221721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:>                                                      (0 + 0) / 121][Stage 160:===========================>                         (62 + 59) / 121][Stage 160:===============================>                     (71 + 50) / 121][Stage 160:===================================>                 (82 + 39) / 121][Stage 160:==========================================>          (98 + 23) / 121][Stage 160:===================================================> (117 + 4) / 121]                                                                                [Stage 161:==========================>                          (62 + 60) / 122][Stage 161:==============================>                      (70 + 52) / 122][Stage 161:======================================>              (89 + 33) / 122][Stage 161:===========================================>        (103 + 19) / 122][Stage 161:=================================================>   (114 + 8) / 122][Stage 161:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.553884752 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR   partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIn dex = 240  OR  partitionIndex = 241 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 240  OR  partitionIndex = 241 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365418355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (71 + 46) / 117][Stage 162:=================================>                   (73 + 44) / 117][Stage 162:=======================================>             (87 + 30) / 117][Stage 162:=============================================>      (103 + 14) / 117][Stage 162:==================================================>  (112 + 5) / 117]                                                                                [Stage 163:================================>                    (72 + 46) / 118][Stage 163:=====================================>               (84 + 34) / 118][Stage 163:============================================>       (102 + 16) / 118][Stage 163:==================================================>  (112 + 6) / 118][Stage 163:====================================================>(116 + 2) / 118]                                                                                Time elapsed: 3.418295077 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  pa rtitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex =  45  OR  partitionIndex = 60 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 60 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide29;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (72 + 45) / 117][Stage 164:=====================================>               (82 + 35) / 117][Stage 164:===========================================>         (97 + 20) / 117][Stage 164:==================================================>  (111 + 6) / 117][Stage 164:===================================================> (114 + 3) / 117]                                                                                [Stage 165:================================>                    (73 + 45) / 118][Stage 165:===================================>                 (80 + 38) / 118][Stage 165:=========================================>           (92 + 26) / 118][Stage 165:=================================================>   (111 + 7) / 118][Stage 165:===================================================> (114 + 4) / 118][Stage 165:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.990314871 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 99  OR  partitionIndex =  114  OR  partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 99  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470787835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 61) / 122][Stage 166:===========================>                         (64 + 58) / 122][Stage 166:==================================>                  (79 + 43) / 122][Stage 166:==========================================>          (97 + 25) / 122][Stage 166:====================================================>(120 + 2) / 122]                                                                                [Stage 167:============================>                        (66 + 57) / 123][Stage 167:==================================>                  (80 + 43) / 123][Stage 167:==========================================>         (101 + 22) / 123][Stage 167:===================================================> (119 + 4) / 123][Stage 167:====================================================>(121 + 2) / 123]                                                                                Time elapsed: 3.811372911 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR   partitionIndex = 198  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIn dex = 242  OR  partitionIndex = 243 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 242  OR  partitionIndex = 243 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336237548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:====================================>                (80 + 35) / 115][Stage 168:========================================>            (88 + 27) / 115][Stage 168:===============================================>    (104 + 11) / 115][Stage 168:==================================================>  (109 + 6) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=====================================>               (83 + 33) / 116][Stage 169:==========================================>          (93 + 23) / 116][Stage 169:==============================================>     (103 + 13) / 116][Stage 169:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.869420059 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210  OR   partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIn dex = 240  OR  partitionIndex = 241 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 224  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 240  OR  partitionIndex = 241 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402991501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 60) / 121][Stage 170:==============================>                      (70 + 51) / 121][Stage 170:=====================================>               (85 + 36) / 121][Stage 170:=============================================>      (105 + 16) / 121][Stage 170:===================================================> (118 + 3) / 121]                                                                                [Stage 171:============================>                        (66 + 56) / 122][Stage 171:=================================>                   (77 + 45) / 122][Stage 171:=======================================>             (90 + 32) / 122][Stage 171:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.371661938 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  pa rtitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57  OR  partitionIndex =  58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 56  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341503189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:======================================>              (83 + 32) / 115][Stage 172:=========================================>           (90 + 25) / 115][Stage 172:================================================>    (106 + 9) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:======================================>              (85 + 31) / 116][Stage 173:===========================================>         (95 + 21) / 116][Stage 173:==================================================>  (111 + 5) / 116][Stage 173:====================================================>(114 + 2) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.488168239 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR   partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIn dex = 209  OR  partitionIndex = 210 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 210 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386889237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==============================>                      (66 + 49) / 115][Stage 174:===================================>                 (76 + 39) / 115][Stage 174:=========================================>           (90 + 25) / 115][Stage 174:=================================================>   (107 + 8) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:================================>                    (72 + 44) / 116][Stage 175:=======================================>             (87 + 29) / 116][Stage 175:============================================>        (97 + 19) / 116][Stage 175:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.815718182 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR   partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIn dex = 246  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 244  OR  partitionIndex = 245  OR  partitionIndex = 246  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376682095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:>                                                      (0 + 0) / 117][Stage 176:================================>                    (71 + 46) / 117][Stage 176:==================================>                  (76 + 41) / 117][Stage 176:========================================>            (89 + 28) / 117][Stage 176:==============================================>     (105 + 12) / 117][Stage 176:====================================================>(115 + 2) / 117]                                                                                [Stage 177:================================>                    (72 + 46) / 118][Stage 177:===================================>                 (78 + 40) / 118][Stage 177:==========================================>          (94 + 24) / 118][Stage 177:=============================================>      (104 + 14) / 118][Stage 177:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.37198059 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR   partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIn dex = 154  OR  partitionIndex = 247 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 154  OR  partitionIndex = 247 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360178952 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==================================>                  (75 + 40) / 115][Stage 178:========================================>            (88 + 27) / 115][Stage 178:==============================================>     (103 + 12) / 115][Stage 178:===================================================> (111 + 4) / 115]                                                                                [Stage 179:==================================>                  (75 + 41) / 116][Stage 179:==========================================>          (93 + 23) / 116][Stage 179:==================================================>  (111 + 5) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.816580178 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 169  OR   partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIn dex = 186  OR  partitionIndex = 187 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367148893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==============================>                      (67 + 48) / 115][Stage 180:===================================>                 (77 + 38) / 115][Stage 180:========================================>            (88 + 27) / 115][Stage 180:=============================================>       (99 + 16) / 115][Stage 180:==================================================>  (109 + 6) / 115]                                                                                [Stage 181:=================================>                   (73 + 43) / 116][Stage 181:=======================================>             (86 + 30) / 116][Stage 181:===========================================>         (96 + 20) / 116][Stage 181:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.94257234 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR   partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIn dex = 248  OR  partitionIndex = 249 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 248  OR  partitionIndex = 249 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375077214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (71 + 46) / 117][Stage 182:====================================>                (81 + 36) / 117][Stage 182:============================================>        (98 + 19) / 117][Stage 182:===================================================> (113 + 4) / 117][Stage 182:====================================================>(116 + 1) / 117]                                                                                [Stage 183:================================>                    (72 + 46) / 118][Stage 183:==================================>                  (77 + 41) / 118][Stage 183:=======================================>             (89 + 29) / 118][Stage 183:=============================================>      (103 + 15) / 118][Stage 183:===================================================> (114 + 4) / 118][Stage 183:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.685772145 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  pa rtitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex =  65  OR  partitionIndex = 80 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 80 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355356849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (71 + 46) / 117][Stage 184:=================================>                   (73 + 44) / 117][Stage 184:========================================>            (89 + 28) / 117][Stage 184:===============================================>    (106 + 11) / 117][Stage 184:====================================================>(115 + 2) / 117]                                                                                [Stage 185:================================>                    (72 + 46) / 118][Stage 185:==================================>                  (76 + 42) / 118][Stage 185:======================================>              (86 + 32) / 118][Stage 185:============================================>       (101 + 17) / 118][Stage 185:===================================================> (114 + 4) / 118]                                                                                Time elapsed: 3.353707558 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62  OR  pa rtitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex =  88  OR  partitionIndex = 89 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 88  OR  partitionIndex = 89 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.328856265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:=========================================>           (89 + 26) / 115][Stage 186:===============================================>    (104 + 11) / 115]                                                                                [Stage 187:======================================>              (84 + 32) / 116][Stage 187:===========================================>         (95 + 21) / 116][Stage 187:===============================================>    (106 + 10) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.983887324 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionInde x = 122  OR  partitionIndex = 123 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide15;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (83 + 32) / 115][Stage 188:===========================================>         (94 + 21) / 115][Stage 188:===============================================>    (105 + 10) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:=====================================>               (81 + 35) / 116][Stage 189:===========================================>         (95 + 21) / 116][Stage 189:=================================================>   (108 + 8) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.601665827 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR   partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIn dex = 233  OR  partitionIndex = 248 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 203  OR  partitionIndex = 217  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 232  OR  partitionIndex = 233  OR  partitionIndex = 248 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368324392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:>                                                      (0 + 0) / 115][Stage 190:================================>                    (71 + 44) / 115][Stage 190:=====================================>               (81 + 34) / 115][Stage 190:==========================================>          (92 + 23) / 115][Stage 190:=================================================>   (108 + 7) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:==============================>                      (67 + 49) / 116][Stage 191:===================================>                 (77 + 39) / 116][Stage 191:==========================================>          (93 + 23) / 116][Stage 191:================================================>    (107 + 9) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.009542765 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR   partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIn dex = 126  OR  partitionIndex = 127 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374701253 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===============================>                     (68 + 47) / 115][Stage 192:====================================>                (79 + 36) / 115][Stage 192:========================================>            (88 + 27) / 115][Stage 192:==================================================>  (109 + 6) / 115]                                                                                [Stage 193:===================================>                 (77 + 39) / 116][Stage 193:==========================================>          (94 + 22) / 116][Stage 193:=================================================>   (108 + 8) / 116][Stage 193:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.817563245 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR   partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIn dex = 188  OR  partitionIndex = 189 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 143  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 172  OR  partitionIndex = 173  OR  partitionIndex = 188  OR  partitionIndex = 189 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437978385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (61 + 61) / 122][Stage 194:=============================>                       (67 + 55) / 122][Stage 194:=====================================>               (86 + 36) / 122][Stage 194:==============================================>     (109 + 13) / 122][Stage 194:====================================================>(120 + 2) / 122]                                                                                [Stage 195:============================>                        (65 + 58) / 123][Stage 195:===============================>                     (73 + 50) / 123][Stage 195:=====================================>               (88 + 35) / 123][Stage 195:==============================================>     (110 + 13) / 123][Stage 195:===================================================> (120 + 3) / 123]                                                                                Time elapsed: 5.410833684 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  part itionIndex = 6  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 35  OR  partitionIndex = 50   OR  partitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 35  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370370692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=================================>                   (73 + 44) / 117][Stage 196:=====================================>               (83 + 34) / 117][Stage 196:=============================================>      (102 + 15) / 117][Stage 196:===================================================> (113 + 4) / 117][Stage 196:====================================================>(116 + 1) / 117]                                                                                [Stage 197:=================================>                   (74 + 44) / 118][Stage 197:======================================>              (85 + 33) / 118][Stage 197:============================================>       (102 + 16) / 118][Stage 197:===============================================>    (108 + 10) / 118]                                                                                Time elapsed: 3.562948585 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR   partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIn dex = 150  OR  partitionIndex = 151 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 151 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide8;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (71 + 46) / 117][Stage 198:================================>                    (72 + 45) / 117][Stage 198:=====================================>               (82 + 35) / 117][Stage 198:============================================>        (99 + 18) / 117][Stage 198:===================================================> (114 + 3) / 117]                                                                                [Stage 199:=================================>                   (74 + 44) / 118][Stage 199:=====================================>               (84 + 34) / 118][Stage 199:============================================>       (102 + 16) / 118][Stage 199:==================================================>  (113 + 5) / 118][Stage 199:===================================================> (114 + 4) / 118][Stage 199:====================================================>(117 + 1) / 118]                                                                                Time elapsed: 3.834229734 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 101  OR  pa rtitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionInde x = 118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 101  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 116  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332525264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (82 + 33) / 115][Stage 200:==========================================>          (92 + 23) / 115][Stage 200:=================================================>   (108 + 7) / 115][Stage 200:===================================================> (111 + 4) / 115]                                                                                [Stage 201:======================================>              (84 + 32) / 116][Stage 201:==========================================>          (94 + 22) / 116][Stage 201:=============================================>      (102 + 14) / 116][Stage 201:=================================================>   (108 + 8) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.005895373 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/29 21:54:34 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:45616) dropped. RpcEnv already stopped.
17/05/29 21:54:34 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:45616) dropped. RpcEnv already stopped.

real	11m16.961s
user	12m11.240s
sys	1m22.020s
