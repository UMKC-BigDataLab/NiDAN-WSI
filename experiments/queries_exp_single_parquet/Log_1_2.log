Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/04/24 10:52:32 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 10:52:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 10:52:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 10:52:47 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/04/24 10:52:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 10:53:00 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170424105249-0079).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> //spark-shell --master spark://ctl:7077 --driver-memory 28G  --executor-memory 28G  --executor-cores  8  --num-executors 16  --conf spark.io.compression.codec=lzf  --conf spark.akka.frameSize=1024  --conf spark .driver.maxResultSize=2g

scala> 

scala> 

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadSqlContext = "#LOAD_SQL_CONTEXT "
loadSqlContext: String = "#LOAD_SQL_CONTEXT "

scala> val dataSource = "/nidan/parquet/Slides-uncompressed-256-ZINDEX.prqt"
dataSource: String = /nidan/parquet/Slides-uncompressed-256-ZINDEX.prqt

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Unit = <function1>

scala> 

scala> val queries = List(
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 a nd imageId = '1.svs'",1),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 a nd imageId = '1.svs'",2),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 a nd imageId = '1.svs'",4),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 a nd imageId = '1.svs'",8)
     | )
queries: List[(String, Int)] = List((SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs',1), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs',2), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs',4), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs',8))

scala> 

scala> 

scala> val sqlContext = show_timing{new org.apache.spark.sql.SQLContext(sc)}
warning: there was one deprecation warning; re-run with -deprecation for details
Time elapsed: 0.001322608 seconds
sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@664217a8

scala> val pf = show_timing{sqlContext.read.parquet(dataSource)}
Time elapsed: 6.823833093 seconds
pf: org.apache.spark.sql.DataFrame = [imageId: string, imageLevel: int ... 8 more fields]

scala> show_timing{pf.createOrReplaceTempView("data")}
Time elapsed: 0.75250474 seconds

scala> 

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (byt es, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 1:>                                                      (0 + 112) / 115][Stage 1:==>                                                    (5 + 110) / 115][Stage 1:===>                                                   (8 + 107) / 115][Stage 1:====>                                                  (9 + 106) / 115][Stage 1:====>                                                 (10 + 105) / 115][Stage 1:=====>                                                (11 + 104) / 115][Stage 1:===========>                                           (25 + 90) / 115][Stage 1:===============================================>      (102 + 13) / 115][Stage 1:=====================================================> (112 + 3) / 115][Stage 1:======================================================>(113 + 2) / 115][Stage 1:======================================================>(114 + 1) / 115]                                                                                [Stage 2:====>                                                 (10 + 106) / 116][Stage 2:============================>                          (61 + 55) / 116][Stage 2:===============================================>      (101 + 15) / 116][Stage 2:====================================================>  (110 + 6) / 116][Stage 2:====================================================>  (111 + 5) / 116][Stage 2:=====================================================> (112 + 4) / 116][Stage 2:=====================================================> (113 + 3) / 116][Stage 2:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 11.460897813 seconds
res1: Int = 0

scala> 

scala> for (query <- queries){
     | println(s">> Running query: ${query._1}")
     | show_timing{sqlContext.sql(query._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, i ndex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
     | }
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs'
[Stage 3:==============>                                        (30 + 85) / 115][Stage 3:========================================>              (85 + 30) / 115][Stage 3:===================================================>   (108 + 7) / 115][Stage 3:====================================================>  (110 + 5) / 115][Stage 3:=====================================================> (111 + 4) / 115][Stage 3:=====================================================> (112 + 3) / 115][Stage 3:======================================================>(113 + 2) / 115]                                                                                [Stage 4:====================>                                  (44 + 72) / 116][Stage 4:==========================================>            (90 + 26) / 116][Stage 4:===================================================>   (108 + 8) / 116][Stage 4:====================================================>  (110 + 6) / 116][Stage 4:====================================================>  (111 + 5) / 116][Stage 4:=====================================================> (112 + 4) / 116][Stage 4:======================================================>(114 + 2) / 116][Stage 4:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.483555515 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs'
[Stage 5:===>                                                   (8 + 107) / 115][Stage 5:======================>                                (46 + 69) / 115][Stage 5:=============================================>         (95 + 20) / 115][Stage 5:====================================================>  (109 + 6) / 115][Stage 5:=====================================================> (111 + 4) / 115][Stage 5:=====================================================> (112 + 3) / 115][Stage 5:======================================================>(114 + 1) / 115]                                                                                [Stage 6:===================>                                   (42 + 74) / 116][Stage 6:==========================================>            (89 + 27) / 116][Stage 6:===============================================>      (102 + 14) / 116][Stage 6:====================================================>  (110 + 6) / 116][Stage 6:=====================================================> (113 + 3) / 116][Stage 6:======================================================>(114 + 2) / 116][Stage 6:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.309892194 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs'
[Stage 7:=======>                                              (15 + 100) / 115][Stage 7:=======================================>               (82 + 33) / 115][Stage 7:================================================>     (103 + 12) / 115][Stage 7:=====================================================> (111 + 4) / 115][Stage 7:=====================================================> (112 + 3) / 115][Stage 7:======================================================>(113 + 2) / 115]                                                                                [Stage 8:==================================>                    (73 + 43) / 116][Stage 8:===============================================>      (102 + 14) / 116][Stage 8:====================================================>  (110 + 6) / 116][Stage 8:=====================================================> (112 + 4) / 116][Stage 8:=====================================================> (113 + 3) / 116][Stage 8:======================================================>(114 + 2) / 116][Stage 8:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.39294183 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs'
[Stage 9:=================>                                     (37 + 78) / 115][Stage 9:==============================================>        (98 + 17) / 115][Stage 9:================================================>     (104 + 11) / 115][Stage 9:====================================================>  (110 + 5) / 115][Stage 9:======================================================>(113 + 2) / 115]                                                                                [Stage 10:=======================================>              (85 + 31) / 116][Stage 10:=============================================>       (100 + 16) / 116][Stage 10:===================================================>  (110 + 6) / 116][Stage 10:===================================================>  (111 + 5) / 116][Stage 10:====================================================> (113 + 3) / 116][Stage 10:=====================================================>(114 + 2) / 116][Stage 10:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.857302819 seconds

scala> 

scala> 

scala> :quit
17/04/24 10:54:00 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
11.2 G  /nidan/parquet/Slides-uncompressed-256-ZINDEX.prqt
