Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/04/24 11:12:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 11:12:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 11:12:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 11:12:50 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/04/24 11:12:52 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/24 11:13:03 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170424111252-0086).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> //spark-shell --master spark://ctl:7077 --driver-memory 28G  --executor-memory 28G  --executor-cores  8  --num-executors 16  --conf spark.io.compression.codec=lzf  --conf spark.akka.frameSize=1024  --conf spark .driver.maxResultSize=2g

scala> 

scala> 

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadSqlContext = "#LOAD_SQL_CONTEXT "
loadSqlContext: String = "#LOAD_SQL_CONTEXT "

scala> val dataSource = "/nidan/parquet/Slides-uncompressed-256-ZINDEX.prqt"
dataSource: String = /nidan/parquet/Slides-uncompressed-256-ZINDEX.prqt

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Unit = <function1>

scala> 

scala> val queries = List(
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 a nd imageId = '1.svs'",1),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 a nd imageId = '1.svs'",2),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 a nd imageId = '1.svs'",4),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 a nd imageId = '1.svs'",8)
     | )
queries: List[(String, Int)] = List((SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs',1), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs',2), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs',4), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs',8))

scala> 

scala> 

scala> val sqlContext = show_timing{new org.apache.spark.sql.SQLContext(sc)}
warning: there was one deprecation warning; re-run with -deprecation for details
Time elapsed: 0.001263987 seconds
sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@664217a8

scala> val pf = show_timing{sqlContext.read.parquet(dataSource)}
Time elapsed: 7.318803463 seconds
pf: org.apache.spark.sql.DataFrame = [imageId: string, imageLevel: int ... 8 more fields]

scala> show_timing{pf.createOrReplaceTempView("data")}
Time elapsed: 0.759583531 seconds

scala> 

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (byt es, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 1:>                                                      (0 + 112) / 343][Stage 1:>                                                      (5 + 112) / 343][Stage 1:=>                                                     (8 + 112) / 343][Stage 1:=>                                                    (10 + 112) / 343][Stage 1:=>                                                    (11 + 112) / 343][Stage 1:=>                                                    (12 + 112) / 343][Stage 1:==>                                                   (13 + 112) / 343][Stage 1:==>                                                   (15 + 112) / 343][Stage 1:====>                                                 (27 + 112) / 343][Stage 1:====>                                                 (28 + 112) / 343][Stage 1:=======>                                              (47 + 112) / 343][Stage 1:=============>                                        (85 + 112) / 343][Stage 1:=================>                                   (116 + 112) / 343][Stage 1:====================>                                (135 + 112) / 343][Stage 1:=======================>                             (149 + 112) / 343][Stage 1:========================>                            (161 + 112) / 343][Stage 1:============================>                        (182 + 112) / 343][Stage 1:================================>                    (208 + 112) / 343][Stage 1:====================================>                (238 + 105) / 343][Stage 1:==========================================>           (267 + 76) / 343][Stage 1:==============================================>       (296 + 47) / 343][Stage 1:=================================================>    (315 + 28) / 343][Stage 1:==================================================>   (321 + 22) / 343][Stage 1:====================================================> (332 + 11) / 343][Stage 1:======================================================>(337 + 6) / 343][Stage 1:======================================================>(340 + 3) / 343][Stage 1:======================================================>(342 + 1) / 343]                                                                                [Stage 2:====>                                                 (30 + 112) / 344][Stage 2:=======>                                              (49 + 112) / 344][Stage 2:==========>                                           (70 + 112) / 344][Stage 2:=============>                                        (87 + 112) / 344][Stage 2:===============>                                     (100 + 112) / 344][Stage 2:=================>                                   (114 + 112) / 344][Stage 2:=====================>                               (137 + 112) / 344][Stage 2:========================>                            (157 + 112) / 344][Stage 2:===========================>                         (177 + 112) / 344][Stage 2:===============================>                     (205 + 112) / 344][Stage 2:===================================>                 (230 + 112) / 344][Stage 2:=========================================>            (262 + 82) / 344][Stage 2:=============================================>        (287 + 57) / 344][Stage 2:=================================================>    (318 + 26) / 344][Stage 2:===================================================>  (328 + 16) / 344][Stage 2:=====================================================> (336 + 8) / 344][Stage 2:======================================================>(340 + 4) / 344][Stage 2:======================================================>(341 + 3) / 344][Stage 2:======================================================>(343 + 1) / 344]                                                                                Time elapsed: 18.176992559 seconds
res1: Int = 0

scala> 

scala> for (query <- queries){
     | println(s">> Running query: ${query._1}")
     | show_timing{sqlContext.sql(query._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, i ndex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
     | }
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs'
[Stage 3:===>                                                  (20 + 112) / 343][Stage 3:======>                                               (44 + 112) / 343][Stage 3:=========>                                            (63 + 112) / 343][Stage 3:============>                                         (77 + 112) / 343][Stage 3:===============>                                     (100 + 112) / 343][Stage 3:==================>                                  (122 + 112) / 343][Stage 3:======================>                              (144 + 112) / 343][Stage 3:==========================>                          (174 + 112) / 343][Stage 3:=============================>                       (191 + 112) / 343][Stage 3:==================================>                  (222 + 112) / 343][Stage 3:========================================>             (260 + 83) / 343][Stage 3:============================================>         (285 + 58) / 343][Stage 3:===============================================>      (303 + 40) / 343][Stage 3:==================================================>   (323 + 20) / 343][Stage 3:=====================================================> (334 + 9) / 343][Stage 3:======================================================>(337 + 6) / 343][Stage 3:======================================================>(339 + 4) / 343][Stage 3:======================================================>(340 + 3) / 343][Stage 3:======================================================>(341 + 2) / 343][Stage 3:======================================================>(342 + 1) / 343]                                                                                [Stage 4:===>                                                  (20 + 112) / 344][Stage 4:========>                                             (51 + 112) / 344][Stage 4:===========>                                          (71 + 112) / 344][Stage 4:==============>                                       (94 + 112) / 344][Stage 4:=================>                                   (116 + 112) / 344][Stage 4:=====================>                               (138 + 112) / 344][Stage 4:========================>                            (156 + 112) / 344][Stage 4:=============================>                       (190 + 112) / 344][Stage 4:================================>                    (214 + 112) / 344][Stage 4:=======================================>              (254 + 90) / 344][Stage 4:===========================================>          (279 + 65) / 344][Stage 4:================================================>     (308 + 36) / 344][Stage 4:==================================================>   (322 + 22) / 344][Stage 4:====================================================> (334 + 10) / 344][Stage 4:=====================================================> (335 + 9) / 344][Stage 4:======================================================>(339 + 5) / 344][Stage 4:======================================================>(341 + 3) / 344][Stage 4:======================================================>(342 + 2) / 344][Stage 4:======================================================>(343 + 1) / 344]                                                                                Time elapsed: 10.710839783 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs'
[Stage 5:==>                                                   (19 + 112) / 343][Stage 5:=======>                                              (46 + 112) / 343][Stage 5:==========>                                           (66 + 112) / 343][Stage 5:=============>                                        (88 + 112) / 343][Stage 5:================>                                    (110 + 112) / 343][Stage 5:=====================>                               (138 + 112) / 343][Stage 5:=========================>                           (164 + 113) / 343][Stage 5:============================>                        (184 + 112) / 343][Stage 5:================================>                    (211 + 112) / 343][Stage 5:=======================================>              (249 + 94) / 343][Stage 5:===========================================>          (276 + 67) / 343][Stage 5:==============================================>       (298 + 45) / 343][Stage 5:==================================================>   (322 + 21) / 343][Stage 5:====================================================> (333 + 10) / 343][Stage 5:=====================================================> (335 + 8) / 343][Stage 5:======================================================>(338 + 5) / 343][Stage 5:======================================================>(339 + 4) / 343][Stage 5:======================================================>(340 + 3) / 343][Stage 5:======================================================>(341 + 2) / 343][Stage 5:======================================================>(342 + 1) / 343]                                                                                [Stage 6:=======>                                              (49 + 112) / 344][Stage 6:===========>                                          (71 + 112) / 344][Stage 6:==============>                                       (93 + 112) / 344][Stage 6:==================>                                  (119 + 112) / 344][Stage 6:======================>                              (148 + 112) / 344][Stage 6:===========================>                         (176 + 112) / 344][Stage 6:==============================>                      (200 + 112) / 344][Stage 6:===================================>                 (233 + 111) / 344][Stage 6:=========================================>            (264 + 80) / 344][Stage 6:===========================================>          (279 + 65) / 344][Stage 6:===============================================>      (303 + 41) / 344][Stage 6:==================================================>   (321 + 23) / 344][Stage 6:===================================================>  (330 + 14) / 344][Stage 6:=====================================================> (337 + 7) / 344][Stage 6:======================================================>(340 + 4) / 344][Stage 6:======================================================>(341 + 3) / 344][Stage 6:======================================================>(343 + 1) / 344]                                                                                Time elapsed: 10.610223277 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs'
[Stage 7:=>                                                     (8 + 112) / 343][Stage 7:=====>                                                (32 + 112) / 343][Stage 7:=========>                                            (61 + 112) / 343][Stage 7:============>                                         (78 + 112) / 343][Stage 7:===============>                                      (96 + 112) / 343][Stage 7:===================>                                 (125 + 112) / 343][Stage 7:======================>                              (146 + 112) / 343][Stage 7:==========================>                          (173 + 112) / 343][Stage 7:==============================>                      (195 + 112) / 343][Stage 7:====================================>                (236 + 107) / 343][Stage 7:==========================================>           (267 + 76) / 343][Stage 7:==============================================>       (293 + 50) / 343][Stage 7:================================================>     (309 + 34) / 343][Stage 7:===================================================>  (324 + 19) / 343][Stage 7:======================================================>(337 + 6) / 343][Stage 7:======================================================>(340 + 3) / 343][Stage 7:======================================================>(341 + 2) / 343][Stage 7:======================================================>(342 + 1) / 343]                                                                                [Stage 8:===>                                                  (21 + 112) / 344][Stage 8:=======>                                              (48 + 112) / 344][Stage 8:==========>                                           (68 + 112) / 344][Stage 8:==============>                                       (91 + 112) / 344][Stage 8:==================>                                  (117 + 112) / 344][Stage 8:======================>                              (146 + 112) / 344][Stage 8:==========================>                          (169 + 112) / 344][Stage 8:==============================>                      (200 + 112) / 344][Stage 8:===================================>                 (228 + 112) / 344][Stage 8:========================================>             (261 + 83) / 344][Stage 8:=============================================>        (288 + 56) / 344][Stage 8:================================================>     (309 + 35) / 344][Stage 8:=================================================>    (317 + 27) / 344][Stage 8:=====================================================> (336 + 8) / 344][Stage 8:======================================================>(340 + 4) / 344][Stage 8:======================================================>(341 + 3) / 344][Stage 8:======================================================>(342 + 2) / 344][Stage 8:======================================================>(343 + 1) / 344]                                                                                Time elapsed: 10.534962136 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs'
[Stage 9:===>                                                  (22 + 112) / 343][Stage 9:=======>                                              (46 + 112) / 343][Stage 9:==========>                                           (64 + 112) / 343][Stage 9:=============>                                        (84 + 112) / 343][Stage 9:================>                                    (107 + 112) / 343][Stage 9:====================>                                (133 + 112) / 343][Stage 9:=======================>                             (153 + 112) / 343][Stage 9:============================>                        (184 + 112) / 343][Stage 9:=================================>                   (214 + 112) / 343][Stage 9:======================================>               (247 + 96) / 343][Stage 9:===========================================>          (275 + 68) / 343][Stage 9:==============================================>       (293 + 50) / 343][Stage 9:================================================>     (306 + 37) / 343][Stage 9:=================================================>    (316 + 27) / 343][Stage 9:===================================================>  (328 + 15) / 343][Stage 9:=====================================================> (334 + 9) / 343][Stage 9:======================================================>(340 + 3) / 343][Stage 9:======================================================>(342 + 1) / 343]                                                                                [Stage 10:======>                                              (39 + 112) / 344][Stage 10:=========>                                           (60 + 112) / 344][Stage 10:============>                                        (78 + 112) / 344][Stage 10:===============>                                    (105 + 112) / 344][Stage 10:==================>                                 (121 + 112) / 344][Stage 10:======================>                             (147 + 112) / 344][Stage 10:==========================>                         (174 + 112) / 344][Stage 10:==============================>                     (202 + 113) / 344][Stage 10:====================================>               (239 + 105) / 344][Stage 10:========================================>            (265 + 79) / 344][Stage 10:=============================================>       (293 + 51) / 344][Stage 10:================================================>    (312 + 32) / 344][Stage 10:=================================================>   (324 + 20) / 344][Stage 10:===================================================> (333 + 11) / 344][Stage 10:====================================================> (337 + 7) / 344][Stage 10:=====================================================>(338 + 6) / 344][Stage 10:=====================================================>(341 + 3) / 344][Stage 10:=====================================================>(343 + 1) / 344]                                                                                Time elapsed: 11.340227599 seconds

scala> 

scala> 

scala> :quit
17/04/24 11:14:31 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
39.0 G  /nidan/parquet/Slides-uncompressed-256-ZINDEX.prqt
