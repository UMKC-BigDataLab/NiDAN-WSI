Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/04/27 02:24:45 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 02:25:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 02:25:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 02:25:01 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/04/27 02:25:03 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 02:25:13 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170427022503-0132).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> //spark-shell --master spark://ctl:7077 --driver-memory 28G  --executor-memory 28G  --executor-core s 8  --num-executors 16  --conf spark.io.compression.codec=lzf  --conf spark.akka.frameSize=1024  --conf s park.driver.maxResultSize=2g

scala> 

scala> 

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadSqlContext = "#LOAD_SQL_CONTEXT "
loadSqlContext: String = "#LOAD_SQL_CONTEXT "

scala> val dataSource = "/nidan/parquet/slide20.prqt"
dataSource: String = /nidan/parquet/slide20.prqt

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Unit = <function1>

scala> 

scala> val queries = List(
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0  and imageId = '1.svs'",1),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0  and imageId = '1.svs'",2),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0  and imageId = '1.svs'",4),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0  and imageId = '1.svs'",8)
     | )
queries: List[(String, Int)] = List((SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs',1), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs',2), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs',4), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs',8))

scala> 

scala> 

scala> val sqlContext = show_timing{new org.apache.spark.sql.SQLContext(sc)}
warning: there was one deprecation warning; re-run with -deprecation for details
Time elapsed: 0.001175225 seconds
sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@25d5327

scala> val pf = show_timing{sqlContext.read.parquet(dataSource)}
Time elapsed: 7.050147072 seconds
pf: org.apache.spark.sql.DataFrame = [imageId: string, imageLevel: int ... 8 more fields]

scala> show_timing{pf.createOrReplaceTempView("data")}
Time elapsed: 0.751056788 seconds

scala> 

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (b ytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 1:>                                                      (0 + 112) / 117][Stage 1:==>                                                    (5 + 112) / 117][Stage 1:==>                                                    (6 + 111) / 117][Stage 1:===>                                                   (8 + 109) / 117][Stage 1:====>                                                  (9 + 108) / 117][Stage 1:====>                                                 (10 + 107) / 117][Stage 1:=====>                                                (11 + 106) / 117][Stage 1:=====>                                                (12 + 105) / 117][Stage 1:=========>                                             (20 + 97) / 117][Stage 1:===========================>                           (59 + 58) / 117][Stage 1:======================================>                (82 + 35) / 117][Stage 1:==================================================>    (108 + 9) / 117][Stage 1:======================================================>(116 + 1) / 117]                                                                                [Stage 2:>                                                      (0 + 112) / 118][Stage 2:=>                                                     (3 + 112) / 118][Stage 2:======>                                               (14 + 104) / 118][Stage 2:==================>                                    (40 + 78) / 118][Stage 2:=====================================>                 (80 + 38) / 118][Stage 2:==========================================>            (92 + 26) / 118][Stage 2:==============================================>       (101 + 17) / 118][Stage 2:====================================================>  (113 + 5) / 118][Stage 2:=====================================================> (114 + 4) / 118][Stage 2:=====================================================> (115 + 3) / 118][Stage 2:======================================================>(116 + 2) / 118][Stage 2:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 13.425786988 seconds
res1: Int = 0

scala> 

scala> for (query <- queries){
     | println(s">> Running query: ${query._1}")
     | show_timing{sqlContext.sql(query._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes,  index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
     | }
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs'
[Stage 3:>                                                      (1 + 112) / 117][Stage 3:===>                                                   (7 + 110) / 117][Stage 3:===========>                                           (24 + 93) / 117][Stage 3:=========================>                             (55 + 62) / 117][Stage 3:=====================================>                 (80 + 37) / 117][Stage 3:=============================================>         (97 + 20) / 117][Stage 3:===================================================>   (109 + 8) / 117][Stage 3:=====================================================> (114 + 3) / 117][Stage 3:======================================================>(115 + 2) / 117][Stage 3:======================================================>(116 + 1) / 117]                                                                                [Stage 4:>                                                      (1 + 112) / 118][Stage 4:===>                                                   (8 + 110) / 118][Stage 4:============>                                          (26 + 92) / 118][Stage 4:========================>                              (52 + 66) / 118][Stage 4:====================================>                  (79 + 39) / 118][Stage 4:==============================================>        (99 + 19) / 118][Stage 4:====================================================>  (112 + 6) / 118][Stage 4:====================================================>  (113 + 5) / 118][Stage 4:=====================================================> (114 + 4) / 118][Stage 4:======================================================>(116 + 2) / 118][Stage 4:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 7.309925658 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs'
[Stage 5:>                                                      (0 + 112) / 117][Stage 5:>                                                      (2 + 112) / 117][Stage 5:=====>                                                (12 + 105) / 117][Stage 5:================>                                      (36 + 81) / 117][Stage 5:=============================>                         (62 + 55) / 117][Stage 5:==============================================>        (98 + 19) / 117][Stage 5:=================================================>    (107 + 10) / 117][Stage 5:====================================================>  (111 + 6) / 117][Stage 5:=====================================================> (113 + 4) / 117][Stage 5:======================================================>(115 + 2) / 117][Stage 5:======================================================>(116 + 1) / 117]                                                                                [Stage 6:=>                                                     (4 + 112) / 118][Stage 6:==========>                                            (22 + 96) / 118][Stage 6:========================>                              (53 + 65) / 118][Stage 6:=====================================>                 (80 + 38) / 118][Stage 6:==============================================>       (101 + 17) / 118][Stage 6:===================================================>   (111 + 7) / 118][Stage 6:====================================================>  (113 + 5) / 118][Stage 6:=====================================================> (114 + 4) / 118][Stage 6:======================================================>(116 + 2) / 118][Stage 6:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 7.2221369 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs'
[Stage 7:>                                                      (1 + 112) / 117][Stage 7:==>                                                    (5 + 112) / 117][Stage 7:=========>                                             (20 + 97) / 117][Stage 7:===================>                                   (42 + 75) / 117][Stage 7:=======================================>               (83 + 34) / 117][Stage 7:==============================================>       (100 + 17) / 117][Stage 7:==================================================>    (108 + 9) / 117][Stage 7:=====================================================> (113 + 4) / 117][Stage 7:======================================================>(115 + 2) / 117][Stage 7:======================================================>(116 + 1) / 117]                                                                                [Stage 8:=>                                                     (4 + 112) / 118][Stage 8:===>                                                   (8 + 110) / 118][Stage 8:==================>                                    (39 + 79) / 118][Stage 8:=================================>                     (72 + 46) / 118][Stage 8:==========================================>            (91 + 27) / 118][Stage 8:===============================================>      (104 + 14) / 118][Stage 8:=================================================>    (108 + 10) / 118][Stage 8:=====================================================> (115 + 3) / 118][Stage 8:======================================================>(116 + 2) / 118][Stage 8:======================================================>(117 + 1) / 118]                                                                                Time elapsed: 7.309004079 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs'
[Stage 9:>                                                      (1 + 112) / 117][Stage 9:=>                                                     (4 + 112) / 117][Stage 9:=======>                                              (17 + 100) / 117][Stage 9:===================>                                   (42 + 75) / 117][Stage 9:================================>                      (70 + 47) / 117][Stage 9:==============================================>        (99 + 18) / 117][Stage 9:=================================================>    (107 + 10) / 117][Stage 9:===================================================>   (110 + 7) / 117][Stage 9:=====================================================> (113 + 4) / 117][Stage 9:======================================================>(115 + 2) / 117][Stage 9:======================================================>(116 + 1) / 117]                                                                                [Stage 10:>                                                     (1 + 112) / 118][Stage 10:=====>                                               (12 + 106) / 118][Stage 10:=================>                                    (38 + 80) / 118][Stage 10:===============================>                      (69 + 49) / 118][Stage 10:======================================>               (84 + 34) / 118][Stage 10:=============================================>        (99 + 19) / 118][Stage 10:===============================================>     (106 + 12) / 118][Stage 10:==================================================>   (111 + 7) / 118][Stage 10:====================================================> (115 + 3) / 118][Stage 10:=====================================================>(116 + 2) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                Time elapsed: 7.128236262 seconds

scala> 

scala> 

scala> :quit
17/04/27 02:26:22 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
11.2 G  /nidan/parquet/slide1.prqt
12.8 G  /nidan/parquet/slide10.prqt
18.9 G  /nidan/parquet/slide11.prqt
9.3 G   /nidan/parquet/slide12.prqt
11.6 G  /nidan/parquet/slide13.prqt
13.0 G  /nidan/parquet/slide14.prqt
11.2 G  /nidan/parquet/slide15.prqt
14.9 G  /nidan/parquet/slide16.prqt
12.8 G  /nidan/parquet/slide17.prqt
18.9 G  /nidan/parquet/slide18.prqt
9.3 G   /nidan/parquet/slide19.prqt
14.9 G  /nidan/parquet/slide2.prqt
11.6 G  /nidan/parquet/slide20.prqt
12.8 G  /nidan/parquet/slide3.prqt
18.9 G  /nidan/parquet/slide4.prqt
9.3 G   /nidan/parquet/slide5.prqt
11.6 G  /nidan/parquet/slide6.prqt
13.0 G  /nidan/parquet/slide7.prqt
11.2 G  /nidan/parquet/slide8.prqt
14.9 G  /nidan/parquet/slide9.prqt
