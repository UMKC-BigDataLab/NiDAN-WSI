Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/04/27 01:03:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 01:04:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 01:04:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 01:04:05 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/04/27 01:04:07 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 01:04:17 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170427010407-0123).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> //spark-shell --master spark://ctl:7077 --driver-memory 28G  --executor-memory 28G  --executor-core s 8  --num-executors 16  --conf spark.io.compression.codec=lzf  --conf spark.akka.frameSize=1024  --conf s park.driver.maxResultSize=2g

scala> 

scala> 

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadSqlContext = "#LOAD_SQL_CONTEXT "
loadSqlContext: String = "#LOAD_SQL_CONTEXT "

scala> val dataSource = "/nidan/parquet/slide4.prqt"
dataSource: String = /nidan/parquet/slide4.prqt

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Unit = <function1>

scala> 

scala> val queries = List(
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0  and imageId = '1.svs'",1),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0  and imageId = '1.svs'",2),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0  and imageId = '1.svs'",4),
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0  and imageId = '1.svs'",8)
     | )
queries: List[(String, Int)] = List((SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs',1), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs',2), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs',4), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs',8))

scala> 

scala> 

scala> val sqlContext = show_timing{new org.apache.spark.sql.SQLContext(sc)}
warning: there was one deprecation warning; re-run with -deprecation for details
Time elapsed: 0.001123222 seconds
sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@664217a8

scala> val pf = show_timing{sqlContext.read.parquet(dataSource)}
Time elapsed: 6.989322678 seconds
pf: org.apache.spark.sql.DataFrame = [imageId: string, imageLevel: int ... 8 more fields]

scala> show_timing{pf.createOrReplaceTempView("data")}
Time elapsed: 0.759704354 seconds

scala> 

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (b ytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 1:>                                                      (0 + 112) / 162][Stage 1:==>                                                    (6 + 112) / 162][Stage 1:==>                                                    (7 + 112) / 162][Stage 1:==>                                                    (8 + 112) / 162][Stage 1:===>                                                   (9 + 112) / 162][Stage 1:===>                                                  (10 + 112) / 162][Stage 1:===>                                                  (11 + 112) / 162][Stage 1:====>                                                 (13 + 112) / 162][Stage 1:========>                                             (26 + 113) / 162][Stage 1:=========================>                             (75 + 87) / 162][Stage 1:===========================>                           (82 + 80) / 162][Stage 1:================================>                      (95 + 67) / 162][Stage 1:====================================>                 (108 + 54) / 162][Stage 1:========================================>             (121 + 41) / 162][Stage 1:=========================================>            (125 + 37) / 162][Stage 1:===========================================>          (131 + 31) / 162][Stage 1:================================================>     (144 + 18) / 162][Stage 1:==================================================>   (152 + 10) / 162][Stage 1:====================================================>  (154 + 8) / 162][Stage 1:=====================================================> (157 + 5) / 162][Stage 1:======================================================>(160 + 2) / 162][Stage 1:======================================================>(161 + 1) / 162]                                                                                [Stage 2:>                                                      (0 + 112) / 163][Stage 2:=>                                                     (3 + 112) / 163][Stage 2:==>                                                    (8 + 112) / 163][Stage 2:===>                                                  (12 + 112) / 163][Stage 2:======>                                               (21 + 112) / 163][Stage 2:==========>                                           (33 + 112) / 163][Stage 2:===============>                                      (46 + 112) / 163][Stage 2:===================>                                  (59 + 104) / 163][Stage 2:=======================>                               (71 + 92) / 163][Stage 2:=============================>                         (88 + 75) / 163][Stage 2:===================================>                  (106 + 57) / 163][Stage 2:======================================>               (116 + 47) / 163][Stage 2:==========================================>           (128 + 35) / 163][Stage 2:============================================>         (135 + 28) / 163][Stage 2:===============================================>      (144 + 19) / 163][Stage 2:==================================================>   (151 + 12) / 163][Stage 2:==================================================>   (153 + 10) / 163][Stage 2:====================================================>  (157 + 6) / 163][Stage 2:=====================================================> (160 + 3) / 163][Stage 2:======================================================>(161 + 2) / 163][Stage 2:======================================================>(162 + 1) / 163]                                                                                Time elapsed: 16.226222462 seconds
res1: Int = 0

scala> 

scala> for (query <- queries){
     | println(s">> Running query: ${query._1}")
     | show_timing{sqlContext.sql(query._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes,  index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
     | }
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '1.svs'
[Stage 3:>                                                      (1 + 112) / 162][Stage 3:=>                                                     (3 + 112) / 162][Stage 3:==>                                                    (7 + 112) / 162][Stage 3:======>                                               (20 + 112) / 162][Stage 3:===========>                                          (34 + 112) / 162][Stage 3:===============>                                      (45 + 112) / 162][Stage 3:===================>                                  (58 + 104) / 162][Stage 3:========================>                              (72 + 90) / 162][Stage 3:============================>                          (83 + 79) / 162][Stage 3:================================>                      (95 + 67) / 162][Stage 3:===================================>                  (106 + 56) / 162][Stage 3:=======================================>              (118 + 44) / 162][Stage 3:=========================================>            (125 + 37) / 162][Stage 3:=============================================>        (137 + 25) / 162][Stage 3:================================================>     (144 + 18) / 162][Stage 3:==================================================>   (152 + 10) / 162][Stage 3:====================================================>  (156 + 6) / 162][Stage 3:=====================================================> (158 + 4) / 162][Stage 3:=====================================================> (159 + 3) / 162][Stage 3:======================================================>(160 + 2) / 162][Stage 3:======================================================>(161 + 1) / 162]                                                                                [Stage 4:>                                                      (1 + 112) / 163][Stage 4:=>                                                     (4 + 112) / 163][Stage 4:===>                                                  (12 + 112) / 163][Stage 4:=========>                                            (29 + 112) / 163][Stage 4:============>                                         (38 + 112) / 163][Stage 4:===============>                                      (48 + 112) / 163][Stage 4:======================>                                (67 + 96) / 163][Stage 4:==========================>                            (79 + 84) / 163][Stage 4:===============================>                       (94 + 69) / 163][Stage 4:===================================>                  (107 + 56) / 163][Stage 4:=======================================>              (119 + 44) / 163][Stage 4:==========================================>           (128 + 35) / 163][Stage 4:==============================================>       (141 + 22) / 163][Stage 4:================================================>     (146 + 17) / 163][Stage 4:==================================================>   (151 + 12) / 163][Stage 4:====================================================>  (157 + 6) / 163][Stage 4:=====================================================> (159 + 4) / 163][Stage 4:======================================================>(161 + 2) / 163][Stage 4:======================================================>(162 + 1) / 163]                                                                                Time elapsed: 9.736482831 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '1.svs'
[Stage 5:>                                                      (0 + 112) / 162][Stage 5:=>                                                     (3 + 112) / 162][Stage 5:=====>                                                (16 + 112) / 162][Stage 5:=========>                                            (27 + 112) / 162][Stage 5:============>                                         (38 + 112) / 162][Stage 5:================>                                     (49 + 112) / 162][Stage 5:=======================>                               (70 + 92) / 162][Stage 5:=============================>                         (86 + 76) / 162][Stage 5:=================================>                    (101 + 61) / 162][Stage 5:====================================>                 (110 + 52) / 162][Stage 5:========================================>             (122 + 40) / 162][Stage 5:============================================>         (132 + 30) / 162][Stage 5:==============================================>       (138 + 24) / 162][Stage 5:==============================================>       (140 + 22) / 162][Stage 5:===============================================>      (143 + 19) / 162][Stage 5:=================================================>    (148 + 14) / 162][Stage 5:==================================================>   (152 + 10) / 162][Stage 5:====================================================>  (155 + 7) / 162][Stage 5:=====================================================> (159 + 3) / 162]                                                                                [Stage 6:=>                                                     (3 + 112) / 163][Stage 6:===>                                                   (9 + 112) / 163][Stage 6:========>                                             (25 + 112) / 163][Stage 6:===========>                                          (35 + 112) / 163][Stage 6:==============>                                       (44 + 112) / 163][Stage 6:====================>                                 (63 + 100) / 163][Stage 6:==========================>                            (80 + 83) / 163][Stage 6:================================>                      (97 + 66) / 163][Stage 6:=====================================>                (112 + 51) / 163][Stage 6:=======================================>              (120 + 43) / 163][Stage 6:===========================================>          (132 + 31) / 163][Stage 6:==============================================>       (139 + 24) / 163][Stage 6:================================================>     (145 + 18) / 163][Stage 6:==================================================>   (152 + 11) / 163][Stage 6:====================================================>  (155 + 8) / 163][Stage 6:=====================================================> (159 + 4) / 163][Stage 6:=====================================================> (160 + 3) / 163][Stage 6:======================================================>(162 + 1) / 163]                                                                                Time elapsed: 9.163639063 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '1.svs'
[Stage 7:>                                                      (0 + 112) / 162][Stage 7:>                                                      (1 + 112) / 162][Stage 7:==>                                                    (6 + 112) / 162][Stage 7:======>                                               (20 + 112) / 162][Stage 7:=========>                                            (28 + 112) / 162][Stage 7:==============>                                       (44 + 112) / 162][Stage 7:===================>                                  (58 + 104) / 162][Stage 7:=========================>                             (76 + 86) / 162][Stage 7:=============================>                         (88 + 74) / 162][Stage 7:==================================>                   (104 + 58) / 162][Stage 7:=====================================>                (112 + 50) / 162][Stage 7:========================================>             (122 + 40) / 162][Stage 7:============================================>         (133 + 29) / 162][Stage 7:==============================================>       (140 + 22) / 162][Stage 7:================================================>     (146 + 16) / 162][Stage 7:==================================================>   (152 + 10) / 162][Stage 7:====================================================>  (155 + 7) / 162][Stage 7:=====================================================> (158 + 4) / 162][Stage 7:======================================================>(160 + 2) / 162][Stage 7:======================================================>(161 + 1) / 162]                                                                                [Stage 8:>                                                      (0 + 112) / 163][Stage 8:==>                                                    (6 + 112) / 163][Stage 8:======>                                               (20 + 112) / 163][Stage 8:===========>                                          (36 + 112) / 163][Stage 8:================>                                     (49 + 112) / 163][Stage 8:======================>                                (67 + 96) / 163][Stage 8:==========================>                            (79 + 84) / 163][Stage 8:==============================>                        (90 + 73) / 163][Stage 8:===================================>                  (107 + 56) / 163][Stage 8:=======================================>              (119 + 44) / 163][Stage 8:========================================>             (123 + 40) / 163][Stage 8:===========================================>          (131 + 32) / 163][Stage 8:=============================================>        (136 + 27) / 163][Stage 8:===============================================>      (142 + 21) / 163][Stage 8:=================================================>    (149 + 14) / 163][Stage 8:===================================================>   (154 + 9) / 163][Stage 8:====================================================>  (157 + 6) / 163][Stage 8:======================================================>(161 + 2) / 163][Stage 8:======================================================>(162 + 1) / 163]                                                                                Time elapsed: 9.698950928 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '1.svs'
[Stage 9:>                                                      (0 + 112) / 162][Stage 9:>                                                      (2 + 112) / 162][Stage 9:=>                                                     (5 + 112) / 162][Stage 9:====>                                                 (13 + 112) / 162][Stage 9:========>                                             (26 + 112) / 162][Stage 9:=============>                                        (41 + 112) / 162][Stage 9:=================>                                    (53 + 109) / 162][Stage 9:======================>                                (67 + 95) / 162][Stage 9:============================>                          (83 + 79) / 162][Stage 9:=================================>                     (98 + 64) / 162][Stage 9:===================================>                  (106 + 56) / 162][Stage 9:=====================================>                (113 + 49) / 162][Stage 9:========================================>             (120 + 42) / 162][Stage 9:==========================================>           (128 + 34) / 162][Stage 9:=============================================>        (137 + 25) / 162][Stage 9:===============================================>      (143 + 19) / 162][Stage 9:====================================================>  (155 + 7) / 162][Stage 9:====================================================>  (156 + 6) / 162][Stage 9:=====================================================> (158 + 4) / 162][Stage 9:======================================================>(160 + 2) / 162][Stage 9:======================================================>(161 + 1) / 162]                                                                                [Stage 10:>                                                     (0 + 112) / 163][Stage 10:==>                                                   (9 + 112) / 163][Stage 10:======>                                              (20 + 112) / 163][Stage 10:===========>                                         (34 + 112) / 163][Stage 10:==============>                                      (45 + 112) / 163][Stage 10:=====================>                                (64 + 99) / 163][Stage 10:=========================>                            (76 + 87) / 163][Stage 10:============================>                         (86 + 77) / 163][Stage 10:================================>                    (101 + 62) / 163][Stage 10:===================================>                 (110 + 53) / 163][Stage 10:======================================>              (119 + 44) / 163][Stage 10:=======================================>             (122 + 41) / 163][Stage 10:===========================================>         (134 + 29) / 163][Stage 10:===============================================>     (146 + 17) / 163][Stage 10:================================================>    (149 + 14) / 163][Stage 10:=================================================>   (153 + 10) / 163][Stage 10:===================================================>  (156 + 7) / 163][Stage 10:====================================================> (159 + 4) / 163][Stage 10:=====================================================>(161 + 2) / 163][Stage 10:=====================================================>(162 + 1) / 163]                                                                                Time elapsed: 10.268565793 seconds

scala> 

scala> 

scala> :quit
17/04/27 01:05:39 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
11.2 G  /nidan/parquet/slide1.prqt
14.9 G  /nidan/parquet/slide2.prqt
12.8 G  /nidan/parquet/slide3.prqt
18.9 G  /nidan/parquet/slide4.prqt
