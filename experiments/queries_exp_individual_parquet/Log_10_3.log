Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/04/27 08:56:02 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 08:56:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 08:56:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 08:56:18 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/04/27 08:56:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/04/27 08:56:34 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170427085620-0148).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> //spark-shell --master spark://ctl:7077 --driver-memory 28G  --executor-memory 28G  --executor-core s 8  --num-executors 16  --conf spark.io.compression.codec=lzf  --conf spark.akka.frameSize=1024  --conf s park.driver.maxResultSize=2g

scala> 

scala> 

scala> 

scala> 

scala> 

scala> import java.io.File
import java.io.File

scala> 

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> 

scala> 

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> 

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> 

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> 

scala> val loadSqlContext = "#LOAD_SQL_CONTEXT "
loadSqlContext: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> val dataSource = "/nidan/parquet/slide10.prqt"
dataSource: String = /nidan/parquet/slide10.prqt

scala> 

scala> 

scala> 

scala> def show_timing[T](proc: => T): T = {
     | 
     |     val start=System.nanoTime()
     | 
     |     val res = proc
     | 
     |     val end = System.nanoTime()
     | 
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     | 
     |     res
     | 
     | }
show_timing: [T](proc: => T)T

scala> 

scala> 

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     | 
     |     val bytes = in._1
     | 
     |     val output = in._3
     | 
     |     
     | 
     |     val writer = new FileOutputStream(output)
     | 
     |     writer.write(bytes)
     | 
     |     writer.close
     | 
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Unit = <function1>

scala> 

scala> 

scala> 

scala> val queries = List(
     | 
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0  and imageId = '10.svs'",1),
     | 
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0  and imageId = '10.svs'",2),
     | 
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0  and imageId = '10.svs'",4),
     | 
     | ("SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0  and imageId = '10.svs'",8)
     | 
     | )
queries: List[(String, Int)] = List((SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '10.svs',1), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '10.svs',2), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '10.svs',4), (SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '10.svs',8))

scala> 

scala> 

scala> 

scala> 

scala> 

scala> val sqlContext = show_timing{new org.apache.spark.sql.SQLContext(sc)}
warning: there was one deprecation warning; re-run with -deprecation for details
Time elapsed: 0.001466158 seconds
sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@4af5c14c

scala> 

scala> val pf = show_timing{sqlContext.read.parquet(dataSource).createOrReplaceTempView("data")}
Time elapsed: 9.464188929 seconds
pf: Unit = ()

scala> 

scala> 

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (b ytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 1:>                                                      (0 + 104) / 113][Stage 1:===>                                                   (8 + 104) / 113][Stage 1:=====>                                                (12 + 101) / 113][Stage 1:========>                                              (17 + 96) / 113][Stage 1:===============>                                       (32 + 81) / 113][Stage 1:==============================>                        (63 + 50) / 113][Stage 1:=================================================>    (103 + 10) / 113][Stage 1:======================================================>(111 + 2) / 113][Stage 1:======================================================>(112 + 1) / 113]                                                                                [Stage 2:>                                                      (2 + 105) / 114][Stage 2:=================>                                     (37 + 77) / 114][Stage 2:======================================>                (79 + 35) / 114][Stage 2:=================================================>    (104 + 10) / 114][Stage 2:======================================================>(112 + 2) / 114][Stage 2:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 11.275941926 seconds
res0: Int = 0

scala> 

scala> 

scala> 

scala> for (query <- queries){
     | 
     | println(s">> Running query: ${query._1}")
     | 
     | show_timing{sqlContext.sql(query._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes,  index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
     | 
     | }
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=1 and imageLevel = 0 and imageId = '10.svs'
[Stage 3:==>                                                    (5 + 104) / 113][Stage 3:============>                                          (25 + 88) / 113][Stage 3:=============================>                         (60 + 53) / 113][Stage 3:==========================================>            (87 + 26) / 113][Stage 3:=====================================================> (109 + 4) / 113][Stage 3:======================================================>(111 + 2) / 113][Stage 3:======================================================>(112 + 1) / 113]                                                                                [Stage 4:===>                                                   (7 + 104) / 114][Stage 4:================>                                      (34 + 80) / 114][Stage 4:======================================>                (80 + 34) / 114][Stage 4:===============================================>      (100 + 14) / 114][Stage 4:=====================================================> (111 + 3) / 114][Stage 4:======================================================>(112 + 2) / 114][Stage 4:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.785431152 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=2 and imageLevel = 0 and imageId = '10.svs'
[Stage 5:====>                                                 (10 + 103) / 113][Stage 5:=======================>                               (49 + 64) / 113][Stage 5:=============================================>         (93 + 20) / 113][Stage 5:======================================================>(111 + 2) / 113][Stage 5:======================================================>(112 + 1) / 113]                                                                                [Stage 6:================================>                      (67 + 47) / 114][Stage 6:===============================================>      (100 + 14) / 114][Stage 6:=====================================================> (111 + 3) / 114][Stage 6:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.61968575 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=4 and imageLevel = 0 and imageId = '10.svs'
[Stage 7:===>                                                   (8 + 104) / 113][Stage 7:===================>                                   (41 + 72) / 113][Stage 7:================================================>     (101 + 12) / 113][Stage 7:======================================================>(111 + 2) / 113][Stage 7:======================================================>(112 + 1) / 113]                                                                                [Stage 8:=============>                                         (27 + 87) / 114][Stage 8:=====================================>                 (78 + 36) / 114][Stage 8:====================================================>  (108 + 6) / 114][Stage 8:=====================================================> (111 + 3) / 114][Stage 8:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.883573585 seconds
>> Running query: SELECT imageBytes from data where partitionZIndex >= 1 and partitionZIndex <=8 and imageLevel = 0 and imageId = '10.svs'
[Stage 9:=====>                                                (12 + 101) / 113][Stage 9:==================================>                    (70 + 43) / 113][Stage 9:===============================================>       (98 + 15) / 113][Stage 9:======================================================>(111 + 2) / 113]                                                                                [Stage 10:====================>                                 (44 + 70) / 114][Stage 10:===========================================>          (92 + 22) / 114][Stage 10:===================================================>  (109 + 5) / 114][Stage 10:====================================================> (110 + 4) / 114][Stage 10:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.801512145 seconds

scala> 

scala> 

scala> 

scala> 

scala> 

scala> :quit
