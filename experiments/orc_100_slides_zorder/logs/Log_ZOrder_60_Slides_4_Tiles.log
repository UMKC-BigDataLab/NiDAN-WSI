Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 02:12:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:12:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:12:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:12:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 02:12:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:12:48 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601021237-0741).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.379443237 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:===============>                                       (33 + 82) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:========================>                              (52 + 64) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.620902067 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.663681124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=========================>                             (54 + 64) / 118][Stage 2:================================>                      (69 + 49) / 118][Stage 2:==================================>                    (73 + 45) / 118][Stage 2:===================================>                   (76 + 42) / 118][Stage 2:=====================================>                 (80 + 38) / 118][Stage 2:======================================>                (82 + 36) / 118][Stage 2:==========================================>            (92 + 26) / 118][Stage 2:================================================>     (105 + 13) / 118][Stage 2:===================================================>   (111 + 7) / 118]                                                                                [Stage 3:=================================>                     (73 + 46) / 119][Stage 3:==================================>                    (74 + 45) / 119][Stage 3:===================================>                   (76 + 43) / 119][Stage 3:=====================================>                 (81 + 38) / 119][Stage 3:========================================>              (87 + 32) / 119][Stage 3:============================================>          (97 + 22) / 119][Stage 3:===============================================>      (105 + 14) / 119][Stage 3:====================================================>  (113 + 6) / 119][Stage 3:====================================================>  (114 + 5) / 119][Stage 3:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.385976834 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.641170768 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=================================>                     (71 + 47) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:===================================>                   (76 + 42) / 118][Stage 4:========================================>              (87 + 31) / 118][Stage 4:==============================================>       (101 + 17) / 118][Stage 4:====================================================>  (113 + 5) / 118][Stage 4:======================================================>(116 + 2) / 118][Stage 4:======================================================>(117 + 1) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:=======================================>               (85 + 34) / 119][Stage 5:=============================================>         (99 + 20) / 119][Stage 5:=================================================>    (109 + 10) / 119][Stage 5:======================================================>(117 + 2) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.462362183 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.652078747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (56 + 57) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:==============================>                        (62 + 51) / 113][Stage 6:====================================>                  (75 + 38) / 113][Stage 6:===========================================>           (90 + 23) / 113][Stage 6:===============================================>      (100 + 13) / 113][Stage 6:=====================================================> (110 + 3) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:==============================>                        (64 + 50) / 114][Stage 7:======================================>                (79 + 35) / 114][Stage 7:===========================================>           (91 + 23) / 114][Stage 7:================================================>     (103 + 11) / 114][Stage 7:====================================================>  (109 + 5) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.304716562 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=224", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=224,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53279891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (71 + 47) / 118][Stage 8:=================================>                     (72 + 46) / 118][Stage 8:===================================>                   (76 + 42) / 118][Stage 8:=======================================>               (85 + 33) / 118][Stage 8:==============================================>        (99 + 19) / 118][Stage 8:================================================>     (107 + 11) / 118][Stage 8:=====================================================> (115 + 3) / 118]                                                                                [Stage 9:=================================>                     (73 + 46) / 119][Stage 9:====================================>                  (78 + 41) / 119][Stage 9:=======================================>               (85 + 34) / 119][Stage 9:=============================================>         (99 + 20) / 119][Stage 9:===============================================>      (105 + 14) / 119][Stage 9:===================================================>   (112 + 7) / 119][Stage 9:=====================================================> (115 + 4) / 119][Stage 9:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.431418353 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=136", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=136,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490476799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (70 + 43) / 113][Stage 10:====================================>                 (76 + 37) / 113][Stage 10:========================================>             (85 + 28) / 113][Stage 10:============================================>         (94 + 19) / 113][Stage 10:====================================================> (109 + 4) / 113]                                                                                [Stage 11:===================================>                  (74 + 40) / 114][Stage 11:======================================>               (81 + 33) / 114][Stage 11:=============================================>        (97 + 17) / 114][Stage 11:===============================================>     (103 + 11) / 114][Stage 11:==================================================>   (106 + 8) / 114][Stage 11:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.526887711 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=255", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=255,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.594280686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===============================>                      (67 + 48) / 115][Stage 12:===================================>                  (75 + 40) / 115][Stage 12:==========================================>           (90 + 25) / 115][Stage 12:==================================================>   (107 + 8) / 115][Stage 12:===================================================>  (110 + 5) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=================================>                    (71 + 45) / 116][Stage 13:=======================================>              (85 + 31) / 116][Stage 13:==============================================>       (99 + 17) / 116][Stage 13:===================================================>  (110 + 6) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.690843815 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.551459513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:>                                                       (0 + 0) / 113][Stage 14:===========================>                          (57 + 56) / 113][Stage 14:=============================>                        (62 + 51) / 113][Stage 14:==================================>                   (73 + 40) / 113][Stage 14:===========================================>          (90 + 23) / 113][Stage 14:==============================================>      (100 + 13) / 113][Stage 14:================================================>    (103 + 10) / 113][Stage 14:==================================================>   (106 + 7) / 113]                                                                                [Stage 15:===========================>                          (58 + 56) / 114][Stage 15:===============================>                      (66 + 48) / 114][Stage 15:=====================================>                (80 + 34) / 114][Stage 15:===========================================>          (91 + 23) / 114][Stage 15:==============================================>      (100 + 14) / 114][Stage 15:====================================================> (110 + 4) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.259980574 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=243", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=243,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481794595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=================================>                    (70 + 43) / 113][Stage 16:=======================================>              (83 + 30) / 113][Stage 16:===========================================>          (92 + 21) / 113][Stage 16:===============================================>     (101 + 12) / 113][Stage 16:=====================================================>(111 + 2) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:====================================>                 (76 + 38) / 114][Stage 17:===========================================>          (91 + 23) / 114][Stage 17:==============================================>       (99 + 15) / 114][Stage 17:=================================================>    (105 + 9) / 114][Stage 17:====================================================> (111 + 3) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.643379423 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490964909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=============================>                        (63 + 52) / 115][Stage 18:=================================>                    (71 + 44) / 115][Stage 18:=======================================>              (84 + 31) / 115][Stage 18:=============================================>        (97 + 18) / 115][Stage 18:===============================================>     (104 + 11) / 115][Stage 18:==================================================>   (108 + 7) / 115][Stage 18:====================================================> (112 + 3) / 115]                                                                                [Stage 19:===================================>                  (76 + 40) / 116][Stage 19:======================================>               (83 + 33) / 116][Stage 19:=============================================>        (98 + 18) / 116][Stage 19:===================================================>  (111 + 5) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.547253825 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539586136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (58 + 55) / 113][Stage 20:================================>                     (67 + 46) / 113][Stage 20:========================================>             (84 + 29) / 113][Stage 20:==================================================>   (105 + 8) / 113][Stage 20:====================================================> (110 + 3) / 113]                                                                                [Stage 21:===========================>                          (58 + 56) / 114][Stage 21:============================>                         (61 + 53) / 114][Stage 21:=================================>                    (71 + 43) / 114][Stage 21:========================================>             (85 + 29) / 114][Stage 21:=============================================>        (95 + 19) / 114][Stage 21:================================================>    (104 + 10) / 114][Stage 21:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.91103333 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=35", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=35,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420252206 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=====================================>                (80 + 35) / 115][Stage 22:========================================>             (87 + 28) / 115][Stage 22:==============================================>       (99 + 16) / 115][Stage 22:================================================>    (105 + 10) / 115][Stage 22:==================================================>   (107 + 8) / 115][Stage 22:===================================================>  (109 + 6) / 115][Stage 22:====================================================> (112 + 3) / 115]                                                                                [Stage 23:========================================>             (86 + 30) / 116][Stage 23:==============================================>       (99 + 17) / 116][Stage 23:===================================================>  (110 + 6) / 116][Stage 23:=====================================================>(114 + 2) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.15686518 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=230", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=230,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461992246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (73 + 45) / 118][Stage 24:===================================>                  (77 + 41) / 118][Stage 24:=======================================>              (86 + 32) / 118][Stage 24:============================================>         (98 + 20) / 118][Stage 24:=================================================>    (109 + 9) / 118][Stage 24:===================================================>  (112 + 6) / 118][Stage 24:=====================================================>(116 + 2) / 118]                                                                                [Stage 25:=================================>                    (73 + 46) / 119][Stage 25:=====================================>                (82 + 37) / 119][Stage 25:============================================>         (98 + 21) / 119][Stage 25:=================================================>    (110 + 9) / 119][Stage 25:====================================================> (116 + 3) / 119][Stage 25:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.077031988 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515063771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:=============================>                        (65 + 55) / 120][Stage 26:================================>                     (73 + 47) / 120][Stage 26:========================================>             (90 + 30) / 120][Stage 26:==============================================>      (106 + 14) / 120][Stage 26:=====================================================>(118 + 2) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:============================>                         (64 + 57) / 121][Stage 27:====================================>                 (82 + 39) / 121][Stage 27:============================================>        (102 + 19) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.624253798 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428174449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==================================>                   (73 + 40) / 113][Stage 28:=========================================>            (87 + 26) / 113][Stage 28:=============================================>        (95 + 18) / 113][Stage 28:===============================================>     (101 + 12) / 113][Stage 28:====================================================> (110 + 3) / 113]                                                                                [Stage 29:=====================================>                (80 + 34) / 114][Stage 29:=========================================>            (88 + 26) / 114][Stage 29:============================================>         (93 + 21) / 114][Stage 29:===============================================>     (103 + 11) / 114][Stage 29:===================================================>  (109 + 5) / 114][Stage 29:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.466076221 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:====================================>                 (76 + 37) / 113][Stage 30:=========================================>            (86 + 27) / 113][Stage 30:===============================================>      (99 + 14) / 113][Stage 30:===================================================>  (108 + 5) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:====================================>                 (77 + 37) / 114][Stage 31:======================================>               (81 + 33) / 114][Stage 31:==========================================>           (90 + 24) / 114][Stage 31:==================================================>   (107 + 7) / 114][Stage 31:====================================================> (111 + 3) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.45502404 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416421598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=======================================>              (84 + 31) / 115][Stage 32:===========================================>          (93 + 22) / 115][Stage 32:====================================================> (111 + 4) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:=======================================>              (85 + 31) / 116][Stage 33:============================================>         (95 + 21) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.219830608 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461870113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (70 + 45) / 115][Stage 34:=========================================>            (88 + 27) / 115][Stage 34:==============================================>       (98 + 17) / 115][Stage 34:===================================================>  (110 + 5) / 115][Stage 34:=====================================================>(113 + 2) / 115]                                                                                [Stage 35:==================================>                   (75 + 41) / 116][Stage 35:==========================================>           (91 + 25) / 116][Stage 35:==============================================>       (99 + 17) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.030214316 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=214", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=214,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410152231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (81 + 34) / 115][Stage 36:=======================================>              (84 + 31) / 115][Stage 36:===============================================>     (102 + 13) / 115][Stage 36:====================================================> (111 + 4) / 115]                                                                                [Stage 37:=======================================>              (85 + 31) / 116][Stage 37:===========================================>          (94 + 22) / 116][Stage 37:==================================================>   (109 + 7) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.897743048 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=122", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=122,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41064305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:======================================>               (83 + 32) / 115][Stage 38:==========================================>           (90 + 25) / 115][Stage 38:===============================================>     (102 + 13) / 115][Stage 38:=================================================>    (106 + 9) / 115][Stage 38:===================================================>  (110 + 5) / 115][Stage 38:=====================================================>(113 + 2) / 115]                                                                                [Stage 39:=======================================>              (85 + 31) / 116][Stage 39:===========================================>          (94 + 22) / 116][Stage 39:==================================================>   (108 + 8) / 116][Stage 39:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.333643501 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=112", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=112,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482815887 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (58 + 55) / 113][Stage 40:================================>                     (69 + 44) / 113][Stage 40:========================================>             (84 + 29) / 113][Stage 40:==============================================>      (100 + 13) / 113]                                                                                [Stage 41:============================>                         (60 + 54) / 114][Stage 41:===============================>                      (67 + 47) / 114][Stage 41:======================================>               (82 + 32) / 114][Stage 41:===============================================>     (103 + 11) / 114][Stage 41:===================================================>  (108 + 6) / 114][Stage 41:====================================================> (110 + 4) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.793990422 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452699208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (78 + 35) / 113][Stage 42:==========================================>           (88 + 25) / 113][Stage 42:============================================>         (94 + 19) / 113][Stage 42:================================================>    (103 + 10) / 113][Stage 42:====================================================> (109 + 4) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:====================================>                 (76 + 38) / 114][Stage 43:=======================================>              (84 + 30) / 114][Stage 43:==============================================>       (98 + 16) / 114][Stage 43:==================================================>   (107 + 7) / 114][Stage 43:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.330913394 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400896246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=====================================>                (79 + 36) / 115][Stage 44:=========================================>            (89 + 26) / 115][Stage 44:===============================================>     (104 + 11) / 115][Stage 44:====================================================> (111 + 4) / 115]                                                                                [Stage 45:======================================>               (83 + 33) / 116][Stage 45:========================================>             (88 + 28) / 116][Stage 45:===============================================>     (104 + 12) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.009998221 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=148", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=148,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506682571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:===========================>                          (62 + 58) / 120][Stage 46:====================================>                 (80 + 40) / 120][Stage 46:============================================>        (101 + 19) / 120][Stage 46:==================================================>   (112 + 8) / 120][Stage 46:=====================================================>(118 + 2) / 120]                                                                                [Stage 47:============================>                         (63 + 58) / 121][Stage 47:===================================>                  (79 + 42) / 121][Stage 47:============================================>         (99 + 22) / 121][Stage 47:===================================================>  (115 + 6) / 121][Stage 47:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.73873381 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=238", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=238,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498358756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (71 + 44) / 115][Stage 48:=======================================>              (84 + 31) / 115][Stage 48:===============================================>     (102 + 13) / 115][Stage 48:====================================================> (111 + 4) / 115][Stage 48:====================================================> (112 + 3) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:===============================>                      (68 + 48) / 116][Stage 49:=====================================>                (81 + 35) / 116][Stage 49:=============================================>        (97 + 19) / 116][Stage 49:===============================================>     (103 + 13) / 116][Stage 49:====================================================> (112 + 4) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.50183502 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=174", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=174,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388245851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=====================================>                (80 + 35) / 115][Stage 50:========================================>             (86 + 29) / 115][Stage 50:============================================>         (95 + 20) / 115][Stage 50:===================================================>  (110 + 5) / 115][Stage 50:=====================================================>(113 + 2) / 115]                                                                                [Stage 51:=====================================>                (81 + 35) / 116][Stage 51:=========================================>            (89 + 27) / 116][Stage 51:==================================================>   (108 + 8) / 116][Stage 51:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.98544338 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=126", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=126,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379171215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=======================================>              (85 + 30) / 115][Stage 52:============================================>         (94 + 21) / 115][Stage 52:=================================================>    (106 + 9) / 115][Stage 52:====================================================> (112 + 3) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:======================================>               (83 + 33) / 116][Stage 53:========================================>             (88 + 28) / 116][Stage 53:==============================================>      (101 + 15) / 116][Stage 53:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.154111232 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=168", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=168,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402885383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:====================================>                 (76 + 37) / 113][Stage 54:==========================================>           (88 + 25) / 113][Stage 54:=============================================>        (96 + 17) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:======================================>               (82 + 32) / 114][Stage 55:=============================================>        (95 + 19) / 114][Stage 55:================================================>    (104 + 10) / 114][Stage 55:====================================================> (111 + 3) / 114][Stage 55:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.01626139 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=246", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=246,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480603919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:====================================>                 (78 + 37) / 115][Stage 56:=========================================>            (88 + 27) / 115][Stage 56:============================================>         (95 + 20) / 115][Stage 56:==================================================>   (108 + 7) / 115][Stage 56:=====================================================>(113 + 2) / 115]                                                                                [Stage 57:====================================>                 (79 + 37) / 116][Stage 57:============================================>         (95 + 21) / 116][Stage 57:===============================================>     (105 + 11) / 116][Stage 57:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.149993985 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427057372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (80 + 33) / 113][Stage 58:==========================================>           (89 + 24) / 113][Stage 58:=============================================>        (95 + 18) / 113][Stage 58:===================================================>  (108 + 5) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:=====================================>                (79 + 35) / 114][Stage 59:=========================================>            (88 + 26) / 114][Stage 59:=============================================>        (97 + 17) / 114][Stage 59:====================================================> (110 + 4) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.132072462 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=62", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=62,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44280555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:================================>                     (69 + 44) / 113][Stage 60:=========================================>            (86 + 27) / 113][Stage 60:==================================================>   (105 + 8) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:=============================>                        (62 + 52) / 114][Stage 61:====================================>                 (77 + 37) / 114][Stage 61:===========================================>          (92 + 22) / 114][Stage 61:==================================================>   (106 + 8) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.681948324 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387898279 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (73 + 40) / 113][Stage 62:=====================================>                (79 + 34) / 113][Stage 62:=========================================>            (86 + 27) / 113][Stage 62:==============================================>       (97 + 16) / 113][Stage 62:================================================>    (103 + 10) / 113][Stage 62:===================================================>  (108 + 5) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:====================================>                 (76 + 38) / 114][Stage 63:=========================================>            (88 + 26) / 114][Stage 63:=============================================>        (97 + 17) / 114][Stage 63:==================================================>   (106 + 8) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.322564176 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442470124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===============================>                      (68 + 47) / 115][Stage 64:=====================================>                (80 + 35) / 115][Stage 64:============================================>         (94 + 21) / 115][Stage 64:==================================================>   (108 + 7) / 115][Stage 64:=====================================================>(113 + 2) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:===============================>                      (68 + 48) / 116][Stage 65:=====================================>                (80 + 36) / 116][Stage 65:==============================================>       (99 + 17) / 116][Stage 65:=================================================>    (107 + 9) / 116][Stage 65:==================================================>   (109 + 7) / 116][Stage 65:===================================================>  (110 + 6) / 116][Stage 65:====================================================> (112 + 4) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.070458323 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469692406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:============================>                         (64 + 56) / 120][Stage 66:==================================>                   (77 + 43) / 120][Stage 66:========================================>             (91 + 29) / 120][Stage 66:================================================>    (110 + 10) / 120][Stage 66:=====================================================>(119 + 1) / 120]                                                                                [Stage 67:===========================>                          (61 + 60) / 121][Stage 67:============================>                         (63 + 58) / 121][Stage 67:================================>                     (73 + 48) / 121][Stage 67:============================================>        (102 + 19) / 121][Stage 67:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.475790402 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=104", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=104,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377669874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=================================>                    (70 + 43) / 113][Stage 68:======================================>               (81 + 32) / 113][Stage 68:=============================================>        (96 + 17) / 113][Stage 68:=================================================>    (104 + 9) / 113][Stage 68:===================================================>  (108 + 5) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:======================================>               (81 + 33) / 114][Stage 69:=============================================>        (96 + 18) / 114][Stage 69:==================================================>   (106 + 8) / 114][Stage 69:====================================================> (110 + 4) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.522725442 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:============================>                         (59 + 54) / 113][Stage 70:================================>                     (68 + 45) / 113][Stage 70:==========================================>           (89 + 24) / 113][Stage 70:=================================================>    (104 + 9) / 113][Stage 70:=====================================================>(111 + 2) / 113]                                                                                [Stage 71:===========================>                          (59 + 55) / 114][Stage 71:=============================>                        (63 + 51) / 114][Stage 71:=====================================>                (79 + 35) / 114][Stage 71:================================================>    (104 + 10) / 114][Stage 71:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.288262037 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=34", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=34,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (58 + 55) / 113][Stage 72:=================================>                    (70 + 43) / 113][Stage 72:=========================================>            (86 + 27) / 113][Stage 72:=================================================>    (104 + 9) / 113]                                                                                [Stage 73:============================>                         (60 + 54) / 114][Stage 73:===============================>                      (67 + 47) / 114][Stage 73:==========================================>           (89 + 25) / 114][Stage 73:==============================================>      (100 + 14) / 114][Stage 73:====================================================> (111 + 3) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.504220957 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:============================>                         (60 + 53) / 113][Stage 74:====================================>                 (76 + 37) / 113][Stage 74:==========================================>           (89 + 24) / 113][Stage 74:===================================================>  (107 + 6) / 113]                                                                                [Stage 75:=============================>                        (62 + 52) / 114][Stage 75:================================>                     (69 + 45) / 114][Stage 75:=========================================>            (88 + 26) / 114][Stage 75:=================================================>    (105 + 9) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.611701826 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407455918 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:=================================>                    (74 + 44) / 118][Stage 76:======================================>               (84 + 34) / 118][Stage 76:============================================>         (97 + 21) / 118][Stage 76:====================================================> (115 + 3) / 118]                                                                                [Stage 77:==================================>                   (75 + 44) / 119][Stage 77:====================================>                 (81 + 38) / 119][Stage 77:=========================================>            (91 + 28) / 119][Stage 77:===============================================>     (106 + 13) / 119][Stage 77:===================================================>  (113 + 6) / 119][Stage 77:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.549305411 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=45", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=45,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401999996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:>                                                       (0 + 0) / 118][Stage 78:================================>                     (72 + 46) / 118][Stage 78:====================================>                 (80 + 38) / 118][Stage 78:========================================>             (89 + 29) / 118][Stage 78:============================================>         (98 + 20) / 118][Stage 78:==================================================>   (110 + 8) / 118]                                                                                [Stage 79:=================================>                    (74 + 45) / 119][Stage 79:===================================>                  (79 + 40) / 119][Stage 79:==========================================>           (93 + 26) / 119][Stage 79:==============================================>      (104 + 15) / 119][Stage 79:===================================================>  (113 + 6) / 119][Stage 79:=====================================================>(117 + 2) / 119][Stage 79:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.794533237 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414640641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:====================================>                 (80 + 38) / 118][Stage 80:===========================================>          (95 + 23) / 118][Stage 80:================================================>    (107 + 11) / 118][Stage 80:=====================================================>(116 + 2) / 118]                                                                                [Stage 81:=================================>                    (74 + 45) / 119][Stage 81:====================================>                 (81 + 38) / 119][Stage 81:============================================>         (98 + 21) / 119][Stage 81:=====================================================>(117 + 2) / 119][Stage 81:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.402826144 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36180332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (81 + 34) / 115][Stage 82:=========================================>            (88 + 27) / 115][Stage 82:============================================>         (95 + 20) / 115][Stage 82:==================================================>   (108 + 7) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:========================================>             (88 + 28) / 116][Stage 83:===============================================>     (103 + 13) / 116][Stage 83:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.818481753 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408572874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (71 + 47) / 118][Stage 84:=================================>                    (74 + 44) / 118][Stage 84:=======================================>              (87 + 31) / 118][Stage 84:==============================================>      (103 + 15) / 118][Stage 84:====================================================> (115 + 3) / 118]                                                                                [Stage 85:=================================>                    (73 + 46) / 119][Stage 85:===================================>                  (78 + 41) / 119][Stage 85:==========================================>           (93 + 26) / 119][Stage 85:===============================================>     (107 + 12) / 119][Stage 85:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.38868476 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374652945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:====================================>                 (76 + 37) / 113][Stage 86:==========================================>           (89 + 24) / 113][Stage 86:=============================================>        (96 + 17) / 113][Stage 86:==================================================>   (105 + 8) / 113][Stage 86:====================================================> (110 + 3) / 113]                                                                                [Stage 87:====================================>                 (78 + 36) / 114][Stage 87:==========================================>           (90 + 24) / 114][Stage 87:==============================================>       (99 + 15) / 114][Stage 87:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.113452891 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391417006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:>                                                       (0 + 0) / 118][Stage 88:=================================>                    (73 + 45) / 118][Stage 88:====================================>                 (79 + 39) / 118][Stage 88:=========================================>            (90 + 28) / 118][Stage 88:===========================================>          (96 + 22) / 118][Stage 88:==================================================>   (111 + 7) / 118]                                                                                [Stage 89:=================================>                    (73 + 46) / 119][Stage 89:======================================>               (85 + 34) / 119][Stage 89:===========================================>          (95 + 24) / 119][Stage 89:==============================================>      (105 + 14) / 119][Stage 89:==================================================>   (112 + 7) / 119][Stage 89:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.546707219 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=160", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=160,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345981975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:======================================>               (83 + 32) / 115][Stage 90:============================================>         (94 + 21) / 115][Stage 90:==================================================>   (108 + 7) / 115]                                                                                [Stage 91:========================================>             (87 + 29) / 116][Stage 91:===========================================>          (94 + 22) / 116][Stage 91:===============================================>     (105 + 11) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.592090773 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=41", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=41,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346952117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (81 + 34) / 115][Stage 92:========================================>             (87 + 28) / 115][Stage 92:================================================>    (105 + 10) / 115][Stage 92:======================================================(115 + 0) / 115]                                                                                [Stage 93:======================================>               (82 + 34) / 116][Stage 93:=========================================>            (89 + 27) / 116][Stage 93:================================================>    (106 + 10) / 116][Stage 93:====================================================> (113 + 3) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.881752658 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (81 + 34) / 115][Stage 94:========================================>             (86 + 29) / 115][Stage 94:===============================================>     (103 + 12) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:=====================================>                (81 + 35) / 116][Stage 95:=========================================>            (90 + 26) / 116][Stage 95:================================================>    (106 + 10) / 116][Stage 95:====================================================> (113 + 3) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.527197435 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=180", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=180,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424682702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:============================>                         (64 + 56) / 120][Stage 96:=================================>                    (75 + 45) / 120][Stage 96:=============================================>       (104 + 16) / 120][Stage 96:====================================================> (117 + 3) / 120]                                                                                [Stage 97:===========================>                          (61 + 60) / 121][Stage 97:=============================>                        (65 + 56) / 121][Stage 97:======================================>               (87 + 34) / 121][Stage 97:================================================>    (111 + 10) / 121][Stage 97:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.602294736 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=58", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=58,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395431372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==============================>                       (64 + 51) / 115][Stage 98:==================================>                   (74 + 41) / 115][Stage 98:============================================>         (95 + 20) / 115][Stage 98:===================================================>  (110 + 5) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:==================================>                   (75 + 41) / 116][Stage 99:======================================>               (83 + 33) / 116][Stage 99:==============================================>       (99 + 17) / 116][Stage 99:==================================================>   (108 + 8) / 116][Stage 99:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 4.748309578 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414953061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===========================>                         (58 + 55) / 113][Stage 100:=============================>                       (62 + 51) / 113][Stage 100:=====================================>               (81 + 32) / 113][Stage 100:==================================================>  (108 + 5) / 113]                                                                                [Stage 101:===========================>                         (59 + 55) / 114][Stage 101:================================>                    (69 + 45) / 114][Stage 101:=======================================>             (85 + 29) / 114][Stage 101:================================================>    (105 + 9) / 114][Stage 101:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.565312899 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386028133 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (73 + 45) / 118][Stage 102:===================================>                 (78 + 40) / 118][Stage 102:=========================================>           (92 + 26) / 118][Stage 102:============================================>       (102 + 16) / 118][Stage 102:===================================================> (114 + 4) / 118]                                                                                [Stage 103:================================>                    (74 + 45) / 119][Stage 103:===================================>                 (79 + 40) / 119][Stage 103:=========================================>           (93 + 26) / 119][Stage 103:=================================================>   (111 + 8) / 119][Stage 103:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.538845983 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438536725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:===========================>                         (63 + 57) / 120][Stage 104:==================================>                  (78 + 42) / 120][Stage 104:=========================================>           (94 + 26) / 120][Stage 104:===============================================>    (110 + 10) / 120][Stage 104:===================================================> (116 + 4) / 120]                                                                                [Stage 105:===========================>                         (62 + 59) / 121][Stage 105:=================================>                   (76 + 45) / 121][Stage 105:============================================>       (103 + 18) / 121][Stage 105:===================================================> (118 + 3) / 121][Stage 105:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.541552395 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (60 + 60) / 120][Stage 106:===========================>                         (63 + 57) / 120][Stage 106:==================================>                  (79 + 41) / 120][Stage 106:========================================>            (91 + 29) / 120][Stage 106:==================================================>  (115 + 5) / 120]                                                                                [Stage 107:============================>                        (65 + 56) / 121][Stage 107:================================>                    (75 + 46) / 121][Stage 107:============================================>       (104 + 17) / 121][Stage 107:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.298431719 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=55", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=55,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395643442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:====================================>                (79 + 36) / 115][Stage 108:==========================================>          (93 + 22) / 115][Stage 108:===============================================>    (104 + 11) / 115][Stage 108:====================================================>(113 + 2) / 115]                                                                                [Stage 109:================================>                    (71 + 45) / 116][Stage 109:=======================================>             (87 + 29) / 116][Stage 109:=============================================>       (99 + 17) / 116][Stage 109:==================================================>  (111 + 5) / 116][Stage 109:====================================================>(114 + 2) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.384796493 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=82", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=82,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393965033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (72 + 43) / 115][Stage 110:======================================>              (84 + 31) / 115][Stage 110:=============================================>      (100 + 15) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:==============================>                      (67 + 49) / 116][Stage 111:=======================================>             (86 + 30) / 116][Stage 111:============================================>        (97 + 19) / 116][Stage 111:=================================================>   (109 + 7) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.829886876 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361687493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=================================>                   (72 + 41) / 113][Stage 112:========================================>            (86 + 27) / 113][Stage 112:===========================================>         (93 + 20) / 113][Stage 112:=================================================>   (106 + 7) / 113][Stage 112:===================================================> (110 + 3) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:=================================>                   (72 + 42) / 114][Stage 113:========================================>            (87 + 27) / 114][Stage 113:============================================>        (95 + 19) / 114][Stage 113:================================================>    (105 + 9) / 114][Stage 113:==================================================>  (109 + 5) / 114][Stage 113:====================================================>(112 + 2) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.240116057 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=103", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=103,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400081992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:==============================>                      (65 + 48) / 113][Stage 114:=====================================>               (80 + 33) / 113][Stage 114:==============================================>      (99 + 14) / 113][Stage 114:===================================================> (110 + 3) / 113]                                                                                [Stage 115:============================>                        (62 + 52) / 114][Stage 115:=================================>                   (71 + 43) / 114][Stage 115:==========================================>          (91 + 23) / 114][Stage 115:================================================>    (105 + 9) / 114][Stage 115:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.425191331 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=38", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=38,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480294745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:===========================>                         (63 + 57) / 120][Stage 116:==================================>                  (77 + 43) / 120][Stage 116:===========================================>         (99 + 21) / 120][Stage 116:====================================================>(118 + 2) / 120]                                                                                [Stage 117:===========================>                         (63 + 58) / 121][Stage 117:================================>                    (74 + 47) / 121][Stage 117:==========================================>          (96 + 25) / 121][Stage 117:=================================================>   (113 + 8) / 121][Stage 117:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.498565404 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394262027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (75 + 43) / 118][Stage 118:=====================================>               (83 + 35) / 118][Stage 118:========================================>            (90 + 28) / 118][Stage 118:============================================>       (100 + 18) / 118][Stage 118:===================================================> (115 + 3) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:==================================>                  (77 + 42) / 119][Stage 119:=======================================>             (89 + 30) / 119][Stage 119:===========================================>        (100 + 19) / 119][Stage 119:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.459619504 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394336645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:============================>                        (61 + 52) / 113][Stage 120:==================================>                  (73 + 40) / 113][Stage 120:========================================>            (86 + 27) / 113][Stage 120:================================================>    (104 + 9) / 113][Stage 120:====================================================>(111 + 2) / 113]                                                                                [Stage 121:===========================>                         (59 + 55) / 114][Stage 121:============================>                        (61 + 53) / 114][Stage 121:===================================>                 (77 + 37) / 114][Stage 121:========================================>            (87 + 27) / 114][Stage 121:==============================================>     (101 + 13) / 114][Stage 121:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.5995885 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=155", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=155,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394327742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==================================>                  (74 + 39) / 113][Stage 122:=======================================>             (85 + 28) / 113][Stage 122:==============================================>     (100 + 13) / 113][Stage 122:=================================================>   (105 + 8) / 113][Stage 122:===================================================> (110 + 3) / 113]                                                                                [Stage 123:======================================>              (83 + 31) / 114][Stage 123:==========================================>          (91 + 23) / 114][Stage 123:==============================================>     (102 + 12) / 114][Stage 123:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.924564133 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38572023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=============================>                       (65 + 50) / 115][Stage 124:====================================>                (80 + 35) / 115][Stage 124:=============================================>       (98 + 17) / 115][Stage 124:==================================================>  (110 + 5) / 115]                                                                                [Stage 125:=================================>                   (73 + 43) / 116][Stage 125:=========================================>           (91 + 25) / 116][Stage 125:==============================================>     (104 + 12) / 116][Stage 125:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.778404487 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407182286 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 60) / 120][Stage 126:================================>                    (73 + 47) / 120][Stage 126:========================================>            (92 + 28) / 120][Stage 126:===============================================>    (110 + 10) / 120]                                                                                [Stage 127:===========================>                         (63 + 58) / 121][Stage 127:================================>                    (75 + 46) / 121][Stage 127:=========================================>           (94 + 27) / 121][Stage 127:==================================================>  (116 + 5) / 121][Stage 127:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.209079386 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392847792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:==========================>                          (61 + 59) / 120][Stage 128:=================================>                   (76 + 44) / 120][Stage 128:=========================================>           (93 + 27) / 120][Stage 128:===================================================> (116 + 4) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:============================>                        (65 + 56) / 121][Stage 129:====================================>                (83 + 38) / 121][Stage 129:===========================================>        (102 + 19) / 121][Stage 129:====================================================>(119 + 2) / 121][Stage 129:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.304014378 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=164", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=164,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368851663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===============================>                     (68 + 47) / 115][Stage 130:==================================>                  (75 + 40) / 115][Stage 130:=============================================>       (98 + 17) / 115][Stage 130:===================================================> (111 + 4) / 115][Stage 130:====================================================>(113 + 2) / 115]                                                                                [Stage 131:===================================>                 (78 + 38) / 116][Stage 131:========================================>            (89 + 27) / 116][Stage 131:===============================================>    (105 + 11) / 116][Stage 131:==================================================>  (111 + 5) / 116][Stage 131:===================================================> (113 + 3) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.283456167 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=109", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=109,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461616518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=====================================>               (80 + 33) / 113][Stage 132:=========================================>           (89 + 24) / 113][Stage 132:==============================================>     (102 + 11) / 113][Stage 132:====================================================>(111 + 2) / 113]                                                                                [Stage 133:====================================>                (79 + 35) / 114][Stage 133:========================================>            (88 + 26) / 114][Stage 133:=============================================>      (100 + 14) / 114][Stage 133:==================================================>  (108 + 6) / 114][Stage 133:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.979626728 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392202364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:==============================>                      (70 + 50) / 120][Stage 134:=========================================>           (93 + 27) / 120][Stage 134:=================================================>   (112 + 8) / 120][Stage 134:====================================================>(118 + 2) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:============================>                        (66 + 55) / 121][Stage 135:===================================>                 (80 + 41) / 121][Stage 135:============================================>       (103 + 18) / 121][Stage 135:====================================================>(119 + 2) / 121][Stage 135:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.514606536 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3804526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (59 + 54) / 113][Stage 136:===============================>                     (67 + 46) / 113][Stage 136:=======================================>             (85 + 28) / 113][Stage 136:=================================================>   (105 + 8) / 113]                                                                                [Stage 137:===========================>                         (60 + 54) / 114][Stage 137:=================================>                   (73 + 41) / 114][Stage 137:==========================================>          (92 + 22) / 114][Stage 137:================================================>    (105 + 9) / 114][Stage 137:===================================================> (111 + 3) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.40736857 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362135552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (72 + 46) / 118][Stage 138:=================================>                   (74 + 44) / 118][Stage 138:===================================>                 (80 + 38) / 118][Stage 138:=====================================>               (83 + 35) / 118][Stage 138:===========================================>         (96 + 22) / 118][Stage 138:====================================================>(117 + 1) / 118]                                                                                [Stage 139:================================>                    (73 + 46) / 119][Stage 139:=================================>                   (76 + 43) / 119][Stage 139:====================================>                (81 + 38) / 119][Stage 139:========================================>            (90 + 29) / 119][Stage 139:=============================================>      (103 + 16) / 119][Stage 139:==================================================>  (114 + 5) / 119][Stage 139:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.360733524 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=254", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=254,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395604491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (60 + 60) / 120][Stage 140:===========================>                         (63 + 57) / 120][Stage 140:====================================>                (82 + 38) / 120][Stage 140:=================================================>   (111 + 9) / 120][Stage 140:====================================================>(118 + 2) / 120][Stage 140:====================================================>(119 + 1) / 120]                                                                                [Stage 141:===========================>                         (62 + 59) / 121][Stage 141:===============================>                     (71 + 50) / 121][Stage 141:=====================================>               (85 + 36) / 121][Stage 141:==============================================>     (108 + 13) / 121][Stage 141:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.283834129 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33757826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=====================================>               (81 + 34) / 115][Stage 142:==========================================>          (93 + 22) / 115][Stage 142:=================================================>   (108 + 7) / 115][Stage 142:====================================================>(113 + 2) / 115]                                                                                [Stage 143:=====================================>               (82 + 34) / 116][Stage 143:========================================>            (89 + 27) / 116][Stage 143:=============================================>      (101 + 15) / 116][Stage 143:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.756629952 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391645873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (58 + 55) / 113][Stage 144:===============================>                     (67 + 46) / 113][Stage 144:=======================================>             (84 + 29) / 113][Stage 144:==============================================>      (99 + 14) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:===========================>                         (59 + 55) / 114][Stage 145:==============================>                      (66 + 48) / 114][Stage 145:======================================>              (82 + 32) / 114][Stage 145:=============================================>       (98 + 16) / 114][Stage 145:=================================================>   (107 + 7) / 114][Stage 145:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.712297585 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=120", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=120,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375289052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==============================>                      (66 + 49) / 115][Stage 146:=====================================>               (81 + 34) / 115][Stage 146:=========================================>           (90 + 25) / 115][Stage 146:===============================================>    (105 + 10) / 115][Stage 146:===================================================> (111 + 4) / 115]                                                                                [Stage 147:==================================>                  (75 + 41) / 116][Stage 147:=======================================>             (87 + 29) / 116][Stage 147:============================================>        (97 + 19) / 116][Stage 147:=================================================>   (109 + 7) / 116][Stage 147:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.171579941 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454606016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:==================================>                  (76 + 42) / 118][Stage 148:===================================>                 (79 + 39) / 118][Stage 148:===========================================>         (97 + 21) / 118][Stage 148:===============================================>    (108 + 10) / 118][Stage 148:====================================================>(117 + 1) / 118]                                                                                [Stage 149:================================>                    (74 + 45) / 119][Stage 149:====================================>                (81 + 38) / 119][Stage 149:======================================>              (87 + 32) / 119][Stage 149:===========================================>         (97 + 22) / 119][Stage 149:===============================================>    (108 + 11) / 119][Stage 149:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.839100566 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377728337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (58 + 55) / 113][Stage 150:============================>                        (60 + 53) / 113][Stage 150:=================================>                   (71 + 42) / 113][Stage 150:=============================================>       (98 + 15) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:============================>                        (62 + 52) / 114][Stage 151:================================>                    (69 + 45) / 114][Stage 151:=========================================>           (89 + 25) / 114][Stage 151:===================================================> (111 + 3) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.261368793 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=107", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=107,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377429634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===========================>                         (58 + 55) / 113][Stage 152:===============================>                     (67 + 46) / 113][Stage 152:======================================>              (82 + 31) / 113][Stage 152:==============================================>     (100 + 13) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:===========================>                         (59 + 55) / 114][Stage 153:=============================>                       (63 + 51) / 114][Stage 153:=================================>                   (72 + 42) / 114][Stage 153:==========================================>          (91 + 23) / 114][Stage 153:==============================================>     (101 + 13) / 114][Stage 153:====================================================>(112 + 2) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.554380769 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=52", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=52,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335038341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:======================================>              (83 + 32) / 115][Stage 154:=========================================>           (90 + 25) / 115][Stage 154:===============================================>    (105 + 10) / 115][Stage 154:==================================================>  (110 + 5) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:=====================================>               (82 + 34) / 116][Stage 155:=========================================>           (90 + 26) / 116][Stage 155:=============================================>       (99 + 17) / 116][Stage 155:===============================================>    (105 + 11) / 116][Stage 155:==================================================>  (110 + 6) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.368047546 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389319034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:===============================>                     (68 + 45) / 113][Stage 156:=====================================>               (80 + 33) / 113][Stage 156:===========================================>         (92 + 21) / 113][Stage 156:=================================================>   (106 + 7) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:============================>                        (61 + 53) / 114][Stage 157:===================================>                 (76 + 38) / 114][Stage 157:==========================================>          (91 + 23) / 114][Stage 157:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.596993665 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372671372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:================================>                    (73 + 45) / 118][Stage 158:==================================>                  (77 + 41) / 118][Stage 158:====================================>                (82 + 36) / 118][Stage 158:========================================>            (90 + 28) / 118][Stage 158:================================================>    (109 + 9) / 118]                                                                                [Stage 159:=================================>                   (75 + 44) / 119][Stage 159:==================================>                  (78 + 41) / 119][Stage 159:======================================>              (86 + 33) / 119][Stage 159:===========================================>         (98 + 21) / 119][Stage 159:=================================================>   (111 + 8) / 119][Stage 159:====================================================>(117 + 2) / 119][Stage 159:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.852957001 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=48", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=48,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367689993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (71 + 44) / 115][Stage 160:=====================================>               (81 + 34) / 115][Stage 160:=============================================>      (100 + 15) / 115][Stage 160:==================================================>  (109 + 6) / 115][Stage 160:====================================================>(113 + 2) / 115]                                                                                [Stage 161:=================================>                   (74 + 42) / 116][Stage 161:========================================>            (89 + 27) / 116][Stage 161:=============================================>      (101 + 15) / 116][Stage 161:=================================================>   (108 + 8) / 116][Stage 161:====================================================>(114 + 2) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.796577526 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354083142 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===================================>                 (76 + 37) / 113][Stage 162:========================================>            (86 + 27) / 113][Stage 162:=============================================>       (97 + 16) / 113][Stage 162:==================================================>  (108 + 5) / 113]                                                                                [Stage 163:=====================================>               (81 + 33) / 114][Stage 163:==========================================>          (91 + 23) / 114][Stage 163:==============================================>     (101 + 13) / 114][Stage 163:=================================================>   (107 + 7) / 114][Stage 163:===================================================> (111 + 3) / 114][Stage 163:====================================================>(112 + 2) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.09618846 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (72 + 41) / 113][Stage 164:======================================>              (83 + 30) / 113][Stage 164:==============================================>      (99 + 14) / 113][Stage 164:==================================================>  (107 + 6) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:=================================>                   (73 + 41) / 114][Stage 165:=====================================>               (81 + 33) / 114][Stage 165:============================================>        (96 + 18) / 114][Stage 165:===============================================>    (104 + 10) / 114][Stage 165:==================================================>  (109 + 5) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.785604034 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=181", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=181,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390378226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==============================>                      (66 + 49) / 115][Stage 166:===================================>                 (77 + 38) / 115][Stage 166:==========================================>          (92 + 23) / 115][Stage 166:==================================================>  (109 + 6) / 115][Stage 166:===================================================> (111 + 4) / 115]                                                                                [Stage 167:================================>                    (71 + 45) / 116][Stage 167:==========================================>          (92 + 24) / 116][Stage 167:================================================>    (107 + 9) / 116][Stage 167:===================================================> (112 + 4) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.180122826 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342224814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:====================================>                (80 + 35) / 115][Stage 168:=======================================>             (86 + 29) / 115][Stage 168:==============================================>     (103 + 12) / 115][Stage 168:===================================================> (112 + 3) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:======================================>              (85 + 31) / 116][Stage 169:==========================================>          (93 + 23) / 116][Stage 169:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.64294901 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363782009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:====================================>                (77 + 36) / 113][Stage 170:=======================================>             (84 + 29) / 113][Stage 170:==============================================>      (99 + 14) / 113][Stage 170:=================================================>   (106 + 7) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:=======================================>             (86 + 28) / 114][Stage 171:===========================================>         (93 + 21) / 114][Stage 171:=============================================>       (98 + 16) / 114][Stage 171:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.158989406 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=40", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=40,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46070891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:==================================>                  (76 + 42) / 118][Stage 172:=========================================>           (92 + 26) / 118][Stage 172:===============================================>    (108 + 10) / 118][Stage 172:====================================================>(117 + 1) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:====================================>                (81 + 38) / 119][Stage 173:===========================================>         (98 + 21) / 119][Stage 173:===================================================> (116 + 3) / 119][Stage 173:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.342900842 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392427887 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:============================>                        (64 + 56) / 120][Stage 174:===============================>                     (71 + 49) / 120][Stage 174:========================================>            (92 + 28) / 120][Stage 174:=================================================>   (112 + 8) / 120]                                                                                [Stage 175:==========================>                          (61 + 60) / 121][Stage 175:===============================>                     (72 + 49) / 121][Stage 175:======================================>              (87 + 34) / 121][Stage 175:=================================================>   (112 + 9) / 121][Stage 175:===================================================> (118 + 3) / 121][Stage 175:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.572836999 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=251", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=251,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345921101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=====================================>               (80 + 33) / 113][Stage 176:===========================================>         (93 + 20) / 113][Stage 176:================================================>    (104 + 9) / 113][Stage 176:===================================================> (110 + 3) / 113]                                                                                [Stage 177:=======================================>             (85 + 29) / 114][Stage 177:===========================================>         (94 + 20) / 114][Stage 177:==============================================>     (102 + 12) / 114][Stage 177:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.946149432 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394203109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:================================>                    (69 + 44) / 113][Stage 178:=======================================>             (85 + 28) / 113][Stage 178:==================================================>  (107 + 6) / 113]                                                                                [Stage 179:===========================>                         (60 + 54) / 114][Stage 179:================================>                    (69 + 45) / 114][Stage 179:======================================>              (83 + 31) / 114][Stage 179:===============================================>    (104 + 10) / 114][Stage 179:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.292785341 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=236", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=236,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386809842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (59 + 54) / 113][Stage 180:=================================>                   (71 + 42) / 113][Stage 180:======================================>              (82 + 31) / 113][Stage 180:================================================>    (104 + 9) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:============================>                        (62 + 52) / 114][Stage 181:===================================>                 (76 + 38) / 114][Stage 181:===========================================>         (94 + 20) / 114][Stage 181:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.172625844 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=56", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=56,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:============================>                        (61 + 52) / 113][Stage 182:=================================>                   (71 + 42) / 113][Stage 182:=========================================>           (88 + 25) / 113][Stage 182:=================================================>   (106 + 7) / 113]                                                                                [Stage 183:=============================>                       (64 + 50) / 114][Stage 183:=================================>                   (72 + 42) / 114][Stage 183:=============================================>       (98 + 16) / 114][Stage 183:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.158249819 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (59 + 54) / 113][Stage 184:================================>                    (69 + 44) / 113][Stage 184:==========================================>          (91 + 22) / 113][Stage 184:================================================>    (104 + 9) / 113]                                                                                [Stage 185:============================>                        (61 + 53) / 114][Stage 185:================================>                    (69 + 45) / 114][Stage 185:=====================================>               (81 + 33) / 114][Stage 185:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.006886715 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401083407 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:===========================>                         (63 + 57) / 120][Stage 186:===============================>                     (71 + 49) / 120][Stage 186:===========================================>         (99 + 21) / 120][Stage 186:==================================================>  (115 + 5) / 120]                                                                                [Stage 187:==========================>                          (61 + 60) / 121][Stage 187:===============================>                     (72 + 49) / 121][Stage 187:======================================>              (88 + 33) / 121][Stage 187:=============================================>      (106 + 15) / 121][Stage 187:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.437860093 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393032896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:============================>                        (61 + 52) / 113][Stage 188:=================================>                   (72 + 41) / 113][Stage 188:========================================>            (87 + 26) / 113][Stage 188:=================================================>   (106 + 7) / 113]                                                                                [Stage 189:============================>                        (61 + 53) / 114][Stage 189:================================>                    (70 + 44) / 114][Stage 189:======================================>              (83 + 31) / 114][Stage 189:============================================>        (96 + 18) / 114][Stage 189:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.419205711 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422230257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:==============================>                      (70 + 50) / 120][Stage 190:=====================================>               (84 + 36) / 120][Stage 190:=============================================>      (106 + 14) / 120][Stage 190:===================================================> (116 + 4) / 120]                                                                                [Stage 191:===========================>                         (63 + 58) / 121][Stage 191:================================>                    (75 + 46) / 121][Stage 191:========================================>            (92 + 29) / 121][Stage 191:=================================================>   (113 + 8) / 121][Stage 191:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.334763701 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=152", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=152,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345176506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:======================================>              (84 + 31) / 115][Stage 192:=============================================>       (98 + 17) / 115][Stage 192:==================================================>  (109 + 6) / 115][Stage 192:===================================================> (111 + 4) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:=======================================>             (87 + 29) / 116][Stage 193:============================================>        (98 + 18) / 116][Stage 193:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.921713084 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330621134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=======================================>             (86 + 29) / 115][Stage 194:===========================================>         (94 + 21) / 115][Stage 194:================================================>    (106 + 9) / 115][Stage 194:===================================================> (111 + 4) / 115][Stage 194:====================================================>(114 + 1) / 115]                                                                                [Stage 195:=======================================>             (86 + 30) / 116][Stage 195:==========================================>          (92 + 24) / 116][Stage 195:===============================================>    (106 + 10) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.952658641 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411057813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (60 + 60) / 120][Stage 196:===========================>                         (62 + 58) / 120][Stage 196:====================================>                (83 + 37) / 120][Stage 196:=================================================>   (113 + 7) / 120]                                                                                [Stage 197:==========================>                          (61 + 60) / 121][Stage 197:===============================>                     (73 + 48) / 121][Stage 197:==========================================>          (96 + 25) / 121][Stage 197:===============================================>    (111 + 10) / 121][Stage 197:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.24329538 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 60) / 120][Stage 198:=============================>                       (66 + 54) / 120][Stage 198:=========================================>           (94 + 26) / 120][Stage 198:==================================================>  (115 + 5) / 120]                                                                                [Stage 199:===========================>                         (63 + 58) / 121][Stage 199:==================================>                  (78 + 43) / 121][Stage 199:==========================================>         (100 + 21) / 121][Stage 199:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.202769226 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342985633 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===================================>                 (76 + 37) / 113][Stage 200:=======================================>             (85 + 28) / 113][Stage 200:===========================================>         (93 + 20) / 113][Stage 200:==================================================>  (107 + 6) / 113][Stage 200:====================================================>(111 + 2) / 113]                                                                                [Stage 201:==================================>                  (74 + 40) / 114][Stage 201:======================================>              (82 + 32) / 114][Stage 201:===========================================>         (93 + 21) / 114][Stage 201:===============================================>    (104 + 10) / 114][Stage 201:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.009736642 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m27.050s
user	11m42.276s
sys	0m50.012s
