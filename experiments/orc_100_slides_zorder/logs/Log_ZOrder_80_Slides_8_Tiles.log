Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 03:46:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:46:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:46:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:46:53 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 03:46:55 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:47:06 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601034655-0750).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.402145112 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (46 + 69) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.941695226 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.686916151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:============>                                          (25 + 88) / 113][Stage 2:===========================>                           (57 + 56) / 113][Stage 2:=================================>                     (69 + 44) / 113][Stage 2:===================================>                   (73 + 40) / 113][Stage 2:======================================>                (79 + 34) / 113][Stage 2:==========================================>            (88 + 25) / 113][Stage 2:============================================>          (92 + 21) / 113][Stage 2:===============================================>       (97 + 16) / 113][Stage 2:================================================>     (102 + 11) / 113][Stage 2:===================================================>   (105 + 8) / 113][Stage 2:=====================================================> (109 + 4) / 113][Stage 2:=====================================================> (110 + 3) / 113][Stage 2:======================================================>(111 + 2) / 113]                                                                                [Stage 3:===============================>                       (66 + 48) / 114][Stage 3:====================================>                  (76 + 38) / 114][Stage 3:=======================================>               (81 + 33) / 114][Stage 3:==========================================>            (88 + 26) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:=================================================>    (104 + 10) / 114][Stage 3:====================================================>  (109 + 5) / 114][Stage 3:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 5.860006784 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.766090952 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=====================>                                 (47 + 73) / 120][Stage 4:===========================>                           (60 + 60) / 120][Stage 4:=============================>                         (64 + 56) / 120][Stage 4:===============================>                       (69 + 51) / 120][Stage 4:===================================>                   (78 + 42) / 120][Stage 4:============================================>          (96 + 24) / 120][Stage 4:=================================================>    (109 + 11) / 120][Stage 4:======================================================>(119 + 1) / 120]                                                                                [Stage 5:===========================>                           (61 + 60) / 121][Stage 5:============================>                          (62 + 59) / 121][Stage 5:================================>                      (72 + 49) / 121][Stage 5:======================================>                (85 + 36) / 121][Stage 5:============================================>         (100 + 21) / 121][Stage 5:==================================================>    (112 + 9) / 121][Stage 5:=====================================================> (118 + 3) / 121][Stage 5:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 7.235929729 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.55970405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=====================================>                 (78 + 37) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:==========================================>            (89 + 26) / 115][Stage 6:=============================================>         (95 + 20) / 115][Stage 6:===============================================>      (102 + 13) / 115][Stage 6:==================================================>    (106 + 9) / 115][Stage 6:===================================================>   (107 + 8) / 115][Stage 6:====================================================>  (109 + 6) / 115][Stage 6:=====================================================> (112 + 3) / 115]                                                                                [Stage 7:======================================>                (81 + 35) / 116][Stage 7:=======================================>               (84 + 32) / 116][Stage 7:=========================================>             (88 + 28) / 116][Stage 7:============================================>          (94 + 22) / 116][Stage 7:===============================================>      (103 + 13) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:=====================================================> (113 + 3) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 10.612467594 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.587307317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=============================>                         (61 + 54) / 115][Stage 8:===================================>                   (75 + 40) / 115][Stage 8:=========================================>             (86 + 29) / 115][Stage 8:===========================================>           (91 + 24) / 115][Stage 8:=============================================>         (96 + 19) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:======================================================>(113 + 2) / 115]                                                                                [Stage 9:====================================>                  (76 + 40) / 116][Stage 9:=========================================>             (88 + 28) / 116][Stage 9:===========================================>           (92 + 24) / 116][Stage 9:==============================================>        (98 + 18) / 116][Stage 9:===============================================>      (103 + 13) / 116][Stage 9:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.104357566 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47301035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===================================>                  (75 + 40) / 115][Stage 10:======================================>               (83 + 32) / 115][Stage 10:==========================================>           (90 + 25) / 115][Stage 10:============================================>         (94 + 21) / 115][Stage 10:================================================>    (105 + 10) / 115][Stage 10:==================================================>   (108 + 7) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:=====================================>                (80 + 36) / 116][Stage 11:========================================>             (87 + 29) / 116][Stage 11:============================================>         (96 + 20) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:=================================================>    (107 + 9) / 116][Stage 11:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 3.748867473 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498660085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (80 + 35) / 115][Stage 12:======================================>               (83 + 32) / 115][Stage 12:===========================================>          (93 + 22) / 115][Stage 12:==============================================>      (101 + 14) / 115][Stage 12:================================================>    (105 + 10) / 115][Stage 12:===================================================>  (110 + 5) / 115]                                                                                [Stage 13:=====================================>                (81 + 35) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.182572956 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516726628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===============================>                      (68 + 50) / 118][Stage 14:=================================>                    (73 + 45) / 118][Stage 14:=====================================>                (82 + 36) / 118][Stage 14:===========================================>          (96 + 22) / 118][Stage 14:==================================================>   (111 + 7) / 118][Stage 14:====================================================> (114 + 4) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:====================================>                 (80 + 39) / 119][Stage 15:==========================================>           (93 + 26) / 119][Stage 15:====================================================> (115 + 4) / 119][Stage 15:====================================================> (116 + 3) / 119][Stage 15:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.236321543 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=36", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=36,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.641208182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:============================>                         (59 + 54) / 113][Stage 16:===============================>                      (65 + 48) / 113][Stage 16:=======================================>              (83 + 30) / 113][Stage 16:==============================================>       (98 + 15) / 113][Stage 16:===================================================>  (107 + 6) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:===========================>                          (59 + 55) / 114][Stage 17:===============================>                      (67 + 47) / 114][Stage 17:=======================================>              (84 + 30) / 114][Stage 17:=============================================>        (97 + 17) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.458508216 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.543069586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:==================================>                   (75 + 43) / 118][Stage 18:=======================================>              (86 + 32) / 118][Stage 18:===========================================>          (96 + 22) / 118][Stage 18:=================================================>    (109 + 9) / 118][Stage 18:=====================================================>(117 + 1) / 118]                                                                                [Stage 19:==================================>                   (75 + 44) / 119][Stage 19:====================================>                 (81 + 38) / 119][Stage 19:=======================================>              (87 + 32) / 119][Stage 19:==============================================>      (105 + 14) / 119][Stage 19:=====================================================>(117 + 2) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.274775965 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=94", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=94,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433937497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=====================================>                (80 + 35) / 115][Stage 20:========================================>             (86 + 29) / 115][Stage 20:============================================>         (94 + 21) / 115][Stage 20:==================================================>   (107 + 8) / 115]                                                                                [Stage 21:======================================>               (83 + 33) / 116][Stage 21:===========================================>          (93 + 23) / 116][Stage 21:===============================================>     (104 + 12) / 116][Stage 21:===================================================>  (110 + 6) / 116][Stage 21:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.077309203 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=108", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=108,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464876967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:======================================>               (82 + 33) / 115][Stage 22:=========================================>            (89 + 26) / 115][Stage 22:==============================================>       (99 + 16) / 115][Stage 22:===============================================>     (104 + 11) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:========================================>             (86 + 30) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:===================================================>  (111 + 5) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.303745869 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469062375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:=================================>                    (73 + 45) / 118][Stage 24:==================================>                   (75 + 43) / 118][Stage 24:=====================================>                (81 + 37) / 118][Stage 24:===========================================>          (95 + 23) / 118][Stage 24:==================================================>   (110 + 8) / 118][Stage 24:=====================================================>(117 + 1) / 118]                                                                                [Stage 25:=================================>                    (74 + 45) / 119][Stage 25:==================================>                   (75 + 44) / 119][Stage 25:=====================================>                (83 + 36) / 119][Stage 25:============================================>        (100 + 19) / 119][Stage 25:==================================================>   (112 + 7) / 119][Stage 25:====================================================> (116 + 3) / 119][Stage 25:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.858174034 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=196", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=196,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53274035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:============================>                         (63 + 57) / 120][Stage 26:===============================>                      (71 + 49) / 120][Stage 26:=========================================>            (92 + 28) / 120][Stage 26:=============================================>       (102 + 18) / 120][Stage 26:=================================================>    (111 + 9) / 120][Stage 26:===================================================>  (115 + 5) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:=================================>                    (74 + 47) / 121][Stage 27:===========================================>          (97 + 24) / 121][Stage 27:==================================================>   (113 + 8) / 121][Stage 27:====================================================> (118 + 3) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.33981757 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:================================>                     (72 + 48) / 120][Stage 28:==============================================>      (105 + 15) / 120][Stage 28:====================================================> (116 + 4) / 120][Stage 28:====================================================> (117 + 3) / 120]                                                                                [Stage 29:===========================>                          (61 + 60) / 121][Stage 29:=============================>                        (66 + 55) / 121][Stage 29:====================================>                 (82 + 39) / 121][Stage 29:=============================================>       (104 + 17) / 121][Stage 29:=================================================>    (112 + 9) / 121][Stage 29:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.142135605 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488598285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:================================>                     (68 + 45) / 113][Stage 30:======================================>               (81 + 32) / 113][Stage 30:==============================================>      (100 + 13) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:===========================>                          (59 + 55) / 114][Stage 31:===============================>                      (66 + 48) / 114][Stage 31:=====================================>                (79 + 35) / 114][Stage 31:==============================================>       (98 + 16) / 114][Stage 31:==================================================>   (106 + 8) / 114][Stage 31:===================================================>  (109 + 5) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.899120591 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (58 + 55) / 113][Stage 32:=============================>                        (61 + 52) / 113][Stage 32:==================================>                   (73 + 40) / 113][Stage 32:===========================================>          (92 + 21) / 113][Stage 32:====================================================> (110 + 3) / 113][Stage 32:=====================================================>(112 + 1) / 113]                                                                                [Stage 33:===========================>                          (59 + 55) / 114][Stage 33:==============================>                       (65 + 49) / 114][Stage 33:=====================================>                (79 + 35) / 114][Stage 33:=============================================>        (96 + 18) / 114][Stage 33:===================================================>  (109 + 5) / 114][Stage 33:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.739901573 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500782207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==============================>                       (65 + 50) / 115][Stage 34:====================================>                 (78 + 37) / 115][Stage 34:============================================>         (95 + 20) / 115][Stage 34:=================================================>    (106 + 9) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:=====================================>                (81 + 35) / 116][Stage 35:===============================================>     (105 + 11) / 116][Stage 35:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.810020544 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=255", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=255,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462364923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=============================>                        (62 + 53) / 115][Stage 36:==================================>                   (74 + 41) / 115][Stage 36:=========================================>            (89 + 26) / 115][Stage 36:==============================================>      (101 + 14) / 115][Stage 36:=====================================================>(113 + 2) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:=================================>                    (73 + 43) / 116][Stage 37:========================================>             (88 + 28) / 116][Stage 37:===============================================>     (103 + 13) / 116][Stage 37:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.100106203 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=188", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=188,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482913622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:============================>                         (59 + 54) / 113][Stage 38:==============================>                       (64 + 49) / 113][Stage 38:========================================>             (84 + 29) / 113][Stage 38:==================================================>   (106 + 7) / 113]                                                                                [Stage 39:============================>                         (60 + 54) / 114][Stage 39:===============================>                      (66 + 48) / 114][Stage 39:======================================>               (82 + 32) / 114][Stage 39:===============================================>     (102 + 12) / 114][Stage 39:====================================================> (111 + 3) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.672103387 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:============================>                         (59 + 54) / 113][Stage 40:==============================>                       (64 + 49) / 113][Stage 40:========================================>             (84 + 29) / 113][Stage 40:================================================>    (103 + 10) / 113][Stage 40:===================================================>  (107 + 6) / 113][Stage 40:===================================================>  (108 + 5) / 113]                                                                                [Stage 41:===========================>                          (59 + 55) / 114][Stage 41:=============================>                        (62 + 52) / 114][Stage 41:====================================>                 (78 + 36) / 114][Stage 41:============================================>         (94 + 20) / 114][Stage 41:==================================================>   (106 + 8) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.047259844 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508444415 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:=================================>                    (74 + 44) / 118][Stage 42:=======================================>              (86 + 32) / 118][Stage 42:==========================================>           (93 + 25) / 118][Stage 42:===============================================>     (106 + 12) / 118][Stage 42:====================================================> (114 + 4) / 118][Stage 42:=====================================================>(117 + 1) / 118]                                                                                [Stage 43:=================================>                    (73 + 46) / 119][Stage 43:==================================>                   (76 + 43) / 119][Stage 43:======================================>               (85 + 34) / 119][Stage 43:==============================================>      (104 + 15) / 119][Stage 43:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.762994332 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=164", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=164,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:>                                                       (0 + 0) / 118][Stage 44:================================>                     (72 + 46) / 118][Stage 44:=================================>                    (74 + 44) / 118][Stage 44:=====================================>                (82 + 36) / 118][Stage 44:==========================================>           (93 + 25) / 118][Stage 44:=============================================>       (101 + 17) / 118][Stage 44:===================================================>  (113 + 5) / 118][Stage 44:=====================================================>(117 + 1) / 118]                                                                                [Stage 45:=================================>                    (73 + 46) / 119][Stage 45:==================================>                   (76 + 43) / 119][Stage 45:======================================>               (84 + 35) / 119][Stage 45:============================================>        (100 + 19) / 119][Stage 45:===================================================>  (114 + 5) / 119][Stage 45:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.01280075 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571595104 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (66 + 49) / 115][Stage 46:===================================>                  (76 + 39) / 115][Stage 46:=============================================>        (97 + 18) / 115][Stage 46:==================================================>   (107 + 8) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:===============================>                      (67 + 49) / 116][Stage 47:======================================>               (82 + 34) / 116][Stage 47:========================================>             (88 + 28) / 116][Stage 47:=============================================>       (100 + 16) / 116][Stage 47:=================================================>    (107 + 9) / 116][Stage 47:===================================================>  (110 + 6) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.867664558 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=202", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=202,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466882707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (58 + 55) / 113][Stage 48:==============================>                       (64 + 49) / 113][Stage 48:====================================>                 (76 + 37) / 113][Stage 48:===========================================>          (92 + 21) / 113][Stage 48:==================================================>   (106 + 7) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:============================>                         (60 + 54) / 114][Stage 49:================================>                     (68 + 46) / 114][Stage 49:======================================>               (82 + 32) / 114][Stage 49:==============================================>       (98 + 16) / 114][Stage 49:==================================================>   (107 + 7) / 114][Stage 49:======================================================(114 + 0) / 114]                                                                                Time elapsed: 3.877222681 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455671929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==============================>                       (66 + 49) / 115][Stage 50:======================================>               (82 + 33) / 115][Stage 50:==============================================>       (98 + 17) / 115][Stage 50:===============================================>     (104 + 11) / 115][Stage 50:====================================================> (111 + 4) / 115]                                                                                [Stage 51:==================================>                   (74 + 42) / 116][Stage 51:==========================================>           (92 + 24) / 116][Stage 51:===============================================>     (103 + 13) / 116][Stage 51:===================================================>  (110 + 6) / 116][Stage 51:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.364109172 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446120763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:===================================>                  (77 + 41) / 118][Stage 52:===========================================>          (95 + 23) / 118][Stage 52:==================================================>   (110 + 8) / 118][Stage 52:=====================================================>(117 + 1) / 118]                                                                                [Stage 53:=================================>                    (74 + 45) / 119][Stage 53:===================================>                  (78 + 41) / 119][Stage 53:========================================>             (90 + 29) / 119][Stage 53:==============================================>      (104 + 15) / 119][Stage 53:====================================================> (116 + 3) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.226124364 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=116", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=116,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542893262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==================================>                   (72 + 41) / 113][Stage 54:=======================================>              (82 + 31) / 113][Stage 54:==============================================>       (97 + 16) / 113][Stage 54:=================================================>    (104 + 9) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:========================================>             (85 + 29) / 114][Stage 55:==============================================>       (99 + 15) / 114][Stage 55:================================================>    (104 + 10) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.975394307 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396706244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==================================>                   (73 + 40) / 113][Stage 56:=======================================>              (82 + 31) / 113][Stage 56:==========================================>           (89 + 24) / 113][Stage 56:=================================================>    (104 + 9) / 113]                                                                                [Stage 57:====================================>                 (76 + 38) / 114][Stage 57:=========================================>            (87 + 27) / 114][Stage 57:===============================================>     (103 + 11) / 114][Stage 57:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.881906065 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459913254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:===============================>                      (69 + 51) / 120][Stage 58:============================================>        (101 + 19) / 120][Stage 58:====================================================> (116 + 4) / 120]                                                                                [Stage 59:===========================>                          (62 + 59) / 121][Stage 59:=================================>                    (74 + 47) / 121][Stage 59:===========================================>         (100 + 21) / 121][Stage 59:==================================================>   (114 + 7) / 121][Stage 59:=====================================================>(119 + 2) / 121][Stage 59:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.682479875 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39613276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (83 + 32) / 115][Stage 60:===========================================>          (92 + 23) / 115][Stage 60:===============================================>     (103 + 12) / 115][Stage 60:===================================================>  (109 + 6) / 115]                                                                                [Stage 61:========================================>             (88 + 28) / 116][Stage 61:============================================>         (96 + 20) / 116][Stage 61:==================================================>   (109 + 7) / 116][Stage 61:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.909641062 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=206", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=206,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483800835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (70 + 45) / 115][Stage 62:==========================================>           (90 + 25) / 115][Stage 62:==============================================>      (100 + 15) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:===============================>                      (68 + 48) / 116][Stage 63:======================================>               (82 + 34) / 116][Stage 63:==============================================>      (101 + 15) / 116][Stage 63:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.682575251 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450059425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=================================>                    (72 + 43) / 115][Stage 64:===========================================>          (93 + 22) / 115][Stage 64:===============================================>     (103 + 12) / 115][Stage 64:=====================================================>(113 + 2) / 115]                                                                                [Stage 65:===============================>                      (68 + 48) / 116][Stage 65:======================================>               (82 + 34) / 116][Stage 65:===========================================>          (93 + 23) / 116][Stage 65:===============================================>     (104 + 12) / 116][Stage 65:================================================>    (106 + 10) / 116][Stage 65:==================================================>   (108 + 8) / 116][Stage 65:====================================================> (113 + 3) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.946675764 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433543371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===============================>                      (67 + 48) / 115][Stage 66:=====================================>                (80 + 35) / 115][Stage 66:==========================================>           (91 + 24) / 115][Stage 66:===============================================>     (104 + 11) / 115][Stage 66:====================================================> (112 + 3) / 115][Stage 66:=====================================================>(114 + 1) / 115]                                                                                [Stage 67:====================================>                 (78 + 38) / 116][Stage 67:=========================================>            (90 + 26) / 116][Stage 67:==============================================>       (99 + 17) / 116][Stage 67:==============================================>      (101 + 15) / 116][Stage 67:===============================================>     (103 + 13) / 116][Stage 67:====================================================> (113 + 3) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.463929398 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465216984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (60 + 60) / 120][Stage 68:===============================>                      (71 + 49) / 120][Stage 68:========================================>             (91 + 29) / 120][Stage 68:===================================================>  (114 + 6) / 120]                                                                                [Stage 69:===========================>                          (61 + 60) / 121][Stage 69:================================>                     (72 + 49) / 121][Stage 69:======================================>               (86 + 35) / 121][Stage 69:===============================================>     (108 + 13) / 121][Stage 69:=====================================================>(119 + 2) / 121][Stage 69:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.497435288 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38836948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==================================>                   (72 + 41) / 113][Stage 70:=======================================>              (82 + 31) / 113][Stage 70:==============================================>       (98 + 15) / 113][Stage 70:==================================================>   (105 + 8) / 113][Stage 70:=====================================================>(111 + 2) / 113]                                                                                [Stage 71:===================================>                  (74 + 40) / 114][Stage 71:======================================>               (81 + 33) / 114][Stage 71:=======================================>              (83 + 31) / 114][Stage 71:==============================================>       (99 + 15) / 114][Stage 71:===================================================>  (109 + 5) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.197673949 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440668055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (69 + 46) / 115][Stage 72:=====================================>                (79 + 36) / 115][Stage 72:============================================>         (95 + 20) / 115][Stage 72:===============================================>     (104 + 11) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:===================================>                  (76 + 40) / 116][Stage 73:========================================>             (88 + 28) / 116][Stage 73:==============================================>      (102 + 14) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.793661673 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476175415 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:============================>                         (59 + 54) / 113][Stage 74:==============================>                       (63 + 50) / 113][Stage 74:=======================================>              (82 + 31) / 113][Stage 74:==================================================>   (105 + 8) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:===========================>                          (59 + 55) / 114][Stage 75:================================>                     (68 + 46) / 114][Stage 75:=====================================>                (79 + 35) / 114][Stage 75:=================================================>    (105 + 9) / 114][Stage 75:=====================================================>(112 + 2) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.801939966 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40918424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (69 + 46) / 115][Stage 76:=======================================>              (84 + 31) / 115][Stage 76:==============================================>      (101 + 14) / 115][Stage 76:====================================================> (111 + 4) / 115]                                                                                [Stage 77:===============================>                      (68 + 48) / 116][Stage 77:========================================>             (86 + 30) / 116][Stage 77:===============================================>     (105 + 11) / 116][Stage 77:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.713903391 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418036179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:============================>                         (59 + 54) / 113][Stage 78:==============================>                       (63 + 50) / 113][Stage 78:====================================>                 (76 + 37) / 113][Stage 78:=============================================>        (96 + 17) / 113][Stage 78:====================================================> (110 + 3) / 113]                                                                                [Stage 79:=============================>                        (63 + 51) / 114][Stage 79:====================================>                 (77 + 37) / 114][Stage 79:==========================================>           (90 + 24) / 114][Stage 79:===================================================>  (109 + 5) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.886616787 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=105", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=105,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396009528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=======================================>              (85 + 30) / 115][Stage 80:==============================================>       (99 + 16) / 115][Stage 80:================================================>    (105 + 10) / 115]                                                                                [Stage 81:=======================================>              (84 + 32) / 116][Stage 81:===========================================>          (94 + 22) / 116][Stage 81:================================================>    (106 + 10) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.645528956 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422085124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (69 + 46) / 115][Stage 82:========================================>             (87 + 28) / 115][Stage 82:============================================>         (95 + 20) / 115][Stage 82:==================================================>   (107 + 8) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:===============================>                      (67 + 49) / 116][Stage 83:=====================================>                (81 + 35) / 116][Stage 83:==========================================>           (91 + 25) / 116][Stage 83:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.920453557 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43338368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:==============================>                       (67 + 53) / 120][Stage 84:===================================>                  (79 + 41) / 120][Stage 84:================================================>    (110 + 10) / 120][Stage 84:=====================================================>(118 + 2) / 120][Stage 84:=====================================================>(119 + 1) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:===========================>                          (62 + 59) / 121][Stage 85:===================================>                  (79 + 42) / 121][Stage 85:============================================>        (102 + 19) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.940200789 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427722601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:=============================>                        (66 + 54) / 120][Stage 86:=======================================>              (88 + 32) / 120][Stage 86:==================================================>   (112 + 8) / 120]                                                                                [Stage 87:=============================>                        (65 + 56) / 121][Stage 87:=================================>                    (75 + 46) / 121][Stage 87:============================================>        (101 + 20) / 121][Stage 87:====================================================> (117 + 4) / 121][Stage 87:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.685190972 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=98", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=98,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408241988 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:==============================>                       (64 + 49) / 113][Stage 88:===================================>                  (75 + 38) / 113][Stage 88:===========================================>          (90 + 23) / 113][Stage 88:=================================================>    (104 + 9) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:=============================>                        (63 + 51) / 114][Stage 89:=====================================>                (79 + 35) / 114][Stage 89:============================================>         (94 + 20) / 114][Stage 89:================================================>    (104 + 10) / 114][Stage 89:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.893667337 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=============================>                        (62 + 51) / 113][Stage 90:===================================>                  (75 + 38) / 113][Stage 90:============================================>         (94 + 19) / 113][Stage 90:===================================================>  (108 + 5) / 113]                                                                                [Stage 91:==============================>                       (64 + 50) / 114][Stage 91:====================================>                 (76 + 38) / 114][Stage 91:=======================================>              (84 + 30) / 114][Stage 91:==================================================>   (106 + 8) / 114][Stage 91:====================================================> (111 + 3) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.915014074 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412834978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (62 + 58) / 120][Stage 92:==============================>                       (67 + 53) / 120][Stage 92:======================================>               (85 + 35) / 120][Stage 92:===============================================>     (107 + 13) / 120][Stage 92:=====================================================>(119 + 1) / 120]                                                                                [Stage 93:===========================>                          (62 + 59) / 121][Stage 93:==============================>                       (68 + 53) / 121][Stage 93:======================================>               (86 + 35) / 121][Stage 93:============================================>        (101 + 20) / 121][Stage 93:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.379005509 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414499688 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (60 + 60) / 120][Stage 94:===========================>                          (62 + 58) / 120][Stage 94:=================================>                    (75 + 45) / 120][Stage 94:=============================================>       (103 + 17) / 120][Stage 94:=====================================================>(119 + 1) / 120]                                                                                [Stage 95:===========================>                          (61 + 60) / 121][Stage 95:=============================>                        (67 + 54) / 121][Stage 95:=====================================>                (84 + 37) / 121][Stage 95:============================================>        (102 + 19) / 121][Stage 95:===================================================>  (115 + 6) / 121][Stage 95:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.249793985 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=148", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=148,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (61 + 59) / 120][Stage 96:==============================>                       (68 + 52) / 120][Stage 96:===========================================>          (97 + 23) / 120][Stage 96:===================================================>  (114 + 6) / 120]                                                                                [Stage 97:==============================>                       (68 + 53) / 121][Stage 97:=====================================>                (83 + 38) / 121][Stage 97:=============================================>       (103 + 18) / 121][Stage 97:====================================================> (118 + 3) / 121][Stage 97:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.589367145 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389534017 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (72 + 46) / 118][Stage 98:====================================>                 (79 + 39) / 118][Stage 98:===========================================>          (96 + 22) / 118][Stage 98:=================================================>    (109 + 9) / 118][Stage 98:=====================================================>(117 + 1) / 118]                                                                                [Stage 99:=================================>                    (73 + 46) / 119][Stage 99:==================================>                   (76 + 43) / 119][Stage 99:==========================================>           (93 + 26) / 119][Stage 99:============================================>        (100 + 19) / 119][Stage 99:==================================================>   (112 + 7) / 119][Stage 99:====================================================> (116 + 3) / 119][Stage 99:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.336838014 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428223338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:=============================>                       (66 + 54) / 120][Stage 100:====================================>                (82 + 38) / 120][Stage 100:===========================================>         (99 + 21) / 120][Stage 100:=====================================================(120 + 0) / 120]                                                                                [Stage 101:===========================>                         (62 + 59) / 121][Stage 101:===============================>                     (71 + 50) / 121][Stage 101:======================================>              (89 + 32) / 121][Stage 101:===============================================>    (110 + 11) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.157943814 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (62 + 58) / 120][Stage 102:=================================>                   (75 + 45) / 120][Stage 102:========================================>            (92 + 28) / 120][Stage 102:=================================================>   (112 + 8) / 120]                                                                                [Stage 103:============================>                        (65 + 56) / 121][Stage 103:==================================>                  (78 + 43) / 121][Stage 103:===========================================>        (102 + 19) / 121][Stage 103:==================================================>  (116 + 5) / 121][Stage 103:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.499421971 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400287927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=============================>                       (62 + 51) / 113][Stage 104:==================================>                  (74 + 39) / 113][Stage 104:===========================================>         (93 + 20) / 113][Stage 104:================================================>    (104 + 9) / 113][Stage 104:====================================================>(112 + 1) / 113]                                                                                [Stage 105:===========================>                         (59 + 55) / 114][Stage 105:===============================>                     (68 + 46) / 114][Stage 105:=======================================>             (84 + 30) / 114][Stage 105:===============================================>    (104 + 10) / 114][Stage 105:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.542930958 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (64 + 49) / 113][Stage 106:===================================>                 (75 + 38) / 113][Stage 106:=============================================>       (97 + 16) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:===========================>                         (59 + 55) / 114][Stage 107:================================>                    (69 + 45) / 114][Stage 107:=====================================>               (81 + 33) / 114][Stage 107:=============================================>       (98 + 16) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.482321022 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37878364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (73 + 45) / 118][Stage 108:==================================>                  (77 + 41) / 118][Stage 108:=======================================>             (89 + 29) / 118][Stage 108:============================================>       (102 + 16) / 118][Stage 108:==================================================>  (112 + 6) / 118][Stage 108:====================================================>(117 + 1) / 118]                                                                                [Stage 109:================================>                    (73 + 46) / 119][Stage 109:=================================>                   (76 + 43) / 119][Stage 109:=====================================>               (85 + 34) / 119][Stage 109:==========================================>          (96 + 23) / 119][Stage 109:=================================================>   (111 + 8) / 119][Stage 109:====================================================>(117 + 2) / 119][Stage 109:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.100603354 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401323892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=============================>                       (65 + 50) / 115][Stage 110:====================================>                (80 + 35) / 115][Stage 110:=============================================>      (101 + 14) / 115][Stage 110:==================================================>  (110 + 5) / 115]                                                                                [Stage 111:================================>                    (72 + 44) / 116][Stage 111:=======================================>             (87 + 29) / 116][Stage 111:=================================================>   (109 + 7) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.730379528 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=================================>                   (72 + 43) / 115][Stage 112:=========================================>           (90 + 25) / 115][Stage 112:=================================================>   (107 + 8) / 115][Stage 112:====================================================>(113 + 2) / 115]                                                                                [Stage 113:===============================>                     (69 + 47) / 116][Stage 113:======================================>              (85 + 31) / 116][Stage 113:=============================================>       (99 + 17) / 116][Stage 113:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.688981044 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=11", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=11,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402380178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:================================>                    (70 + 43) / 113][Stage 114:========================================>            (86 + 27) / 113][Stage 114:=============================================>       (97 + 16) / 113][Stage 114:===================================================> (110 + 3) / 113]                                                                                [Stage 115:============================>                        (61 + 53) / 114][Stage 115:=================================>                   (72 + 42) / 114][Stage 115:=========================================>           (89 + 25) / 114][Stage 115:==============================================>     (101 + 13) / 114][Stage 115:===================================================> (110 + 4) / 114][Stage 115:===================================================> (111 + 3) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.043625684 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=104", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=104,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360933137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (72 + 41) / 113][Stage 116:=====================================>               (80 + 33) / 113][Stage 116:========================================>            (87 + 26) / 113][Stage 116:==============================================>     (102 + 11) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:======================================>              (82 + 32) / 114][Stage 117:=============================================>       (97 + 17) / 114][Stage 117:=================================================>   (107 + 7) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.870867319 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=71", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=71,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (79 + 34) / 113][Stage 118:=========================================>           (89 + 24) / 113][Stage 118:==============================================>     (101 + 12) / 113][Stage 118:===================================================> (110 + 3) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===================================>                 (77 + 37) / 114][Stage 119:========================================>            (88 + 26) / 114][Stage 119:==============================================>     (102 + 12) / 114][Stage 119:===================================================> (110 + 4) / 114][Stage 119:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.026532885 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=14", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=14,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384222352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==============================>                      (66 + 49) / 115][Stage 120:====================================>                (79 + 36) / 115][Stage 120:=============================================>       (98 + 17) / 115][Stage 120:=================================================>   (107 + 8) / 115][Stage 120:===================================================> (111 + 4) / 115]                                                                                [Stage 121:================================>                    (71 + 45) / 116][Stage 121:======================================>              (84 + 32) / 116][Stage 121:===========================================>         (95 + 21) / 116][Stage 121:==============================================>     (103 + 13) / 116][Stage 121:=================================================>   (108 + 8) / 116][Stage 121:===================================================> (112 + 4) / 116][Stage 121:====================================================>(114 + 2) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.723443383 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405671676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:=============================>                       (62 + 51) / 113][Stage 122:====================================>                (77 + 36) / 113][Stage 122:=========================================>           (89 + 24) / 113][Stage 122:=================================================>   (106 + 7) / 113]                                                                                [Stage 123:============================>                        (62 + 52) / 114][Stage 123:=================================>                   (73 + 41) / 114][Stage 123:============================================>        (95 + 19) / 114][Stage 123:=================================================>   (107 + 7) / 114][Stage 123:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.651048 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388725021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:====================================>                (77 + 36) / 113][Stage 124:==========================================>          (90 + 23) / 113][Stage 124:=============================================>       (98 + 15) / 113][Stage 124:==================================================>  (107 + 6) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:=================================>                   (73 + 41) / 114][Stage 125:=========================================>           (89 + 25) / 114][Stage 125:==============================================>      (99 + 15) / 114][Stage 125:==================================================>  (109 + 5) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.090326433 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363788893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===================================>                 (76 + 37) / 113][Stage 126:==========================================>          (91 + 22) / 113][Stage 126:================================================>    (104 + 9) / 113][Stage 126:==================================================>  (108 + 5) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:==================================>                  (75 + 39) / 114][Stage 127:========================================>            (88 + 26) / 114][Stage 127:============================================>        (96 + 18) / 114][Stage 127:=================================================>   (106 + 8) / 114][Stage 127:==================================================>  (109 + 5) / 114][Stage 127:===================================================> (111 + 3) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.59726404 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347709003 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (83 + 32) / 115][Stage 128:=========================================>           (91 + 24) / 115][Stage 128:===============================================>    (105 + 10) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:=====================================>               (82 + 34) / 116][Stage 129:=========================================>           (91 + 25) / 116][Stage 129:==============================================>     (104 + 12) / 116][Stage 129:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.557687451 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=121", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=121,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386410843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==============================>                      (67 + 48) / 115][Stage 130:=========================================>           (90 + 25) / 115][Stage 130:=============================================>       (99 + 16) / 115][Stage 130:==================================================>  (109 + 6) / 115]                                                                                [Stage 131:==================================>                  (76 + 40) / 116][Stage 131:=========================================>           (90 + 26) / 116][Stage 131:===============================================>    (105 + 11) / 116][Stage 131:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.833646358 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359438502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:======================================>              (82 + 31) / 113][Stage 132:============================================>        (94 + 19) / 113][Stage 132:===============================================>    (103 + 10) / 113][Stage 132:===================================================> (109 + 4) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:====================================>                (79 + 35) / 114][Stage 133:========================================>            (88 + 26) / 114][Stage 133:===========================================>         (94 + 20) / 114][Stage 133:================================================>    (105 + 9) / 114][Stage 133:=================================================>   (106 + 8) / 114][Stage 133:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 6.562850316 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3368145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:========================================>            (87 + 28) / 115][Stage 134:===========================================>         (95 + 20) / 115][Stage 134:===================================================> (112 + 3) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:=====================================>               (82 + 34) / 116][Stage 135:========================================>            (89 + 27) / 116][Stage 135:=============================================>      (102 + 14) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.718670212 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=224", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=224,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335194014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (82 + 33) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:===========================================>         (95 + 20) / 115][Stage 136:===============================================>    (105 + 10) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:========================================>            (88 + 28) / 116][Stage 137:============================================>       (100 + 16) / 116][Stage 137:===============================================>    (106 + 10) / 116][Stage 137:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.999081872 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361204249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (72 + 46) / 118][Stage 138:=================================>                   (74 + 44) / 118][Stage 138:=======================================>             (88 + 30) / 118][Stage 138:==================================================>  (113 + 5) / 118]                                                                                [Stage 139:================================>                    (74 + 45) / 119][Stage 139:======================================>              (86 + 33) / 119][Stage 139:==============================================>     (106 + 13) / 119][Stage 139:==================================================>  (114 + 5) / 119][Stage 139:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.148156404 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (72 + 46) / 118][Stage 140:====================================>                (81 + 37) / 118][Stage 140:===============================================>    (108 + 10) / 118][Stage 140:====================================================>(117 + 1) / 118]                                                                                [Stage 141:=================================>                   (76 + 43) / 119][Stage 141:======================================>              (86 + 33) / 119][Stage 141:============================================>       (102 + 17) / 119][Stage 141:===================================================> (116 + 3) / 119][Stage 141:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.232973039 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=151", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=151,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366750992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (73 + 45) / 118][Stage 142:==================================>                  (77 + 41) / 118][Stage 142:====================================>                (81 + 37) / 118][Stage 142:========================================>            (91 + 27) / 118][Stage 142:=============================================>      (103 + 15) / 118][Stage 142:====================================================>(117 + 1) / 118]                                                                                [Stage 143:================================>                    (74 + 45) / 119][Stage 143:==================================>                  (78 + 41) / 119][Stage 143:=========================================>           (93 + 26) / 119][Stage 143:===============================================>    (109 + 10) / 119][Stage 143:====================================================>(117 + 2) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.813142732 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=249", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=249,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:================================>                    (73 + 45) / 118][Stage 144:===================================>                 (80 + 38) / 118][Stage 144:=======================================>             (88 + 30) / 118][Stage 144:==============================================>     (106 + 12) / 118][Stage 144:====================================================>(116 + 2) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:=================================>                   (75 + 44) / 119][Stage 145:=======================================>             (88 + 31) / 119][Stage 145:============================================>       (101 + 18) / 119][Stage 145:==================================================>  (114 + 5) / 119][Stage 145:====================================================>(117 + 2) / 119][Stage 145:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.90456002 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364818385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (72 + 46) / 118][Stage 146:==================================>                  (76 + 42) / 118][Stage 146:=====================================>               (83 + 35) / 118][Stage 146:============================================>       (100 + 18) / 118][Stage 146:=================================================>   (110 + 8) / 118]                                                                                [Stage 147:================================>                    (74 + 45) / 119][Stage 147:=====================================>               (84 + 35) / 119][Stage 147:==========================================>          (95 + 24) / 119][Stage 147:==============================================>     (106 + 13) / 119][Stage 147:==================================================>  (114 + 5) / 119][Stage 147:===================================================> (115 + 4) / 119][Stage 147:====================================================>(117 + 2) / 119][Stage 147:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.454657246 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (74 + 44) / 118][Stage 148:======================================>              (85 + 33) / 118][Stage 148:========================================>            (91 + 27) / 118][Stage 148:===============================================>    (107 + 11) / 118][Stage 148:====================================================>(116 + 2) / 118]                                                                                [Stage 149:================================>                    (73 + 46) / 119][Stage 149:==================================>                  (78 + 41) / 119][Stage 149:========================================>            (90 + 29) / 119][Stage 149:==============================================>     (106 + 13) / 119][Stage 149:=================================================>   (111 + 8) / 119][Stage 149:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.703542682 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344504052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (82 + 33) / 115][Stage 150:=========================================>           (89 + 26) / 115][Stage 150:============================================>        (97 + 18) / 115][Stage 150:================================================>    (106 + 9) / 115][Stage 150:==================================================>  (110 + 5) / 115]                                                                                [Stage 151:========================================>            (89 + 27) / 116][Stage 151:============================================>       (100 + 16) / 116][Stage 151:=================================================>   (109 + 7) / 116][Stage 151:==================================================>  (111 + 5) / 116][Stage 151:===================================================> (112 + 4) / 116][Stage 151:===================================================> (113 + 3) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.607429831 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=93", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=93,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400523557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:===========================>                         (63 + 57) / 120][Stage 152:==================================>                  (78 + 42) / 120][Stage 152:===========================================>         (98 + 22) / 120][Stage 152:==================================================>  (115 + 5) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:==============================>                      (70 + 51) / 121][Stage 153:======================================>              (88 + 33) / 121][Stage 153:===============================================>    (111 + 10) / 121][Stage 153:====================================================>(119 + 2) / 121][Stage 153:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.125542813 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379887003 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (58 + 55) / 113][Stage 154:================================>                    (69 + 44) / 113][Stage 154:=========================================>           (88 + 25) / 113][Stage 154:==============================================>     (101 + 12) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:===========================>                         (59 + 55) / 114][Stage 155:==============================>                      (66 + 48) / 114][Stage 155:====================================>                (79 + 35) / 114][Stage 155:===================================================> (111 + 3) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.817546458 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361560477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===================================>                 (76 + 37) / 113][Stage 156:=========================================>           (89 + 24) / 113][Stage 156:=============================================>       (98 + 15) / 113][Stage 156:=================================================>   (106 + 7) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:=======================================>             (84 + 30) / 114][Stage 157:===========================================>         (94 + 20) / 114][Stage 157:==============================================>     (101 + 13) / 114][Stage 157:===================================================> (110 + 4) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.150359734 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402265165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:=============================>                       (66 + 54) / 120][Stage 158:====================================>                (82 + 38) / 120][Stage 158:============================================>       (103 + 17) / 120][Stage 158:===================================================> (117 + 3) / 120]                                                                                [Stage 159:===========================>                         (62 + 59) / 121][Stage 159:=============================>                       (68 + 53) / 121][Stage 159:====================================>                (83 + 38) / 121][Stage 159:=============================================>      (106 + 15) / 121][Stage 159:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.756925009 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=172", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=172,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409788254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (62 + 58) / 120][Stage 160:=================================>                   (75 + 45) / 120][Stage 160:=========================================>           (95 + 25) / 120][Stage 160:==================================================>  (115 + 5) / 120]                                                                                [Stage 161:===========================>                         (63 + 58) / 121][Stage 161:===================================>                 (81 + 40) / 121][Stage 161:=============================================>      (105 + 16) / 121][Stage 161:===================================================> (117 + 4) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.556868746 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350109276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=================================>                   (72 + 41) / 113][Stage 162:======================================>              (83 + 30) / 113][Stage 162:==========================================>          (91 + 22) / 113][Stage 162:=============================================>       (98 + 15) / 113][Stage 162:==================================================>  (108 + 5) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:====================================>                (79 + 35) / 114][Stage 163:========================================>            (87 + 27) / 114][Stage 163:=============================================>       (97 + 17) / 114][Stage 163:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.190258474 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=124", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=124,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349690716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===================================>                 (76 + 37) / 113][Stage 164:==========================================>          (91 + 22) / 113][Stage 164:==============================================>     (100 + 13) / 113][Stage 164:=================================================>   (106 + 7) / 113][Stage 164:====================================================>(111 + 2) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:======================================>              (82 + 32) / 114][Stage 165:===========================================>         (94 + 20) / 114][Stage 165:================================================>    (105 + 9) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.291990709 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356768542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=================================>                   (72 + 41) / 113][Stage 166:=====================================>               (80 + 33) / 113][Stage 166:===========================================>         (92 + 21) / 113][Stage 166:===============================================>    (103 + 10) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:===================================>                 (77 + 37) / 114][Stage 167:===========================================>         (93 + 21) / 114][Stage 167:==============================================>     (102 + 12) / 114][Stage 167:=================================================>   (107 + 7) / 114][Stage 167:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.94319502 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=127", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=127,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340466722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (81 + 34) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:=============================================>      (100 + 15) / 115]                                                                                [Stage 169:======================================>              (84 + 32) / 116][Stage 169:=============================================>       (99 + 17) / 116][Stage 169:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.419289932 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=162", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=162,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365725815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (73 + 45) / 118][Stage 170:====================================>                (82 + 36) / 118][Stage 170:===========================================>         (96 + 22) / 118][Stage 170:=============================================>      (103 + 15) / 118][Stage 170:==================================================>  (112 + 6) / 118][Stage 170:====================================================>(117 + 1) / 118]                                                                                [Stage 171:================================>                    (73 + 46) / 119][Stage 171:==================================>                  (78 + 41) / 119][Stage 171:========================================>            (91 + 28) / 119][Stage 171:==============================================>     (107 + 12) / 119][Stage 171:===================================================> (116 + 3) / 119][Stage 171:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.491315401 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=133", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=133,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360761778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:=================================>                   (74 + 44) / 118][Stage 172:=================================>                   (75 + 43) / 118][Stage 172:=====================================>               (84 + 34) / 118][Stage 172:========================================>            (91 + 27) / 118][Stage 172:===============================================>    (108 + 10) / 118][Stage 172:====================================================>(117 + 1) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:====================================>                (81 + 38) / 119][Stage 173:=====================================>               (85 + 34) / 119][Stage 173:==========================================>          (96 + 23) / 119][Stage 173:=================================================>   (112 + 7) / 119][Stage 173:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.174321471 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438812564 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:============================>                        (65 + 55) / 120][Stage 174:==============================>                      (70 + 50) / 120][Stage 174:===========================================>         (98 + 22) / 120][Stage 174:==================================================>  (114 + 6) / 120]                                                                                [Stage 175:===========================>                         (62 + 59) / 121][Stage 175:================================>                    (74 + 47) / 121][Stage 175:==========================================>          (98 + 23) / 121][Stage 175:=================================================>   (114 + 7) / 121][Stage 175:====================================================>(119 + 2) / 121][Stage 175:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.718315971 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (61 + 59) / 120][Stage 176:=============================>                       (66 + 54) / 120][Stage 176:========================================>            (91 + 29) / 120][Stage 176:==================================================>  (114 + 6) / 120][Stage 176:====================================================>(119 + 1) / 120]                                                                                [Stage 177:==========================>                          (61 + 60) / 121][Stage 177:============================>                        (66 + 55) / 121][Stage 177:===================================>                 (81 + 40) / 121][Stage 177:===========================================>        (102 + 19) / 121][Stage 177:==================================================>  (116 + 5) / 121][Stage 177:====================================================>(119 + 2) / 121][Stage 177:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.992139055 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354485397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:====================================>                (77 + 36) / 113][Stage 178:==========================================>          (90 + 23) / 113][Stage 178:=============================================>       (97 + 16) / 113][Stage 178:=================================================>   (106 + 7) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:=====================================>               (80 + 34) / 114][Stage 179:========================================>            (88 + 26) / 114][Stage 179:==============================================>     (102 + 12) / 114][Stage 179:==================================================>  (108 + 6) / 114][Stage 179:===================================================> (110 + 4) / 114][Stage 179:===================================================> (111 + 3) / 114][Stage 179:====================================================>(112 + 2) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.607468536 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=153", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=153,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36074106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=================================>                   (71 + 42) / 113][Stage 180:=====================================>               (79 + 34) / 113][Stage 180:=========================================>           (88 + 25) / 113][Stage 180:=============================================>       (98 + 15) / 113][Stage 180:=================================================>   (106 + 7) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:=================================>                   (72 + 42) / 114][Stage 181:======================================>              (82 + 32) / 114][Stage 181:===========================================>         (93 + 21) / 114][Stage 181:===============================================>    (104 + 10) / 114][Stage 181:====================================================>(112 + 2) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.457376879 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404896723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:==============================>                      (68 + 52) / 120][Stage 182:====================================>                (82 + 38) / 120][Stage 182:==============================================>     (108 + 12) / 120][Stage 182:====================================================>(118 + 2) / 120]                                                                                [Stage 183:==========================>                          (61 + 60) / 121][Stage 183:==============================>                      (69 + 52) / 121][Stage 183:=====================================>               (86 + 35) / 121][Stage 183:=============================================>      (106 + 15) / 121][Stage 183:==================================================>  (116 + 5) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.896987934 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34111423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (81 + 34) / 115][Stage 184:========================================>            (88 + 27) / 115][Stage 184:===============================================>    (105 + 10) / 115][Stage 184:==================================================>  (109 + 6) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:=====================================>               (81 + 35) / 116][Stage 185:==========================================>          (92 + 24) / 116][Stage 185:=============================================>      (102 + 14) / 116][Stage 185:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.976963348 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349960623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (83 + 30) / 113][Stage 186:==========================================>          (91 + 22) / 113][Stage 186:==============================================>     (100 + 13) / 113][Stage 186:====================================================>(111 + 2) / 113][Stage 186:====================================================>(112 + 1) / 113]                                                                                [Stage 187:==================================>                  (75 + 39) / 114][Stage 187:========================================>            (87 + 27) / 114][Stage 187:=============================================>      (100 + 14) / 114][Stage 187:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.996282922 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=30", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=30,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350720965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=====================================>               (80 + 33) / 113][Stage 188:========================================>            (87 + 26) / 113][Stage 188:=============================================>       (97 + 16) / 113][Stage 188:===================================================> (109 + 4) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:====================================>                (78 + 36) / 114][Stage 189:=========================================>           (89 + 25) / 114][Stage 189:============================================>        (95 + 19) / 114][Stage 189:=============================================>       (97 + 17) / 114][Stage 189:==================================================>  (109 + 5) / 114][Stage 189:===================================================> (110 + 4) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.042522935 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (70 + 43) / 113][Stage 190:=====================================>               (79 + 34) / 113][Stage 190:==========================================>          (90 + 23) / 113][Stage 190:===============================================>    (103 + 10) / 113][Stage 190:===================================================> (110 + 3) / 113]                                                                                [Stage 191:=====================================>               (80 + 34) / 114][Stage 191:=========================================>           (90 + 24) / 114][Stage 191:=============================================>       (98 + 16) / 114][Stage 191:=================================================>   (107 + 7) / 114][Stage 191:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.355258451 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367197588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===============================>                     (69 + 46) / 115][Stage 192:=====================================>               (81 + 34) / 115][Stage 192:=============================================>      (100 + 15) / 115][Stage 192:=================================================>   (107 + 8) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:===============================>                     (70 + 46) / 116][Stage 193:======================================>              (85 + 31) / 116][Stage 193:=============================================>      (102 + 14) / 116][Stage 193:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.788903997 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==============================>                      (66 + 49) / 115][Stage 194:===================================>                 (78 + 37) / 115][Stage 194:==========================================>          (92 + 23) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:=================================>                   (74 + 42) / 116][Stage 195:========================================>            (89 + 27) / 116][Stage 195:==============================================>     (103 + 13) / 116][Stage 195:==================================================>  (110 + 6) / 116][Stage 195:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.460238591 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381523722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:============================>                        (61 + 52) / 113][Stage 196:================================>                    (69 + 44) / 113][Stage 196:==========================================>          (91 + 22) / 113][Stage 196:=================================================>   (105 + 8) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:============================>                        (61 + 53) / 114][Stage 197:==================================>                  (75 + 39) / 114][Stage 197:===========================================>         (93 + 21) / 114][Stage 197:================================================>    (105 + 9) / 114][Stage 197:==================================================>  (109 + 5) / 114][Stage 197:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.118794116 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370758723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (72 + 46) / 118][Stage 198:===================================>                 (79 + 39) / 118][Stage 198:==========================================>          (94 + 24) / 118][Stage 198:==================================================>  (112 + 6) / 118]                                                                                [Stage 199:=================================>                   (75 + 44) / 119][Stage 199:======================================>              (87 + 32) / 119][Stage 199:============================================>        (99 + 20) / 119][Stage 199:===================================================> (115 + 4) / 119][Stage 199:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.442338395 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387612485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=================================>                   (71 + 42) / 113][Stage 200:=====================================>               (80 + 33) / 113][Stage 200:===========================================>         (92 + 21) / 113][Stage 200:=================================================>   (105 + 8) / 113][Stage 200:====================================================>(111 + 2) / 113]                                                                                [Stage 201:======================================>              (83 + 31) / 114][Stage 201:===========================================>         (93 + 21) / 114][Stage 201:==============================================>      (99 + 15) / 114][Stage 201:=================================================>   (107 + 7) / 114][Stage 201:===================================================> (110 + 4) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.020734722 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 03:58:24 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:39414) dropped. RpcEnv already stopped.
17/06/01 03:58:24 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:39414) dropped. RpcEnv already stopped.

real	11m48.402s
user	12m12.540s
sys	1m30.936s
