Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 04:18:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:18:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:18:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:18:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 04:18:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:18:48 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601041837-0753).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.376947794 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:====================================================>  (109 + 6) / 115]                                                                                [Stage 1:======================>                                (47 + 69) / 116][Stage 1:===========================>                           (58 + 58) / 116][Stage 1:=============================>                         (62 + 54) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.650163891 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.710128565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=====================>                                 (44 + 71) / 115][Stage 2:==============================>                        (63 + 52) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:=================================>                     (71 + 44) / 115][Stage 2:=====================================>                 (79 + 36) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:================================================>     (103 + 12) / 115][Stage 2:=====================================================> (111 + 4) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:=============================>                         (63 + 53) / 116][Stage 3:================================>                      (69 + 47) / 116][Stage 3:====================================>                  (76 + 40) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:=========================================>             (88 + 28) / 116][Stage 3:=============================================>         (97 + 19) / 116][Stage 3:===================================================>   (108 + 8) / 116]                                                                                Time elapsed: 4.979954512 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.663093328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==================>                                    (39 + 74) / 113][Stage 4:========================>                              (50 + 63) / 113][Stage 4:=============================>                         (60 + 53) / 113][Stage 4:================================>                      (66 + 47) / 113][Stage 4:==================================>                    (70 + 43) / 113][Stage 4:=========================================>             (86 + 27) / 113][Stage 4:================================================>     (102 + 11) / 113][Stage 4:=====================================================> (109 + 4) / 113][Stage 4:======================================================>(111 + 2) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:============================>                          (60 + 54) / 114][Stage 5:================================>                      (68 + 46) / 114][Stage 5:=======================================>               (82 + 32) / 114][Stage 5:=============================================>         (94 + 20) / 114][Stage 5:================================================>     (102 + 12) / 114][Stage 5:=====================================================> (111 + 3) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.75134947 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=84", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=84,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57204426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:>                                                        (0 + 0) / 113][Stage 6:==================================>                    (70 + 43) / 113][Stage 6:====================================>                  (75 + 38) / 113][Stage 6:=======================================>               (82 + 31) / 113][Stage 6:=========================================>             (86 + 27) / 113][Stage 6:=============================================>         (93 + 20) / 113][Stage 6:====================================================>  (107 + 6) / 113][Stage 6:======================================================>(111 + 2) / 113][Stage 6:======================================================>(112 + 1) / 113]                                                                                [Stage 7:====================================>                  (76 + 38) / 114][Stage 7:=========================================>             (85 + 29) / 114][Stage 7:=============================================>         (94 + 20) / 114][Stage 7:===============================================>       (99 + 15) / 114][Stage 7:================================================>     (103 + 11) / 114][Stage 7:=====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.248189871 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=168", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=168,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.65225324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (58 + 55) / 113][Stage 8:==============================>                        (63 + 50) / 113][Stage 8:=====================================>                 (78 + 35) / 113][Stage 8:============================================>          (91 + 22) / 113][Stage 8:===============================================>       (97 + 16) / 113][Stage 8:==================================================>    (104 + 9) / 113][Stage 8:======================================================>(111 + 2) / 113]                                                                                [Stage 9:============================>                          (60 + 54) / 114][Stage 9:=================================>                     (70 + 44) / 114][Stage 9:=======================================>               (82 + 32) / 114][Stage 9:==============================================>        (96 + 18) / 114][Stage 9:================================================>     (102 + 12) / 114][Stage 9:===================================================>   (107 + 7) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.491698069 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563589339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (58 + 55) / 113][Stage 10:============================>                         (60 + 53) / 113][Stage 10:===============================>                      (65 + 48) / 113][Stage 10:=======================================>              (82 + 31) / 113][Stage 10:===========================================>          (91 + 22) / 113][Stage 10:===============================================>     (101 + 12) / 113][Stage 10:====================================================> (109 + 4) / 113]                                                                                [Stage 11:============================>                         (60 + 54) / 114][Stage 11:===================================>                  (75 + 39) / 114][Stage 11:=========================================>            (87 + 27) / 114][Stage 11:==============================================>      (101 + 13) / 114][Stage 11:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.808813988 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=221", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=221,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573957831 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (58 + 55) / 113][Stage 12:============================>                         (60 + 53) / 113][Stage 12:====================================>                 (77 + 36) / 113][Stage 12:============================================>         (93 + 20) / 113][Stage 12:===============================================>     (101 + 12) / 113][Stage 12:===================================================>  (107 + 6) / 113][Stage 12:====================================================> (110 + 3) / 113]                                                                                [Stage 13:============================>                         (60 + 54) / 114][Stage 13:================================>                     (69 + 45) / 114][Stage 13:=======================================>              (83 + 31) / 114][Stage 13:==============================================>      (101 + 13) / 114][Stage 13:===============================================>     (103 + 11) / 114][Stage 13:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 4.235067151 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=12", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=12,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48921978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:===================================>                  (77 + 41) / 118][Stage 14:=======================================>              (86 + 32) / 118][Stage 14:============================================>         (97 + 21) / 118][Stage 14:=====================================================>(117 + 1) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:==================================>                   (76 + 43) / 119][Stage 15:====================================>                 (81 + 38) / 119][Stage 15:==========================================>           (93 + 26) / 119][Stage 15:================================================>    (109 + 10) / 119][Stage 15:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 4.014063863 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=144", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=144,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.59275229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:=============================>                        (66 + 54) / 120][Stage 16:====================================>                 (80 + 40) / 120][Stage 16:=========================================>            (93 + 27) / 120][Stage 16:===============================================>     (108 + 12) / 120]                                                                                [Stage 17:===========================>                          (62 + 59) / 121][Stage 17:=================================>                    (74 + 47) / 121][Stage 17:=====================================>                (85 + 36) / 121][Stage 17:=============================================>       (104 + 17) / 121][Stage 17:==================================================>   (114 + 7) / 121][Stage 17:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.050931205 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466538295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===================================>                  (75 + 38) / 113][Stage 18:=======================================>              (83 + 30) / 113][Stage 18:============================================>         (93 + 20) / 113][Stage 18:===============================================>     (102 + 11) / 113][Stage 18:===================================================>  (108 + 5) / 113][Stage 18:====================================================> (110 + 3) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:==================================>                   (73 + 41) / 114][Stage 19:=========================================>            (88 + 26) / 114][Stage 19:==============================================>       (98 + 16) / 114][Stage 19:===============================================>     (103 + 11) / 114][Stage 19:==================================================>   (107 + 7) / 114][Stage 19:===================================================>  (109 + 5) / 114][Stage 19:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.508611985 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=166", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=166,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53791035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:==============================>                       (67 + 53) / 120][Stage 20:======================================>               (86 + 34) / 120][Stage 20:===============================================>     (108 + 12) / 120][Stage 20:====================================================> (116 + 4) / 120][Stage 20:====================================================> (117 + 3) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:=================================>                    (76 + 45) / 121][Stage 21:=========================================>            (93 + 28) / 121][Stage 21:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.689794967 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:===============================>                      (69 + 51) / 120][Stage 22:======================================>               (86 + 34) / 120][Stage 22:==============================================>      (106 + 14) / 120][Stage 22:=================================================>    (111 + 9) / 120][Stage 22:===================================================>  (115 + 5) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:=============================>                        (65 + 56) / 121][Stage 23:=====================================>                (84 + 37) / 121][Stage 23:=============================================>       (105 + 16) / 121][Stage 23:====================================================> (117 + 4) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.335730932 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=119", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=119,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506731839 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (72 + 43) / 115][Stage 24:==========================================>           (91 + 24) / 115][Stage 24:=================================================>    (106 + 9) / 115][Stage 24:====================================================> (112 + 3) / 115]                                                                                [Stage 25:================================>                     (69 + 47) / 116][Stage 25:========================================>             (86 + 30) / 116][Stage 25:=============================================>       (100 + 16) / 116][Stage 25:==================================================>   (109 + 7) / 116][Stage 25:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.191960412 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (70 + 45) / 115][Stage 26:========================================>             (86 + 29) / 115][Stage 26:=============================================>        (96 + 19) / 115][Stage 26:==================================================>   (107 + 8) / 115][Stage 26:====================================================> (112 + 3) / 115]                                                                                [Stage 27:======================================>               (82 + 34) / 116][Stage 27:=============================================>        (97 + 19) / 116][Stage 27:==================================================>   (108 + 8) / 116][Stage 27:===================================================>  (111 + 5) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.44535734 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=127", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=127,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46634798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:>                                                       (0 + 0) / 118][Stage 28:================================>                     (72 + 46) / 118][Stage 28:==================================>                   (76 + 42) / 118][Stage 28:==========================================>           (93 + 25) / 118][Stage 28:=================================================>    (109 + 9) / 118][Stage 28:=====================================================>(117 + 1) / 118]                                                                                [Stage 29:=================================>                    (73 + 46) / 119][Stage 29:===================================>                  (79 + 40) / 119][Stage 29:=======================================>              (86 + 33) / 119][Stage 29:=============================================>       (102 + 17) / 119][Stage 29:=================================================>    (110 + 9) / 119][Stage 29:===================================================>  (114 + 5) / 119][Stage 29:=====================================================>(117 + 2) / 119][Stage 29:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.957863749 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453659044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:==================================>                   (76 + 42) / 118][Stage 30:========================================>             (88 + 30) / 118][Stage 30:============================================>         (97 + 21) / 118][Stage 30:==================================================>   (110 + 8) / 118][Stage 30:====================================================> (115 + 3) / 118]                                                                                [Stage 31:=================================>                    (73 + 46) / 119][Stage 31:==================================>                   (76 + 43) / 119][Stage 31:=========================================>            (92 + 27) / 119][Stage 31:=============================================>       (103 + 16) / 119][Stage 31:====================================================> (116 + 3) / 119][Stage 31:=====================================================>(117 + 2) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.996315275 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459179741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===============================>                      (67 + 48) / 115][Stage 32:=====================================>                (80 + 35) / 115][Stage 32:==============================================>      (100 + 15) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:===================================>                  (76 + 40) / 116][Stage 33:========================================>             (87 + 29) / 116][Stage 33:=============================================>       (100 + 16) / 116]                                                                                Time elapsed: 2.767206706 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=19", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=19,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478308659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:===============================>                      (65 + 48) / 113][Stage 34:======================================>               (81 + 32) / 113][Stage 34:=============================================>        (95 + 18) / 113][Stage 34:===================================================>  (108 + 5) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===========================>                          (59 + 55) / 114][Stage 35:===============================>                      (66 + 48) / 114][Stage 35:=====================================>                (80 + 34) / 114][Stage 35:=================================================>    (105 + 9) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.653727721 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=141", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=141,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47453919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (58 + 55) / 113][Stage 36:=============================>                        (62 + 51) / 113][Stage 36:===================================>                  (75 + 38) / 113][Stage 36:============================================>         (94 + 19) / 113][Stage 36:==================================================>   (106 + 7) / 113][Stage 36:=====================================================>(111 + 2) / 113]                                                                                [Stage 37:============================>                         (61 + 53) / 114][Stage 37:===================================>                  (74 + 40) / 114][Stage 37:=============================================>        (95 + 19) / 114][Stage 37:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.580852591 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=145", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=145,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509138975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:===========================>                          (61 + 59) / 120][Stage 38:===================================>                  (79 + 41) / 120][Stage 38:=============================================>       (102 + 18) / 120][Stage 38:=====================================================>(118 + 2) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:=============================>                        (67 + 54) / 121][Stage 39:=====================================>                (83 + 38) / 121][Stage 39:=============================================>       (103 + 18) / 121][Stage 39:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.428783301 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=137", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=137,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399534786 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (81 + 34) / 115][Stage 40:========================================>             (87 + 28) / 115][Stage 40:==============================================>      (101 + 14) / 115][Stage 40:===================================================>  (109 + 6) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:=======================================>              (84 + 32) / 116][Stage 41:==========================================>           (91 + 25) / 116][Stage 41:=============================================>       (100 + 16) / 116][Stage 41:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.804078184 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475881817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===============================>                      (67 + 48) / 115][Stage 42:====================================>                 (77 + 38) / 115][Stage 42:===========================================>          (92 + 23) / 115][Stage 42:==================================================>   (107 + 8) / 115]                                                                                [Stage 43:==================================>                   (75 + 41) / 116][Stage 43:========================================>             (87 + 29) / 116][Stage 43:================================================>    (106 + 10) / 116][Stage 43:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.775562223 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=116", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=116,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433280029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:=================================>                    (73 + 45) / 118][Stage 44:===================================>                  (77 + 41) / 118][Stage 44:====================================>                 (80 + 38) / 118][Stage 44:=========================================>            (90 + 28) / 118][Stage 44:==============================================>      (104 + 14) / 118][Stage 44:=================================================>    (109 + 9) / 118][Stage 44:====================================================> (115 + 3) / 118][Stage 44:=====================================================>(116 + 2) / 118]                                                                                [Stage 45:=================================>                    (74 + 45) / 119][Stage 45:==================================>                   (77 + 42) / 119][Stage 45:=====================================>                (83 + 36) / 119][Stage 45:============================================>         (97 + 22) / 119][Stage 45:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 4.265329072 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=99", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=99,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47946503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (58 + 55) / 113][Stage 46:============================>                         (60 + 53) / 113][Stage 46:==================================>                   (73 + 40) / 113][Stage 46:=============================================>        (95 + 18) / 113][Stage 46:=====================================================>(111 + 2) / 113]                                                                                [Stage 47:==============================>                       (64 + 50) / 114][Stage 47:====================================>                 (78 + 36) / 114][Stage 47:===========================================>          (92 + 22) / 114][Stage 47:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.337091236 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=59", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=59,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492611351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:=============================>                        (66 + 54) / 120][Stage 48:===================================>                  (78 + 42) / 120][Stage 48:============================================>         (98 + 22) / 120][Stage 48:====================================================> (116 + 4) / 120]                                                                                [Stage 49:===========================>                          (62 + 59) / 121][Stage 49:==================================>                   (77 + 44) / 121][Stage 49:============================================>         (99 + 22) / 121][Stage 49:===================================================>  (116 + 5) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.688171906 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424758126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==================================>                   (73 + 42) / 115][Stage 50:==========================================>           (91 + 24) / 115][Stage 50:===============================================>     (102 + 13) / 115][Stage 50:====================================================> (112 + 3) / 115]                                                                                [Stage 51:===================================>                  (76 + 40) / 116][Stage 51:===========================================>          (94 + 22) / 116][Stage 51:================================================>    (106 + 10) / 116][Stage 51:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.916388376 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450204465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:================================>                     (68 + 45) / 113][Stage 52:==========================================>           (88 + 25) / 113][Stage 52:==================================================>   (106 + 7) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:==============================>                       (65 + 49) / 114][Stage 53:========================================>             (85 + 29) / 114][Stage 53:==============================================>       (99 + 15) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.568826901 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=245", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=245,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426045852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (71 + 47) / 118][Stage 54:==================================>                   (76 + 42) / 118][Stage 54:======================================>               (85 + 33) / 118][Stage 54:============================================>         (98 + 20) / 118][Stage 54:=====================================================>(116 + 2) / 118]                                                                                [Stage 55:==================================>                   (75 + 44) / 119][Stage 55:====================================>                 (80 + 39) / 119][Stage 55:=========================================>            (91 + 28) / 119][Stage 55:===============================================>     (106 + 13) / 119][Stage 55:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.357121066 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:=====================================>                (81 + 37) / 118][Stage 56:=========================================>            (90 + 28) / 118][Stage 56:=============================================>        (99 + 19) / 118][Stage 56:=================================================>    (109 + 9) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:==================================>                   (77 + 42) / 119][Stage 57:=====================================>                (83 + 36) / 119][Stage 57:============================================>         (99 + 20) / 119][Stage 57:==================================================>   (112 + 7) / 119][Stage 57:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.628364857 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=234", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=234,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426732857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===================================>                  (75 + 38) / 113][Stage 58:===========================================>          (90 + 23) / 113][Stage 58:================================================>    (103 + 10) / 113][Stage 58:====================================================> (109 + 4) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:=======================================>              (83 + 31) / 114][Stage 59:=============================================>        (97 + 17) / 114][Stage 59:===============================================>     (102 + 12) / 114][Stage 59:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.242803275 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461279663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:==================================>                   (75 + 43) / 118][Stage 60:======================================>               (84 + 34) / 118][Stage 60:============================================>         (98 + 20) / 118][Stage 60:==================================================>   (111 + 7) / 118]                                                                                [Stage 61:=================================>                    (74 + 45) / 119][Stage 61:===================================>                  (79 + 40) / 119][Stage 61:==========================================>           (93 + 26) / 119][Stage 61:================================================>    (109 + 10) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.454766725 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437870232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:============================>                         (59 + 54) / 113][Stage 62:=================================>                    (70 + 43) / 113][Stage 62:=========================================>            (87 + 26) / 113][Stage 62:==============================================>      (100 + 13) / 113][Stage 62:=====================================================>(111 + 2) / 113]                                                                                [Stage 63:============================>                         (60 + 54) / 114][Stage 63:=================================>                    (71 + 43) / 114][Stage 63:========================================>             (86 + 28) / 114][Stage 63:==============================================>      (100 + 14) / 114][Stage 63:===================================================>  (109 + 5) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.622884246 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=195", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=195,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425194954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:===============================>                      (65 + 48) / 113][Stage 64:==========================================>           (89 + 24) / 113][Stage 64:====================================================> (109 + 4) / 113]                                                                                [Stage 65:==============================>                       (64 + 50) / 114][Stage 65:====================================>                 (76 + 38) / 114][Stage 65:============================================>         (94 + 20) / 114][Stage 65:====================================================> (110 + 4) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.272043125 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417443172 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:===============================>                      (66 + 47) / 113][Stage 66:===================================>                  (74 + 39) / 113][Stage 66:===========================================>          (91 + 22) / 113][Stage 66:=================================================>    (104 + 9) / 113]                                                                                [Stage 67:============================>                         (61 + 53) / 114][Stage 67:================================>                     (68 + 46) / 114][Stage 67:========================================>             (85 + 29) / 114][Stage 67:================================================>    (104 + 10) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.298014052 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562988257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (58 + 55) / 113][Stage 68:============================>                         (60 + 53) / 113][Stage 68:====================================>                 (77 + 36) / 113][Stage 68:===========================================>          (92 + 21) / 113][Stage 68:=================================================>    (104 + 9) / 113]                                                                                [Stage 69:============================>                         (60 + 54) / 114][Stage 69:==============================>                       (65 + 49) / 114][Stage 69:=======================================>              (84 + 30) / 114][Stage 69:==================================================>   (107 + 7) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.447602695 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398356236 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:=================================>                    (74 + 44) / 118][Stage 70:======================================>               (84 + 34) / 118][Stage 70:============================================>         (98 + 20) / 118][Stage 70:===============================================>     (105 + 13) / 118][Stage 70:=====================================================>(116 + 2) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:===================================>                  (78 + 41) / 119][Stage 71:=======================================>              (88 + 31) / 119][Stage 71:=============================================>       (103 + 16) / 119][Stage 71:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.365483672 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362537427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (82 + 33) / 115][Stage 72:==========================================>           (90 + 25) / 115][Stage 72:===============================================>     (102 + 13) / 115][Stage 72:====================================================> (111 + 4) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:===========================================>          (94 + 22) / 116][Stage 73:===============================================>     (105 + 11) / 116][Stage 73:====================================================> (113 + 3) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.058169541 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=160", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=160,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446345444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:=============================>                        (61 + 52) / 113][Stage 74:====================================>                 (76 + 37) / 113][Stage 74:===============================================>     (101 + 12) / 113][Stage 74:===================================================>  (108 + 5) / 113]                                                                                [Stage 75:============================>                         (61 + 53) / 114][Stage 75:==================================>                   (72 + 42) / 114][Stage 75:===========================================>          (91 + 23) / 114][Stage 75:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.238738899 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375513708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==================================>                   (73 + 40) / 113][Stage 76:==========================================>           (88 + 25) / 113][Stage 76:===============================================>     (101 + 12) / 113][Stage 76:===================================================>  (107 + 6) / 113][Stage 76:=====================================================>(112 + 1) / 113]                                                                                [Stage 77:===================================>                  (74 + 40) / 114][Stage 77:========================================>             (85 + 29) / 114][Stage 77:==============================================>      (100 + 14) / 114][Stage 77:====================================================> (110 + 4) / 114][Stage 77:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.045303534 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404225517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (72 + 46) / 118][Stage 78:==================================>                   (75 + 43) / 118][Stage 78:======================================>               (85 + 33) / 118][Stage 78:============================================>         (97 + 21) / 118][Stage 78:=================================================>    (109 + 9) / 118]                                                                                [Stage 79:=================================>                    (74 + 45) / 119][Stage 79:====================================>                 (80 + 39) / 119][Stage 79:======================================>               (84 + 35) / 119][Stage 79:===========================================>          (95 + 24) / 119][Stage 79:===============================================>     (107 + 12) / 119][Stage 79:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.717652899 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=198", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=198,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382634832 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=================================>                    (71 + 42) / 113][Stage 80:=======================================>              (82 + 31) / 113][Stage 80:============================================>         (94 + 19) / 113][Stage 80:===============================================>     (102 + 11) / 113][Stage 80:===================================================>  (107 + 6) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:====================================>                 (76 + 38) / 114][Stage 81:=======================================>              (84 + 30) / 114][Stage 81:==============================================>       (99 + 15) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.208389306 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=164", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=164,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368021407 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (73 + 40) / 113][Stage 82:==========================================>           (89 + 24) / 113][Stage 82:===============================================>      (99 + 14) / 113][Stage 82:===================================================>  (107 + 6) / 113]                                                                                [Stage 83:===================================>                  (75 + 39) / 114][Stage 83:======================================>               (82 + 32) / 114][Stage 83:=============================================>        (97 + 17) / 114][Stage 83:==================================================>   (106 + 8) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.990068424 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397584119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==================================>                   (73 + 42) / 115][Stage 84:========================================>             (87 + 28) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:===============================================>     (103 + 12) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:================================>                     (70 + 46) / 116][Stage 85:======================================>               (82 + 34) / 116][Stage 85:=========================================>            (90 + 26) / 116][Stage 85:===============================================>     (103 + 13) / 116][Stage 85:====================================================> (113 + 3) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.844953241 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=80", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=80,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388434452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:=================================>                    (73 + 45) / 118][Stage 86:==================================>                   (75 + 43) / 118][Stage 86:=======================================>              (86 + 32) / 118][Stage 86:==========================================>           (92 + 26) / 118][Stage 86:================================================>    (108 + 10) / 118][Stage 86:=====================================================>(117 + 1) / 118]                                                                                [Stage 87:=================================>                    (74 + 45) / 119][Stage 87:==================================>                   (75 + 44) / 119][Stage 87:==================================>                   (77 + 42) / 119][Stage 87:=====================================>                (83 + 36) / 119][Stage 87:============================================>         (98 + 21) / 119][Stage 87:===================================================>  (114 + 5) / 119][Stage 87:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.144644503 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=229", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=229,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411008182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (62 + 58) / 120][Stage 88:================================>                     (72 + 48) / 120][Stage 88:=======================================>              (88 + 32) / 120][Stage 88:=================================================>    (111 + 9) / 120][Stage 88:=====================================================>(119 + 1) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:==============================>                       (68 + 53) / 121][Stage 89:=======================================>              (88 + 33) / 121][Stage 89:===============================================>     (109 + 12) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.53152127 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349459994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:========================================>             (86 + 29) / 115][Stage 90:==============================================>       (98 + 17) / 115][Stage 90:===================================================>  (109 + 6) / 115]                                                                                [Stage 91:======================================>               (83 + 33) / 116][Stage 91:==========================================>           (92 + 24) / 116][Stage 91:=================================================>    (107 + 9) / 116][Stage 91:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.783082376 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=======================================>              (84 + 31) / 115][Stage 92:===========================================>          (92 + 23) / 115][Stage 92:===============================================>     (104 + 11) / 115][Stage 92:====================================================> (111 + 4) / 115]                                                                                [Stage 93:=======================================>              (85 + 31) / 116][Stage 93:==============================================>      (101 + 15) / 116][Stage 93:==================================================>   (108 + 8) / 116][Stage 93:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.839611835 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395596898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (71 + 44) / 115][Stage 94:====================================>                 (77 + 38) / 115][Stage 94:========================================>             (87 + 28) / 115][Stage 94:===============================================>     (102 + 13) / 115][Stage 94:=================================================>    (106 + 9) / 115][Stage 94:===================================================>  (110 + 5) / 115]                                                                                [Stage 95:=================================>                    (71 + 45) / 116][Stage 95:===================================>                  (77 + 39) / 116][Stage 95:=========================================>            (89 + 27) / 116][Stage 95:===============================================>     (103 + 13) / 116][Stage 95:==================================================>   (109 + 7) / 116][Stage 95:====================================================> (112 + 4) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.552192453 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=225", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=225,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425882392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (62 + 58) / 120][Stage 96:================================>                     (73 + 47) / 120][Stage 96:=========================================>            (93 + 27) / 120][Stage 96:===================================================>  (114 + 6) / 120]                                                                                [Stage 97:===========================>                          (61 + 60) / 121][Stage 97:================================>                     (73 + 48) / 121][Stage 97:=====================================>                (85 + 36) / 121][Stage 97:==================================================>   (114 + 7) / 121][Stage 97:=====================================================>(119 + 2) / 121][Stage 97:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.675360845 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418787891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:======================================>               (83 + 32) / 115][Stage 98:===========================================>          (93 + 22) / 115][Stage 98:==================================================>   (108 + 7) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=====================================>                (81 + 35) / 116][Stage 99:===========================================>          (94 + 22) / 116][Stage 99:===============================================>     (104 + 12) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.615759185 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387248114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (70 + 45) / 115][Stage 100:==========================================>          (93 + 22) / 115][Stage 100:=================================================>   (107 + 8) / 115]                                                                                [Stage 101:================================>                    (71 + 45) / 116][Stage 101:========================================>            (89 + 27) / 116][Stage 101:===============================================>    (106 + 10) / 116][Stage 101:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.751143048 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=111", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=111,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416435625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (58 + 55) / 113][Stage 102:=============================>                       (62 + 51) / 113][Stage 102:======================================>              (83 + 30) / 113][Stage 102:===============================================>    (103 + 10) / 113][Stage 102:====================================================>(112 + 1) / 113]                                                                                [Stage 103:===========================>                         (59 + 55) / 114][Stage 103:================================>                    (70 + 44) / 114][Stage 103:=========================================>           (90 + 24) / 114][Stage 103:==============================================>     (103 + 11) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.3039994 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=62", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=62,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350882483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:======================================>              (83 + 32) / 115][Stage 104:========================================>            (88 + 27) / 115][Stage 104:===============================================>    (105 + 10) / 115]                                                                                [Stage 105:=======================================>             (86 + 30) / 116][Stage 105:============================================>        (98 + 18) / 116][Stage 105:===============================================>    (105 + 11) / 116][Stage 105:===================================================> (112 + 4) / 116][Stage 105:====================================================>(114 + 2) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.548024741 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=203", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=203,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376316243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:====================================>                (78 + 35) / 113][Stage 106:========================================>            (87 + 26) / 113][Stage 106:==============================================>      (99 + 14) / 113][Stage 106:=================================================>   (106 + 7) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:==================================>                  (75 + 39) / 114][Stage 107:========================================>            (87 + 27) / 114][Stage 107:=============================================>       (98 + 16) / 114][Stage 107:================================================>    (105 + 9) / 114][Stage 107:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.127600168 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (79 + 34) / 113][Stage 108:=========================================>           (88 + 25) / 113][Stage 108:=============================================>       (98 + 15) / 113][Stage 108:===================================================> (109 + 4) / 113]                                                                                [Stage 109:======================================>              (83 + 31) / 114][Stage 109:==========================================>          (91 + 23) / 114][Stage 109:===============================================>    (104 + 10) / 114][Stage 109:==================================================>  (108 + 6) / 114][Stage 109:===================================================> (110 + 4) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.995884742 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=216", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=216,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420793222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (61 + 59) / 120][Stage 110:===============================>                     (71 + 49) / 120][Stage 110:===========================================>        (100 + 20) / 120][Stage 110:==================================================>  (114 + 6) / 120]                                                                                [Stage 111:===========================>                         (62 + 59) / 121][Stage 111:=================================>                   (77 + 44) / 121][Stage 111:=======================================>             (91 + 30) / 121][Stage 111:==================================================>  (116 + 5) / 121][Stage 111:====================================================>(119 + 2) / 121][Stage 111:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.497284647 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:=============================>                       (66 + 54) / 120][Stage 112:===================================>                 (80 + 40) / 120][Stage 112:=============================================>      (105 + 15) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:=============================>                       (67 + 54) / 121][Stage 113:=======================================>             (90 + 31) / 121][Stage 113:==============================================>     (109 + 12) / 121][Stage 113:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.176103799 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:============================>                        (64 + 56) / 120][Stage 114:================================>                    (74 + 46) / 120][Stage 114:===========================================>        (100 + 20) / 120][Stage 114:===================================================> (116 + 4) / 120]                                                                                [Stage 115:==========================>                          (61 + 60) / 121][Stage 115:=============================>                       (67 + 54) / 121][Stage 115:====================================>                (84 + 37) / 121][Stage 115:=============================================>      (105 + 16) / 121][Stage 115:====================================================>(119 + 2) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.530580465 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382608587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (73 + 45) / 118][Stage 116:==================================>                  (76 + 42) / 118][Stage 116:========================================>            (90 + 28) / 118][Stage 116:============================================>       (102 + 16) / 118][Stage 116:==================================================>  (113 + 5) / 118]                                                                                [Stage 117:================================>                    (73 + 46) / 119][Stage 117:=================================>                   (76 + 43) / 119][Stage 117:========================================>            (92 + 27) / 119][Stage 117:============================================>       (101 + 18) / 119][Stage 117:=================================================>   (111 + 8) / 119][Stage 117:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.804365882 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=65", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=65,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445726563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (72 + 41) / 113][Stage 118:======================================>              (82 + 31) / 113][Stage 118:===========================================>         (92 + 21) / 113][Stage 118:===============================================>    (103 + 10) / 113][Stage 118:==================================================>  (108 + 5) / 113][Stage 118:===================================================> (110 + 3) / 113]                                                                                [Stage 119:====================================>                (79 + 35) / 114][Stage 119:========================================>            (87 + 27) / 114][Stage 119:=============================================>      (100 + 14) / 114][Stage 119:===================================================> (111 + 3) / 114][Stage 119:====================================================>(112 + 2) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.969478843 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419680884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 59) / 120][Stage 120:=============================>                       (66 + 54) / 120][Stage 120:======================================>              (88 + 32) / 120][Stage 120:===================================================> (116 + 4) / 120]                                                                                [Stage 121:==========================>                          (61 + 60) / 121][Stage 121:==============================>                      (70 + 51) / 121][Stage 121:====================================>                (83 + 38) / 121][Stage 121:===========================================>        (102 + 19) / 121][Stage 121:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.111835807 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=233", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=233,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393514643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===============================>                     (68 + 47) / 115][Stage 122:=======================================>             (86 + 29) / 115][Stage 122:===============================================>    (104 + 11) / 115][Stage 122:====================================================>(113 + 2) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:===============================>                     (70 + 46) / 116][Stage 123:========================================>            (88 + 28) / 116][Stage 123:===============================================>    (105 + 11) / 116][Stage 123:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.861895637 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=133", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=133,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50822634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 60) / 120][Stage 124:==================================>                  (77 + 43) / 120][Stage 124:===========================================>        (101 + 19) / 120][Stage 124:===================================================> (116 + 4) / 120]                                                                                [Stage 125:===========================>                         (63 + 58) / 121][Stage 125:===============================>                     (73 + 48) / 121][Stage 125:=======================================>             (91 + 30) / 121][Stage 125:==================================================>  (115 + 6) / 121][Stage 125:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.592473015 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356901971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:======================================>              (84 + 31) / 115][Stage 126:=============================================>       (98 + 17) / 115][Stage 126:==================================================>  (110 + 5) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:======================================>              (84 + 32) / 116][Stage 127:============================================>        (97 + 19) / 116][Stage 127:=================================================>   (108 + 8) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.844433534 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384670837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (58 + 55) / 113][Stage 128:============================>                        (61 + 52) / 113][Stage 128:==================================>                  (74 + 39) / 113][Stage 128:==========================================>          (91 + 22) / 113][Stage 128:==================================================>  (108 + 5) / 113]                                                                                [Stage 129:============================>                        (61 + 53) / 114][Stage 129:=================================>                   (72 + 42) / 114][Stage 129:==========================================>          (92 + 22) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.63756833 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=5", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=5,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=============================>                       (63 + 50) / 113][Stage 130:===================================>                 (76 + 37) / 113][Stage 130:=============================================>       (96 + 17) / 113][Stage 130:====================================================>(111 + 2) / 113]                                                                                [Stage 131:=============================>                       (63 + 51) / 114][Stage 131:=================================>                   (71 + 43) / 114][Stage 131:==========================================>          (91 + 23) / 114][Stage 131:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.454162246 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35585429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==================================>                  (74 + 39) / 113][Stage 132:========================================>            (86 + 27) / 113][Stage 132:==============================================>     (102 + 11) / 113][Stage 132:==================================================>  (108 + 5) / 113][Stage 132:====================================================>(111 + 2) / 113]                                                                                [Stage 133:=================================>                   (72 + 42) / 114][Stage 133:======================================>              (83 + 31) / 114][Stage 133:===========================================>         (93 + 21) / 114][Stage 133:==============================================>     (103 + 11) / 114][Stage 133:====================================================>(112 + 2) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.138405528 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (78 + 35) / 113][Stage 134:==========================================>          (91 + 22) / 113][Stage 134:=============================================>       (98 + 15) / 113][Stage 134:==================================================>  (107 + 6) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:===================================>                 (76 + 38) / 114][Stage 135:======================================>              (83 + 31) / 114][Stage 135:=============================================>      (100 + 14) / 114][Stage 135:==================================================>  (109 + 5) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.262290122 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462080082 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (70 + 45) / 115][Stage 136:======================================>              (84 + 31) / 115][Stage 136:===============================================>    (104 + 11) / 115][Stage 136:===================================================> (112 + 3) / 115]                                                                                [Stage 137:===================================>                 (77 + 39) / 116][Stage 137:===========================================>         (96 + 20) / 116][Stage 137:===============================================>    (106 + 10) / 116][Stage 137:==================================================>  (111 + 5) / 116][Stage 137:===================================================> (112 + 4) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.42042873 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=139", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=139,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373355027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=================================>                   (75 + 43) / 118][Stage 138:=======================================>             (89 + 29) / 118][Stage 138:==============================================>     (105 + 13) / 118][Stage 138:====================================================>(117 + 1) / 118]                                                                                [Stage 139:================================>                    (73 + 46) / 119][Stage 139:===================================>                 (80 + 39) / 119][Stage 139:=========================================>           (94 + 25) / 119][Stage 139:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.02658398 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395467976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (62 + 58) / 120][Stage 140:================================>                    (74 + 46) / 120][Stage 140:=========================================>           (93 + 27) / 120][Stage 140:=================================================>   (112 + 8) / 120][Stage 140:====================================================>(119 + 1) / 120]                                                                                [Stage 141:===========================>                         (62 + 59) / 121][Stage 141:===============================>                     (71 + 50) / 121][Stage 141:=====================================>               (86 + 35) / 121][Stage 141:=============================================>      (105 + 16) / 121][Stage 141:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.342841996 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365616144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (73 + 45) / 118][Stage 142:====================================>                (82 + 36) / 118][Stage 142:============================================>       (100 + 18) / 118][Stage 142:==================================================>  (112 + 6) / 118]                                                                                [Stage 143:=================================>                   (76 + 43) / 119][Stage 143:=======================================>             (88 + 31) / 119][Stage 143:==============================================>     (106 + 13) / 119][Stage 143:===================================================> (116 + 3) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.170203782 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=196", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=196,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (73 + 45) / 118][Stage 144:=====================================>               (83 + 35) / 118][Stage 144:=============================================>      (104 + 14) / 118][Stage 144:====================================================>(117 + 1) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:===================================>                 (79 + 40) / 119][Stage 145:=======================================>             (89 + 30) / 119][Stage 145:=================================================>   (112 + 7) / 119][Stage 145:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.605974633 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=24", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=24,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide84;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (72 + 46) / 118][Stage 146:======================================>              (86 + 32) / 118][Stage 146:============================================>        (98 + 20) / 118][Stage 146:====================================================>(116 + 2) / 118]                                                                                [Stage 147:================================>                    (73 + 46) / 119][Stage 147:=================================>                   (75 + 44) / 119][Stage 147:=========================================>           (94 + 25) / 119][Stage 147:=================================================>   (112 + 7) / 119][Stage 147:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.086084251 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368054494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:=================================>                   (74 + 44) / 118][Stage 148:======================================>              (86 + 32) / 118][Stage 148:=========================================>           (93 + 25) / 118][Stage 148:=================================================>   (110 + 8) / 118][Stage 148:====================================================>(117 + 1) / 118]                                                                                [Stage 149:================================>                    (73 + 46) / 119][Stage 149:=================================>                   (75 + 44) / 119][Stage 149:========================================>            (91 + 28) / 119][Stage 149:=============================================>      (104 + 15) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.332580791 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404495449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==============================>                      (64 + 49) / 113][Stage 150:====================================>                (78 + 35) / 113][Stage 150:=========================================>           (88 + 25) / 113][Stage 150:===================================================> (109 + 4) / 113]                                                                                [Stage 151:============================>                        (61 + 53) / 114][Stage 151:===============================>                     (68 + 46) / 114][Stage 151:============================================>        (95 + 19) / 114][Stage 151:=================================================>   (107 + 7) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.265635887 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381986339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:============================>                        (61 + 52) / 113][Stage 152:==================================>                  (73 + 40) / 113][Stage 152:===========================================>         (93 + 20) / 113][Stage 152:================================================>    (104 + 9) / 113][Stage 152:===================================================> (109 + 4) / 113]                                                                                [Stage 153:===========================>                         (60 + 54) / 114][Stage 153:================================>                    (69 + 45) / 114][Stage 153:=====================================>               (81 + 33) / 114][Stage 153:================================================>    (105 + 9) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.41390772 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35341031 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==================================>                  (74 + 39) / 113][Stage 154:=======================================>             (84 + 29) / 113][Stage 154:============================================>        (95 + 18) / 113][Stage 154:================================================>    (104 + 9) / 113][Stage 154:===================================================> (109 + 4) / 113]                                                                                [Stage 155:===================================>                 (77 + 37) / 114][Stage 155:========================================>            (88 + 26) / 114][Stage 155:==============================================>      (99 + 15) / 114][Stage 155:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.088863105 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390458847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:==============================>                      (64 + 49) / 113][Stage 156:====================================>                (77 + 36) / 113][Stage 156:=================================================>   (105 + 8) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:===========================>                         (59 + 55) / 114][Stage 157:=============================>                       (63 + 51) / 114][Stage 157:========================================>            (87 + 27) / 114][Stage 157:=============================================>       (98 + 16) / 114][Stage 157:===================================================> (110 + 4) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.530189098 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=197", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=197,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373451534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===============================>                     (69 + 46) / 115][Stage 158:======================================>              (84 + 31) / 115][Stage 158:==============================================>     (102 + 13) / 115][Stage 158:===================================================> (112 + 3) / 115]                                                                                [Stage 159:=====================================>               (82 + 34) / 116][Stage 159:=============================================>      (101 + 15) / 116][Stage 159:==================================================>  (111 + 5) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.735196865 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366191513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (70 + 45) / 115][Stage 160:=========================================>           (89 + 26) / 115][Stage 160:===============================================>    (104 + 11) / 115][Stage 160:====================================================>(113 + 2) / 115]                                                                                [Stage 161:==================================>                  (75 + 41) / 116][Stage 161:==========================================>          (94 + 22) / 116][Stage 161:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.675498361 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=171", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=171,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410431592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (58 + 55) / 113][Stage 162:================================>                    (69 + 44) / 113][Stage 162:========================================>            (86 + 27) / 113][Stage 162:===============================================>    (103 + 10) / 113][Stage 162:====================================================>(111 + 2) / 113]                                                                                [Stage 163:============================>                        (61 + 53) / 114][Stage 163:==================================>                  (74 + 40) / 114][Stage 163:========================================>            (88 + 26) / 114][Stage 163:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.277703703 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=142", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=142,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365279371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (73 + 45) / 118][Stage 164:=====================================>               (84 + 34) / 118][Stage 164:================================================>    (109 + 9) / 118]                                                                                [Stage 165:=================================>                   (75 + 44) / 119][Stage 165:====================================>                (81 + 38) / 119][Stage 165:=============================================>      (105 + 14) / 119][Stage 165:===================================================> (115 + 4) / 119][Stage 165:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.176408311 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=224", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=224,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372297814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=================================>                   (73 + 42) / 115][Stage 166:=========================================>           (89 + 26) / 115][Stage 166:==================================================>  (109 + 6) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:===============================>                     (69 + 47) / 116][Stage 167:======================================>              (84 + 32) / 116][Stage 167:=============================================>      (102 + 14) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.66685217 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337415584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:====================================>                (80 + 35) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:============================================>        (97 + 18) / 115][Stage 168:=================================================>   (108 + 7) / 115]                                                                                [Stage 169:======================================>              (84 + 32) / 116][Stage 169:==========================================>          (94 + 22) / 116][Stage 169:===============================================>    (105 + 11) / 116][Stage 169:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.770670261 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374864423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==============================>                      (66 + 49) / 115][Stage 170:=====================================>               (81 + 34) / 115][Stage 170:============================================>        (96 + 19) / 115][Stage 170:=================================================>   (107 + 8) / 115][Stage 170:===================================================> (111 + 4) / 115]                                                                                [Stage 171:==============================>                      (67 + 49) / 116][Stage 171:==================================>                  (76 + 40) / 116][Stage 171:============================================>       (100 + 16) / 116][Stage 171:==================================================>  (111 + 5) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.919690877 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=182", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=182,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391056075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (60 + 60) / 120][Stage 172:=============================>                       (66 + 54) / 120][Stage 172:====================================>                (82 + 38) / 120][Stage 172:=================================================>   (111 + 9) / 120][Stage 172:====================================================>(118 + 2) / 120]                                                                                [Stage 173:==========================>                          (61 + 60) / 121][Stage 173:=============================>                       (68 + 53) / 121][Stage 173:=====================================>               (86 + 35) / 121][Stage 173:============================================>       (104 + 17) / 121][Stage 173:===================================================> (118 + 3) / 121][Stage 173:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.540111583 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=172", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=172,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500614182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:==================================>                  (77 + 41) / 118][Stage 174:=======================================>             (87 + 31) / 118][Stage 174:============================================>       (101 + 17) / 118][Stage 174:=================================================>   (111 + 7) / 118]                                                                                [Stage 175:================================>                    (74 + 45) / 119][Stage 175:====================================>                (81 + 38) / 119][Stage 175:========================================>            (91 + 28) / 119][Stage 175:============================================>       (102 + 17) / 119][Stage 175:==================================================>  (113 + 6) / 119][Stage 175:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.693214894 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=125", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=125,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386045241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:================================>                    (69 + 44) / 113][Stage 176:========================================>            (86 + 27) / 113][Stage 176:==============================================>     (100 + 13) / 113]                                                                                [Stage 177:===========================>                         (59 + 55) / 114][Stage 177:===============================>                     (67 + 47) / 114][Stage 177:========================================>            (87 + 27) / 114][Stage 177:================================================>    (105 + 9) / 114][Stage 177:====================================================>(112 + 2) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.496286618 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=122", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=122,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389606913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 60) / 120][Stage 178:=============================>                       (67 + 53) / 120][Stage 178:===================================>                 (81 + 39) / 120][Stage 178:==============================================>     (107 + 13) / 120]                                                                                [Stage 179:===========================>                         (62 + 59) / 121][Stage 179:===============================>                     (72 + 49) / 121][Stage 179:========================================>            (92 + 29) / 121][Stage 179:=================================================>   (114 + 7) / 121][Stage 179:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.166895304 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=36", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=36,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409261396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (81 + 34) / 115][Stage 180:=========================================>           (89 + 26) / 115][Stage 180:============================================>        (97 + 18) / 115][Stage 180:=================================================>   (107 + 8) / 115][Stage 180:==================================================>  (110 + 5) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:=======================================>             (87 + 29) / 116][Stage 181:===========================================>         (95 + 21) / 116][Stage 181:==============================================>     (104 + 12) / 116][Stage 181:==================================================>  (111 + 5) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.564058536 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=69", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=69,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:======================================>              (84 + 31) / 115][Stage 182:=============================================>       (99 + 16) / 115][Stage 182:=================================================>   (107 + 8) / 115][Stage 182:====================================================>(113 + 2) / 115]                                                                                [Stage 183:======================================>              (84 + 32) / 116][Stage 183:============================================>        (97 + 19) / 116][Stage 183:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.775043115 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=26", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=26,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347858683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:======================================>              (83 + 32) / 115][Stage 184:===========================================>         (95 + 20) / 115][Stage 184:==================================================>  (109 + 6) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:=====================================>               (83 + 33) / 116][Stage 185:========================================>            (88 + 28) / 116][Stage 185:==============================================>     (103 + 13) / 116][Stage 185:=================================================>   (109 + 7) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.207444383 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339667637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (83 + 32) / 115][Stage 186:===========================================>         (95 + 20) / 115][Stage 186:===============================================>    (105 + 10) / 115][Stage 186:====================================================>(113 + 2) / 115]                                                                                [Stage 187:=======================================>             (86 + 30) / 116][Stage 187:============================================>        (97 + 19) / 116][Stage 187:=================================================>   (109 + 7) / 116][Stage 187:===================================================> (113 + 3) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.943309235 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346935922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==================================>                  (73 + 40) / 113][Stage 188:=====================================>               (81 + 32) / 113][Stage 188:=============================================>       (96 + 17) / 113][Stage 188:=================================================>   (106 + 7) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:=================================>                   (73 + 41) / 114][Stage 189:======================================>              (82 + 32) / 114][Stage 189:============================================>        (96 + 18) / 114][Stage 189:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.882759915 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=173", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=173,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383039577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (58 + 55) / 113][Stage 190:===============================>                     (67 + 46) / 113][Stage 190:========================================>            (87 + 26) / 113][Stage 190:=============================================>       (98 + 15) / 113][Stage 190:====================================================>(111 + 2) / 113]                                                                                [Stage 191:===========================>                         (59 + 55) / 114][Stage 191:===============================>                     (68 + 46) / 114][Stage 191:=======================================>             (84 + 30) / 114][Stage 191:==================================================>  (108 + 6) / 114][Stage 191:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.280161483 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384710983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:============================>                        (60 + 53) / 113][Stage 192:===============================>                     (68 + 45) / 113][Stage 192:=====================================>               (80 + 33) / 113][Stage 192:===========================================>         (92 + 21) / 113][Stage 192:=================================================>   (106 + 7) / 113]                                                                                [Stage 193:============================>                        (61 + 53) / 114][Stage 193:==================================>                  (75 + 39) / 114][Stage 193:========================================>            (87 + 27) / 114][Stage 193:==============================================>     (102 + 12) / 114][Stage 193:====================================================>(112 + 2) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.580253204 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396309661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 60) / 120][Stage 194:============================>                        (64 + 56) / 120][Stage 194:=================================>                   (76 + 44) / 120][Stage 194:==========================================>          (96 + 24) / 120][Stage 194:=================================================>   (113 + 7) / 120][Stage 194:====================================================>(119 + 1) / 120]                                                                                [Stage 195:==========================>                          (61 + 60) / 121][Stage 195:============================>                        (66 + 55) / 121][Stage 195:========================================>            (93 + 28) / 121][Stage 195:=================================================>   (114 + 7) / 121][Stage 195:====================================================>(119 + 2) / 121][Stage 195:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.847183461 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338292996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:======================================>              (83 + 32) / 115][Stage 196:=============================================>      (101 + 14) / 115][Stage 196:==================================================>  (110 + 5) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:========================================>            (88 + 28) / 116][Stage 197:=============================================>       (99 + 17) / 116][Stage 197:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.683823725 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369469196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===================================>                 (75 + 38) / 113][Stage 198:========================================>            (87 + 26) / 113][Stage 198:==============================================>     (101 + 12) / 113][Stage 198:==================================================>  (107 + 6) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:=================================>                   (72 + 42) / 114][Stage 199:=======================================>             (84 + 30) / 114][Stage 199:=============================================>       (97 + 17) / 114][Stage 199:==================================================>  (108 + 6) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.98855472 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=79", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=79,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide84;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (78 + 35) / 113][Stage 200:==========================================>          (91 + 22) / 113][Stage 200:================================================>    (104 + 9) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:====================================>                (79 + 35) / 114][Stage 201:=========================================>           (90 + 24) / 114][Stage 201:==============================================>      (99 + 15) / 114][Stage 201:==================================================>  (108 + 6) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.778031055 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 04:28:40 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51172) dropped. RpcEnv already stopped.
17/06/01 04:28:40 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51172) dropped. RpcEnv already stopped.

real	10m23.045s
user	11m50.796s
sys	0m49.656s
