Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 04:50:03 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:50:18 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:50:18 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:50:18 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 04:50:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:50:31 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601045020-0756).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.323135166 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:====================>                                  (42 + 73) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=======================================>               (82 + 33) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.987034879 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.694453958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==========================>                            (54 + 59) / 113][Stage 2:===========================>                           (57 + 56) / 113][Stage 2:=================================>                     (69 + 44) / 113][Stage 2:=====================================>                 (77 + 36) / 113][Stage 2:======================================>                (80 + 33) / 113][Stage 2:==========================================>            (87 + 26) / 113][Stage 2:===========================================>           (90 + 23) / 113][Stage 2:================================================>      (99 + 14) / 113][Stage 2:===================================================>   (105 + 8) / 113][Stage 2:====================================================>  (107 + 6) / 113][Stage 2:======================================================>(111 + 2) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:================================>                      (68 + 46) / 114][Stage 3:==================================>                    (72 + 42) / 114][Stage 3:====================================>                  (75 + 39) / 114][Stage 3:======================================>                (80 + 34) / 114][Stage 3:==========================================>            (88 + 26) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:===============================================>       (99 + 15) / 114][Stage 3:===================================================>   (106 + 8) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:=====================================================> (110 + 4) / 114][Stage 3:=====================================================> (111 + 3) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.855219498 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.644282216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===============================>                       (68 + 50) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:==================================>                    (74 + 44) / 118][Stage 4:===================================>                   (77 + 41) / 118][Stage 4:=====================================>                 (81 + 37) / 118][Stage 4:=========================================>             (88 + 30) / 118][Stage 4:===========================================>           (93 + 25) / 118][Stage 4:==============================================>       (102 + 16) / 118][Stage 4:=====================================================> (115 + 3) / 118]                                                                                [Stage 5:=================================>                     (72 + 47) / 119][Stage 5:==================================>                    (74 + 45) / 119][Stage 5:====================================>                  (78 + 41) / 119][Stage 5:====================================>                  (79 + 40) / 119][Stage 5:====================================>                  (80 + 39) / 119][Stage 5:=====================================>                 (82 + 37) / 119][Stage 5:==============================================>       (102 + 17) / 119][Stage 5:=====================================================> (116 + 3) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.235805939 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563498967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==================================>                    (70 + 43) / 113][Stage 6:====================================>                  (74 + 39) / 113][Stage 6:======================================>                (80 + 33) / 113][Stage 6:==========================================>            (88 + 25) / 113][Stage 6:===============================================>       (97 + 16) / 113][Stage 6:====================================================>  (107 + 6) / 113][Stage 6:=====================================================> (110 + 3) / 113][Stage 6:======================================================>(112 + 1) / 113]                                                                                [Stage 7:==================================>                    (72 + 42) / 114][Stage 7:=====================================>                 (78 + 36) / 114][Stage 7:=========================================>             (85 + 29) / 114][Stage 7:===========================================>           (91 + 23) / 114][Stage 7:===============================================>      (100 + 14) / 114][Stage 7:===================================================>   (107 + 7) / 114][Stage 7:=====================================================> (111 + 3) / 114][Stage 7:======================================================>(112 + 2) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.04988096 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.599770697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==========================>                            (55 + 58) / 113][Stage 8:=============================>                         (61 + 52) / 113][Stage 8:====================================>                  (74 + 39) / 113][Stage 8:=======================================>               (82 + 31) / 113][Stage 8:===============================================>       (97 + 16) / 113][Stage 8:================================================>      (99 + 14) / 113][Stage 8:==================================================>    (104 + 9) / 113]                                                                                [Stage 9:============================>                          (59 + 55) / 114][Stage 9:=============================>                         (62 + 52) / 114][Stage 9:====================================>                  (76 + 38) / 114][Stage 9:==========================================>            (89 + 25) / 114][Stage 9:================================================>     (103 + 11) / 114][Stage 9:=====================================================> (111 + 3) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.404243342 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.628739085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (59 + 61) / 120][Stage 10:===========================>                          (60 + 60) / 120][Stage 10:==============================>                       (68 + 52) / 120][Stage 10:====================================>                 (82 + 38) / 120][Stage 10:===========================================>          (96 + 24) / 120][Stage 10:===============================================>     (107 + 13) / 120][Stage 10:=====================================================>(118 + 2) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:===========================>                          (62 + 59) / 121][Stage 11:==================================>                   (78 + 43) / 121][Stage 11:=========================================>            (94 + 27) / 121][Stage 11:=================================================>    (112 + 9) / 121][Stage 11:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.701003626 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.592980142 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (57 + 56) / 113][Stage 12:================================>                     (67 + 46) / 113][Stage 12:=====================================>                (79 + 34) / 113][Stage 12:===========================================>          (91 + 22) / 113][Stage 12:==================================================>   (106 + 7) / 113][Stage 12:=====================================================>(111 + 2) / 113]                                                                                [Stage 13:===========================>                          (58 + 56) / 114][Stage 13:=============================>                        (63 + 51) / 114][Stage 13:===================================>                  (75 + 39) / 114][Stage 13:=============================================>        (96 + 18) / 114][Stage 13:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.537967735 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.557537318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (59 + 61) / 120][Stage 14:===========================>                          (60 + 60) / 120][Stage 14:==============================>                       (67 + 53) / 120][Stage 14:===================================>                  (78 + 42) / 120][Stage 14:============================================>        (100 + 20) / 120][Stage 14:==================================================>   (112 + 8) / 120]                                                                                [Stage 15:===========================>                          (61 + 60) / 121][Stage 15:============================>                         (64 + 57) / 121][Stage 15:==================================>                   (77 + 44) / 121][Stage 15:=============================================>       (104 + 17) / 121][Stage 15:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.633540828 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.61113523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:===============================>                      (69 + 51) / 120][Stage 16:=====================================>                (84 + 36) / 120][Stage 16:=============================================>       (103 + 17) / 120][Stage 16:=====================================================>(118 + 2) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:=============================>                        (66 + 55) / 121][Stage 17:==================================>                   (78 + 43) / 121][Stage 17:===========================================>          (98 + 23) / 121][Stage 17:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.416233464 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521121056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:==============================>                       (64 + 49) / 113][Stage 18:=====================================>                (78 + 35) / 113][Stage 18:=============================================>        (96 + 17) / 113][Stage 18:===================================================>  (107 + 6) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:================================>                     (68 + 46) / 114][Stage 19:======================================>               (81 + 33) / 114][Stage 19:============================================>         (93 + 21) / 114][Stage 19:===================================================>  (108 + 6) / 114][Stage 19:====================================================> (110 + 4) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.830990576 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524972679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (72 + 46) / 118][Stage 20:==================================>                   (76 + 42) / 118][Stage 20:=====================================>                (83 + 35) / 118][Stage 20:========================================>             (89 + 29) / 118][Stage 20:============================================>         (98 + 20) / 118][Stage 20:===============================================>     (105 + 13) / 118][Stage 20:===================================================>  (113 + 5) / 118]                                                                                [Stage 21:=================================>                    (73 + 46) / 119][Stage 21:===================================>                  (79 + 40) / 119][Stage 21:=======================================>              (88 + 31) / 119][Stage 21:=============================================>       (102 + 17) / 119][Stage 21:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 4.002356307 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471224391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (71 + 47) / 118][Stage 22:================================>                     (72 + 46) / 118][Stage 22:=====================================>                (82 + 36) / 118][Stage 22:========================================>             (89 + 29) / 118][Stage 22:==================================================>   (111 + 7) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:====================================>                 (80 + 39) / 119][Stage 23:============================================>        (100 + 19) / 119][Stage 23:===================================================>  (114 + 5) / 119][Stage 23:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.360162838 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439593667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (79 + 36) / 115][Stage 24:======================================>               (83 + 32) / 115][Stage 24:=========================================>            (89 + 26) / 115][Stage 24:==============================================>       (98 + 17) / 115][Stage 24:=================================================>    (106 + 9) / 115][Stage 24:===================================================>  (109 + 6) / 115][Stage 24:====================================================> (111 + 4) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:======================================>               (83 + 33) / 116][Stage 25:==========================================>           (91 + 25) / 116][Stage 25:===============================================>     (104 + 12) / 116][Stage 25:===================================================>  (111 + 5) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.665428272 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:======================================>               (81 + 34) / 115][Stage 26:========================================>             (86 + 29) / 115][Stage 26:==============================================>       (98 + 17) / 115][Stage 26:==================================================>   (108 + 7) / 115]                                                                                [Stage 27:=======================================>              (84 + 32) / 116][Stage 27:===========================================>          (93 + 23) / 116][Stage 27:==============================================>      (101 + 15) / 116][Stage 27:=================================================>    (107 + 9) / 116][Stage 27:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.067394606 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (82 + 33) / 115][Stage 28:=========================================>            (88 + 27) / 115][Stage 28:==============================================>      (100 + 15) / 115][Stage 28:==================================================>   (107 + 8) / 115][Stage 28:====================================================> (112 + 3) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:======================================>               (82 + 34) / 116][Stage 29:==========================================>           (92 + 24) / 116][Stage 29:=================================================>    (107 + 9) / 116][Stage 29:==================================================>   (109 + 7) / 116][Stage 29:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.319205389 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470500999 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (69 + 46) / 115][Stage 30:=======================================>              (84 + 31) / 115][Stage 30:==============================================>      (100 + 15) / 115][Stage 30:===================================================>  (109 + 6) / 115]                                                                                [Stage 31:=================================>                    (73 + 43) / 116][Stage 31:=======================================>              (85 + 31) / 116][Stage 31:=============================================>        (98 + 18) / 116][Stage 31:==================================================>   (109 + 7) / 116][Stage 31:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.764375677 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=128", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=128,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.65656052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (69 + 46) / 115][Stage 32:===========================================>          (92 + 23) / 115][Stage 32:===============================================>     (102 + 13) / 115][Stage 32:====================================================> (111 + 4) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:===============================>                      (67 + 49) / 116][Stage 33:=====================================>                (81 + 35) / 116][Stage 33:=============================================>        (97 + 19) / 116][Stage 33:==============================================>      (102 + 14) / 116][Stage 33:===============================================>     (105 + 11) / 116][Stage 33:====================================================> (112 + 4) / 116][Stage 33:=====================================================>(114 + 2) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.673481253 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=202", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=202,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462375301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=================================>                    (71 + 44) / 115][Stage 34:=======================================>              (84 + 31) / 115][Stage 34:===============================================>     (102 + 13) / 115][Stage 34:===================================================>  (109 + 6) / 115][Stage 34:=====================================================>(113 + 2) / 115]                                                                                [Stage 35:===============================>                      (68 + 48) / 116][Stage 35:===================================>                  (77 + 39) / 116][Stage 35:=============================================>        (98 + 18) / 116][Stage 35:===================================================>  (110 + 6) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.31590893 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478262506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (58 + 55) / 113][Stage 36:============================>                         (60 + 53) / 113][Stage 36:================================>                     (69 + 44) / 113][Stage 36:=========================================>            (86 + 27) / 113][Stage 36:=================================================>    (104 + 9) / 113]                                                                                [Stage 37:============================>                         (60 + 54) / 114][Stage 37:================================>                     (69 + 45) / 114][Stage 37:=========================================>            (87 + 27) / 114][Stage 37:===============================================>     (103 + 11) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.280584075 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:============================>                         (59 + 54) / 113][Stage 38:================================>                     (67 + 46) / 113][Stage 38:======================================>               (80 + 33) / 113][Stage 38:=============================================>        (96 + 17) / 113][Stage 38:====================================================> (109 + 4) / 113]                                                                                [Stage 39:============================>                         (60 + 54) / 114][Stage 39:=================================>                    (70 + 44) / 114][Stage 39:==========================================>           (90 + 24) / 114][Stage 39:==============================================>      (100 + 14) / 114]                                                                                Time elapsed: 3.246652059 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52145036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (81 + 34) / 115][Stage 40:=======================================>              (85 + 30) / 115][Stage 40:==============================================>       (98 + 17) / 115][Stage 40:===================================================>  (110 + 5) / 115][Stage 40:====================================================> (111 + 4) / 115][Stage 40:=====================================================>(113 + 2) / 115]                                                                                [Stage 41:========================================>             (87 + 29) / 116][Stage 41:=============================================>        (98 + 18) / 116][Stage 41:==================================================>   (109 + 7) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.117622342 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481360713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:===================================>                  (77 + 41) / 118][Stage 42:========================================>             (89 + 29) / 118][Stage 42:=============================================>       (102 + 16) / 118][Stage 42:===================================================>  (112 + 6) / 118][Stage 42:=====================================================>(116 + 2) / 118]                                                                                [Stage 43:=================================>                    (73 + 46) / 119][Stage 43:==================================>                   (77 + 42) / 119][Stage 43:=====================================>                (83 + 36) / 119][Stage 43:============================================>        (100 + 19) / 119][Stage 43:================================================>    (109 + 10) / 119][Stage 43:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.533570211 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide99"
dataSource: String = /nidan/orc/individualORC/slide99

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469833072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:============================>                         (59 + 54) / 113][Stage 44:===============================>                      (66 + 47) / 113][Stage 44:========================================>             (84 + 29) / 113][Stage 44:==============================================>       (98 + 15) / 113][Stage 44:===================================================>  (107 + 6) / 113]                                                                                [Stage 45:=============================>                        (62 + 52) / 114][Stage 45:=================================>                    (71 + 43) / 114][Stage 45:=============================================>        (95 + 19) / 114][Stage 45:===================================================>  (109 + 5) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.282174324 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=180", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=180,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480238276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (72 + 46) / 118][Stage 46:====================================>                 (79 + 39) / 118][Stage 46:============================================>         (98 + 20) / 118][Stage 46:================================================>    (108 + 10) / 118][Stage 46:====================================================> (114 + 4) / 118]                                                                                [Stage 47:=================================>                    (74 + 45) / 119][Stage 47:====================================>                 (80 + 39) / 119][Stage 47:==========================================>           (93 + 26) / 119][Stage 47:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.321533207 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505258004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=====================================>                (80 + 35) / 115][Stage 48:==========================================>           (90 + 25) / 115][Stage 48:===============================================>     (102 + 13) / 115][Stage 48:===================================================>  (110 + 5) / 115]                                                                                [Stage 49:========================================>             (87 + 29) / 116][Stage 49:=============================================>       (100 + 16) / 116][Stage 49:==================================================>   (108 + 8) / 116][Stage 49:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.971546653 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448538791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=================================>                    (70 + 43) / 113][Stage 50:========================================>             (85 + 28) / 113][Stage 50:=============================================>        (95 + 18) / 113][Stage 50:==================================================>   (105 + 8) / 113][Stage 50:===================================================>  (108 + 5) / 113][Stage 50:=====================================================>(111 + 2) / 113]                                                                                [Stage 51:======================================>               (81 + 33) / 114][Stage 51:============================================>         (93 + 21) / 114][Stage 51:===============================================>     (103 + 11) / 114][Stage 51:====================================================> (111 + 3) / 114][Stage 51:=====================================================>(112 + 2) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.163351623 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462499437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:===========================>                          (61 + 59) / 120][Stage 52:===================================>                  (79 + 41) / 120][Stage 52:===========================================>          (97 + 23) / 120][Stage 52:====================================================> (116 + 4) / 120]                                                                                [Stage 53:===========================>                          (61 + 60) / 121][Stage 53:=================================>                    (74 + 47) / 121][Stage 53:=====================================>                (83 + 38) / 121][Stage 53:===============================================>     (109 + 12) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.227131402 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423484228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==================================>                   (74 + 41) / 115][Stage 54:=========================================>            (89 + 26) / 115][Stage 54:==============================================>      (101 + 14) / 115][Stage 54:===================================================>  (109 + 6) / 115][Stage 54:===================================================>  (110 + 5) / 115][Stage 54:=====================================================>(114 + 1) / 115]                                                                                [Stage 55:===============================>                      (67 + 49) / 116][Stage 55:====================================>                 (79 + 37) / 116][Stage 55:==============================================>      (101 + 15) / 116][Stage 55:=================================================>    (107 + 9) / 116][Stage 55:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.311314455 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==================================>                   (74 + 41) / 115][Stage 56:===========================================>          (92 + 23) / 115][Stage 56:================================================>    (105 + 10) / 115][Stage 56:====================================================> (112 + 3) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:================================>                     (70 + 46) / 116][Stage 57:======================================>               (83 + 33) / 116][Stage 57:==============================================>       (99 + 17) / 116][Stage 57:==================================================>   (109 + 7) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.253518432 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=193", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=193,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464648603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (58 + 55) / 113][Stage 58:============================>                         (59 + 54) / 113][Stage 58:================================>                     (69 + 44) / 113][Stage 58:============================================>         (93 + 20) / 113][Stage 58:====================================================> (109 + 4) / 113]                                                                                [Stage 59:=============================>                        (63 + 51) / 114][Stage 59:===================================>                  (75 + 39) / 114][Stage 59:==========================================>           (90 + 24) / 114][Stage 59:===================================================>  (109 + 5) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.195980749 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48738531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (70 + 45) / 115][Stage 60:==========================================>           (90 + 25) / 115][Stage 60:==================================================>   (108 + 7) / 115][Stage 60:=====================================================>(114 + 1) / 115]                                                                                [Stage 61:================================>                     (70 + 46) / 116][Stage 61:========================================>             (87 + 29) / 116][Stage 61:================================================>    (106 + 10) / 116][Stage 61:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.881308016 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450570122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:=================================>                    (74 + 44) / 118][Stage 62:======================================>               (85 + 33) / 118][Stage 62:==============================================>      (103 + 15) / 118][Stage 62:====================================================> (114 + 4) / 118]                                                                                [Stage 63:==================================>                   (75 + 44) / 119][Stage 63:======================================>               (85 + 34) / 119][Stage 63:==============================================>      (105 + 14) / 119]                                                                                Time elapsed: 2.900742331 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=181", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=181,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409275872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:====================================>                 (77 + 36) / 113][Stage 64:========================================>             (84 + 29) / 113][Stage 64:============================================>         (93 + 20) / 113][Stage 64:================================================>    (103 + 10) / 113][Stage 64:=====================================================>(111 + 2) / 113]                                                                                [Stage 65:====================================>                 (78 + 36) / 114][Stage 65:========================================>             (85 + 29) / 114][Stage 65:============================================>         (94 + 20) / 114][Stage 65:==================================================>   (106 + 8) / 114][Stage 65:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.177587637 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=40", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=40,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468799231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:======================================>               (81 + 34) / 115][Stage 66:========================================>             (86 + 29) / 115][Stage 66:==============================================>      (100 + 15) / 115][Stage 66:===================================================>  (109 + 6) / 115]                                                                                [Stage 67:========================================>             (87 + 29) / 116][Stage 67:===========================================>          (94 + 22) / 116][Stage 67:==================================================>   (109 + 7) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.432157041 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=====================================>                (79 + 36) / 115][Stage 68:=======================================>              (84 + 31) / 115][Stage 68:==============================================>       (99 + 16) / 115][Stage 68:===================================================>  (110 + 5) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:======================================>               (83 + 33) / 116][Stage 69:===========================================>          (94 + 22) / 116][Stage 69:================================================>    (106 + 10) / 116][Stage 69:=====================================================>(114 + 2) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.247328021 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375339207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (81 + 34) / 115][Stage 70:========================================>             (87 + 28) / 115][Stage 70:===============================================>     (102 + 13) / 115][Stage 70:===================================================>  (109 + 6) / 115]                                                                                [Stage 71:========================================>             (87 + 29) / 116][Stage 71:==============================================>       (99 + 17) / 116][Stage 71:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.671898387 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410909939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (72 + 46) / 118][Stage 72:====================================>                 (80 + 38) / 118][Stage 72:============================================>        (100 + 18) / 118][Stage 72:====================================================> (115 + 3) / 118]                                                                                [Stage 73:=================================>                    (73 + 46) / 119][Stage 73:===================================>                  (78 + 41) / 119][Stage 73:========================================>             (89 + 30) / 119][Stage 73:================================================>    (109 + 10) / 119][Stage 73:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.970113042 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44563803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:============================>                         (63 + 57) / 120][Stage 74:=================================>                    (74 + 46) / 120][Stage 74:===========================================>          (97 + 23) / 120][Stage 74:===================================================>  (114 + 6) / 120]                                                                                [Stage 75:==============================>                       (68 + 53) / 121][Stage 75:===================================>                  (79 + 42) / 121][Stage 75:===========================================>          (97 + 24) / 121][Stage 75:====================================================> (117 + 4) / 121][Stage 75:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.26922046 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425812466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=====================================>                (78 + 35) / 113][Stage 76:==========================================>           (88 + 25) / 113][Stage 76:==============================================>      (100 + 13) / 113][Stage 76:====================================================> (109 + 4) / 113]                                                                                [Stage 77:====================================>                 (77 + 37) / 114][Stage 77:===========================================>          (91 + 23) / 114][Stage 77:================================================>    (104 + 10) / 114][Stage 77:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.947052596 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364215909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:======================================>               (83 + 32) / 115][Stage 78:=========================================>            (88 + 27) / 115][Stage 78:===============================================>     (103 + 12) / 115][Stage 78:===================================================>  (109 + 6) / 115]                                                                                [Stage 79:=======================================>              (85 + 31) / 116][Stage 79:============================================>         (95 + 21) / 116][Stage 79:==================================================>   (108 + 8) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.72674574 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442126974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (60 + 60) / 120][Stage 80:================================>                     (72 + 48) / 120][Stage 80:===========================================>          (96 + 24) / 120][Stage 80:====================================================> (117 + 3) / 120][Stage 80:=====================================================>(119 + 1) / 120]                                                                                [Stage 81:=============================>                        (67 + 54) / 121][Stage 81:=====================================>                (85 + 36) / 121][Stage 81:==============================================>      (107 + 14) / 121][Stage 81:=====================================================>(119 + 2) / 121][Stage 81:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.48581756 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443812576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===============================>                      (67 + 48) / 115][Stage 82:======================================>               (82 + 33) / 115][Stage 82:==============================================>       (99 + 16) / 115][Stage 82:====================================================> (111 + 4) / 115]                                                                                [Stage 83:================================>                     (70 + 46) / 116][Stage 83:========================================>             (87 + 29) / 116][Stage 83:================================================>    (106 + 10) / 116][Stage 83:====================================================> (113 + 3) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.37942792 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=39", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=39,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:====================================>                 (77 + 38) / 115][Stage 84:==========================================>           (91 + 24) / 115][Stage 84:===================================================>  (110 + 5) / 115][Stage 84:=====================================================>(113 + 2) / 115]                                                                                [Stage 85:================================>                     (69 + 47) / 116][Stage 85:======================================>               (83 + 33) / 116][Stage 85:==============================================>      (101 + 15) / 116][Stage 85:==================================================>   (108 + 8) / 116][Stage 85:====================================================> (113 + 3) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.893039052 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471267107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:============================>                         (63 + 57) / 120][Stage 86:====================================>                 (80 + 40) / 120][Stage 86:==============================================>      (105 + 15) / 120][Stage 86:===================================================>  (115 + 5) / 120]                                                                                [Stage 87:=============================>                        (66 + 55) / 121][Stage 87:==================================>                   (77 + 44) / 121][Stage 87:=============================================>       (105 + 16) / 121][Stage 87:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.125664345 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366439076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=====================================>                (80 + 35) / 115][Stage 88:=========================================>            (89 + 26) / 115][Stage 88:==============================================>      (100 + 15) / 115][Stage 88:==================================================>   (107 + 8) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:======================================>               (83 + 33) / 116][Stage 89:=========================================>            (89 + 27) / 116][Stage 89:===============================================>     (103 + 13) / 116][Stage 89:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.830773422 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379973042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:======================================>               (83 + 32) / 115][Stage 90:===========================================>          (93 + 22) / 115][Stage 90:=================================================>    (106 + 9) / 115][Stage 90:====================================================> (112 + 3) / 115]                                                                                [Stage 91:======================================>               (82 + 34) / 116][Stage 91:===========================================>          (93 + 23) / 116][Stage 91:================================================>    (106 + 10) / 116][Stage 91:=====================================================>(114 + 2) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.315420608 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407811832 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===============================>                      (67 + 48) / 115][Stage 92:======================================>               (81 + 34) / 115][Stage 92:============================================>         (95 + 20) / 115][Stage 92:===================================================>  (109 + 6) / 115][Stage 92:====================================================> (111 + 4) / 115]                                                                                [Stage 93:==================================>                   (75 + 41) / 116][Stage 93:=========================================>            (89 + 27) / 116][Stage 93:===============================================>     (104 + 12) / 116][Stage 93:====================================================> (112 + 4) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.514491365 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=211", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=211,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358887478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=======================================>              (85 + 30) / 115][Stage 94:=============================================>        (96 + 19) / 115][Stage 94:==================================================>   (107 + 8) / 115]                                                                                [Stage 95:======================================>               (82 + 34) / 116][Stage 95:=========================================>            (89 + 27) / 116][Stage 95:===============================================>     (105 + 11) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.649118452 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354415837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (80 + 35) / 115][Stage 96:========================================>             (86 + 29) / 115][Stage 96:=============================================>        (97 + 18) / 115][Stage 96:===============================================>     (102 + 13) / 115][Stage 96:===================================================>  (109 + 6) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:=======================================>              (84 + 32) / 116][Stage 97:=========================================>            (90 + 26) / 116][Stage 97:==============================================>       (99 + 17) / 116][Stage 97:================================================>    (106 + 10) / 116][Stage 97:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.276078829 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372672225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===================================>                  (74 + 39) / 113][Stage 98:========================================>             (85 + 28) / 113][Stage 98:============================================>         (94 + 19) / 113][Stage 98:==================================================>   (106 + 7) / 113][Stage 98:====================================================> (110 + 3) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:===================================>                  (75 + 39) / 114][Stage 99:=========================================>            (87 + 27) / 114][Stage 99:==============================================>      (100 + 14) / 114][Stage 99:==================================================>   (106 + 8) / 114][Stage 99:=====================================================>(112 + 2) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.318408934 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423120863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:==================================>                  (77 + 43) / 120][Stage 100:============================================>       (103 + 17) / 120][Stage 100:===================================================> (116 + 4) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:==============================>                      (70 + 51) / 121][Stage 101:=======================================>             (91 + 30) / 121][Stage 101:============================================>       (103 + 18) / 121][Stage 101:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.043399873 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357250982 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (80 + 35) / 115][Stage 102:=====================================>               (82 + 33) / 115][Stage 102:==========================================>          (92 + 23) / 115][Stage 102:=============================================>      (100 + 15) / 115][Stage 102:=================================================>   (107 + 8) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:========================================>            (88 + 28) / 116][Stage 103:============================================>        (98 + 18) / 116][Stage 103:================================================>    (107 + 9) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.410349209 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=20", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=20,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379497891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=====================================>               (79 + 34) / 113][Stage 104:=========================================>           (88 + 25) / 113][Stage 104:=============================================>       (97 + 16) / 113][Stage 104:=================================================>   (106 + 7) / 113][Stage 104:====================================================>(112 + 1) / 113]                                                                                [Stage 105:==================================>                  (75 + 39) / 114][Stage 105:========================================>            (87 + 27) / 114][Stage 105:============================================>        (96 + 18) / 114][Stage 105:===============================================>    (104 + 10) / 114][Stage 105:===================================================> (110 + 4) / 114][Stage 105:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.428667748 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377915471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:====================================>                (77 + 36) / 113][Stage 106:==========================================>          (90 + 23) / 113][Stage 106:==============================================>     (101 + 12) / 113][Stage 106:==================================================>  (108 + 5) / 113][Stage 106:====================================================>(111 + 2) / 113]                                                                                [Stage 107:==================================>                  (74 + 40) / 114][Stage 107:========================================>            (88 + 26) / 114][Stage 107:============================================>        (96 + 18) / 114][Stage 107:==============================================>     (101 + 13) / 114][Stage 107:==================================================>  (108 + 6) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.153948164 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350469983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:====================================>                (80 + 35) / 115][Stage 108:========================================>            (87 + 28) / 115][Stage 108:=============================================>       (99 + 16) / 115][Stage 108:=================================================>   (107 + 8) / 115][Stage 108:==================================================>  (109 + 6) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:=======================================>             (87 + 29) / 116][Stage 109:=============================================>       (99 + 17) / 116][Stage 109:==============================================>     (104 + 12) / 116][Stage 109:================================================>    (107 + 9) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.443518058 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428486893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (59 + 54) / 113][Stage 110:================================>                    (69 + 44) / 113][Stage 110:========================================>            (86 + 27) / 113][Stage 110:==================================================>  (108 + 5) / 113]                                                                                [Stage 111:===========================>                         (59 + 55) / 114][Stage 111:==================================>                  (75 + 39) / 114][Stage 111:========================================>            (87 + 27) / 114][Stage 111:===============================================>    (104 + 10) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.251143181 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345658184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (82 + 33) / 115][Stage 112:==========================================>          (92 + 23) / 115][Stage 112:==============================================>     (103 + 12) / 115][Stage 112:===================================================> (111 + 4) / 115][Stage 112:====================================================>(113 + 2) / 115]                                                                                [Stage 113:=====================================>               (82 + 34) / 116][Stage 113:======================================>              (85 + 31) / 116][Stage 113:===========================================>         (95 + 21) / 116][Stage 113:================================================>    (107 + 9) / 116][Stage 113:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.158385199 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:======================================>              (84 + 31) / 115][Stage 114:==========================================>          (92 + 23) / 115][Stage 114:=============================================>      (101 + 14) / 115][Stage 114:==================================================>  (109 + 6) / 115][Stage 114:====================================================>(113 + 2) / 115]                                                                                [Stage 115:=====================================>               (82 + 34) / 116][Stage 115:=======================================>             (87 + 29) / 116][Stage 115:===========================================>         (95 + 21) / 116][Stage 115:===============================================>    (106 + 10) / 116][Stage 115:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.199825204 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404909488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (59 + 54) / 113][Stage 116:=============================>                       (63 + 50) / 113][Stage 116:=================================>                   (72 + 41) / 113][Stage 116:=========================================>           (88 + 25) / 113][Stage 116:==================================================>  (108 + 5) / 113]                                                                                [Stage 117:===========================>                         (59 + 55) / 114][Stage 117:==============================>                      (66 + 48) / 114][Stage 117:====================================>                (78 + 36) / 114][Stage 117:=============================================>       (97 + 17) / 114]                                                                                Time elapsed: 2.933271317 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide84;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (58 + 55) / 113][Stage 118:==============================>                      (66 + 47) / 113][Stage 118:=====================================>               (79 + 34) / 113][Stage 118:=================================================>   (105 + 8) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:===============================>                     (67 + 47) / 114][Stage 119:=========================================>           (89 + 25) / 114][Stage 119:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.019819958 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353187231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (82 + 33) / 115][Stage 120:==========================================>          (92 + 23) / 115][Stage 120:=============================================>      (101 + 14) / 115][Stage 120:=================================================>   (107 + 8) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:=======================================>             (86 + 30) / 116][Stage 121:=============================================>       (99 + 17) / 116][Stage 121:===============================================>    (106 + 10) / 116][Stage 121:====================================================>(114 + 2) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.145130796 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=237", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=237,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=====================================>               (81 + 34) / 115][Stage 122:=======================================>             (85 + 30) / 115][Stage 122:=============================================>      (100 + 15) / 115][Stage 122:=================================================>   (107 + 8) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:=====================================>               (83 + 33) / 116][Stage 123:=========================================>           (91 + 25) / 116][Stage 123:==============================================>     (103 + 13) / 116][Stage 123:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.698853638 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381943245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:======================================>              (85 + 33) / 118][Stage 124:==========================================>          (95 + 23) / 118][Stage 124:=================================================>   (110 + 8) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:===================================>                 (79 + 40) / 119][Stage 125:=========================================>           (93 + 26) / 119][Stage 125:================================================>    (110 + 9) / 119][Stage 125:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.324545985 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425432322 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (58 + 55) / 113][Stage 126:=============================>                       (62 + 51) / 113][Stage 126:=====================================>               (79 + 34) / 113][Stage 126:==========================================>          (91 + 22) / 113][Stage 126:=================================================>   (105 + 8) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:==============================>                      (65 + 49) / 114][Stage 127:===================================>                 (76 + 38) / 114][Stage 127:==========================================>          (92 + 22) / 114][Stage 127:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.305516929 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398320494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (59 + 54) / 113][Stage 128:===============================>                     (67 + 46) / 113][Stage 128:=====================================>               (81 + 32) / 113][Stage 128:===============================================>    (103 + 10) / 113][Stage 128:===================================================> (109 + 4) / 113]                                                                                [Stage 129:=============================>                       (63 + 51) / 114][Stage 129:===================================>                 (76 + 38) / 114][Stage 129:===============================================>    (104 + 10) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.271365647 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391563113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (70 + 45) / 115][Stage 130:======================================>              (83 + 32) / 115][Stage 130:=============================================>      (100 + 15) / 115][Stage 130:===================================================> (112 + 3) / 115]                                                                                [Stage 131:===============================>                     (70 + 46) / 116][Stage 131:======================================>              (84 + 32) / 116][Stage 131:============================================>        (98 + 18) / 116][Stage 131:==================================================>  (110 + 6) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.243723388 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385932532 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:=================================>                   (75 + 43) / 118][Stage 132:=========================================>           (92 + 26) / 118][Stage 132:==================================================>  (112 + 6) / 118][Stage 132:====================================================>(117 + 1) / 118]                                                                                [Stage 133:================================>                    (73 + 46) / 119][Stage 133:==================================>                  (78 + 41) / 119][Stage 133:=============================================>      (103 + 16) / 119][Stage 133:==================================================>  (114 + 5) / 119][Stage 133:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.055302784 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388518073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===================================>                 (75 + 38) / 113][Stage 134:========================================>            (86 + 27) / 113][Stage 134:===========================================>         (93 + 20) / 113][Stage 134:================================================>    (104 + 9) / 113][Stage 134:===================================================> (110 + 3) / 113]                                                                                [Stage 135:===================================>                 (77 + 37) / 114][Stage 135:=======================================>             (85 + 29) / 114][Stage 135:==========================================>          (92 + 22) / 114][Stage 135:==============================================>     (102 + 12) / 114][Stage 135:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.106465095 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37547931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===============================>                     (69 + 46) / 115][Stage 136:=======================================>             (85 + 30) / 115][Stage 136:==============================================>     (103 + 12) / 115][Stage 136:===================================================> (111 + 4) / 115]                                                                                [Stage 137:==================================>                  (76 + 40) / 116][Stage 137:==========================================>          (93 + 23) / 116][Stage 137:=================================================>   (109 + 7) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.860655386 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350029041 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:======================================>              (84 + 31) / 115][Stage 138:===========================================>         (94 + 21) / 115][Stage 138:==============================================>     (102 + 13) / 115][Stage 138:===================================================> (111 + 4) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:=======================================>             (87 + 29) / 116][Stage 139:=============================================>       (99 + 17) / 116][Stage 139:==================================================>  (110 + 6) / 116][Stage 139:===================================================> (112 + 4) / 116][Stage 139:====================================================>(114 + 2) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.904795858 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349864822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (81 + 34) / 115][Stage 140:======================================>              (84 + 31) / 115][Stage 140:===========================================>         (95 + 20) / 115][Stage 140:==================================================>  (110 + 5) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:=========================================>           (91 + 25) / 116][Stage 141:==============================================>     (104 + 12) / 116][Stage 141:==================================================>  (110 + 6) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.197505683 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=205", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=205,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36462653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=====================================>               (80 + 33) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:==============================================>     (101 + 12) / 113][Stage 142:====================================================>(111 + 2) / 113][Stage 142:====================================================>(112 + 1) / 113]                                                                                [Stage 143:===================================>                 (76 + 38) / 114][Stage 143:=========================================>           (90 + 24) / 114][Stage 143:=============================================>      (100 + 14) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.832686184 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36404011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:==================================>                  (76 + 42) / 118][Stage 144:=======================================>             (88 + 30) / 118][Stage 144:=============================================>      (104 + 14) / 118][Stage 144:====================================================>(116 + 2) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:===================================>                 (79 + 40) / 119][Stage 145:==========================================>          (96 + 23) / 119][Stage 145:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 2.877278471 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375050116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=============================>                       (65 + 50) / 115][Stage 146:======================================>              (83 + 32) / 115][Stage 146:=============================================>       (98 + 17) / 115][Stage 146:===================================================> (111 + 4) / 115]                                                                                [Stage 147:==================================>                  (76 + 40) / 116][Stage 147:==========================================>          (93 + 23) / 116][Stage 147:=================================================>   (109 + 7) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.689338801 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368059574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:=================================>                   (75 + 43) / 118][Stage 148:===================================>                 (78 + 40) / 118][Stage 148:========================================>            (91 + 27) / 118][Stage 148:===============================================>    (107 + 11) / 118]                                                                                [Stage 149:================================>                    (73 + 46) / 119][Stage 149:====================================>                (82 + 37) / 119][Stage 149:==========================================>          (95 + 24) / 119][Stage 149:==================================================>  (114 + 5) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.23898096 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40238593 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (61 + 59) / 120][Stage 150:==============================>                      (70 + 50) / 120][Stage 150:========================================>            (91 + 29) / 120][Stage 150:============================================>       (102 + 18) / 120][Stage 150:====================================================>(119 + 1) / 120]                                                                                [Stage 151:===========================>                         (63 + 58) / 121][Stage 151:===============================>                     (72 + 49) / 121][Stage 151:========================================>            (92 + 29) / 121][Stage 151:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.990952086 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379895701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==============================>                      (66 + 49) / 115][Stage 152:===================================>                 (78 + 37) / 115][Stage 152:===========================================>         (95 + 20) / 115][Stage 152:=================================================>   (108 + 7) / 115]                                                                                [Stage 153:==================================>                  (76 + 40) / 116][Stage 153:=============================================>       (99 + 17) / 116][Stage 153:=================================================>   (108 + 8) / 116][Stage 153:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.778262746 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340774946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:======================================>              (83 + 32) / 115][Stage 154:=======================================>             (85 + 30) / 115][Stage 154:==========================================>          (93 + 22) / 115][Stage 154:===============================================>    (104 + 11) / 115][Stage 154:===================================================> (112 + 3) / 115]                                                                                [Stage 155:======================================>              (85 + 31) / 116][Stage 155:========================================>            (88 + 28) / 116][Stage 155:==============================================>     (103 + 13) / 116][Stage 155:==================================================>  (110 + 6) / 116][Stage 155:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.243500114 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide99"
dataSource: String = /nidan/orc/individualORC/slide99

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397989511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:============================>                        (60 + 53) / 113][Stage 156:===============================>                     (67 + 46) / 113][Stage 156:=======================================>             (85 + 28) / 113][Stage 156:==============================================>     (102 + 11) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:============================>                        (62 + 52) / 114][Stage 157:==================================>                  (74 + 40) / 114][Stage 157:==========================================>          (91 + 23) / 114][Stage 157:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.110926107 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340565988 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:====================================>                (80 + 35) / 115][Stage 158:=======================================>             (86 + 29) / 115][Stage 158:==============================================>     (103 + 12) / 115][Stage 158:====================================================>(113 + 2) / 115]                                                                                [Stage 159:========================================>            (89 + 27) / 116][Stage 159:================================================>    (107 + 9) / 116][Stage 159:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.56720516 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=206", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=206,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398516294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (62 + 58) / 120][Stage 160:==============================>                      (69 + 51) / 120][Stage 160:========================================>            (92 + 28) / 120][Stage 160:==================================================>  (114 + 6) / 120]                                                                                [Stage 161:===========================>                         (63 + 58) / 121][Stage 161:==============================>                      (70 + 51) / 121][Stage 161:=====================================>               (86 + 35) / 121][Stage 161:=================================================>   (113 + 8) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.160906648 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390857412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:>                                                      (0 + 0) / 113][Stage 162:===========================>                         (58 + 55) / 113][Stage 162:==============================>                      (64 + 49) / 113][Stage 162:=====================================>               (81 + 32) / 113][Stage 162:================================================>    (104 + 9) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:===========================>                         (59 + 55) / 114][Stage 163:==============================>                      (65 + 49) / 114][Stage 163:====================================>                (78 + 36) / 114][Stage 163:===============================================>    (104 + 10) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.188953791 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (59 + 54) / 113][Stage 164:===============================>                     (67 + 46) / 113][Stage 164:====================================>                (78 + 35) / 113][Stage 164:==============================================>      (99 + 14) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:===========================>                         (59 + 55) / 114][Stage 165:===============================>                     (68 + 46) / 114][Stage 165:======================================>              (83 + 31) / 114][Stage 165:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.00524688 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377467348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===============================>                     (68 + 47) / 115][Stage 166:====================================>                (80 + 35) / 115][Stage 166:==========================================>          (92 + 23) / 115][Stage 166:=================================================>   (108 + 7) / 115]                                                                                [Stage 167:=====================================>               (82 + 34) / 116][Stage 167:=============================================>      (102 + 14) / 116][Stage 167:===================================================> (113 + 3) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.640635144 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=28", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=28,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340298993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (81 + 34) / 115][Stage 168:=======================================>             (86 + 29) / 115][Stage 168:==========================================>          (93 + 22) / 115][Stage 168:==================================================>  (109 + 6) / 115]                                                                                [Stage 169:=======================================>             (86 + 30) / 116][Stage 169:===========================================>         (96 + 20) / 116][Stage 169:================================================>    (107 + 9) / 116][Stage 169:==================================================>  (111 + 5) / 116][Stage 169:===================================================> (112 + 4) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.587499602 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369729867 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===================================>                 (76 + 37) / 113][Stage 170:=========================================>           (88 + 25) / 113][Stage 170:=============================================>       (96 + 17) / 113][Stage 170:==================================================>  (108 + 5) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:===================================>                 (77 + 37) / 114][Stage 171:========================================>            (88 + 26) / 114][Stage 171:===========================================>         (94 + 20) / 114][Stage 171:=================================================>   (106 + 8) / 114][Stage 171:===================================================> (111 + 3) / 114][Stage 171:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.412521475 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358895684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===================================>                 (75 + 38) / 113][Stage 172:=======================================>             (84 + 29) / 113][Stage 172:==========================================>          (90 + 23) / 113][Stage 172:===============================================>    (103 + 10) / 113][Stage 172:=================================================>   (106 + 7) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:===================================>                 (76 + 38) / 114][Stage 173:========================================>            (88 + 26) / 114][Stage 173:=============================================>      (100 + 14) / 114][Stage 173:==================================================>  (108 + 6) / 114][Stage 173:===================================================> (111 + 3) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.342145154 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:====================================>                (78 + 35) / 113][Stage 174:============================================>        (95 + 18) / 113][Stage 174:==============================================>     (101 + 12) / 113][Stage 174:==================================================>  (107 + 6) / 113][Stage 174:====================================================>(111 + 2) / 113]                                                                                [Stage 175:===================================>                 (76 + 38) / 114][Stage 175:========================================>            (88 + 26) / 114][Stage 175:=============================================>       (98 + 16) / 114][Stage 175:==================================================>  (108 + 6) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.124410024 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396172704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (61 + 59) / 120][Stage 176:==============================>                      (70 + 50) / 120][Stage 176:========================================>            (91 + 29) / 120][Stage 176:==============================================>     (107 + 13) / 120]                                                                                [Stage 177:===========================>                         (63 + 58) / 121][Stage 177:=============================>                       (68 + 53) / 121][Stage 177:=========================================>           (94 + 27) / 121][Stage 177:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.178719579 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362136109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (72 + 46) / 118][Stage 178:==================================>                  (76 + 42) / 118][Stage 178:=======================================>             (88 + 30) / 118][Stage 178:===========================================>         (97 + 21) / 118][Stage 178:=================================================>   (111 + 7) / 118]                                                                                [Stage 179:================================>                    (73 + 46) / 119][Stage 179:================================>                    (74 + 45) / 119][Stage 179:====================================>                (82 + 37) / 119][Stage 179:======================================>              (87 + 32) / 119][Stage 179:=============================================>      (105 + 14) / 119][Stage 179:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.357842614 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362232251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (73 + 45) / 118][Stage 180:==================================>                  (76 + 42) / 118][Stage 180:===========================================>         (96 + 22) / 118][Stage 180:==================================================>  (112 + 6) / 118]                                                                                [Stage 181:================================>                    (74 + 45) / 119][Stage 181:====================================>                (83 + 36) / 119][Stage 181:============================================>       (102 + 17) / 119][Stage 181:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.863354571 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350860826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:====================================>                (80 + 35) / 115][Stage 182:======================================>              (84 + 31) / 115][Stage 182:============================================>        (97 + 18) / 115][Stage 182:==============================================>     (102 + 13) / 115][Stage 182:===================================================> (112 + 3) / 115]                                                                                [Stage 183:======================================>              (84 + 32) / 116][Stage 183:========================================>            (89 + 27) / 116][Stage 183:==============================================>     (103 + 13) / 116][Stage 183:================================================>    (107 + 9) / 116][Stage 183:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.069431917 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370682077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:>                                                      (0 + 0) / 115][Stage 184:================================>                    (70 + 45) / 115][Stage 184:=========================================>           (89 + 26) / 115][Stage 184:===============================================>    (105 + 10) / 115][Stage 184:====================================================>(113 + 2) / 115]                                                                                [Stage 185:================================>                    (72 + 44) / 116][Stage 185:=======================================>             (86 + 30) / 116][Stage 185:==============================================>     (103 + 13) / 116][Stage 185:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.809118363 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393537829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (58 + 55) / 113][Stage 186:=============================>                       (62 + 51) / 113][Stage 186:==================================>                  (74 + 39) / 113][Stage 186:=========================================>           (88 + 25) / 113][Stage 186:=================================================>   (106 + 7) / 113]                                                                                [Stage 187:===========================>                         (60 + 54) / 114][Stage 187:===============================>                     (67 + 47) / 114][Stage 187:======================================>              (83 + 31) / 114][Stage 187:============================================>        (96 + 18) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.225027112 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362740495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (72 + 46) / 118][Stage 188:===================================>                 (79 + 39) / 118][Stage 188:=========================================>           (92 + 26) / 118][Stage 188:===============================================>    (107 + 11) / 118][Stage 188:==================================================>  (112 + 6) / 118]                                                                                [Stage 189:==================================>                  (78 + 41) / 119][Stage 189:======================================>              (86 + 33) / 119][Stage 189:============================================>        (99 + 20) / 119][Stage 189:=================================================>   (112 + 7) / 119][Stage 189:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.438183866 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385108788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (58 + 55) / 113][Stage 190:============================>                        (61 + 52) / 113][Stage 190:=====================================>               (81 + 32) / 113][Stage 190:=============================================>       (97 + 16) / 113][Stage 190:==================================================>  (108 + 5) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:===========================>                         (60 + 54) / 114][Stage 191:===============================>                     (68 + 46) / 114][Stage 191:=======================================>             (86 + 28) / 114][Stage 191:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.069987457 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376346464 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:>                                                      (0 + 0) / 115][Stage 192:==============================>                      (67 + 48) / 115][Stage 192:=======================================>             (86 + 29) / 115][Stage 192:============================================>        (96 + 19) / 115][Stage 192:==================================================>  (109 + 6) / 115]                                                                                [Stage 193:==================================>                  (76 + 40) / 116][Stage 193:===========================================>         (96 + 20) / 116][Stage 193:===============================================>    (106 + 10) / 116][Stage 193:==================================================>  (111 + 5) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.451152415 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406648561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (62 + 58) / 120][Stage 194:==============================>                      (70 + 50) / 120][Stage 194:===========================================>         (99 + 21) / 120][Stage 194:==================================================>  (114 + 6) / 120]                                                                                [Stage 195:===========================>                         (62 + 59) / 121][Stage 195:===============================>                     (71 + 50) / 121][Stage 195:========================================>            (93 + 28) / 121][Stage 195:=================================================>   (112 + 9) / 121][Stage 195:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.291435167 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337535727 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:====================================>                (80 + 35) / 115][Stage 196:=======================================>             (86 + 29) / 115][Stage 196:==============================================>     (102 + 13) / 115][Stage 196:==================================================>  (109 + 6) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:=====================================>               (81 + 35) / 116][Stage 197:==========================================>          (92 + 24) / 116][Stage 197:===============================================>    (106 + 10) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.07408131 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:====================================>                (79 + 36) / 115][Stage 198:=========================================>           (90 + 25) / 115][Stage 198:=============================================>       (99 + 16) / 115][Stage 198:==================================================>  (110 + 5) / 115]                                                                                [Stage 199:=====================================>               (83 + 33) / 116][Stage 199:========================================>            (88 + 28) / 116][Stage 199:================================================>    (107 + 9) / 116][Stage 199:===================================================> (113 + 3) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.892834388 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367149865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (78 + 35) / 113][Stage 200:=========================================>           (89 + 24) / 113][Stage 200:==============================================>     (102 + 11) / 113][Stage 200:===================================================> (110 + 3) / 113]                                                                                [Stage 201:====================================>                (79 + 35) / 114][Stage 201:=========================================>           (89 + 25) / 114][Stage 201:============================================>        (96 + 18) / 114][Stage 201:===================================================> (111 + 3) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.240850052 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m2.233s
user	11m38.532s
sys	0m36.644s
