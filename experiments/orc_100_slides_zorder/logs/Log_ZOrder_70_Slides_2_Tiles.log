Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 02:44:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:44:40 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:44:40 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:44:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 02:44:42 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:44:53 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601024442-0744).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.417645953 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:============================>                          (61 + 55) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.615863298 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.686681217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (49 + 69) / 118][Stage 2:=========================>                             (55 + 63) / 118][Stage 2:===============================>                       (68 + 50) / 118][Stage 2:==================================>                    (74 + 44) / 118][Stage 2:====================================>                  (79 + 39) / 118][Stage 2:========================================>              (86 + 32) / 118][Stage 2:=============================================>         (98 + 20) / 118][Stage 2:===================================================>   (111 + 7) / 118][Stage 2:======================================================>(116 + 2) / 118]                                                                                [Stage 3:================================>                      (70 + 49) / 119][Stage 3:=================================>                     (73 + 46) / 119][Stage 3:===================================>                   (77 + 42) / 119][Stage 3:========================================>              (88 + 31) / 119][Stage 3:===========================================>           (95 + 24) / 119][Stage 3:===============================================>      (104 + 15) / 119][Stage 3:=================================================>    (108 + 11) / 119][Stage 3:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.609515786 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.75377028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (57 + 56) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:=============================>                         (61 + 52) / 113][Stage 4:==================================>                    (71 + 42) / 113][Stage 4:========================================>              (84 + 29) / 113][Stage 4:==============================================>        (95 + 18) / 113][Stage 4:================================================>     (102 + 11) / 113][Stage 4:====================================================>  (107 + 6) / 113][Stage 4:======================================================>(112 + 1) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:============================>                          (59 + 55) / 114][Stage 5:================================>                      (67 + 47) / 114][Stage 5:======================================>                (79 + 35) / 114][Stage 5:===========================================>           (90 + 24) / 114][Stage 5:===============================================>      (101 + 13) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.533283429 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=104", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=104,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.661538643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (56 + 64) / 120][Stage 6:===========================>                           (59 + 61) / 120][Stage 6:===============================>                       (68 + 52) / 120][Stage 6:=================================>                     (74 + 46) / 120][Stage 6:========================================>              (89 + 31) / 120][Stage 6:================================================>     (108 + 12) / 120][Stage 6:======================================================>(118 + 2) / 120]                                                                                [Stage 7:===========================>                           (61 + 60) / 121][Stage 7:=============================>                         (64 + 57) / 121][Stage 7:===============================>                       (70 + 51) / 121][Stage 7:=======================================>               (86 + 35) / 121][Stage 7:============================================>         (100 + 21) / 121][Stage 7:===================================================>   (114 + 7) / 121][Stage 7:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.299246996 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 60) / 120][Stage 8:===========================>                           (61 + 59) / 120][Stage 8:==================================>                    (75 + 45) / 120][Stage 8:==========================================>            (93 + 27) / 120][Stage 8:============================================>          (98 + 22) / 120][Stage 8:====================================================>  (115 + 5) / 120]                                                                                [Stage 9:============================>                          (62 + 59) / 121][Stage 9:==============================>                        (66 + 55) / 121][Stage 9:=====================================>                 (82 + 39) / 121][Stage 9:================================================>     (108 + 13) / 121][Stage 9:=====================================================> (118 + 3) / 121][Stage 9:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.822774472 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (60 + 60) / 120][Stage 10:============================>                         (63 + 57) / 120][Stage 10:==================================>                   (76 + 44) / 120][Stage 10:=======================================>              (88 + 32) / 120][Stage 10:==============================================>      (105 + 15) / 120][Stage 10:===================================================>  (115 + 5) / 120][Stage 10:=====================================================>(119 + 1) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:=============================>                        (65 + 56) / 121][Stage 11:===================================>                  (79 + 42) / 121][Stage 11:===========================================>         (100 + 21) / 121][Stage 11:==================================================>   (113 + 8) / 121][Stage 11:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.994756203 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52643075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (72 + 46) / 118][Stage 12:=================================>                    (73 + 45) / 118][Stage 12:======================================>               (84 + 34) / 118][Stage 12:==============================================>      (103 + 15) / 118][Stage 12:==================================================>   (111 + 7) / 118][Stage 12:=====================================================>(116 + 2) / 118]                                                                                [Stage 13:=================================>                    (73 + 46) / 119][Stage 13:==================================>                   (76 + 43) / 119][Stage 13:==========================================>           (93 + 26) / 119][Stage 13:==================================================>   (111 + 8) / 119][Stage 13:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.60329302 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=69", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=69,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.533062076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==============================>                       (66 + 49) / 115][Stage 14:===================================>                  (75 + 40) / 115][Stage 14:=========================================>            (88 + 27) / 115][Stage 14:===============================================>     (103 + 12) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:====================================================> (111 + 4) / 115]                                                                                [Stage 15:=================================>                    (72 + 44) / 116][Stage 15:=======================================>              (84 + 32) / 116][Stage 15:==============================================>      (102 + 14) / 116][Stage 15:===================================================>  (110 + 6) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.580496696 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.537240396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=================================>                    (70 + 43) / 113][Stage 16:====================================>                 (77 + 36) / 113][Stage 16:========================================>             (84 + 29) / 113][Stage 16:=============================================>        (95 + 18) / 113][Stage 16:=================================================>    (104 + 9) / 113][Stage 16:====================================================> (109 + 4) / 113][Stage 16:=====================================================>(111 + 2) / 113]                                                                                [Stage 17:===================================>                  (74 + 40) / 114][Stage 17:=======================================>              (83 + 31) / 114][Stage 17:==========================================>           (90 + 24) / 114][Stage 17:=============================================>        (96 + 18) / 114][Stage 17:==============================================>      (101 + 13) / 114][Stage 17:=================================================>    (105 + 9) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.755206556 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511048607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==============================>                       (66 + 49) / 115][Stage 18:===================================>                  (76 + 39) / 115][Stage 18:==========================================>           (91 + 24) / 115][Stage 18:==============================================>      (100 + 15) / 115][Stage 18:===================================================>  (109 + 6) / 115][Stage 18:====================================================> (112 + 3) / 115][Stage 18:=====================================================>(113 + 2) / 115]                                                                                [Stage 19:===================================>                  (76 + 40) / 116][Stage 19:=========================================>            (90 + 26) / 116][Stage 19:==============================================>      (102 + 14) / 116][Stage 19:=================================================>    (107 + 9) / 116][Stage 19:==================================================>   (109 + 7) / 116][Stage 19:====================================================> (113 + 3) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.386928829 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.601576762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:====================================>                 (78 + 37) / 115][Stage 20:========================================>             (87 + 28) / 115][Stage 20:==============================================>       (99 + 16) / 115][Stage 20:=================================================>    (106 + 9) / 115][Stage 20:===================================================>  (110 + 5) / 115][Stage 20:=====================================================>(113 + 2) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:====================================>                 (79 + 37) / 116][Stage 21:========================================>             (87 + 29) / 116][Stage 21:=============================================>        (98 + 18) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:==================================================>   (108 + 8) / 116][Stage 21:=====================================================>(114 + 2) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.905359922 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49016963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=================================>                    (72 + 43) / 115][Stage 22:===========================================>          (92 + 23) / 115][Stage 22:=================================================>    (106 + 9) / 115][Stage 22:=====================================================>(114 + 1) / 115]                                                                                [Stage 23:==============================>                       (65 + 51) / 116][Stage 23:====================================>                 (79 + 37) / 116][Stage 23:=========================================>            (89 + 27) / 116][Stage 23:===========================================>          (94 + 22) / 116][Stage 23:=============================================>       (100 + 16) / 116][Stage 23:================================================>    (106 + 10) / 116][Stage 23:==================================================>   (109 + 7) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.54107016 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49063177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (70 + 43) / 113][Stage 24:======================================>               (81 + 32) / 113][Stage 24:=============================================>        (95 + 18) / 113][Stage 24:================================================>    (103 + 10) / 113][Stage 24:====================================================> (109 + 4) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===================================>                  (75 + 39) / 114][Stage 25:==========================================>           (89 + 25) / 114][Stage 25:==============================================>       (98 + 16) / 114][Stage 25:===================================================>  (109 + 5) / 114][Stage 25:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.283320338 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521020773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==========================>                           (59 + 61) / 120][Stage 26:============================>                         (63 + 57) / 120][Stage 26:=================================>                    (74 + 46) / 120][Stage 26:========================================>             (90 + 30) / 120][Stage 26:============================================>        (101 + 19) / 120][Stage 26:===============================================>     (107 + 13) / 120][Stage 26:==================================================>   (113 + 7) / 120]                                                                                [Stage 27:===========================>                          (62 + 59) / 121][Stage 27:================================>                     (72 + 49) / 121][Stage 27:=========================================>            (93 + 28) / 121][Stage 27:=============================================>       (105 + 16) / 121][Stage 27:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.868458171 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495974398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (58 + 55) / 113][Stage 28:===============================>                      (66 + 47) / 113][Stage 28:========================================>             (84 + 29) / 113][Stage 28:===============================================>     (102 + 11) / 113][Stage 28:===================================================>  (108 + 5) / 113]                                                                                [Stage 29:============================>                         (60 + 54) / 114][Stage 29:==================================>                   (73 + 41) / 114][Stage 29:============================================>         (93 + 21) / 114][Stage 29:===============================================>     (103 + 11) / 114][Stage 29:===================================================>  (108 + 6) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.796708397 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (58 + 55) / 113][Stage 30:============================>                         (59 + 54) / 113][Stage 30:==================================>                   (72 + 41) / 113][Stage 30:=============================================>        (95 + 18) / 113][Stage 30:=================================================>    (104 + 9) / 113]                                                                                [Stage 31:===========================>                          (58 + 56) / 114][Stage 31:================================>                     (69 + 45) / 114][Stage 31:=========================================>            (88 + 26) / 114][Stage 31:===================================================>  (108 + 6) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.32284501 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563539177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (71 + 47) / 118][Stage 32:================================>                     (72 + 46) / 118][Stage 32:===================================>                  (78 + 40) / 118][Stage 32:=========================================>            (91 + 27) / 118][Stage 32:=============================================>        (99 + 19) / 118][Stage 32:==================================================>   (111 + 7) / 118]                                                                                [Stage 33:==================================>                   (75 + 44) / 119][Stage 33:====================================>                 (80 + 39) / 119][Stage 33:=========================================>            (92 + 27) / 119][Stage 33:================================================>    (108 + 11) / 119][Stage 33:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.59099815 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499128558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:==================================>                   (77 + 43) / 120][Stage 34:========================================>             (90 + 30) / 120][Stage 34:================================================>    (110 + 10) / 120][Stage 34:=====================================================>(119 + 1) / 120]                                                                                [Stage 35:============================>                         (64 + 57) / 121][Stage 35:==================================>                   (77 + 44) / 121][Stage 35:==========================================>           (95 + 26) / 121][Stage 35:==================================================>   (114 + 7) / 121][Stage 35:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.417303486 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500373187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 59) / 120][Stage 36:================================>                     (73 + 47) / 120][Stage 36:========================================>             (89 + 31) / 120][Stage 36:==================================================>   (112 + 8) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:================================>                     (72 + 49) / 121][Stage 37:=========================================>            (93 + 28) / 121][Stage 37:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.080210269 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453135615 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===============================>                      (68 + 47) / 115][Stage 38:==================================>                   (74 + 41) / 115][Stage 38:========================================>             (86 + 29) / 115][Stage 38:===============================================>     (102 + 13) / 115][Stage 38:===================================================>  (110 + 5) / 115]                                                                                [Stage 39:=================================>                    (72 + 44) / 116][Stage 39:======================================>               (83 + 33) / 116][Stage 39:===============================================>     (104 + 12) / 116][Stage 39:=====================================================>(114 + 2) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.68187089 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494992599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (58 + 55) / 113][Stage 40:===============================>                      (65 + 48) / 113][Stage 40:==================================>                   (73 + 40) / 113][Stage 40:==============================================>       (98 + 15) / 113][Stage 40:====================================================> (110 + 3) / 113]                                                                                [Stage 41:===========================>                          (59 + 55) / 114][Stage 41:=============================>                        (62 + 52) / 114][Stage 41:====================================>                 (78 + 36) / 114][Stage 41:==============================================>      (101 + 13) / 114][Stage 41:=====================================================>(112 + 2) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.345519179 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=217", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=217,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571987721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:=================================>                    (73 + 45) / 118][Stage 42:======================================>               (85 + 33) / 118][Stage 42:===========================================>          (94 + 24) / 118][Stage 42:===================================================>  (113 + 5) / 118]                                                                                [Stage 43:=================================>                    (74 + 45) / 119][Stage 43:===================================>                  (79 + 40) / 119][Stage 43:===========================================>          (95 + 24) / 119][Stage 43:==================================================>   (112 + 7) / 119][Stage 43:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.243034029 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440280904 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==================================>                   (73 + 40) / 113][Stage 44:=========================================>            (86 + 27) / 113][Stage 44:===========================================>          (91 + 22) / 113][Stage 44:==============================================>      (100 + 13) / 113][Stage 44:====================================================> (110 + 3) / 113]                                                                                [Stage 45:====================================>                 (76 + 38) / 114][Stage 45:========================================>             (86 + 28) / 114][Stage 45:===========================================>          (92 + 22) / 114][Stage 45:================================================>    (104 + 10) / 114][Stage 45:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.993275223 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==================================>                   (72 + 41) / 113][Stage 46:========================================>             (84 + 29) / 113][Stage 46:=============================================>        (95 + 18) / 113][Stage 46:===============================================>     (102 + 11) / 113][Stage 46:====================================================> (110 + 3) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:===================================>                  (75 + 39) / 114][Stage 47:========================================>             (85 + 29) / 114][Stage 47:==============================================>       (99 + 15) / 114][Stage 47:==================================================>   (107 + 7) / 114][Stage 47:====================================================> (110 + 4) / 114][Stage 47:=====================================================>(112 + 2) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.618506218 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480525947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:================================>                     (67 + 46) / 113][Stage 48:=====================================>                (78 + 35) / 113][Stage 48:==============================================>       (97 + 16) / 113][Stage 48:===================================================>  (108 + 5) / 113]                                                                                [Stage 49:===========================>                          (59 + 55) / 114][Stage 49:===============================>                      (67 + 47) / 114][Stage 49:=========================================>            (87 + 27) / 114][Stage 49:===============================================>     (102 + 12) / 114][Stage 49:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.260369451 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490420989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (60 + 53) / 113][Stage 50:==================================>                   (73 + 40) / 113][Stage 50:===========================================>          (90 + 23) / 113][Stage 50:================================================>    (103 + 10) / 113][Stage 50:====================================================> (109 + 4) / 113]                                                                                [Stage 51:===========================>                          (59 + 55) / 114][Stage 51:================================>                     (68 + 46) / 114][Stage 51:======================================>               (81 + 33) / 114][Stage 51:==============================================>      (100 + 14) / 114][Stage 51:====================================================> (111 + 3) / 114][Stage 51:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.457387769 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471358201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:============================>                         (64 + 56) / 120][Stage 52:==================================>                   (76 + 44) / 120][Stage 52:==========================================>           (95 + 25) / 120][Stage 52:===================================================>  (115 + 5) / 120]                                                                                [Stage 53:==============================>                       (68 + 53) / 121][Stage 53:====================================>                 (81 + 40) / 121][Stage 53:=============================================>       (103 + 18) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.005414208 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422642976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===============================>                      (68 + 47) / 115][Stage 54:===================================>                  (76 + 39) / 115][Stage 54:============================================>         (95 + 20) / 115][Stage 54:====================================================> (111 + 4) / 115]                                                                                [Stage 55:================================>                     (69 + 47) / 116][Stage 55:========================================>             (86 + 30) / 116][Stage 55:=============================================>        (98 + 18) / 116][Stage 55:===================================================>  (111 + 5) / 116][Stage 55:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.49477897 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427274942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=============================>                        (63 + 52) / 115][Stage 56:=================================>                    (72 + 43) / 115][Stage 56:=========================================>            (89 + 26) / 115][Stage 56:===================================================>  (110 + 5) / 115][Stage 56:====================================================> (112 + 3) / 115]                                                                                [Stage 57:================================>                     (70 + 46) / 116][Stage 57:======================================>               (82 + 34) / 116][Stage 57:===========================================>          (93 + 23) / 116][Stage 57:===============================================>     (105 + 11) / 116][Stage 57:===================================================>  (111 + 5) / 116][Stage 57:====================================================> (112 + 4) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.427012396 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=236", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=236,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486034785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 59) / 120][Stage 58:===============================>                      (70 + 50) / 120][Stage 58:======================================>               (86 + 34) / 120][Stage 58:===============================================>     (107 + 13) / 120][Stage 58:=====================================================>(118 + 2) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:=============================>                        (66 + 55) / 121][Stage 59:=====================================>                (83 + 38) / 121][Stage 59:==============================================>      (107 + 14) / 121]                                                                                Time elapsed: 3.046345127 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387895855 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=====================================>                (79 + 36) / 115][Stage 60:=======================================>              (85 + 30) / 115][Stage 60:=============================================>        (96 + 19) / 115][Stage 60:=================================================>    (106 + 9) / 115]                                                                                [Stage 61:========================================>             (86 + 30) / 116][Stage 61:==============================================>       (99 + 17) / 116][Stage 61:==================================================>   (109 + 7) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.701308985 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40266555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (81 + 34) / 115][Stage 62:===========================================>          (92 + 23) / 115][Stage 62:===============================================>     (103 + 12) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:=======================================>              (84 + 32) / 116][Stage 63:===========================================>          (94 + 22) / 116][Stage 63:================================================>    (106 + 10) / 116][Stage 63:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.587437614 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=237", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=237,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458323759 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:=============================>                        (66 + 54) / 120][Stage 64:====================================>                 (82 + 38) / 120][Stage 64:============================================>        (101 + 19) / 120][Stage 64:===================================================>  (114 + 6) / 120]                                                                                [Stage 65:=============================>                        (65 + 56) / 121][Stage 65:===================================>                  (79 + 42) / 121][Stage 65:============================================>        (101 + 20) / 121][Stage 65:================================================>    (111 + 10) / 121][Stage 65:=====================================================>(119 + 2) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.560390625 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463335788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:===============================>                      (69 + 51) / 120][Stage 66:=======================================>              (87 + 33) / 120][Stage 66:===================================================>  (114 + 6) / 120]                                                                                [Stage 67:===========================>                          (61 + 60) / 121][Stage 67:===============================>                      (70 + 51) / 121][Stage 67:=====================================>                (84 + 37) / 121][Stage 67:=============================================>       (105 + 16) / 121][Stage 67:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.067660195 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413531735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (80 + 33) / 113][Stage 68:=============================================>        (96 + 17) / 113][Stage 68:===============================================>     (101 + 12) / 113][Stage 68:====================================================> (109 + 4) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:===================================>                  (75 + 39) / 114][Stage 69:==========================================>           (89 + 25) / 114][Stage 69:==============================================>      (101 + 13) / 114][Stage 69:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.987889964 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===================================>                  (74 + 39) / 113][Stage 70:========================================>             (84 + 29) / 113][Stage 70:==============================================>       (98 + 15) / 113][Stage 70:====================================================> (109 + 4) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:=========================================>            (87 + 27) / 114][Stage 71:=============================================>        (96 + 18) / 114][Stage 71:====================================================> (110 + 4) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.446925992 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389642434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=================================>                    (71 + 42) / 113][Stage 72:======================================>               (80 + 33) / 113][Stage 72:===========================================>          (91 + 22) / 113][Stage 72:=================================================>    (104 + 9) / 113][Stage 72:====================================================> (110 + 3) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:======================================>               (82 + 32) / 114][Stage 73:=========================================>            (88 + 26) / 114][Stage 73:===============================================>     (102 + 12) / 114][Stage 73:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.96285415 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399686698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:===================================>                  (78 + 40) / 118][Stage 74:=========================================>            (91 + 27) / 118][Stage 74:=============================================>       (101 + 17) / 118][Stage 74:====================================================> (115 + 3) / 118]                                                                                [Stage 75:=================================>                    (73 + 46) / 119][Stage 75:====================================>                 (81 + 38) / 119][Stage 75:==========================================>           (94 + 25) / 119][Stage 75:===============================================>     (107 + 12) / 119][Stage 75:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.398384183 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:=================================>                    (74 + 44) / 118][Stage 76:======================================>               (84 + 34) / 118][Stage 76:===========================================>          (96 + 22) / 118][Stage 76:==================================================>   (110 + 8) / 118]                                                                                [Stage 77:=================================>                    (73 + 46) / 119][Stage 77:====================================>                 (81 + 38) / 119][Stage 77:=======================================>              (88 + 31) / 119][Stage 77:=============================================>       (102 + 17) / 119][Stage 77:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.404826323 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393217883 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (72 + 46) / 118][Stage 78:====================================>                 (80 + 38) / 118][Stage 78:==========================================>           (92 + 26) / 118][Stage 78:================================================>    (108 + 10) / 118][Stage 78:=====================================================>(116 + 2) / 118]                                                                                [Stage 79:=================================>                    (73 + 46) / 119][Stage 79:==================================>                   (77 + 42) / 119][Stage 79:=======================================>              (86 + 33) / 119][Stage 79:============================================>         (99 + 20) / 119][Stage 79:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.129081576 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498385772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:==================================>                   (76 + 42) / 118][Stage 80:===========================================>          (95 + 23) / 118][Stage 80:==================================================>   (111 + 7) / 118]                                                                                [Stage 81:=================================>                    (73 + 46) / 119][Stage 81:===================================>                  (79 + 40) / 119][Stage 81:==============================================>      (105 + 14) / 119][Stage 81:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.02497005 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437698587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:==================================>                   (75 + 43) / 118][Stage 82:==========================================>           (92 + 26) / 118][Stage 82:=================================================>    (109 + 9) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:=================================>                    (74 + 45) / 119][Stage 83:====================================>                 (81 + 38) / 119][Stage 83:============================================>        (100 + 19) / 119][Stage 83:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.869817586 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462644947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:====================================>                 (80 + 40) / 120][Stage 84:===========================================>          (97 + 23) / 120][Stage 84:====================================================> (116 + 4) / 120]                                                                                [Stage 85:==============================>                       (68 + 53) / 121][Stage 85:=====================================>                (83 + 38) / 121][Stage 85:==============================================>      (106 + 15) / 121][Stage 85:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.089030019 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365350176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=======================================>              (85 + 30) / 115][Stage 86:============================================>         (94 + 21) / 115][Stage 86:===================================================>  (109 + 6) / 115][Stage 86:=====================================================>(113 + 2) / 115]                                                                                [Stage 87:=====================================>                (81 + 35) / 116][Stage 87:=========================================>            (90 + 26) / 116][Stage 87:==============================================>       (99 + 17) / 116][Stage 87:====================================================> (113 + 3) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.828548407 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:========================================>             (87 + 28) / 115][Stage 88:============================================>         (95 + 20) / 115][Stage 88:==================================================>   (107 + 8) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=======================================>              (84 + 32) / 116][Stage 89:========================================>             (88 + 28) / 116][Stage 89:===============================================>     (104 + 12) / 116][Stage 89:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.913721184 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=151", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=151,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396230356 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (69 + 46) / 115][Stage 90:======================================>               (82 + 33) / 115][Stage 90:============================================>         (94 + 21) / 115][Stage 90:===================================================>  (109 + 6) / 115][Stage 90:====================================================> (112 + 3) / 115]                                                                                [Stage 91:==================================>                   (74 + 42) / 116][Stage 91:=============================================>        (97 + 19) / 116][Stage 91:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.82613884 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412691807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (58 + 55) / 113][Stage 92:=============================>                        (62 + 51) / 113][Stage 92:=================================>                    (71 + 42) / 113][Stage 92:========================================>             (84 + 29) / 113][Stage 92:==================================================>   (106 + 7) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:=============================>                        (62 + 52) / 114][Stage 93:=================================>                    (70 + 44) / 114][Stage 93:===========================================>          (91 + 23) / 114][Stage 93:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.330280245 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361543586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (83 + 32) / 115][Stage 94:=========================================>            (89 + 26) / 115][Stage 94:================================================>    (105 + 10) / 115][Stage 94:====================================================> (112 + 3) / 115]                                                                                [Stage 95:=======================================>              (84 + 32) / 116][Stage 95:===========================================>          (94 + 22) / 116][Stage 95:================================================>    (106 + 10) / 116][Stage 95:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.83890691 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372114534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==================================>                   (72 + 41) / 113][Stage 96:=========================================>            (87 + 26) / 113][Stage 96:=============================================>        (95 + 18) / 113][Stage 96:=================================================>    (104 + 9) / 113][Stage 96:===================================================>  (108 + 5) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:====================================>                 (76 + 38) / 114][Stage 97:=======================================>              (83 + 31) / 114][Stage 97:==============================================>       (98 + 16) / 114][Stage 97:==================================================>   (107 + 7) / 114][Stage 97:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.296492119 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40824199 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=============================>                        (61 + 52) / 113][Stage 98:=================================>                    (71 + 42) / 113][Stage 98:========================================>             (85 + 28) / 113][Stage 98:==================================================>   (105 + 8) / 113]                                                                                [Stage 99:============================>                         (60 + 54) / 114][Stage 99:===============================>                      (66 + 48) / 114][Stage 99:======================================>               (82 + 32) / 114][Stage 99:==================================================>   (106 + 8) / 114][Stage 99:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.337419322 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387250486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (72 + 46) / 118][Stage 100:==================================>                  (76 + 42) / 118][Stage 100:========================================>            (90 + 28) / 118][Stage 100:===============================================>    (108 + 10) / 118][Stage 100:==================================================>  (112 + 6) / 118]                                                                                [Stage 101:================================>                    (74 + 45) / 119][Stage 101:====================================>                (81 + 38) / 119][Stage 101:=========================================>           (94 + 25) / 119][Stage 101:===============================================>    (109 + 10) / 119][Stage 101:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.370202798 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412078843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:============================>                        (60 + 53) / 113][Stage 102:===================================>                 (76 + 37) / 113][Stage 102:===========================================>         (93 + 20) / 113][Stage 102:====================================================>(111 + 2) / 113]                                                                                [Stage 103:============================>                        (61 + 53) / 114][Stage 103:===================================>                 (77 + 37) / 114][Stage 103:=============================================>       (97 + 17) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.262248579 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395219884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 44) / 115][Stage 104:==========================================>          (92 + 23) / 115][Stage 104:===============================================>    (105 + 10) / 115][Stage 104:==================================================>  (110 + 5) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:==============================>                      (67 + 49) / 116][Stage 105:======================================>              (85 + 31) / 116][Stage 105:============================================>       (100 + 16) / 116][Stage 105:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.937254546 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40570563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (67 + 48) / 115][Stage 106:====================================>                (80 + 35) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:===================================================> (111 + 4) / 115]                                                                                [Stage 107:==================================>                  (75 + 41) / 116][Stage 107:=========================================>           (90 + 26) / 116][Stage 107:==============================================>     (104 + 12) / 116][Stage 107:===================================================> (113 + 3) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.943668671 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36678876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (83 + 32) / 115][Stage 108:=========================================>           (90 + 25) / 115][Stage 108:==============================================>     (102 + 13) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:========================================>            (88 + 28) / 116][Stage 109:=============================================>      (101 + 15) / 116][Stage 109:===================================================> (112 + 4) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.786887549 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=228", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=228,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (81 + 34) / 115][Stage 110:========================================>            (87 + 28) / 115][Stage 110:=============================================>      (100 + 15) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:=======================================>             (86 + 30) / 116][Stage 111:===========================================>         (96 + 20) / 116][Stage 111:===============================================>    (105 + 11) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.727974533 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (81 + 34) / 115][Stage 112:=========================================>           (89 + 26) / 115][Stage 112:===============================================>    (105 + 10) / 115][Stage 112:===================================================> (111 + 4) / 115]                                                                                [Stage 113:=====================================>               (81 + 35) / 116][Stage 113:==========================================>          (93 + 23) / 116][Stage 113:=================================================>   (109 + 7) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.613998443 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=====================================>               (81 + 34) / 115][Stage 114:========================================>            (88 + 27) / 115][Stage 114:============================================>        (97 + 18) / 115][Stage 114:=================================================>   (108 + 7) / 115][Stage 114:====================================================>(113 + 2) / 115]                                                                                [Stage 115:========================================>            (89 + 27) / 116][Stage 115:============================================>        (97 + 19) / 116][Stage 115:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.779479533 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505506959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==============================>                      (67 + 48) / 115][Stage 116:===================================>                 (77 + 38) / 115][Stage 116:==========================================>          (93 + 22) / 115][Stage 116:==============================================>     (102 + 13) / 115][Stage 116:==================================================>  (109 + 6) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:================================>                    (71 + 45) / 116][Stage 117:======================================>              (84 + 32) / 116][Stage 117:=============================================>      (101 + 15) / 116][Stage 117:================================================>    (107 + 9) / 116][Stage 117:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.356585815 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395028342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:============================>                        (60 + 53) / 113][Stage 118:==================================>                  (73 + 40) / 113][Stage 118:=======================================>             (85 + 28) / 113][Stage 118:==============================================>     (101 + 12) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===========================>                         (60 + 54) / 114][Stage 119:==============================>                      (66 + 48) / 114][Stage 119:=========================================>           (89 + 25) / 114][Stage 119:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.13230935 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398475654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (59 + 54) / 113][Stage 120:===============================>                     (68 + 45) / 113][Stage 120:=======================================>             (84 + 29) / 113][Stage 120:================================================>    (104 + 9) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===========================>                         (59 + 55) / 114][Stage 121:============================>                        (62 + 52) / 114][Stage 121:===================================>                 (77 + 37) / 114][Stage 121:===========================================>         (94 + 20) / 114][Stage 121:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.420249486 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421558572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 60) / 120][Stage 122:==============================>                      (69 + 51) / 120][Stage 122:======================================>              (88 + 32) / 120][Stage 122:==================================================>  (115 + 5) / 120][Stage 122:====================================================>(119 + 1) / 120]                                                                                [Stage 123:==========================>                          (61 + 60) / 121][Stage 123:============================>                        (64 + 57) / 121][Stage 123:==================================>                  (78 + 43) / 121][Stage 123:==========================================>          (97 + 24) / 121][Stage 123:==================================================>  (116 + 5) / 121][Stage 123:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.371220047 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378293298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (73 + 45) / 118][Stage 124:=================================>                   (75 + 43) / 118][Stage 124:===================================>                 (80 + 38) / 118][Stage 124:========================================>            (90 + 28) / 118][Stage 124:==============================================>     (105 + 13) / 118][Stage 124:====================================================>(116 + 2) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:=================================>                   (76 + 43) / 119][Stage 125:===================================>                 (80 + 39) / 119][Stage 125:=========================================>           (94 + 25) / 119][Stage 125:=============================================>      (103 + 16) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.563166837 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403068792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=============================>                       (64 + 51) / 115][Stage 126:=================================>                   (72 + 43) / 115][Stage 126:=======================================>             (86 + 29) / 115][Stage 126:==============================================>     (102 + 13) / 115][Stage 126:==================================================>  (110 + 5) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:===============================>                     (69 + 47) / 116][Stage 127:=====================================>               (81 + 35) / 116][Stage 127:==========================================>          (93 + 23) / 116][Stage 127:===============================================>    (106 + 10) / 116][Stage 127:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.447572685 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421725783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:============================>                        (65 + 55) / 120][Stage 128:=====================================>               (86 + 34) / 120][Stage 128:===============================================>    (109 + 11) / 120][Stage 128:====================================================>(118 + 2) / 120]                                                                                [Stage 129:=============================>                       (68 + 53) / 121][Stage 129:===================================>                 (81 + 40) / 121][Stage 129:===========================================>        (101 + 20) / 121][Stage 129:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.129452573 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=107", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=107,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388880379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (70 + 43) / 113][Stage 130:=====================================>               (80 + 33) / 113][Stage 130:=========================================>           (89 + 24) / 113][Stage 130:==============================================>     (100 + 13) / 113][Stage 130:===================================================> (110 + 3) / 113]                                                                                [Stage 131:====================================>                (79 + 35) / 114][Stage 131:=========================================>           (90 + 24) / 114][Stage 131:==============================================>     (101 + 13) / 114][Stage 131:===============================================>    (104 + 10) / 114][Stage 131:==================================================>  (108 + 6) / 114][Stage 131:==================================================>  (109 + 5) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.67582664 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413211348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:============================>                        (65 + 55) / 120][Stage 132:======================================>              (88 + 32) / 120][Stage 132:==============================================>     (107 + 13) / 120][Stage 132:====================================================>(118 + 2) / 120]                                                                                [Stage 133:=============================>                       (67 + 54) / 121][Stage 133:===================================>                 (82 + 39) / 121][Stage 133:==========================================>         (100 + 21) / 121][Stage 133:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.136586676 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408145672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (62 + 58) / 120][Stage 134:=================================>                   (75 + 45) / 120][Stage 134:===========================================>        (101 + 19) / 120][Stage 134:==================================================>  (114 + 6) / 120][Stage 134:====================================================>(119 + 1) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:============================>                        (65 + 56) / 121][Stage 135:==================================>                  (78 + 43) / 121][Stage 135:=============================================>      (107 + 14) / 121][Stage 135:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.336989629 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=139", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=139,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 60) / 120][Stage 136:============================>                        (64 + 56) / 120][Stage 136:=====================================>               (86 + 34) / 120][Stage 136:=================================================>   (113 + 7) / 120][Stage 136:===================================================> (116 + 4) / 120]                                                                                [Stage 137:============================>                        (65 + 56) / 121][Stage 137:===============================>                     (71 + 50) / 121][Stage 137:======================================>              (89 + 32) / 121][Stage 137:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.087108596 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352341768 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===================================>                 (75 + 38) / 113][Stage 138:========================================>            (87 + 26) / 113][Stage 138:============================================>        (95 + 18) / 113][Stage 138:==================================================>  (107 + 6) / 113][Stage 138:===================================================> (110 + 3) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:=======================================>             (84 + 30) / 114][Stage 139:==========================================>          (92 + 22) / 114][Stage 139:==============================================>     (102 + 12) / 114][Stage 139:==================================================>  (109 + 5) / 114][Stage 139:===================================================> (111 + 3) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.549713359 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412883192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (62 + 58) / 120][Stage 140:================================>                    (74 + 46) / 120][Stage 140:========================================>            (92 + 28) / 120][Stage 140:===============================================>    (109 + 11) / 120][Stage 140:====================================================>(119 + 1) / 120]                                                                                [Stage 141:==========================>                          (61 + 60) / 121][Stage 141:===============================>                     (71 + 50) / 121][Stage 141:======================================>              (89 + 32) / 121][Stage 141:============================================>       (104 + 17) / 121][Stage 141:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.237958886 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389010422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=============================>                       (63 + 50) / 113][Stage 142:=================================>                   (71 + 42) / 113][Stage 142:==========================================>          (90 + 23) / 113][Stage 142:==================================================>  (108 + 5) / 113]                                                                                [Stage 143:===========================>                         (60 + 54) / 114][Stage 143:================================>                    (69 + 45) / 114][Stage 143:==========================================>          (91 + 23) / 114][Stage 143:==============================================>     (101 + 13) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.219656232 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377894083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (72 + 43) / 115][Stage 144:========================================>            (87 + 28) / 115][Stage 144:=============================================>      (101 + 14) / 115][Stage 144:====================================================>(113 + 2) / 115]                                                                                [Stage 145:===================================>                 (78 + 38) / 116][Stage 145:==========================================>          (93 + 23) / 116][Stage 145:=================================================>   (108 + 8) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.117988318 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38269237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=============================>                       (63 + 50) / 113][Stage 146:====================================>                (77 + 36) / 113][Stage 146:============================================>        (94 + 19) / 113][Stage 146:==================================================>  (107 + 6) / 113][Stage 146:====================================================>(111 + 2) / 113]                                                                                [Stage 147:============================>                        (62 + 52) / 114][Stage 147:====================================>                (78 + 36) / 114][Stage 147:===========================================>         (94 + 20) / 114][Stage 147:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.449509613 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=142", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=142,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365965914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (72 + 41) / 113][Stage 148:=====================================>               (81 + 32) / 113][Stage 148:===========================================>         (93 + 20) / 113][Stage 148:==============================================>     (102 + 11) / 113][Stage 148:===================================================> (110 + 3) / 113]                                                                                [Stage 149:=====================================>               (81 + 33) / 114][Stage 149:=========================================>           (90 + 24) / 114][Stage 149:=============================================>       (98 + 16) / 114][Stage 149:==================================================>  (108 + 6) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.142545681 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===================================>                 (75 + 38) / 113][Stage 150:======================================>              (83 + 30) / 113][Stage 150:============================================>        (95 + 18) / 113][Stage 150:===============================================>    (103 + 10) / 113][Stage 150:===================================================> (109 + 4) / 113]                                                                                [Stage 151:======================================>              (83 + 31) / 114][Stage 151:========================================>            (88 + 26) / 114][Stage 151:===============================================>    (104 + 10) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.995366341 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385894394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===================================>                 (78 + 37) / 115][Stage 152:============================================>        (96 + 19) / 115][Stage 152:=================================================>   (108 + 7) / 115][Stage 152:==================================================>  (110 + 5) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:===============================>                     (68 + 48) / 116][Stage 153:====================================>                (79 + 37) / 116][Stage 153:=============================================>       (99 + 17) / 116][Stage 153:=================================================>   (108 + 8) / 116][Stage 153:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.419769888 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=231", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=231,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376221671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:>                                                      (0 + 0) / 115][Stage 154:=================================>                   (72 + 43) / 115][Stage 154:=====================================>               (82 + 33) / 115][Stage 154:===========================================>         (94 + 21) / 115][Stage 154:===================================================> (111 + 4) / 115]                                                                                [Stage 155:===================================>                 (77 + 39) / 116][Stage 155:========================================>            (89 + 27) / 116][Stage 155:============================================>        (97 + 19) / 116][Stage 155:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.787369616 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388824799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:============================>                        (61 + 52) / 113][Stage 156:=================================>                   (71 + 42) / 113][Stage 156:========================================>            (87 + 26) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:===========================>                         (60 + 54) / 114][Stage 157:===============================>                     (67 + 47) / 114][Stage 157:======================================>              (82 + 32) / 114][Stage 157:==============================================>     (101 + 13) / 114][Stage 157:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.266662023 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (58 + 55) / 113][Stage 158:=============================>                       (63 + 50) / 113][Stage 158:=====================================>               (80 + 33) / 113][Stage 158:==================================================>  (107 + 6) / 113][Stage 158:===================================================> (110 + 3) / 113]                                                                                [Stage 159:=============================>                       (63 + 51) / 114][Stage 159:=================================>                   (73 + 41) / 114][Stage 159:==========================================>          (92 + 22) / 114][Stage 159:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.514907905 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=============================>                       (62 + 51) / 113][Stage 160:================================>                    (70 + 43) / 113][Stage 160:============================================>        (94 + 19) / 113][Stage 160:==================================================>  (107 + 6) / 113]                                                                                [Stage 161:=============================>                       (63 + 51) / 114][Stage 161:=====================================>               (81 + 33) / 114][Stage 161:=============================================>       (98 + 16) / 114][Stage 161:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.045847804 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397291537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (59 + 54) / 113][Stage 162:=================================>                   (71 + 42) / 113][Stage 162:=============================================>       (97 + 16) / 113][Stage 162:===================================================> (110 + 3) / 113]                                                                                [Stage 163:============================>                        (61 + 53) / 114][Stage 163:=================================>                   (73 + 41) / 114][Stage 163:=========================================>           (89 + 25) / 114][Stage 163:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.078208613 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (58 + 55) / 113][Stage 164:============================>                        (60 + 53) / 113][Stage 164:================================>                    (69 + 44) / 113][Stage 164:===========================================>         (93 + 20) / 113][Stage 164:===================================================> (110 + 3) / 113]                                                                                [Stage 165:=============================>                       (64 + 50) / 114][Stage 165:===================================>                 (77 + 37) / 114][Stage 165:=================================================>   (106 + 8) / 114][Stage 165:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.100258817 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363870028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (72 + 46) / 118][Stage 166:=================================>                   (74 + 44) / 118][Stage 166:=======================================>             (88 + 30) / 118][Stage 166:============================================>       (101 + 17) / 118][Stage 166:===================================================> (115 + 3) / 118]                                                                                [Stage 167:================================>                    (73 + 46) / 119][Stage 167:==================================>                  (78 + 41) / 119][Stage 167:=========================================>           (94 + 25) / 119][Stage 167:==================================================>  (114 + 5) / 119][Stage 167:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.127854537 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388696379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:============================>                        (60 + 53) / 113][Stage 168:===============================>                     (67 + 46) / 113][Stage 168:=========================================>           (88 + 25) / 113][Stage 168:==================================================>  (108 + 5) / 113][Stage 168:====================================================>(111 + 2) / 113]                                                                                [Stage 169:=============================>                       (63 + 51) / 114][Stage 169:===================================>                 (77 + 37) / 114][Stage 169:==========================================>          (92 + 22) / 114][Stage 169:===============================================>    (104 + 10) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.373454446 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398261794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:=============================>                       (66 + 54) / 120][Stage 170:=====================================>               (84 + 36) / 120][Stage 170:===============================================>    (110 + 10) / 120][Stage 170:====================================================>(118 + 2) / 120]                                                                                [Stage 171:============================>                        (65 + 56) / 121][Stage 171:===================================>                 (81 + 40) / 121][Stage 171:=========================================>           (95 + 26) / 121][Stage 171:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.110825574 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (60 + 60) / 120][Stage 172:=============================>                       (66 + 54) / 120][Stage 172:======================================>              (87 + 33) / 120][Stage 172:=================================================>   (111 + 9) / 120][Stage 172:====================================================>(119 + 1) / 120]                                                                                [Stage 173:===========================>                         (62 + 59) / 121][Stage 173:==============================>                      (70 + 51) / 121][Stage 173:=======================================>             (90 + 31) / 121][Stage 173:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.209338658 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375831939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==============================>                      (66 + 49) / 115][Stage 174:===================================>                 (78 + 37) / 115][Stage 174:========================================>            (88 + 27) / 115][Stage 174:=============================================>       (99 + 16) / 115][Stage 174:===================================================> (111 + 4) / 115][Stage 174:===================================================> (112 + 3) / 115]                                                                                [Stage 175:================================>                    (72 + 44) / 116][Stage 175:=========================================>           (91 + 25) / 116][Stage 175:================================================>    (107 + 9) / 116][Stage 175:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.149518043 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381718237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:==============================>                      (65 + 48) / 113][Stage 176:=====================================>               (79 + 34) / 113][Stage 176:============================================>        (95 + 18) / 113][Stage 176:==================================================>  (107 + 6) / 113][Stage 176:====================================================>(111 + 2) / 113]                                                                                [Stage 177:===========================>                         (60 + 54) / 114][Stage 177:============================>                        (62 + 52) / 114][Stage 177:=================================>                   (73 + 41) / 114][Stage 177:=========================================>           (89 + 25) / 114][Stage 177:==================================================>  (108 + 6) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.501097646 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355009001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=====================================>               (80 + 33) / 113][Stage 178:=============================================>       (97 + 16) / 113][Stage 178:==============================================>     (102 + 11) / 113][Stage 178:==================================================>  (108 + 5) / 113]                                                                                [Stage 179:======================================>              (82 + 32) / 114][Stage 179:========================================>            (87 + 27) / 114][Stage 179:=============================================>       (97 + 17) / 114][Stage 179:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.949437194 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390116456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==================================>                  (74 + 41) / 115][Stage 180:==========================================>          (93 + 22) / 115][Stage 180:=================================================>   (107 + 8) / 115][Stage 180:===================================================> (112 + 3) / 115]                                                                                [Stage 181:================================>                    (71 + 45) / 116][Stage 181:=======================================>             (86 + 30) / 116][Stage 181:==============================================>     (104 + 12) / 116][Stage 181:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.04533435 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==============================>                      (66 + 49) / 115][Stage 182:=====================================>               (81 + 34) / 115][Stage 182:=============================================>       (99 + 16) / 115][Stage 182:===================================================> (112 + 3) / 115]                                                                                [Stage 183:================================>                    (71 + 45) / 116][Stage 183:========================================>            (88 + 28) / 116][Stage 183:===============================================>    (105 + 11) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.759054354 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:>                                                      (0 + 0) / 115][Stage 184:================================>                    (71 + 44) / 115][Stage 184:=======================================>             (85 + 30) / 115][Stage 184:==============================================>     (103 + 12) / 115][Stage 184:===================================================> (111 + 4) / 115]                                                                                [Stage 185:=================================>                   (74 + 42) / 116][Stage 185:=====================================>               (83 + 33) / 116][Stage 185:===========================================>         (95 + 21) / 116][Stage 185:===================================================> (112 + 4) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.35421003 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345697496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (84 + 31) / 115][Stage 186:===========================================>         (94 + 21) / 115][Stage 186:==============================================>     (103 + 12) / 115][Stage 186:===================================================> (111 + 4) / 115][Stage 186:====================================================>(113 + 2) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:=======================================>             (87 + 29) / 116][Stage 187:==============================================>     (103 + 13) / 116][Stage 187:==================================================>  (110 + 6) / 116][Stage 187:==================================================>  (111 + 5) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.572645922 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358657845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===============================>                     (70 + 48) / 118][Stage 188:====================================>                (82 + 36) / 118][Stage 188:============================================>       (100 + 18) / 118][Stage 188:==================================================>  (112 + 6) / 118][Stage 188:===================================================> (115 + 3) / 118]                                                                                [Stage 189:================================>                    (74 + 45) / 119][Stage 189:=======================================>             (88 + 31) / 119][Stage 189:============================================>       (102 + 17) / 119][Stage 189:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.19526188 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (73 + 45) / 118][Stage 190:====================================>                (81 + 37) / 118][Stage 190:==========================================>          (95 + 23) / 118][Stage 190:====================================================>(117 + 1) / 118]                                                                                [Stage 191:================================>                    (73 + 46) / 119][Stage 191:===================================>                 (80 + 39) / 119][Stage 191:=========================================>           (93 + 26) / 119][Stage 191:==============================================>     (107 + 12) / 119]                                                                                Time elapsed: 2.849183205 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=100", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=100,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350363316 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==================================>                  (73 + 40) / 113][Stage 192:======================================>              (83 + 30) / 113][Stage 192:============================================>        (94 + 19) / 113][Stage 192:===============================================>    (103 + 10) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:=====================================>               (81 + 33) / 114][Stage 193:==========================================>          (91 + 23) / 114][Stage 193:============================================>        (96 + 18) / 114][Stage 193:=================================================>   (106 + 8) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.118708119 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=====================================>               (81 + 32) / 113][Stage 194:==========================================>          (91 + 22) / 113][Stage 194:==============================================>     (100 + 13) / 113][Stage 194:==================================================>  (108 + 5) / 113][Stage 194:====================================================>(112 + 1) / 113]                                                                                [Stage 195:==================================>                  (75 + 39) / 114][Stage 195:======================================>              (83 + 31) / 114][Stage 195:==========================================>          (91 + 23) / 114][Stage 195:==============================================>     (101 + 13) / 114][Stage 195:==================================================>  (109 + 5) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.450706121 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=66", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=66,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38580155 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=================================>                   (73 + 42) / 115][Stage 196:=======================================>             (85 + 30) / 115][Stage 196:===========================================>         (95 + 20) / 115][Stage 196:=============================================>      (100 + 15) / 115][Stage 196:=================================================>   (108 + 7) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:==================================>                  (75 + 41) / 116][Stage 197:==========================================>          (92 + 24) / 116][Stage 197:==================================================>  (110 + 6) / 116][Stage 197:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.305376721 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495384496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===============================>                     (69 + 46) / 115][Stage 198:=====================================>               (82 + 33) / 115][Stage 198:=============================================>       (99 + 16) / 115][Stage 198:==================================================>  (110 + 5) / 115]                                                                                [Stage 199:==================================>                  (75 + 41) / 116][Stage 199:=========================================>           (91 + 25) / 116][Stage 199:=============================================>      (101 + 15) / 116][Stage 199:=================================================>   (108 + 8) / 116][Stage 199:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.978156464 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===============================>                     (69 + 46) / 115][Stage 200:======================================>              (84 + 31) / 115][Stage 200:=============================================>       (99 + 16) / 115][Stage 200:===================================================> (111 + 4) / 115][Stage 200:====================================================>(113 + 2) / 115]                                                                                [Stage 201:================================>                    (72 + 44) / 116][Stage 201:========================================>            (89 + 27) / 116][Stage 201:=============================================>      (102 + 14) / 116][Stage 201:==================================================>  (111 + 5) / 116][Stage 201:===================================================> (112 + 4) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.465415891 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m3.056s
user	11m36.608s
sys	0m33.332s
