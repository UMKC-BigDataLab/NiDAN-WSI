Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 23:25:01 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:25:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:25:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:25:16 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 23:25:18 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:25:28 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531232517-0725).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.356497173 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 114) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=======================================>               (82 + 33) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (110 + 5) / 115]                                                                                [Stage 1:========================>                              (52 + 64) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.811958655 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.625033937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=================================>                     (69 + 46) / 115][Stage 2:=====================================>                 (79 + 36) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:========================================>              (84 + 31) / 115][Stage 2:===========================================>           (90 + 25) / 115][Stage 2:===============================================>      (102 + 13) / 115][Stage 2:===================================================>   (108 + 7) / 115][Stage 2:======================================================>(113 + 2) / 115]                                                                                [Stage 3:======================================>                (81 + 35) / 116][Stage 3:======================================>                (82 + 34) / 116][Stage 3:==========================================>            (89 + 27) / 116][Stage 3:============================================>          (94 + 22) / 116][Stage 3:==============================================>       (100 + 16) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:=====================================================> (112 + 4) / 116][Stage 3:======================================================>(114 + 2) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.494753891 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.647514482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=============================>                         (62 + 53) / 115][Stage 4:===============================>                       (66 + 49) / 115][Stage 4:=================================>                     (71 + 44) / 115][Stage 4:====================================>                  (77 + 38) / 115][Stage 4:============================================>          (93 + 22) / 115][Stage 4:================================================>     (103 + 12) / 115][Stage 4:==================================================>    (106 + 9) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:=============================>                         (62 + 54) / 116][Stage 5:================================>                      (69 + 47) / 116][Stage 5:==================================>                    (72 + 44) / 116][Stage 5:=====================================>                 (79 + 37) / 116][Stage 5:=========================================>             (87 + 29) / 116][Stage 5:==============================================>       (100 + 16) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.797245301 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.665394869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=====================>                                 (46 + 74) / 120][Stage 6:======================>                                (49 + 71) / 120][Stage 6:=============================>                         (65 + 55) / 120][Stage 6:================================>                      (70 + 50) / 120][Stage 6:==================================>                    (75 + 45) / 120][Stage 6:======================================>                (85 + 35) / 120][Stage 6:======================================================>(118 + 2) / 120]                                                                                [Stage 7:============================>                          (62 + 59) / 121][Stage 7:================================>                      (71 + 50) / 121][Stage 7:====================================>                  (80 + 41) / 121][Stage 7:===========================================>           (95 + 26) / 121][Stage 7:====================================================>  (115 + 6) / 121][Stage 7:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.162260248 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=224", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=224,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.580767364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:>                                                        (0 + 0) / 113][Stage 8:===========================>                           (56 + 57) / 113][Stage 8:============================>                          (58 + 55) / 113][Stage 8:================================>                      (66 + 47) / 113][Stage 8:=======================================>               (82 + 31) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:==============================================>        (96 + 17) / 113][Stage 8:===============================================>       (98 + 15) / 113][Stage 8:=====================================================> (109 + 4) / 113]                                                                                [Stage 9:===========================>                           (58 + 56) / 114][Stage 9:===============================>                       (65 + 49) / 114][Stage 9:=======================================>               (81 + 33) / 114][Stage 9:==============================================>        (97 + 17) / 114][Stage 9:===================================================>   (107 + 7) / 114][Stage 9:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.258334582 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=159", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=159,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.543999587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (71 + 47) / 118][Stage 10:=================================>                    (73 + 45) / 118][Stage 10:=====================================>                (82 + 36) / 118][Stage 10:============================================>         (97 + 21) / 118][Stage 10:================================================>    (107 + 11) / 118][Stage 10:====================================================> (114 + 4) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:====================================>                 (81 + 38) / 119][Stage 11:===========================================>          (96 + 23) / 119][Stage 11:==================================================>   (112 + 7) / 119][Stage 11:=====================================================>(117 + 2) / 119][Stage 11:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.141322846 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481793878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (80 + 35) / 115][Stage 12:======================================>               (83 + 32) / 115][Stage 12:===========================================>          (93 + 22) / 115][Stage 12:===============================================>     (103 + 12) / 115][Stage 12:==================================================>   (108 + 7) / 115]                                                                                [Stage 13:=====================================>                (81 + 35) / 116][Stage 13:=========================================>            (90 + 26) / 116][Stage 13:===============================================>     (105 + 11) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.267216754 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=13", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=13,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488490034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=================================>                    (70 + 43) / 113][Stage 14:=====================================>                (79 + 34) / 113][Stage 14:============================================>         (94 + 19) / 113][Stage 14:===============================================>     (102 + 11) / 113][Stage 14:====================================================> (110 + 3) / 113]                                                                                [Stage 15:====================================>                 (76 + 38) / 114][Stage 15:=======================================>              (83 + 31) / 114][Stage 15:==========================================>           (89 + 25) / 114][Stage 15:=============================================>        (96 + 18) / 114][Stage 15:===============================================>     (103 + 11) / 114][Stage 15:====================================================> (110 + 4) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.189380247 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=221", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=221,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443614673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:======================================>               (82 + 33) / 115][Stage 16:===========================================>          (93 + 22) / 115][Stage 16:===============================================>     (103 + 12) / 115][Stage 16:====================================================> (112 + 3) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:=======================================>              (84 + 32) / 116][Stage 17:=============================================>        (98 + 18) / 116][Stage 17:===================================================>  (111 + 5) / 116][Stage 17:====================================================> (113 + 3) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.298059368 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=126", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=126,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500015878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:====================================>                 (79 + 39) / 118][Stage 18:=========================================>            (91 + 27) / 118][Stage 18:=============================================>       (101 + 17) / 118][Stage 18:================================================>    (107 + 11) / 118][Stage 18:=====================================================>(116 + 2) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:=================================>                    (74 + 45) / 119][Stage 19:======================================>               (85 + 34) / 119][Stage 19:===============================================>     (106 + 13) / 119][Stage 19:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.710194858 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=177", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=177,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.655878725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==================================>                   (73 + 42) / 115][Stage 20:===========================================>          (92 + 23) / 115][Stage 20:===============================================>     (102 + 13) / 115][Stage 20:===================================================>  (109 + 6) / 115]                                                                                [Stage 21:=================================>                    (73 + 43) / 116][Stage 21:=======================================>              (84 + 32) / 116][Stage 21:=============================================>        (98 + 18) / 116][Stage 21:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.187586312 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=83", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=83,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48527099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (71 + 47) / 118][Stage 22:==================================>                   (75 + 43) / 118][Stage 22:========================================>             (89 + 29) / 118][Stage 22:==================================================>   (111 + 7) / 118][Stage 22:====================================================> (115 + 3) / 118][Stage 22:=====================================================>(117 + 1) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:===================================>                  (78 + 41) / 119][Stage 23:========================================>             (90 + 29) / 119][Stage 23:============================================>        (100 + 19) / 119][Stage 23:===================================================>  (113 + 6) / 119][Stage 23:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.551987612 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=229", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=229,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530207216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:============================>                         (59 + 54) / 113][Stage 24:===============================>                      (66 + 47) / 113][Stage 24:=====================================>                (78 + 35) / 113][Stage 24:===========================================>          (91 + 22) / 113][Stage 24:==============================================>      (100 + 13) / 113][Stage 24:===================================================>  (107 + 6) / 113][Stage 24:====================================================> (109 + 4) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===========================>                          (59 + 55) / 114][Stage 25:=============================>                        (62 + 52) / 114][Stage 25:====================================>                 (77 + 37) / 114][Stage 25:=============================================>        (97 + 17) / 114][Stage 25:===================================================>  (109 + 5) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.031515017 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=24", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=24,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.639639164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:================================>                     (72 + 48) / 120][Stage 26:=======================================>              (88 + 32) / 120][Stage 26:============================================>        (100 + 20) / 120][Stage 26:===============================================>     (108 + 12) / 120][Stage 26:=====================================================>(118 + 2) / 120]                                                                                [Stage 27:===========================>                          (62 + 59) / 121][Stage 27:==================================>                   (77 + 44) / 121][Stage 27:===========================================>         (100 + 21) / 121][Stage 27:====================================================> (118 + 3) / 121][Stage 27:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.617909829 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511473811 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:===============================>                      (71 + 49) / 120][Stage 28:========================================>             (91 + 29) / 120][Stage 28:===================================================>  (115 + 5) / 120]                                                                                [Stage 29:===========================>                          (61 + 60) / 121][Stage 29:==============================>                       (69 + 52) / 121][Stage 29:========================================>             (90 + 31) / 121][Stage 29:===============================================>     (109 + 12) / 121][Stage 29:=====================================================>(119 + 2) / 121][Stage 29:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.714470961 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=215", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=215,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535436042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:=============================>                        (65 + 55) / 120][Stage 30:====================================>                 (81 + 39) / 120][Stage 30:=============================================>       (103 + 17) / 120][Stage 30:===================================================>  (114 + 6) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:==============================>                       (68 + 53) / 121][Stage 31:======================================>               (86 + 35) / 121][Stage 31:===============================================>     (109 + 12) / 121][Stage 31:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.432986997 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=136", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=136,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404708573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=======================================>              (84 + 31) / 115][Stage 32:=============================================>        (97 + 18) / 115][Stage 32:===================================================>  (110 + 5) / 115]                                                                                [Stage 33:=======================================>              (85 + 31) / 116][Stage 33:===========================================>          (93 + 23) / 116][Stage 33:================================================>    (106 + 10) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.889661258 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473322185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:============================>                         (59 + 54) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:===================================>                  (74 + 39) / 113][Stage 34:==============================================>       (97 + 16) / 113][Stage 34:===================================================>  (107 + 6) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:============================>                         (61 + 53) / 114][Stage 35:===================================>                  (75 + 39) / 114][Stage 35:==============================================>       (98 + 16) / 114][Stage 35:===================================================>  (108 + 6) / 114][Stage 35:=====================================================>(112 + 2) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.278817649 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=103", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=103,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431000941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (80 + 33) / 113][Stage 36:==========================================>           (88 + 25) / 113][Stage 36:===============================================>      (99 + 14) / 113][Stage 36:===================================================>  (107 + 6) / 113][Stage 36:=====================================================>(112 + 1) / 113]                                                                                [Stage 37:======================================>               (82 + 32) / 114][Stage 37:=============================================>        (97 + 17) / 114][Stage 37:==================================================>   (107 + 7) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.202952743 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=147", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=147,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44272023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:====================================>                 (76 + 37) / 113][Stage 38:===========================================>          (90 + 23) / 113][Stage 38:===============================================>      (99 + 14) / 113][Stage 38:===================================================>  (108 + 5) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:=====================================>                (80 + 34) / 114][Stage 39:===========================================>          (92 + 22) / 114][Stage 39:=================================================>    (105 + 9) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.094426864 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497445615 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===========================>                          (61 + 59) / 120][Stage 40:===================================>                  (78 + 42) / 120][Stage 40:============================================>        (100 + 20) / 120][Stage 40:===================================================>  (114 + 6) / 120]                                                                                [Stage 41:===========================>                          (61 + 60) / 121][Stage 41:=============================>                        (67 + 54) / 121][Stage 41:======================================>               (87 + 34) / 121][Stage 41:================================================>    (110 + 11) / 121][Stage 41:===================================================>  (116 + 5) / 121][Stage 41:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.688885748 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486187597 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (65 + 50) / 115][Stage 42:======================================>               (82 + 33) / 115][Stage 42:==============================================>       (98 + 17) / 115][Stage 42:===================================================>  (109 + 6) / 115]                                                                                [Stage 43:=================================>                    (73 + 43) / 116][Stage 43:===========================================>          (93 + 23) / 116][Stage 43:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.716946187 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418221052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (83 + 32) / 115][Stage 44:===========================================>          (93 + 22) / 115][Stage 44:===============================================>     (103 + 12) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:========================================>             (88 + 28) / 116][Stage 45:==============================================>       (99 + 17) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.850668748 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449526608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:============================>                         (60 + 53) / 113][Stage 46:=================================>                    (71 + 42) / 113][Stage 46:===========================================>          (92 + 21) / 113][Stage 46:====================================================> (109 + 4) / 113]                                                                                [Stage 47:=============================>                        (63 + 51) / 114][Stage 47:====================================>                 (76 + 38) / 114][Stage 47:==============================================>      (100 + 14) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.019454946 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=255", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=255,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455150808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==============================>                       (65 + 50) / 115][Stage 48:======================================>               (81 + 34) / 115][Stage 48:==============================================>      (100 + 15) / 115][Stage 48:===================================================>  (110 + 5) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:=================================>                    (72 + 44) / 116][Stage 49:========================================>             (86 + 30) / 116][Stage 49:===============================================>     (103 + 13) / 116][Stage 49:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.763546872 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447211893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (58 + 55) / 113][Stage 50:==============================>                       (63 + 50) / 113][Stage 50:=======================================>              (82 + 31) / 113][Stage 50:============================================>         (94 + 19) / 113][Stage 50:==================================================>   (105 + 8) / 113][Stage 50:====================================================> (110 + 3) / 113]                                                                                [Stage 51:===========================>                          (59 + 55) / 114][Stage 51:==============================>                       (64 + 50) / 114][Stage 51:======================================>               (82 + 32) / 114][Stage 51:==============================================>       (98 + 16) / 114][Stage 51:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.474164041 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.587589895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:===========================>                          (62 + 58) / 120][Stage 52:================================>                     (73 + 47) / 120][Stage 52:===========================================>          (97 + 23) / 120][Stage 52:====================================================> (116 + 4) / 120]                                                                                [Stage 53:===========================>                          (61 + 60) / 121][Stage 53:=============================>                        (65 + 56) / 121][Stage 53:====================================>                 (82 + 39) / 121][Stage 53:===============================================>     (108 + 13) / 121][Stage 53:====================================================> (118 + 3) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.363612923 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398306639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (81 + 34) / 115][Stage 54:=======================================>              (85 + 30) / 115][Stage 54:===========================================>          (93 + 22) / 115][Stage 54:====================================================> (112 + 3) / 115]                                                                                [Stage 55:======================================>               (83 + 33) / 116][Stage 55:=============================================>        (97 + 19) / 116][Stage 55:===================================================>  (110 + 6) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.764104183 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=137", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=137,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382389219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (83 + 32) / 115][Stage 56:============================================>         (94 + 21) / 115][Stage 56:=================================================>    (106 + 9) / 115]                                                                                [Stage 57:=======================================>              (84 + 32) / 116][Stage 57:=============================================>        (97 + 19) / 116][Stage 57:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.570747131 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=144", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=144,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406536871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=================================>                    (73 + 45) / 118][Stage 58:======================================>               (84 + 34) / 118][Stage 58:=============================================>        (99 + 19) / 118][Stage 58:=====================================================>(116 + 2) / 118]                                                                                [Stage 59:=================================>                    (73 + 46) / 119][Stage 59:==================================>                   (76 + 43) / 119][Stage 59:========================================>             (89 + 30) / 119][Stage 59:================================================>    (109 + 10) / 119][Stage 59:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.073990209 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439820401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:=================================>                    (74 + 44) / 118][Stage 60:=======================================>              (86 + 32) / 118][Stage 60:=============================================>       (101 + 17) / 118][Stage 60:===================================================>  (113 + 5) / 118]                                                                                [Stage 61:=================================>                    (73 + 46) / 119][Stage 61:====================================>                 (80 + 39) / 119][Stage 61:========================================>             (90 + 29) / 119][Stage 61:================================================>    (108 + 11) / 119][Stage 61:==================================================>   (112 + 7) / 119][Stage 61:=====================================================>(117 + 2) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.983821933 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421439675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===============================>                      (68 + 47) / 115][Stage 62:======================================>               (82 + 33) / 115][Stage 62:==============================================>      (100 + 15) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:===================================================>  (110 + 5) / 115][Stage 62:====================================================> (112 + 3) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:================================>                     (70 + 46) / 116][Stage 63:======================================>               (83 + 33) / 116][Stage 63:==============================================>       (99 + 17) / 116][Stage 63:==================================================>   (108 + 8) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.431274973 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433443707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:=============================>                        (61 + 52) / 113][Stage 64:=====================================>                (78 + 35) / 113][Stage 64:==============================================>       (97 + 16) / 113][Stage 64:=====================================================>(111 + 2) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:===========================>                          (59 + 55) / 114][Stage 65:===============================>                      (67 + 47) / 114][Stage 65:========================================>             (86 + 28) / 114][Stage 65:==============================================>      (101 + 13) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.626633883 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=19", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=19,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531251061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:==================================>                   (76 + 42) / 118][Stage 66:======================================>               (84 + 34) / 118][Stage 66:===========================================>          (96 + 22) / 118][Stage 66:==================================================>   (110 + 8) / 118]                                                                                [Stage 67:=================================>                    (74 + 45) / 119][Stage 67:====================================>                 (80 + 39) / 119][Stage 67:=========================================>            (91 + 28) / 119][Stage 67:==============================================>      (104 + 15) / 119][Stage 67:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.375244924 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=20", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=20,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:>                                                       (0 + 0) / 118][Stage 68:=================================>                    (73 + 45) / 118][Stage 68:====================================>                 (79 + 39) / 118][Stage 68:===========================================>          (94 + 24) / 118][Stage 68:===============================================>     (105 + 13) / 118][Stage 68:=====================================================>(116 + 2) / 118]                                                                                [Stage 69:=================================>                    (74 + 45) / 119][Stage 69:=======================================>              (86 + 33) / 119][Stage 69:===========================================>          (96 + 23) / 119][Stage 69:=================================================>    (110 + 9) / 119][Stage 69:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.35938407 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435340919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:===============================>                      (69 + 51) / 120][Stage 70:====================================>                 (82 + 38) / 120][Stage 70:==============================================>      (105 + 15) / 120][Stage 70:====================================================> (116 + 4) / 120][Stage 70:=====================================================>(119 + 1) / 120]                                                                                [Stage 71:===========================>                          (61 + 60) / 121][Stage 71:=============================>                        (66 + 55) / 121][Stage 71:===================================>                  (79 + 42) / 121][Stage 71:===========================================>          (98 + 23) / 121][Stage 71:====================================================> (118 + 3) / 121][Stage 71:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.760530524 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390142754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (82 + 33) / 115][Stage 72:=========================================>            (88 + 27) / 115][Stage 72:===============================================>     (104 + 11) / 115][Stage 72:=====================================================>(113 + 2) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:============================================>         (96 + 20) / 116][Stage 73:==================================================>   (108 + 8) / 116][Stage 73:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.752169221 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=243", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=243,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371151167 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (82 + 33) / 115][Stage 74:=============================================>        (96 + 19) / 115][Stage 74:====================================================> (111 + 4) / 115][Stage 74:=====================================================>(114 + 1) / 115]                                                                                [Stage 75:======================================>               (83 + 33) / 116][Stage 75:=========================================>            (89 + 27) / 116][Stage 75:===============================================>     (104 + 12) / 116][Stage 75:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.74711816 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384376091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===================================>                  (74 + 39) / 113][Stage 76:========================================>             (84 + 29) / 113][Stage 76:=============================================>        (95 + 18) / 113][Stage 76:==================================================>   (105 + 8) / 113][Stage 76:====================================================> (110 + 3) / 113]                                                                                [Stage 77:====================================>                 (78 + 36) / 114][Stage 77:============================================>         (94 + 20) / 114][Stage 77:===============================================>     (102 + 12) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.941518735 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=99", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=99,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408284228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=====================================>                (78 + 35) / 113][Stage 78:=========================================>            (87 + 26) / 113][Stage 78:==============================================>      (100 + 13) / 113][Stage 78:====================================================> (109 + 4) / 113]                                                                                [Stage 79:======================================>               (82 + 32) / 114][Stage 79:============================================>         (94 + 20) / 114][Stage 79:=================================================>    (105 + 9) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.907310591 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376629457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=====================================>                (79 + 34) / 113][Stage 80:===========================================>          (90 + 23) / 113][Stage 80:=================================================>    (104 + 9) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:=========================================>            (87 + 27) / 114][Stage 81:=============================================>        (96 + 18) / 114][Stage 81:================================================>    (104 + 10) / 114][Stage 81:====================================================> (111 + 3) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.026872992 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39920784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (69 + 46) / 115][Stage 82:=======================================>              (84 + 31) / 115][Stage 82:==============================================>      (101 + 14) / 115][Stage 82:===================================================>  (109 + 6) / 115][Stage 82:=====================================================>(113 + 2) / 115]                                                                                [Stage 83:=================================>                    (71 + 45) / 116][Stage 83:======================================>               (82 + 34) / 116][Stage 83:============================================>         (95 + 21) / 116][Stage 83:=============================================>       (100 + 16) / 116][Stage 83:====================================================> (112 + 4) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.055510476 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361639537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=====================================>                (79 + 36) / 115][Stage 84:======================================>               (82 + 33) / 115][Stage 84:==============================================>      (101 + 14) / 115][Stage 84:====================================================> (111 + 4) / 115]                                                                                [Stage 85:========================================>             (88 + 28) / 116][Stage 85:=============================================>        (98 + 18) / 116][Stage 85:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.626190447 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=235", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=235,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429552097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:===========================>                          (62 + 58) / 120][Stage 86:================================>                     (72 + 48) / 120][Stage 86:==========================================>           (95 + 25) / 120][Stage 86:================================================>    (110 + 10) / 120][Stage 86:=====================================================>(119 + 1) / 120]                                                                                [Stage 87:============================>                         (63 + 58) / 121][Stage 87:==============================>                       (69 + 52) / 121][Stage 87:=====================================>                (85 + 36) / 121][Stage 87:=================================================>    (112 + 9) / 121][Stage 87:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.476277365 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=32", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=32,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371518582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:>                                                       (0 + 0) / 113][Stage 88:=====================================>                (78 + 35) / 113][Stage 88:==========================================>           (89 + 24) / 113][Stage 88:==============================================>      (100 + 13) / 113][Stage 88:====================================================> (109 + 4) / 113]                                                                                [Stage 89:=====================================>                (80 + 34) / 114][Stage 89:===========================================>          (92 + 22) / 114][Stage 89:===============================================>     (103 + 11) / 114][Stage 89:====================================================> (110 + 4) / 114][Stage 89:=====================================================>(112 + 2) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.016032017 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==================================>                   (73 + 40) / 113][Stage 90:=======================================>              (82 + 31) / 113][Stage 90:==============================================>       (97 + 16) / 113][Stage 90:=====================================================>(111 + 2) / 113]                                                                                [Stage 91:===========================================>          (91 + 23) / 114][Stage 91:==============================================>       (98 + 16) / 114][Stage 91:=================================================>    (105 + 9) / 114][Stage 91:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.815252566 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394323993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===============================>                      (67 + 48) / 115][Stage 92:======================================>               (82 + 33) / 115][Stage 92:============================================>         (94 + 21) / 115][Stage 92:===============================================>     (102 + 13) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:===============================>                      (68 + 48) / 116][Stage 93:=====================================>                (80 + 36) / 116][Stage 93:=============================================>        (97 + 19) / 116][Stage 93:===============================================>     (104 + 12) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.043218296 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:====================================>                 (78 + 37) / 115][Stage 94:=========================================>            (89 + 26) / 115][Stage 94:=================================================>    (106 + 9) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:===================================>                  (76 + 40) / 116][Stage 95:===========================================>          (93 + 23) / 116][Stage 95:===============================================>     (104 + 12) / 116][Stage 95:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.871910131 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=125", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=125,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379492149 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:================================>                     (72 + 46) / 118][Stage 96:=================================>                    (74 + 44) / 118][Stage 96:=====================================>                (83 + 35) / 118][Stage 96:============================================>         (97 + 21) / 118][Stage 96:==================================================>   (110 + 8) / 118][Stage 96:=====================================================>(117 + 1) / 118]                                                                                [Stage 97:=================================>                    (74 + 45) / 119][Stage 97:=====================================>                (82 + 37) / 119][Stage 97:========================================>             (90 + 29) / 119][Stage 97:===============================================>     (106 + 13) / 119][Stage 97:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.640967589 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374641315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:======================================>               (80 + 33) / 113][Stage 98:=============================================>        (95 + 18) / 113][Stage 98:==================================================>   (105 + 8) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:==========================================>           (89 + 25) / 114][Stage 99:==============================================>       (98 + 16) / 114][Stage 99:===================================================>  (108 + 6) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.854478248 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38830638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (73 + 42) / 115][Stage 100:=========================================>           (89 + 26) / 115][Stage 100:=================================================>   (108 + 7) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:==================================>                  (75 + 41) / 116][Stage 101:==========================================>          (93 + 23) / 116][Stage 101:================================================>    (107 + 9) / 116][Stage 101:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.831442824 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350427411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:======================================>              (83 + 32) / 115][Stage 102:=========================================>           (91 + 24) / 115][Stage 102:==================================================>  (109 + 6) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:=====================================>               (82 + 34) / 116][Stage 103:========================================>            (88 + 28) / 116][Stage 103:===============================================>    (105 + 11) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.631383611 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=226", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=226,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385480862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=================================>                   (74 + 44) / 118][Stage 104:====================================>                (81 + 37) / 118][Stage 104:==========================================>          (95 + 23) / 118][Stage 104:==================================================>  (113 + 5) / 118]                                                                                [Stage 105:================================>                    (74 + 45) / 119][Stage 105:===================================>                 (79 + 40) / 119][Stage 105:==========================================>          (95 + 24) / 119][Stage 105:=============================================>      (105 + 14) / 119][Stage 105:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.319801034 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=146", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=146,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377131885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:=================================>                   (75 + 43) / 118][Stage 106:======================================>              (86 + 32) / 118][Stage 106:===============================================>    (108 + 10) / 118][Stage 106:===================================================> (115 + 3) / 118]                                                                                [Stage 107:================================>                    (73 + 46) / 119][Stage 107:===================================>                 (79 + 40) / 119][Stage 107:==========================================>          (95 + 24) / 119][Stage 107:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 2.986925662 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=39", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=39,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349510909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:====================================>                (80 + 35) / 115][Stage 108:=======================================>             (85 + 30) / 115][Stage 108:=============================================>       (98 + 17) / 115][Stage 108:====================================================>(113 + 2) / 115]                                                                                [Stage 109:=====================================>               (81 + 35) / 116][Stage 109:=======================================>             (86 + 30) / 116][Stage 109:=============================================>      (102 + 14) / 116][Stage 109:=================================================>   (109 + 7) / 116][Stage 109:==================================================>  (111 + 5) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.101886283 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383094771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:=================================>                   (74 + 44) / 118][Stage 110:=======================================>             (89 + 29) / 118][Stage 110:=================================================>   (110 + 8) / 118][Stage 110:====================================================>(116 + 2) / 118]                                                                                [Stage 111:=================================>                   (76 + 43) / 119][Stage 111:======================================>              (86 + 33) / 119][Stage 111:==============================================>     (107 + 12) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.218013184 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403195869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:==================================>                  (73 + 40) / 113][Stage 112:==========================================>          (90 + 23) / 113][Stage 112:====================================================>(111 + 2) / 113]                                                                                [Stage 113:============================>                        (61 + 53) / 114][Stage 113:=====================================>               (80 + 34) / 114][Stage 113:===============================================>    (104 + 10) / 114][Stage 113:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.104244994 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402779097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=============================>                       (64 + 51) / 115][Stage 114:================================>                    (71 + 44) / 115][Stage 114:=======================================>             (85 + 30) / 115][Stage 114:=============================================>      (101 + 14) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:===============================>                     (70 + 46) / 116][Stage 115:=======================================>             (86 + 30) / 116][Stage 115:============================================>       (100 + 16) / 116][Stage 115:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.232855166 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412734859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:===========================>                         (63 + 57) / 120][Stage 116:====================================>                (83 + 37) / 120][Stage 116:===============================================>    (110 + 10) / 120][Stage 116:====================================================>(119 + 1) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:==============================>                      (69 + 52) / 121][Stage 117:====================================>                (84 + 37) / 121][Stage 117:===============================================>    (110 + 11) / 121][Stage 117:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.235229718 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407749986 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 60) / 120][Stage 118:=============================>                       (66 + 54) / 120][Stage 118:========================================>            (92 + 28) / 120][Stage 118:===================================================> (117 + 3) / 120]                                                                                [Stage 119:==========================>                          (61 + 60) / 121][Stage 119:===============================>                     (71 + 50) / 121][Stage 119:======================================>              (89 + 32) / 121][Stage 119:=============================================>      (107 + 14) / 121][Stage 119:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.134236049 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364618174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:====================================>                (78 + 35) / 113][Stage 120:===========================================>         (92 + 21) / 113][Stage 120:===============================================>    (103 + 10) / 113][Stage 120:===================================================> (110 + 3) / 113]                                                                                [Stage 121:======================================>              (82 + 32) / 114][Stage 121:==========================================>          (91 + 23) / 114][Stage 121:================================================>    (105 + 9) / 114][Stage 121:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.963156794 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=9", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=9,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382065945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (72 + 43) / 115][Stage 122:========================================>            (87 + 28) / 115][Stage 122:=============================================>      (100 + 15) / 115][Stage 122:===================================================> (111 + 4) / 115][Stage 122:====================================================>(113 + 2) / 115]                                                                                [Stage 123:===============================>                     (70 + 46) / 116][Stage 123:========================================>            (88 + 28) / 116][Stage 123:============================================>        (98 + 18) / 116][Stage 123:==================================================>  (111 + 5) / 116][Stage 123:===================================================> (113 + 3) / 116][Stage 123:====================================================>(114 + 2) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.227914623 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363853389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=====================================>               (82 + 33) / 115][Stage 124:===========================================>         (95 + 20) / 115][Stage 124:===================================================> (111 + 4) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:========================================>            (88 + 28) / 116][Stage 125:============================================>       (100 + 16) / 116][Stage 125:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.761782734 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=28", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=28,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395513261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (61 + 59) / 120][Stage 126:===============================>                     (71 + 49) / 120][Stage 126:========================================>            (92 + 28) / 120][Stage 126:==================================================>  (114 + 6) / 120][Stage 126:====================================================>(119 + 1) / 120]                                                                                [Stage 127:==========================>                          (61 + 60) / 121][Stage 127:===============================>                     (72 + 49) / 121][Stage 127:=======================================>             (90 + 31) / 121][Stage 127:=================================================>   (112 + 9) / 121][Stage 127:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.310458748 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=102", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=102,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391476803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (59 + 54) / 113][Stage 128:==============================>                      (66 + 47) / 113][Stage 128:====================================>                (78 + 35) / 113][Stage 128:==============================================>     (100 + 13) / 113][Stage 128:===================================================> (110 + 3) / 113]                                                                                [Stage 129:===========================>                         (59 + 55) / 114][Stage 129:=============================>                       (64 + 50) / 114][Stage 129:=====================================>               (80 + 34) / 114][Stage 129:============================================>        (95 + 19) / 114][Stage 129:==============================================>     (101 + 13) / 114]                                                                                Time elapsed: 3.389096864 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:============================>                        (61 + 52) / 113][Stage 130:==================================>                  (74 + 39) / 113][Stage 130:=========================================>           (89 + 24) / 113][Stage 130:================================================>    (104 + 9) / 113][Stage 130:===================================================> (110 + 3) / 113]                                                                                [Stage 131:=============================>                       (63 + 51) / 114][Stage 131:==================================>                  (75 + 39) / 114][Stage 131:===========================================>         (93 + 21) / 114][Stage 131:==================================================>  (108 + 6) / 114][Stage 131:===================================================> (110 + 4) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.932686467 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333081375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (80 + 35) / 115][Stage 132:========================================>            (87 + 28) / 115][Stage 132:=============================================>       (98 + 17) / 115][Stage 132:==================================================>  (110 + 5) / 115]                                                                                [Stage 133:=====================================>               (83 + 33) / 116][Stage 133:==========================================>          (93 + 23) / 116][Stage 133:=================================================>   (109 + 7) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.738949791 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353752973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=================================>                   (72 + 41) / 113][Stage 134:==========================================>          (90 + 23) / 113][Stage 134:=============================================>       (98 + 15) / 113][Stage 134:=================================================>   (106 + 7) / 113]                                                                                [Stage 135:===================================>                 (77 + 37) / 114][Stage 135:===========================================>         (94 + 20) / 114][Stage 135:================================================>    (105 + 9) / 114][Stage 135:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.793856915 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334353339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (81 + 34) / 115][Stage 136:========================================>            (88 + 27) / 115][Stage 136:===========================================>         (95 + 20) / 115][Stage 136:===================================================> (111 + 4) / 115]                                                                                [Stage 137:=======================================>             (87 + 29) / 116][Stage 137:============================================>       (100 + 16) / 116][Stage 137:====================================================>(114 + 2) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.817251471 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391885365 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 59) / 120][Stage 138:================================>                    (74 + 46) / 120][Stage 138:=======================================>             (90 + 30) / 120][Stage 138:=================================================>   (112 + 8) / 120]                                                                                [Stage 139:===========================>                         (63 + 58) / 121][Stage 139:==================================>                  (78 + 43) / 121][Stage 139:========================================>            (92 + 29) / 121][Stage 139:=================================================>   (112 + 9) / 121][Stage 139:====================================================>(119 + 2) / 121][Stage 139:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.576443461 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338946068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (81 + 34) / 115][Stage 140:============================================>        (97 + 18) / 115][Stage 140:===================================================> (111 + 4) / 115]                                                                                [Stage 141:=======================================>             (86 + 30) / 116][Stage 141:=============================================>       (99 + 17) / 116][Stage 141:===============================================>    (106 + 10) / 116][Stage 141:===================================================> (113 + 3) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.713263007 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41025534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:============================>                        (64 + 56) / 120][Stage 142:=================================>                   (75 + 45) / 120][Stage 142:==========================================>          (97 + 23) / 120][Stage 142:===================================================> (116 + 4) / 120]                                                                                [Stage 143:============================>                        (65 + 56) / 121][Stage 143:=================================>                   (76 + 45) / 121][Stage 143:==========================================>          (97 + 24) / 121][Stage 143:=================================================>   (112 + 9) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.404743078 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=26", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=26,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334104176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:======================================>              (83 + 32) / 115][Stage 144:=========================================>           (91 + 24) / 115][Stage 144:==============================================>     (103 + 12) / 115][Stage 144:==================================================>  (110 + 5) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:=====================================>               (82 + 34) / 116][Stage 145:==========================================>          (94 + 22) / 116][Stage 145:=================================================>   (109 + 7) / 116][Stage 145:===================================================> (113 + 3) / 116][Stage 145:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.522929369 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416130148 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 60) / 120][Stage 146:===========================>                         (62 + 58) / 120][Stage 146:===============================>                     (72 + 48) / 120][Stage 146:=========================================>           (94 + 26) / 120][Stage 146:===================================================> (116 + 4) / 120]                                                                                [Stage 147:============================>                        (65 + 56) / 121][Stage 147:===================================>                 (80 + 41) / 121][Stage 147:=============================================>      (107 + 14) / 121][Stage 147:===================================================> (117 + 4) / 121][Stage 147:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.463040878 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=37", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=37,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334313845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:====================================>                (80 + 35) / 115][Stage 148:=========================================>           (90 + 25) / 115][Stage 148:==================================================>  (109 + 6) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:=====================================>               (81 + 35) / 116][Stage 149:========================================>            (88 + 28) / 116][Stage 149:============================================>        (97 + 19) / 116][Stage 149:==================================================>  (110 + 6) / 116][Stage 149:===================================================> (113 + 3) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.32701173 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33427137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:======================================>              (83 + 32) / 115][Stage 150:========================================>            (87 + 28) / 115][Stage 150:===============================================>    (104 + 11) / 115][Stage 150:===================================================> (112 + 3) / 115]                                                                                [Stage 151:=====================================>               (82 + 34) / 116][Stage 151:===========================================>         (96 + 20) / 116][Stage 151:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.662632466 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:======================================>              (83 + 32) / 115][Stage 152:============================================>        (97 + 18) / 115][Stage 152:=================================================>   (107 + 8) / 115]                                                                                [Stage 153:=======================================>             (87 + 29) / 116][Stage 153:=============================================>       (99 + 17) / 116][Stage 153:================================================>    (107 + 9) / 116][Stage 153:===================================================> (113 + 3) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.692302739 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357295847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===================================>                 (76 + 37) / 113][Stage 154:=========================================>           (89 + 24) / 113][Stage 154:=============================================>       (98 + 15) / 113][Stage 154:==================================================>  (108 + 5) / 113]                                                                                [Stage 155:======================================>              (83 + 31) / 114][Stage 155:===========================================>         (93 + 21) / 114][Stage 155:================================================>    (105 + 9) / 114][Stage 155:====================================================>(112 + 2) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.997599828 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386802052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:================================>                    (69 + 44) / 113][Stage 156:======================================>              (82 + 31) / 113][Stage 156:==================================================>  (107 + 6) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:============================>                        (61 + 53) / 114][Stage 157:===============================>                     (68 + 46) / 114][Stage 157:======================================>              (82 + 32) / 114][Stage 157:==============================================>      (99 + 15) / 114][Stage 157:==================================================>  (108 + 6) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.705663956 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388301352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:===============================>                     (68 + 45) / 113][Stage 158:=======================================>             (84 + 29) / 113][Stage 158:==============================================>     (100 + 13) / 113]                                                                                [Stage 159:===========================>                         (60 + 54) / 114][Stage 159:=================================>                   (71 + 43) / 114][Stage 159:======================================>              (82 + 32) / 114][Stage 159:=============================================>       (97 + 17) / 114][Stage 159:==================================================>  (109 + 5) / 114][Stage 159:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.410282499 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (59 + 54) / 113][Stage 160:==============================>                      (65 + 48) / 113][Stage 160:==========================================>          (91 + 22) / 113][Stage 160:==============================================>     (101 + 12) / 113][Stage 160:====================================================>(111 + 2) / 113]                                                                                [Stage 161:=============================>                       (63 + 51) / 114][Stage 161:==================================>                  (75 + 39) / 114][Stage 161:===========================================>         (94 + 20) / 114][Stage 161:=================================================>   (107 + 7) / 114][Stage 161:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.507866032 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403935298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (61 + 59) / 120][Stage 162:==============================>                      (70 + 50) / 120][Stage 162:=======================================>             (89 + 31) / 120][Stage 162:===================================================> (116 + 4) / 120][Stage 162:====================================================>(119 + 1) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:============================>                        (66 + 55) / 121][Stage 163:=====================================>               (85 + 36) / 121][Stage 163:============================================>       (103 + 18) / 121][Stage 163:==================================================>  (115 + 6) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.548250836 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=7", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=7,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354578719 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (78 + 35) / 113][Stage 164:=========================================>           (88 + 25) / 113][Stage 164:================================================>    (104 + 9) / 113][Stage 164:===================================================> (109 + 4) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:==================================>                  (74 + 40) / 114][Stage 165:======================================>              (83 + 31) / 114][Stage 165:=============================================>       (98 + 16) / 114][Stage 165:==================================================>  (108 + 6) / 114][Stage 165:====================================================>(112 + 2) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.985502156 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402691254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:===============================>                     (71 + 49) / 120][Stage 166:=========================================>           (94 + 26) / 120][Stage 166:=================================================>   (111 + 9) / 120]                                                                                [Stage 167:============================>                        (65 + 56) / 121][Stage 167:===============================>                     (73 + 48) / 121][Stage 167:========================================>            (92 + 29) / 121][Stage 167:==================================================>  (116 + 5) / 121][Stage 167:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.393524775 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=10", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=10,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360072546 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=================================>                   (74 + 44) / 118][Stage 168:====================================>                (81 + 37) / 118][Stage 168:==========================================>          (95 + 23) / 118][Stage 168:===============================================>    (107 + 11) / 118][Stage 168:===================================================> (114 + 4) / 118]                                                                                [Stage 169:================================>                    (74 + 45) / 119][Stage 169:====================================>                (83 + 36) / 119][Stage 169:==========================================>          (96 + 23) / 119][Stage 169:================================================>    (110 + 9) / 119][Stage 169:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.640418029 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=141", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=141,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386301728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==============================>                      (66 + 49) / 115][Stage 170:===================================>                 (78 + 37) / 115][Stage 170:============================================>        (96 + 19) / 115][Stage 170:=================================================>   (107 + 8) / 115][Stage 170:==================================================>  (110 + 5) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:===============================>                     (69 + 47) / 116][Stage 171:=======================================>             (86 + 30) / 116][Stage 171:============================================>        (98 + 18) / 116][Stage 171:=================================================>   (109 + 7) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.539134949 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=198", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=198,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366243211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (70 + 45) / 115][Stage 172:=====================================>               (82 + 33) / 115][Stage 172:=============================================>       (99 + 16) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:==================================>                  (75 + 41) / 116][Stage 173:===========================================>         (96 + 20) / 116][Stage 173:=================================================>   (109 + 7) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.735395241 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356086154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=====================================>               (79 + 34) / 113][Stage 174:===========================================>         (92 + 21) / 113][Stage 174:=================================================>   (105 + 8) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:========================================>            (88 + 26) / 114][Stage 175:===========================================>         (94 + 20) / 114][Stage 175:=================================================>   (107 + 7) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.052886235 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35820213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:==================================>                  (76 + 42) / 118][Stage 176:========================================>            (91 + 27) / 118][Stage 176:==============================================>     (105 + 13) / 118][Stage 176:==================================================>  (113 + 5) / 118]                                                                                [Stage 177:================================>                    (74 + 45) / 119][Stage 177:=====================================>               (84 + 35) / 119][Stage 177:=============================================>      (104 + 15) / 119][Stage 177:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.160743611 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=120", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=120,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382118161 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:==============================>                      (65 + 48) / 113][Stage 178:=========================================>           (88 + 25) / 113][Stage 178:==============================================>      (99 + 14) / 113][Stage 178:===================================================> (109 + 4) / 113]                                                                                [Stage 179:===========================>                         (59 + 55) / 114][Stage 179:================================>                    (69 + 45) / 114][Stage 179:========================================>            (87 + 27) / 114][Stage 179:=============================================>      (100 + 14) / 114][Stage 179:====================================================>(112 + 2) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.653081326 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345987806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (81 + 34) / 115][Stage 180:========================================>            (88 + 27) / 115][Stage 180:================================================>    (106 + 9) / 115][Stage 180:====================================================>(113 + 2) / 115]                                                                                [Stage 181:=======================================>             (86 + 30) / 116][Stage 181:=============================================>      (101 + 15) / 116][Stage 181:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.588018549 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=62", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=62,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398011749 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:==============================>                      (69 + 51) / 120][Stage 182:=========================================>           (94 + 26) / 120][Stage 182:==================================================>  (115 + 5) / 120]                                                                                [Stage 183:============================>                        (65 + 56) / 121][Stage 183:===================================>                 (81 + 40) / 121][Stage 183:========================================>            (93 + 28) / 121][Stage 183:=================================================>   (113 + 8) / 121][Stage 183:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.381272148 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=179", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=179,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.329433897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:======================================>              (84 + 31) / 115][Stage 184:==========================================>          (93 + 22) / 115][Stage 184:==================================================>  (109 + 6) / 115]                                                                                [Stage 185:======================================>              (85 + 31) / 116][Stage 185:=============================================>       (99 + 17) / 116][Stage 185:==================================================>  (111 + 5) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.574837094 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333063406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (82 + 33) / 115][Stage 186:==========================================>          (92 + 23) / 115][Stage 186:=================================================>   (107 + 8) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:=====================================>               (83 + 33) / 116][Stage 187:===========================================>         (95 + 21) / 116][Stage 187:================================================>    (107 + 9) / 116][Stage 187:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.692478869 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357719094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=====================================>               (82 + 33) / 115][Stage 188:============================================>        (96 + 19) / 115][Stage 188:==================================================>  (109 + 6) / 115]                                                                                [Stage 189:======================================>              (84 + 32) / 116][Stage 189:==========================================>          (93 + 23) / 116][Stage 189:================================================>    (107 + 9) / 116][Stage 189:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.594373369 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=======================================>             (85 + 30) / 115][Stage 190:=============================================>       (98 + 17) / 115][Stage 190:===================================================> (111 + 4) / 115]                                                                                [Stage 191:=========================================>           (90 + 26) / 116][Stage 191:=================================================>   (108 + 8) / 116][Stage 191:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.470914703 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=155", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=155,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351157206 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:====================================>                (77 + 36) / 113][Stage 192:=========================================>           (89 + 24) / 113][Stage 192:==============================================>      (99 + 14) / 113][Stage 192:================================================>    (104 + 9) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:====================================>                (79 + 35) / 114][Stage 193:=======================================>             (86 + 28) / 114][Stage 193:==============================================>     (102 + 12) / 114][Stage 193:=================================================>   (107 + 7) / 114][Stage 193:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.988201944 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379048064 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (59 + 54) / 113][Stage 194:===============================>                     (67 + 46) / 113][Stage 194:======================================>              (82 + 31) / 113][Stage 194:===========================================>         (93 + 20) / 113][Stage 194:=================================================>   (106 + 7) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:===========================>                         (60 + 54) / 114][Stage 195:==============================>                      (66 + 48) / 114][Stage 195:======================================>              (82 + 32) / 114][Stage 195:============================================>        (96 + 18) / 114][Stage 195:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.481172731 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=113", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=113,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349853399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==================================>                  (73 + 40) / 113][Stage 196:=======================================>             (84 + 29) / 113][Stage 196:============================================>        (94 + 19) / 113][Stage 196:================================================>    (104 + 9) / 113][Stage 196:===================================================> (109 + 4) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:========================================>            (88 + 26) / 114][Stage 197:=============================================>       (97 + 17) / 114][Stage 197:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.980825416 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427084311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (62 + 58) / 120][Stage 198:================================>                    (73 + 47) / 120][Stage 198:=========================================>           (94 + 26) / 120][Stage 198:==============================================>     (108 + 12) / 120]                                                                                [Stage 199:==========================>                          (61 + 60) / 121][Stage 199:===============================>                     (72 + 49) / 121][Stage 199:==========================================>          (98 + 23) / 121][Stage 199:==================================================>  (115 + 6) / 121][Stage 199:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.494004176 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502271334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=================================>                   (74 + 44) / 118][Stage 200:====================================>                (82 + 36) / 118][Stage 200:=========================================>           (92 + 26) / 118][Stage 200:==============================================>     (105 + 13) / 118][Stage 200:===================================================> (115 + 3) / 118]                                                                                [Stage 201:================================>                    (73 + 46) / 119][Stage 201:=================================>                   (76 + 43) / 119][Stage 201:=======================================>             (89 + 30) / 119][Stage 201:=============================================>      (104 + 15) / 119][Stage 201:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.172178243 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/31 23:35:12 ERROR scheduler.LiveListenerBus: SparkListenerBus has already stopped! Dropping event SparkListenerExecutorMetricsUpdate(12,WrappedArray())
17/05/31 23:35:12 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:47500) dropped. RpcEnv already stopped.
17/05/31 23:35:12 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:47500) dropped. RpcEnv already stopped.

real	10m13.940s
user	11m42.992s
sys	0m48.144s
