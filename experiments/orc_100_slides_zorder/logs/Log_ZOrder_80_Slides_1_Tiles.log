Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 03:16:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:16:48 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:16:48 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:16:49 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 03:16:51 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:17:02 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601031651-0747).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.379112255 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 115) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==========================>                            (56 + 60) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.977216864 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.933753242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===================>                                   (41 + 72) / 113][Stage 2:==========================>                            (54 + 59) / 113][Stage 2:===========================>                           (57 + 56) / 113][Stage 2:==============================>                        (62 + 51) / 113][Stage 2:===============================>                       (65 + 48) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:==========================================>            (87 + 26) / 113][Stage 2:===============================================>      (100 + 13) / 113][Stage 2:======================================================>(111 + 2) / 113]                                                                                [Stage 3:============================>                          (60 + 54) / 114][Stage 3:==============================>                        (63 + 51) / 114][Stage 3:=================================>                     (70 + 44) / 114][Stage 3:====================================>                  (76 + 38) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:===============================================>       (98 + 16) / 114][Stage 3:===================================================>   (107 + 7) / 114]                                                                                Time elapsed: 4.664469252 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=24", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=24,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.712943401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (56 + 57) / 113][Stage 4:===========================>                           (57 + 56) / 113][Stage 4:===============================>                       (64 + 49) / 113][Stage 4:===================================>                   (73 + 40) / 113][Stage 4:========================================>              (83 + 30) / 113][Stage 4:================================================>      (99 + 14) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:=====================================================> (110 + 3) / 113]                                                                                [Stage 5:============================>                          (60 + 54) / 114][Stage 5:=============================>                         (61 + 53) / 114][Stage 5:==================================>                    (72 + 42) / 114][Stage 5:============================================>          (92 + 22) / 114][Stage 5:================================================>     (103 + 11) / 114][Stage 5:====================================================>  (108 + 6) / 114][Stage 5:====================================================>  (109 + 5) / 114][Stage 5:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.688910197 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=180", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=180,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.732127436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (57 + 56) / 113][Stage 6:=============================>                         (60 + 53) / 113][Stage 6:================================>                      (67 + 46) / 113][Stage 6:===================================>                   (72 + 41) / 113][Stage 6:=========================================>             (86 + 27) / 113][Stage 6:===============================================>       (97 + 16) / 113][Stage 6:====================================================>  (107 + 6) / 113]                                                                                [Stage 7:============================>                          (60 + 54) / 114][Stage 7:===============================>                       (65 + 49) / 114][Stage 7:==================================>                    (72 + 42) / 114][Stage 7:=======================================>               (81 + 33) / 114][Stage 7:=============================================>         (94 + 20) / 114][Stage 7:===================================================>   (106 + 8) / 114]                                                                                Time elapsed: 4.052445809 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (58 + 55) / 113][Stage 8:===============================>                       (65 + 48) / 113][Stage 8:====================================>                  (76 + 37) / 113][Stage 8:=========================================>             (85 + 28) / 113][Stage 8:===============================================>       (98 + 15) / 113][Stage 8:=====================================================> (109 + 4) / 113]                                                                                [Stage 9:============================>                          (59 + 55) / 114][Stage 9:================================>                      (67 + 47) / 114][Stage 9:=====================================>                 (77 + 37) / 114][Stage 9:==========================================>            (89 + 25) / 114][Stage 9:==============================================>        (97 + 17) / 114][Stage 9:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.833116123 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528056218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (72 + 46) / 118][Stage 10:=================================>                    (73 + 45) / 118][Stage 10:==================================>                   (76 + 42) / 118][Stage 10:=====================================>                (83 + 35) / 118][Stage 10:=======================================>              (86 + 32) / 118][Stage 10:===============================================>     (106 + 12) / 118][Stage 10:===================================================>  (113 + 5) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:==================================>                   (75 + 44) / 119][Stage 11:=======================================>              (86 + 33) / 119][Stage 11:========================================>             (90 + 29) / 119][Stage 11:============================================>         (97 + 22) / 119][Stage 11:================================================>    (108 + 11) / 119][Stage 11:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.072516018 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.652758777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===================================>                  (75 + 38) / 113][Stage 12:=======================================>              (82 + 31) / 113][Stage 12:============================================>         (93 + 20) / 113][Stage 12:==================================================>   (105 + 8) / 113][Stage 12:====================================================> (109 + 4) / 113][Stage 12:=====================================================>(111 + 2) / 113]                                                                                [Stage 13:=====================================>                (79 + 35) / 114][Stage 13:==========================================>           (89 + 25) / 114][Stage 13:==============================================>      (100 + 14) / 114][Stage 13:===================================================>  (108 + 6) / 114][Stage 13:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.593503908 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.604146526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (58 + 55) / 113][Stage 14:============================>                         (60 + 53) / 113][Stage 14:==================================>                   (73 + 40) / 113][Stage 14:==========================================>           (88 + 25) / 113][Stage 14:================================================>    (103 + 10) / 113][Stage 14:====================================================> (109 + 4) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:=============================>                        (62 + 52) / 114][Stage 15:=================================>                    (70 + 44) / 114][Stage 15:========================================>             (86 + 28) / 114][Stage 15:===============================================>     (103 + 11) / 114][Stage 15:===================================================>  (109 + 5) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.895139583 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:============================>                         (59 + 54) / 113][Stage 16:===============================>                      (65 + 48) / 113][Stage 16:========================================>             (84 + 29) / 113][Stage 16:=================================================>    (104 + 9) / 113][Stage 16:=====================================================>(111 + 2) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:===========================>                          (59 + 55) / 114][Stage 17:===============================>                      (66 + 48) / 114][Stage 17:=====================================>                (80 + 34) / 114][Stage 17:=============================================>        (96 + 18) / 114][Stage 17:===================================================>  (109 + 5) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.629512642 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=36", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=36,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.641067507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (57 + 56) / 113][Stage 18:==============================>                       (63 + 50) / 113][Stage 18:==================================>                   (72 + 41) / 113][Stage 18:==============================================>       (97 + 16) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:==============================>                       (65 + 49) / 114][Stage 19:======================================>               (82 + 32) / 114][Stage 19:==============================================>       (99 + 15) / 114][Stage 19:=================================================>    (105 + 9) / 114][Stage 19:===================================================>  (108 + 6) / 114][Stage 19:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.513724233 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=111", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=111,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.632094867 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:==============================>                       (67 + 53) / 120][Stage 20:=====================================>                (84 + 36) / 120][Stage 20:===============================================>     (108 + 12) / 120][Stage 20:===================================================>  (115 + 5) / 120][Stage 20:=====================================================>(118 + 2) / 120]                                                                                [Stage 21:============================>                         (64 + 57) / 121][Stage 21:=================================>                    (76 + 45) / 121][Stage 21:=============================================>       (103 + 18) / 121][Stage 21:================================================>    (111 + 10) / 121][Stage 21:===================================================>  (116 + 5) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.819454538 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=82", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=82,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456000458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:======================================>               (81 + 34) / 115][Stage 22:=======================================>              (84 + 31) / 115][Stage 22:===============================================>     (103 + 12) / 115][Stage 22:===================================================>  (109 + 6) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:=====================================>                (81 + 35) / 116][Stage 23:========================================>             (88 + 28) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:==================================================>   (109 + 7) / 116][Stage 23:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.155178366 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52027067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===============================>                      (68 + 47) / 115][Stage 24:========================================>             (86 + 29) / 115][Stage 24:===============================================>     (104 + 11) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:===================================>                  (77 + 39) / 116][Stage 25:===========================================>          (94 + 22) / 116][Stage 25:==================================================>   (108 + 8) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.924343828 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521762399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:============================>                         (64 + 56) / 120][Stage 26:=====================================>                (84 + 36) / 120][Stage 26:==================================================>   (112 + 8) / 120][Stage 26:=====================================================>(118 + 2) / 120]                                                                                [Stage 27:============================>                         (64 + 57) / 121][Stage 27:=================================>                    (75 + 46) / 121][Stage 27:=========================================>            (92 + 29) / 121][Stage 27:===============================================>     (109 + 12) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.313674549 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424463388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (81 + 34) / 115][Stage 28:==========================================>           (90 + 25) / 115][Stage 28:================================================>    (105 + 10) / 115]                                                                                [Stage 29:=======================================>              (85 + 31) / 116][Stage 29:===============================================>     (103 + 13) / 116][Stage 29:====================================================> (112 + 4) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.743672215 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=246", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=246,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446839251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=================================>                    (73 + 45) / 118][Stage 30:=====================================>                (83 + 35) / 118][Stage 30:============================================>         (98 + 20) / 118][Stage 30:==================================================>   (110 + 8) / 118][Stage 30:=====================================================>(116 + 2) / 118]                                                                                [Stage 31:=================================>                    (74 + 45) / 119][Stage 31:=======================================>              (88 + 31) / 119][Stage 31:============================================>        (101 + 18) / 119][Stage 31:===================================================>  (113 + 6) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.404273806 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526644711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:=================================>                    (73 + 45) / 118][Stage 32:=======================================>              (86 + 32) / 118][Stage 32:=============================================>       (102 + 16) / 118][Stage 32:====================================================> (114 + 4) / 118][Stage 32:====================================================> (115 + 3) / 118]                                                                                [Stage 33:=================================>                    (74 + 45) / 119][Stage 33:====================================>                 (80 + 39) / 119][Stage 33:============================================>         (98 + 21) / 119][Stage 33:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.318617196 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45088666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (72 + 46) / 118][Stage 34:=====================================>                (81 + 37) / 118][Stage 34:=============================================>       (101 + 17) / 118][Stage 34:====================================================> (115 + 3) / 118]                                                                                [Stage 35:==================================>                   (76 + 43) / 119][Stage 35:======================================>               (84 + 35) / 119][Stage 35:============================================>         (97 + 22) / 119][Stage 35:================================================>    (109 + 10) / 119][Stage 35:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.071125306 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (72 + 46) / 118][Stage 36:=================================>                    (73 + 45) / 118][Stage 36:=======================================>              (87 + 31) / 118][Stage 36:==================================================>   (110 + 8) / 118][Stage 36:=====================================================>(117 + 1) / 118]                                                                                [Stage 37:=================================>                    (73 + 46) / 119][Stage 37:==================================>                   (76 + 43) / 119][Stage 37:===========================================>          (95 + 24) / 119][Stage 37:=================================================>    (110 + 9) / 119]                                                                                Time elapsed: 2.981154264 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429902302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==================================>                   (72 + 41) / 113][Stage 38:=======================================>              (82 + 31) / 113][Stage 38:============================================>         (94 + 19) / 113][Stage 38:===================================================>  (108 + 5) / 113][Stage 38:====================================================> (110 + 3) / 113]                                                                                [Stage 39:======================================>               (82 + 32) / 114][Stage 39:============================================>         (94 + 20) / 114][Stage 39:==================================================>   (107 + 7) / 114][Stage 39:=====================================================>(112 + 2) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.483303047 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50855409 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:==============================>                       (67 + 53) / 120][Stage 40:=====================================>                (83 + 37) / 120][Stage 40:================================================>    (109 + 11) / 120][Stage 40:=====================================================>(118 + 2) / 120]                                                                                [Stage 41:===========================>                          (61 + 60) / 121][Stage 41:=============================>                        (66 + 55) / 121][Stage 41:=====================================>                (83 + 38) / 121][Stage 41:==================================================>   (113 + 8) / 121][Stage 41:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.163846803 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=11", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=11,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458758056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:=================================>                    (74 + 44) / 118][Stage 42:=======================================>              (87 + 31) / 118][Stage 42:================================================>    (108 + 10) / 118][Stage 42:=====================================================>(117 + 1) / 118]                                                                                [Stage 43:==================================>                   (76 + 43) / 119][Stage 43:=======================================>              (87 + 32) / 119][Stage 43:============================================>         (99 + 20) / 119][Stage 43:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.079301667 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=197", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=197,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449580937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==================================>                   (73 + 40) / 113][Stage 44:=========================================>            (86 + 27) / 113][Stage 44:=============================================>        (96 + 17) / 113][Stage 44:==================================================>   (106 + 7) / 113][Stage 44:=====================================================>(112 + 1) / 113]                                                                                [Stage 45:===================================>                  (74 + 40) / 114][Stage 45:======================================>               (82 + 32) / 114][Stage 45:============================================>         (93 + 21) / 114][Stage 45:===============================================>     (102 + 12) / 114][Stage 45:===================================================>  (109 + 5) / 114][Stage 45:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.556243412 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439657532 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=================================>                    (70 + 43) / 113][Stage 46:=======================================>              (83 + 30) / 113][Stage 46:===========================================>          (91 + 22) / 113][Stage 46:==============================================>      (100 + 13) / 113][Stage 46:===================================================>  (108 + 5) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:========================================>             (85 + 29) / 114][Stage 47:============================================>         (93 + 21) / 114][Stage 47:=================================================>    (105 + 9) / 114][Stage 47:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.267918891 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=58", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=58,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485864671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:===========================>                          (62 + 58) / 120][Stage 48:====================================>                 (81 + 39) / 120][Stage 48:============================================>        (100 + 20) / 120][Stage 48:====================================================> (116 + 4) / 120]                                                                                [Stage 49:===========================>                          (61 + 60) / 121][Stage 49:==============================>                       (68 + 53) / 121][Stage 49:=====================================>                (84 + 37) / 121][Stage 49:==========================================>           (95 + 26) / 121][Stage 49:====================================================> (118 + 3) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.255216088 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39991594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:======================================>               (81 + 34) / 115][Stage 50:=========================================>            (89 + 26) / 115][Stage 50:==============================================>       (98 + 17) / 115][Stage 50:==================================================>   (108 + 7) / 115][Stage 50:=====================================================>(113 + 2) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:=====================================>                (81 + 35) / 116][Stage 51:========================================>             (88 + 28) / 116][Stage 51:==============================================>      (101 + 15) / 116][Stage 51:=================================================>    (107 + 9) / 116][Stage 51:====================================================> (112 + 4) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.5764096 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=94", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=94,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42077651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:===================================>                  (77 + 41) / 118][Stage 52:=========================================>            (91 + 27) / 118][Stage 52:================================================>    (107 + 11) / 118][Stage 52:=====================================================>(116 + 2) / 118][Stage 52:=====================================================>(117 + 1) / 118]                                                                                [Stage 53:=================================>                    (73 + 46) / 119][Stage 53:====================================>                 (80 + 39) / 119][Stage 53:==========================================>           (94 + 25) / 119][Stage 53:================================================>    (108 + 11) / 119][Stage 53:=====================================================>(117 + 2) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.387535644 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=155", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=155,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434603101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:==============================>                       (64 + 49) / 113][Stage 54:======================================>               (80 + 33) / 113][Stage 54:===============================================>      (99 + 14) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:==============================>                       (64 + 50) / 114][Stage 55:=================================>                    (71 + 43) / 114][Stage 55:============================================>         (93 + 21) / 114][Stage 55:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.073481032 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=206", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=206,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470167976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:==============================>                       (67 + 53) / 120][Stage 56:========================================>             (89 + 31) / 120][Stage 56:===============================================>     (107 + 13) / 120]                                                                                [Stage 57:===========================>                          (61 + 60) / 121][Stage 57:==============================>                       (69 + 52) / 121][Stage 57:=========================================>            (92 + 29) / 121][Stage 57:================================================>    (110 + 11) / 121][Stage 57:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.080357914 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403299203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (80 + 35) / 115][Stage 58:=======================================>              (85 + 30) / 115][Stage 58:==============================================>       (98 + 17) / 115][Stage 58:==================================================>   (107 + 8) / 115]                                                                                [Stage 59:======================================>               (82 + 34) / 116][Stage 59:=========================================>            (89 + 27) / 116][Stage 59:==============================================>      (102 + 14) / 116][Stage 59:====================================================> (112 + 4) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.923095318 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485767351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:============================>                         (59 + 54) / 113][Stage 60:=================================>                    (70 + 43) / 113][Stage 60:===========================================>          (92 + 21) / 113][Stage 60:=====================================================>(111 + 2) / 113]                                                                                [Stage 61:============================>                         (61 + 53) / 114][Stage 61:=================================>                    (71 + 43) / 114][Stage 61:=========================================>            (88 + 26) / 114][Stage 61:===============================================>     (103 + 11) / 114][Stage 61:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.126704885 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429307899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:====================================>                 (77 + 38) / 115][Stage 62:============================================>         (94 + 21) / 115][Stage 62:===============================================>     (104 + 11) / 115][Stage 62:===================================================>  (110 + 5) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:===================================>                  (77 + 39) / 116][Stage 63:=========================================>            (90 + 26) / 116][Stage 63:=================================================>    (107 + 9) / 116][Stage 63:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.233608193 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43221684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:===============================>                      (66 + 47) / 113][Stage 64:========================================>             (84 + 29) / 113][Stage 64:==============================================>      (100 + 13) / 113][Stage 64:=====================================================>(111 + 2) / 113]                                                                                [Stage 65:============================>                         (60 + 54) / 114][Stage 65:==============================>                       (64 + 50) / 114][Stage 65:====================================>                 (76 + 38) / 114][Stage 65:============================================>         (94 + 20) / 114]                                                                                Time elapsed: 3.018690582 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=243", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=243,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462055626 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:=============================>                        (66 + 54) / 120][Stage 66:====================================>                 (80 + 40) / 120][Stage 66:============================================>         (98 + 22) / 120][Stage 66:===================================================>  (114 + 6) / 120]                                                                                [Stage 67:============================>                         (63 + 58) / 121][Stage 67:================================>                     (72 + 49) / 121][Stage 67:===========================================>          (98 + 23) / 121][Stage 67:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.190720787 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=169", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=169,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395200575 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:=================================>                    (74 + 44) / 118][Stage 68:=====================================>                (82 + 36) / 118][Stage 68:==========================================>           (92 + 26) / 118][Stage 68:================================================>    (107 + 11) / 118][Stage 68:====================================================> (115 + 3) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:==================================>                   (76 + 43) / 119][Stage 69:=====================================>                (82 + 37) / 119][Stage 69:=========================================>            (92 + 27) / 119][Stage 69:================================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.320996571 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=231", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=231,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380405281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (80 + 35) / 115][Stage 70:========================================>             (87 + 28) / 115][Stage 70:==============================================>       (98 + 17) / 115][Stage 70:=====================================================>(113 + 2) / 115]                                                                                [Stage 71:======================================>               (83 + 33) / 116][Stage 71:===========================================>          (93 + 23) / 116][Stage 71:==================================================>   (109 + 7) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.582730393 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=142", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=142,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (82 + 33) / 115][Stage 72:============================================>         (94 + 21) / 115][Stage 72:===================================================>  (110 + 5) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:============================================>         (96 + 20) / 116][Stage 73:====================================================> (112 + 4) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.649376994 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440788939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:=================================>                    (70 + 43) / 113][Stage 74:=======================================>              (83 + 30) / 113][Stage 74:==============================================>      (100 + 13) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:============================>                         (61 + 53) / 114][Stage 75:===================================>                  (74 + 40) / 114][Stage 75:==============================================>       (99 + 15) / 114][Stage 75:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.10915865 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=207", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=207,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538928386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (73 + 45) / 118][Stage 76:==================================>                   (76 + 42) / 118][Stage 76:====================================>                 (80 + 38) / 118][Stage 76:===========================================>          (96 + 22) / 118][Stage 76:=============================================>       (101 + 17) / 118][Stage 76:====================================================> (114 + 4) / 118]                                                                                [Stage 77:=================================>                    (73 + 46) / 119][Stage 77:==================================>                   (76 + 43) / 119][Stage 77:=====================================>                (82 + 37) / 119][Stage 77:============================================>        (100 + 19) / 119][Stage 77:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.494584196 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388555358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===================================>                  (74 + 39) / 113][Stage 78:=========================================>            (86 + 27) / 113][Stage 78:==============================================>       (98 + 15) / 113][Stage 78:===================================================>  (108 + 5) / 113]                                                                                [Stage 79:======================================>               (81 + 33) / 114][Stage 79:============================================>         (94 + 20) / 114][Stage 79:==================================================>   (106 + 8) / 114][Stage 79:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.71875992 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446874962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (60 + 60) / 120][Stage 80:================================>                     (73 + 47) / 120][Stage 80:========================================>             (89 + 31) / 120][Stage 80:====================================================> (116 + 4) / 120]                                                                                [Stage 81:============================>                         (64 + 57) / 121][Stage 81:====================================>                 (82 + 39) / 121][Stage 81:=============================================>       (103 + 18) / 121]                                                                                Time elapsed: 2.813613475 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=247", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=247,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429218827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (61 + 59) / 120][Stage 82:=============================>                        (65 + 55) / 120][Stage 82:=======================================>              (87 + 33) / 120][Stage 82:==============================================>      (106 + 14) / 120]                                                                                [Stage 83:============================>                         (63 + 58) / 121][Stage 83:=================================>                    (76 + 45) / 121][Stage 83:===========================================>          (98 + 23) / 121][Stage 83:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.018342305 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426326863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (69 + 46) / 115][Stage 84:====================================>                 (78 + 37) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:====================================================> (111 + 4) / 115]                                                                                [Stage 85:===============================>                      (68 + 48) / 116][Stage 85:=======================================>              (85 + 31) / 116][Stage 85:==============================================>       (99 + 17) / 116][Stage 85:===================================================>  (111 + 5) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.75708333 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=193", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=193,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397833765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==============================>                       (65 + 50) / 115][Stage 86:====================================>                 (78 + 37) / 115][Stage 86:===========================================>          (93 + 22) / 115][Stage 86:====================================================> (111 + 4) / 115]                                                                                [Stage 87:==================================>                   (74 + 42) / 116][Stage 87:=============================================>        (97 + 19) / 116][Stage 87:===================================================>  (111 + 5) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.681571108 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=126", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=126,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==============================>                       (65 + 50) / 115][Stage 88:====================================>                 (77 + 38) / 115][Stage 88:==========================================>           (91 + 24) / 115][Stage 88:==================================================>   (107 + 8) / 115]                                                                                [Stage 89:=================================>                    (73 + 43) / 116][Stage 89:=========================================>            (90 + 26) / 116][Stage 89:================================================>    (106 + 10) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.753048024 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=190", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=190,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393685792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (74 + 44) / 118][Stage 90:====================================>                 (80 + 38) / 118][Stage 90:=============================================>       (102 + 16) / 118][Stage 90:=====================================================>(116 + 2) / 118]                                                                                [Stage 91:=================================>                    (74 + 45) / 119][Stage 91:======================================>               (84 + 35) / 119][Stage 91:================================================>    (109 + 10) / 119][Stage 91:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.82975314 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=66", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=66,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:=====================================>                (82 + 36) / 118][Stage 92:==========================================>           (93 + 25) / 118][Stage 92:=================================================>    (109 + 9) / 118][Stage 92:=====================================================>(117 + 1) / 118]                                                                                [Stage 93:=================================>                    (74 + 45) / 119][Stage 93:====================================>                 (81 + 38) / 119][Stage 93:============================================>        (101 + 18) / 119][Stage 93:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.849214941 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=145", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=145,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539307176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:============================>                         (60 + 53) / 113][Stage 94:==================================>                   (72 + 41) / 113][Stage 94:===========================================>          (92 + 21) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:============================>                         (60 + 54) / 114][Stage 95:==================================>                   (73 + 41) / 114][Stage 95:=============================================>        (97 + 17) / 114][Stage 95:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.088068706 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420852195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (60 + 60) / 120][Stage 96:====================================>                 (80 + 40) / 120][Stage 96:============================================>         (99 + 21) / 120][Stage 96:===================================================>  (115 + 5) / 120]                                                                                [Stage 97:============================>                         (64 + 57) / 121][Stage 97:==================================>                   (78 + 43) / 121][Stage 97:===========================================>          (97 + 24) / 121][Stage 97:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.907278266 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=192", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=192,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442080454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:==============================>                       (68 + 52) / 120][Stage 98:=========================================>            (92 + 28) / 120][Stage 98:================================================>    (110 + 10) / 120][Stage 98:=====================================================>(119 + 1) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:=============================>                        (66 + 55) / 121][Stage 99:=====================================>                (83 + 38) / 121][Stage 99:================================================>    (110 + 11) / 121][Stage 99:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.148942151 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419005338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:===========================>                         (62 + 58) / 120][Stage 100:===================================>                 (80 + 40) / 120][Stage 100:===========================================>        (100 + 20) / 120][Stage 100:==================================================>  (115 + 5) / 120]                                                                                [Stage 101:============================>                        (64 + 57) / 121][Stage 101:================================>                    (75 + 46) / 121][Stage 101:==========================================>          (96 + 25) / 121][Stage 101:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.061698301 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=80", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=80,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421362476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 60) / 120][Stage 102:===========================>                         (62 + 58) / 120][Stage 102:=================================>                   (76 + 44) / 120][Stage 102:========================================>            (91 + 29) / 120][Stage 102:===================================================> (116 + 4) / 120]                                                                                [Stage 103:============================>                        (64 + 57) / 121][Stage 103:=================================>                   (76 + 45) / 121][Stage 103:===========================================>        (101 + 20) / 121][Stage 103:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 2.937907314 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=51", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=51,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441380806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:===============================>                     (71 + 49) / 120][Stage 104:======================================>              (88 + 32) / 120][Stage 104:=============================================>      (105 + 15) / 120][Stage 104:====================================================>(118 + 2) / 120]                                                                                [Stage 105:===========================>                         (63 + 58) / 121][Stage 105:===============================>                     (72 + 49) / 121][Stage 105:=======================================>             (90 + 31) / 121][Stage 105:==============================================>     (108 + 13) / 121]                                                                                Time elapsed: 3.143062221 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=41", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=41,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385044378 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=================================>                   (71 + 42) / 113][Stage 106:=====================================>               (81 + 32) / 113][Stage 106:============================================>        (95 + 18) / 113][Stage 106:==============================================>     (101 + 12) / 113][Stage 106:===================================================> (110 + 3) / 113]                                                                                [Stage 107:======================================>              (82 + 32) / 114][Stage 107:============================================>        (95 + 19) / 114][Stage 107:==============================================>     (103 + 11) / 114][Stage 107:===================================================> (111 + 3) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.187952172 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=43", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=43,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351285921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (83 + 32) / 115][Stage 108:============================================>        (97 + 18) / 115][Stage 108:=================================================>   (108 + 7) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:==========================================>          (94 + 22) / 116][Stage 109:===============================================>    (105 + 11) / 116][Stage 109:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.829074946 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=44", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=44,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40286955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (74 + 44) / 118][Stage 110:====================================>                (81 + 37) / 118][Stage 110:========================================>            (90 + 28) / 118][Stage 110:==============================================>     (105 + 13) / 118][Stage 110:====================================================>(116 + 2) / 118]                                                                                [Stage 111:=================================>                   (76 + 43) / 119][Stage 111:===================================>                 (80 + 39) / 119][Stage 111:===========================================>        (100 + 19) / 119][Stage 111:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.113199909 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372290938 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===================================>                 (76 + 37) / 113][Stage 112:===========================================>         (92 + 21) / 113][Stage 112:==============================================>     (101 + 12) / 113][Stage 112:===================================================> (110 + 3) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:========================================>            (87 + 27) / 114][Stage 113:============================================>        (95 + 19) / 114][Stage 113:=================================================>   (107 + 7) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.187666204 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=255 AND partitionZIndex<=255", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=255 AND partitionZIndex<=255,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424539452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:============================>                        (64 + 56) / 120][Stage 114:==================================>                  (78 + 42) / 120][Stage 114:===========================================>        (100 + 20) / 120][Stage 114:===================================================> (116 + 4) / 120]                                                                                [Stage 115:============================>                        (65 + 56) / 121][Stage 115:=================================>                   (76 + 45) / 121][Stage 115:============================================>       (103 + 18) / 121][Stage 115:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.024795843 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36753134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (71 + 42) / 113][Stage 116:========================================>            (86 + 27) / 113][Stage 116:==========================================>          (90 + 23) / 113][Stage 116:===============================================>    (103 + 10) / 113][Stage 116:====================================================>(111 + 2) / 113]                                                                                [Stage 117:===================================>                 (77 + 37) / 114][Stage 117:===========================================>         (93 + 21) / 114][Stage 117:==============================================>     (103 + 11) / 114][Stage 117:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.146553176 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=166", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=166,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445478729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 60) / 120][Stage 118:===========================>                         (63 + 57) / 120][Stage 118:===================================>                 (81 + 39) / 120][Stage 118:============================================>       (102 + 18) / 120][Stage 118:===================================================> (116 + 4) / 120]                                                                                [Stage 119:===========================>                         (63 + 58) / 121][Stage 119:================================>                    (75 + 46) / 121][Stage 119:=======================================>             (91 + 30) / 121][Stage 119:==================================================>  (115 + 6) / 121][Stage 119:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.171675837 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354952923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:====================================>                (80 + 35) / 115][Stage 120:=========================================>           (89 + 26) / 115][Stage 120:==============================================>     (102 + 13) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:=====================================>               (83 + 33) / 116][Stage 121:======================================>              (85 + 31) / 116][Stage 121:==============================================>     (104 + 12) / 116][Stage 121:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.554230583 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:====================================>                (80 + 35) / 115][Stage 122:=======================================>             (85 + 30) / 115][Stage 122:===============================================>    (104 + 11) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:=====================================>               (81 + 35) / 116][Stage 123:==========================================>          (93 + 23) / 116][Stage 123:==============================================>     (104 + 12) / 116][Stage 123:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.67106616 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=60", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=60,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4025122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (69 + 46) / 115][Stage 124:===================================>                 (78 + 37) / 115][Stage 124:=============================================>       (99 + 16) / 115][Stage 124:===================================================> (111 + 4) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:====================================>                (79 + 37) / 116][Stage 125:===========================================>         (96 + 20) / 116][Stage 125:==================================================>  (110 + 6) / 116][Stage 125:===================================================> (112 + 4) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.490658102 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335860996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:======================================>              (83 + 32) / 115][Stage 126:==========================================>          (93 + 22) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:=====================================>               (83 + 33) / 116][Stage 127:==========================================>          (92 + 24) / 116][Stage 127:==============================================>     (103 + 13) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.749730079 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (83 + 32) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:=================================================>   (107 + 8) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:=====================================>               (83 + 33) / 116][Stage 129:=========================================>           (91 + 25) / 116][Stage 129:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.60506602 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=160", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=160,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:======================================>              (83 + 32) / 115][Stage 130:==========================================>          (93 + 22) / 115][Stage 130:===============================================>    (105 + 10) / 115][Stage 130:====================================================>(114 + 1) / 115]                                                                                [Stage 131:=====================================>               (82 + 34) / 116][Stage 131:=========================================>           (91 + 25) / 116][Stage 131:===============================================>    (106 + 10) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.605464678 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=85", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=85,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:======================================>              (84 + 31) / 115][Stage 132:===========================================>         (94 + 21) / 115][Stage 132:=================================================>   (107 + 8) / 115]                                                                                [Stage 133:======================================>              (85 + 31) / 116][Stage 133:=========================================>           (90 + 26) / 116][Stage 133:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.5403082 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=250", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=250,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396778873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:==============================>                      (68 + 52) / 120][Stage 134:======================================>              (87 + 33) / 120][Stage 134:==================================================>  (115 + 5) / 120]                                                                                [Stage 135:===========================>                         (63 + 58) / 121][Stage 135:==================================>                  (78 + 43) / 121][Stage 135:=======================================>             (91 + 30) / 121][Stage 135:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 2.89915068 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=136", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=136,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365842058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (72 + 46) / 118][Stage 136:==================================>                  (77 + 41) / 118][Stage 136:========================================>            (91 + 27) / 118][Stage 136:=============================================>      (103 + 15) / 118][Stage 136:=================================================>   (111 + 7) / 118][Stage 136:====================================================>(117 + 1) / 118]                                                                                [Stage 137:================================>                    (73 + 46) / 119][Stage 137:==================================>                  (77 + 42) / 119][Stage 137:=====================================>               (85 + 34) / 119][Stage 137:==========================================>          (96 + 23) / 119][Stage 137:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.359900164 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364445326 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (72 + 46) / 118][Stage 138:===================================>                 (80 + 38) / 118][Stage 138:=========================================>           (93 + 25) / 118][Stage 138:=================================================>   (111 + 7) / 118]                                                                                [Stage 139:=================================>                   (75 + 44) / 119][Stage 139:====================================>                (81 + 38) / 119][Stage 139:========================================>            (91 + 28) / 119][Stage 139:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.850458837 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=124", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=124,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339176976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (81 + 34) / 115][Stage 140:=======================================>             (85 + 30) / 115][Stage 140:============================================>        (96 + 19) / 115][Stage 140:===============================================>    (105 + 10) / 115][Stage 140:==================================================>  (110 + 5) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:==========================================>          (92 + 24) / 116][Stage 141:=============================================>      (101 + 15) / 116][Stage 141:=================================================>   (109 + 7) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.110908071 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=254", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=254,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397298312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (62 + 58) / 120][Stage 142:================================>                    (73 + 47) / 120][Stage 142:========================================>            (91 + 29) / 120][Stage 142:====================================================>(119 + 1) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:============================>                        (65 + 56) / 121][Stage 143:==================================>                  (78 + 43) / 121][Stage 143:===========================================>         (99 + 22) / 121][Stage 143:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.841927237 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:=============================>                       (66 + 54) / 120][Stage 144:=====================================>               (86 + 34) / 120][Stage 144:==================================================>  (114 + 6) / 120]                                                                                [Stage 145:============================>                        (66 + 55) / 121][Stage 145:==================================>                  (79 + 42) / 121][Stage 145:==========================================>          (96 + 25) / 121][Stage 145:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.789339015 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383509746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:============================>                        (61 + 52) / 113][Stage 146:====================================>                (77 + 36) / 113][Stage 146:==========================================>          (90 + 23) / 113][Stage 146:===================================================> (109 + 4) / 113]                                                                                [Stage 147:===========================>                         (60 + 54) / 114][Stage 147:==================================>                  (74 + 40) / 114][Stage 147:==============================================>      (99 + 15) / 114][Stage 147:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.075458901 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364628303 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:=================================>                   (75 + 43) / 118][Stage 148:==================================>                  (77 + 41) / 118][Stage 148:======================================>              (86 + 32) / 118][Stage 148:=============================================>      (103 + 15) / 118][Stage 148:==================================================>  (112 + 6) / 118]                                                                                [Stage 149:================================>                    (74 + 45) / 119][Stage 149:=================================>                   (76 + 43) / 119][Stage 149:====================================>                (83 + 36) / 119][Stage 149:===========================================>         (98 + 21) / 119][Stage 149:==================================================>  (114 + 5) / 119][Stage 149:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.614213265 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:================================>                    (73 + 45) / 118][Stage 150:===================================>                 (78 + 40) / 118][Stage 150:======================================>              (85 + 33) / 118][Stage 150:============================================>        (98 + 20) / 118][Stage 150:===================================================> (114 + 4) / 118]                                                                                [Stage 151:================================>                    (73 + 46) / 119][Stage 151:==================================>                  (78 + 41) / 119][Stage 151:=====================================>               (85 + 34) / 119][Stage 151:===========================================>         (97 + 22) / 119][Stage 151:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.493009863 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=127", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=127,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377281497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:==================================>                  (77 + 41) / 118][Stage 152:============================================>        (99 + 19) / 118][Stage 152:===============================================>    (108 + 10) / 118][Stage 152:====================================================>(117 + 1) / 118]                                                                                [Stage 153:================================>                    (74 + 45) / 119][Stage 153:====================================>                (83 + 36) / 119][Stage 153:===========================================>         (97 + 22) / 119][Stage 153:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 2.941580189 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408320968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:===========================>                         (62 + 58) / 120][Stage 154:===============================>                     (72 + 48) / 120][Stage 154:===========================================>        (100 + 20) / 120][Stage 154:====================================================>(118 + 2) / 120]                                                                                [Stage 155:==========================>                          (61 + 60) / 121][Stage 155:=================================>                   (76 + 45) / 121][Stage 155:==========================================>          (96 + 25) / 121][Stage 155:=================================================>   (112 + 9) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.966539529 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369845178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (73 + 45) / 118][Stage 156:======================================>              (85 + 33) / 118][Stage 156:=============================================>      (103 + 15) / 118][Stage 156:====================================================>(117 + 1) / 118]                                                                                [Stage 157:================================>                    (73 + 46) / 119][Stage 157:==================================>                  (78 + 41) / 119][Stage 157:=============================================>      (103 + 16) / 119][Stage 157:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 2.822171917 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (73 + 45) / 118][Stage 158:====================================>                (82 + 36) / 118][Stage 158:==============================================>     (105 + 13) / 118][Stage 158:===================================================> (115 + 3) / 118]                                                                                [Stage 159:================================>                    (74 + 45) / 119][Stage 159:====================================>                (82 + 37) / 119][Stage 159:=============================================>      (103 + 16) / 119][Stage 159:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.990633554 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337322992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:======================================>              (84 + 31) / 115][Stage 160:===========================================>         (95 + 20) / 115][Stage 160:=================================================>   (107 + 8) / 115][Stage 160:====================================================>(113 + 2) / 115]                                                                                [Stage 161:======================================>              (85 + 31) / 116][Stage 161:============================================>       (100 + 16) / 116][Stage 161:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.667481982 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=249", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=249,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393372293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===============================>                     (69 + 46) / 115][Stage 162:======================================>              (83 + 32) / 115][Stage 162:=============================================>       (98 + 17) / 115][Stage 162:===================================================> (111 + 4) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:====================================>                (80 + 36) / 116][Stage 163:==========================================>          (92 + 24) / 116][Stage 163:=============================================>      (101 + 15) / 116][Stage 163:===================================================> (112 + 4) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.253965455 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338699021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (80 + 35) / 115][Stage 164:=========================================>           (89 + 26) / 115][Stage 164:=============================================>      (101 + 14) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:=====================================>               (83 + 33) / 116][Stage 165:========================================>            (89 + 27) / 116][Stage 165:============================================>        (98 + 18) / 116][Stage 165:================================================>    (107 + 9) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.935042835 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341552341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (81 + 34) / 115][Stage 166:=========================================>           (89 + 26) / 115][Stage 166:================================================>    (106 + 9) / 115][Stage 166:===================================================> (112 + 3) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:=======================================>             (86 + 30) / 116][Stage 167:===========================================>         (96 + 20) / 116][Stage 167:=================================================>   (109 + 7) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.045959179 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=122", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=122,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367096092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (73 + 45) / 118][Stage 168:===================================>                 (79 + 39) / 118][Stage 168:=======================================>             (89 + 29) / 118][Stage 168:============================================>        (99 + 19) / 118][Stage 168:==================================================>  (113 + 5) / 118]                                                                                [Stage 169:================================>                    (74 + 45) / 119][Stage 169:====================================>                (81 + 38) / 119][Stage 169:========================================>            (92 + 27) / 119][Stage 169:==============================================>     (107 + 12) / 119][Stage 169:===================================================> (116 + 3) / 119][Stage 169:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.480170365 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=35", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=35,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351522954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (72 + 41) / 113][Stage 170:======================================>              (83 + 30) / 113][Stage 170:============================================>        (95 + 18) / 113][Stage 170:==============================================>      (99 + 14) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:==================================>                  (74 + 40) / 114][Stage 171:=======================================>             (85 + 29) / 114][Stage 171:===========================================>         (93 + 21) / 114][Stage 171:==============================================>     (103 + 11) / 114][Stage 171:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.197583259 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=228", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=228,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349140115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (80 + 33) / 113][Stage 172:==========================================>          (91 + 22) / 113][Stage 172:==============================================>     (100 + 13) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:===================================>                 (76 + 38) / 114][Stage 173:=======================================>             (86 + 28) / 114][Stage 173:============================================>        (96 + 18) / 114][Stage 173:===============================================>    (104 + 10) / 114][Stage 173:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.849197601 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355516742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==================================>                  (73 + 40) / 113][Stage 174:=======================================>             (84 + 29) / 113][Stage 174:=============================================>       (97 + 16) / 113][Stage 174:=================================================>   (105 + 8) / 113][Stage 174:===================================================> (110 + 3) / 113]                                                                                [Stage 175:==================================>                  (75 + 39) / 114][Stage 175:=======================================>             (86 + 28) / 114][Stage 175:============================================>        (96 + 18) / 114][Stage 175:==============================================>     (101 + 13) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.042783563 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=188", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=188,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (73 + 40) / 113][Stage 176:=======================================>             (84 + 29) / 113][Stage 176:===========================================>         (92 + 21) / 113][Stage 176:==============================================>     (101 + 12) / 113][Stage 176:===================================================> (110 + 3) / 113]                                                                                [Stage 177:=====================================>               (80 + 34) / 114][Stage 177:=========================================>           (89 + 25) / 114][Stage 177:=============================================>       (97 + 17) / 114][Stage 177:=================================================>   (106 + 8) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.178941235 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=92", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=92,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352453997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:====================================>                (77 + 36) / 113][Stage 178:========================================>            (87 + 26) / 113][Stage 178:============================================>        (95 + 18) / 113][Stage 178:==================================================>  (108 + 5) / 113]                                                                                [Stage 179:======================================>              (82 + 32) / 114][Stage 179:==========================================>          (91 + 23) / 114][Stage 179:=============================================>      (100 + 14) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.862402578 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361395763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (72 + 46) / 118][Stage 180:===================================>                 (78 + 40) / 118][Stage 180:=========================================>           (93 + 25) / 118][Stage 180:==================================================>  (113 + 5) / 118]                                                                                [Stage 181:================================>                    (73 + 46) / 119][Stage 181:================================>                    (74 + 45) / 119][Stage 181:=======================================>             (88 + 31) / 119][Stage 181:=================================================>   (112 + 7) / 119][Stage 181:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.835807351 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478345978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (72 + 41) / 113][Stage 182:=========================================>           (89 + 24) / 113][Stage 182:==============================================>     (101 + 12) / 113][Stage 182:===================================================> (109 + 4) / 113]                                                                                [Stage 183:=======================================>             (84 + 30) / 114][Stage 183:===========================================>         (94 + 20) / 114][Stage 183:==============================================>     (103 + 11) / 114][Stage 183:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.833724109 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=148", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=148,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377495543 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (71 + 44) / 115][Stage 184:==========================================>          (92 + 23) / 115][Stage 184:===============================================>    (104 + 11) / 115][Stage 184:===================================================> (112 + 3) / 115][Stage 184:====================================================>(113 + 2) / 115]                                                                                [Stage 185:===================================>                 (77 + 39) / 116][Stage 185:==========================================>          (92 + 24) / 116][Stage 185:=================================================>   (108 + 8) / 116][Stage 185:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.209080488 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=121", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=121,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377220339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:================================>                    (70 + 43) / 113][Stage 186:========================================>            (87 + 26) / 113][Stage 186:=================================================>   (105 + 8) / 113][Stage 186:===================================================> (109 + 4) / 113]                                                                                [Stage 187:===========================>                         (60 + 54) / 114][Stage 187:=================================>                   (73 + 41) / 114][Stage 187:========================================>            (88 + 26) / 114][Stage 187:==============================================>     (101 + 13) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.397443946 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=101", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=101,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361484901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (72 + 46) / 118][Stage 188:=================================>                   (74 + 44) / 118][Stage 188:===================================>                 (79 + 39) / 118][Stage 188:=======================================>             (88 + 30) / 118][Stage 188:==============================================>     (106 + 12) / 118][Stage 188:====================================================>(116 + 2) / 118]                                                                                [Stage 189:=================================>                   (75 + 44) / 119][Stage 189:==================================>                  (77 + 42) / 119][Stage 189:=====================================>               (84 + 35) / 119][Stage 189:========================================>            (92 + 27) / 119][Stage 189:=============================================>      (104 + 15) / 119][Stage 189:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.785664157 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=195", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=195,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38023116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (58 + 55) / 113][Stage 190:=============================>                       (63 + 50) / 113][Stage 190:====================================>                (77 + 36) / 113][Stage 190:==============================================>     (100 + 13) / 113][Stage 190:==================================================>  (108 + 5) / 113]                                                                                [Stage 191:============================>                        (62 + 52) / 114][Stage 191:==================================>                  (74 + 40) / 114][Stage 191:======================================>              (82 + 32) / 114][Stage 191:===============================================>    (104 + 10) / 114][Stage 191:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.176316836 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392950534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (60 + 60) / 120][Stage 192:===========================>                         (63 + 57) / 120][Stage 192:======================================>              (87 + 33) / 120][Stage 192:==============================================>     (107 + 13) / 120][Stage 192:====================================================>(119 + 1) / 120]                                                                                [Stage 193:==========================>                          (61 + 60) / 121][Stage 193:============================>                        (66 + 55) / 121][Stage 193:================================>                    (75 + 46) / 121][Stage 193:===========================================>         (99 + 22) / 121][Stage 193:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.092879185 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336506791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=====================================>               (81 + 34) / 115][Stage 194:========================================>            (87 + 28) / 115][Stage 194:==============================================>     (103 + 12) / 115][Stage 194:====================================================>(114 + 1) / 115]                                                                                [Stage 195:=====================================>               (83 + 33) / 116][Stage 195:========================================>            (89 + 27) / 116][Stage 195:=================================================>   (108 + 8) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.757132432 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349237585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==================================>                  (73 + 40) / 113][Stage 196:======================================>              (82 + 31) / 113][Stage 196:===========================================>         (93 + 20) / 113][Stage 196:==================================================>  (108 + 5) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:===================================>                 (76 + 38) / 114][Stage 197:========================================>            (87 + 27) / 114][Stage 197:==============================================>      (99 + 15) / 114][Stage 197:==================================================>  (108 + 6) / 114][Stage 197:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.046240863 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426023457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=================================>                   (74 + 44) / 118][Stage 198:===================================>                 (80 + 38) / 118][Stage 198:===========================================>         (96 + 22) / 118][Stage 198:================================================>    (109 + 9) / 118]                                                                                [Stage 199:================================>                    (74 + 45) / 119][Stage 199:====================================>                (82 + 37) / 119][Stage 199:============================================>       (101 + 18) / 119]                                                                                Time elapsed: 2.840892663 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=215", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=215,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336070345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=======================================>             (85 + 30) / 115][Stage 200:===========================================>         (94 + 21) / 115][Stage 200:===============================================>    (104 + 11) / 115][Stage 200:====================================================>(113 + 2) / 115]                                                                                [Stage 201:======================================>              (85 + 31) / 116][Stage 201:===========================================>         (95 + 21) / 116][Stage 201:=================================================>   (108 + 8) / 116][Stage 201:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.919482383 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:56976) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:36186) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:59382) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:47036) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:59382) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:36186) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:56976) dropped. RpcEnv already stopped.
17/06/01 03:26:16 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:47036) dropped. RpcEnv already stopped.

real	9m45.214s
user	11m30.568s
sys	0m27.260s
