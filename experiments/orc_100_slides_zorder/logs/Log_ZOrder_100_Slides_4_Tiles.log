Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 05:00:06 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 05:00:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 05:00:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 05:00:21 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 05:00:24 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 05:00:34 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601050023-0757).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.425869258 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======>                                               (16 + 99) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.583191541 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.744305446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (47 + 68) / 115][Stage 2:=========================>                             (54 + 61) / 115][Stage 2:==============================>                        (64 + 51) / 115][Stage 2:================================>                      (67 + 48) / 115][Stage 2:==================================>                    (72 + 43) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:=============================================>         (96 + 19) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:=============================>                         (62 + 54) / 116][Stage 3:===============================>                       (66 + 50) / 116][Stage 3:=================================>                     (71 + 45) / 116][Stage 3:======================================>                (81 + 35) / 116][Stage 3:============================================>          (93 + 23) / 116][Stage 3:==============================================>        (98 + 18) / 116][Stage 3:================================================>     (105 + 11) / 116][Stage 3:===================================================>   (109 + 7) / 116][Stage 3:=====================================================> (113 + 3) / 116][Stage 3:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.636223244 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.72416956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:========================>                              (53 + 67) / 120][Stage 4:===========================>                           (59 + 61) / 120][Stage 4:=============================>                         (64 + 56) / 120][Stage 4:==============================>                        (67 + 53) / 120][Stage 4:=================================>                     (73 + 47) / 120][Stage 4:======================================>                (83 + 37) / 120][Stage 4:=============================================>        (101 + 19) / 120][Stage 4:====================================================>  (115 + 5) / 120]                                                                                [Stage 5:===========================>                           (61 + 60) / 121][Stage 5:=============================>                         (65 + 56) / 121][Stage 5:==================================>                    (76 + 45) / 121][Stage 5:========================================>              (89 + 32) / 121][Stage 5:==============================================>       (105 + 16) / 121][Stage 5:==================================================>    (112 + 9) / 121]                                                                                Time elapsed: 4.517261166 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.642636338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:============================>                          (59 + 54) / 113][Stage 6:================================>                      (67 + 46) / 113][Stage 6:=========================================>             (86 + 27) / 113][Stage 6:=============================================>         (94 + 19) / 113][Stage 6:====================================================>  (107 + 6) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:============================>                          (59 + 55) / 114][Stage 7:===============================>                       (66 + 48) / 114][Stage 7:=========================================>             (86 + 28) / 114][Stage 7:================================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.797399764 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=5", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=5,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (57 + 56) / 113][Stage 8:============================>                          (59 + 54) / 113][Stage 8:=================================>                     (68 + 45) / 113][Stage 8:========================================>              (84 + 29) / 113][Stage 8:==============================================>        (96 + 17) / 113][Stage 8:=====================================================> (109 + 4) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:=============================>                         (61 + 53) / 114][Stage 9:=================================>                     (69 + 45) / 114][Stage 9:======================================>                (80 + 34) / 114][Stage 9:=============================================>         (95 + 19) / 114][Stage 9:=====================================================> (110 + 4) / 114][Stage 9:======================================================>(112 + 2) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.572475639 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.732783055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (60 + 60) / 120][Stage 10:============================>                         (64 + 56) / 120][Stage 10:==================================>                   (77 + 43) / 120][Stage 10:============================================>        (100 + 20) / 120][Stage 10:===================================================>  (114 + 6) / 120]                                                                                [Stage 11:===========================>                          (62 + 59) / 121][Stage 11:=============================>                        (67 + 54) / 121][Stage 11:=======================================>              (89 + 32) / 121][Stage 11:==================================================>   (114 + 7) / 121][Stage 11:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.629469664 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=215", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=215,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571244246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (72 + 46) / 118][Stage 12:=================================>                    (73 + 45) / 118][Stage 12:===================================>                  (78 + 40) / 118][Stage 12:============================================>         (97 + 21) / 118][Stage 12:===============================================>     (105 + 13) / 118][Stage 12:=====================================================>(117 + 1) / 118]                                                                                [Stage 13:=================================>                    (73 + 46) / 119][Stage 13:==================================>                   (76 + 43) / 119][Stage 13:=======================================>              (88 + 31) / 119][Stage 13:==============================================>      (104 + 15) / 119][Stage 13:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.451300296 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=83", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=83,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531986446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:=======================================>              (86 + 32) / 118][Stage 14:============================================>         (97 + 21) / 118][Stage 14:================================================>    (108 + 10) / 118][Stage 14:====================================================> (114 + 4) / 118]                                                                                [Stage 15:=================================>                    (74 + 45) / 119][Stage 15:=====================================>                (83 + 36) / 119][Stage 15:============================================>         (97 + 22) / 119][Stage 15:================================================>    (109 + 10) / 119][Stage 15:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.639273957 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide98"
dataSource: String = /nidan/orc/individualORC/slide98

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.578920435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:============================>                         (63 + 58) / 121][Stage 16:===============================>                      (70 + 51) / 121][Stage 16:=====================================>                (83 + 38) / 121][Stage 16:===============================================>     (108 + 13) / 121][Stage 16:=====================================================>(120 + 1) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:===========================>                          (62 + 60) / 122][Stage 17:================================>                     (74 + 48) / 122][Stage 17:=======================================>              (89 + 33) / 122][Stage 17:===============================================>     (109 + 13) / 122][Stage 17:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.759703961 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494208908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:=================================>                    (74 + 44) / 118][Stage 18:===================================>                  (78 + 40) / 118][Stage 18:========================================>             (88 + 30) / 118][Stage 18:=============================================>       (101 + 17) / 118][Stage 18:==================================================>   (110 + 8) / 118][Stage 18:=====================================================>(116 + 2) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:===================================>                  (78 + 41) / 119][Stage 19:======================================>               (84 + 35) / 119][Stage 19:==========================================>           (93 + 26) / 119][Stage 19:=============================================>       (103 + 16) / 119][Stage 19:====================================================> (116 + 3) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.392856267 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (72 + 46) / 118][Stage 20:=================================>                    (73 + 45) / 118][Stage 20:===================================>                  (77 + 41) / 118][Stage 20:=====================================>                (83 + 35) / 118][Stage 20:=========================================>            (91 + 27) / 118][Stage 20:===============================================>     (106 + 12) / 118][Stage 20:==================================================>   (110 + 8) / 118][Stage 20:====================================================> (115 + 3) / 118]                                                                                [Stage 21:=================================>                    (73 + 46) / 119][Stage 21:=================================>                    (74 + 45) / 119][Stage 21:===================================>                  (79 + 40) / 119][Stage 21:=====================================>                (83 + 36) / 119][Stage 21:=============================================>       (102 + 17) / 119][Stage 21:==================================================>   (111 + 8) / 119][Stage 21:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.41664972 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=65", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=65,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486422467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=====================================>                (79 + 34) / 113][Stage 22:========================================>             (85 + 28) / 113][Stage 22:===========================================>          (92 + 21) / 113][Stage 22:=================================================>    (104 + 9) / 113][Stage 22:====================================================> (109 + 4) / 113]                                                                                [Stage 23:====================================>                 (78 + 36) / 114][Stage 23:=========================================>            (87 + 27) / 114][Stage 23:=============================================>        (95 + 19) / 114][Stage 23:=================================================>    (105 + 9) / 114][Stage 23:=====================================================>(112 + 2) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.669059874 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479148504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==================================>                   (73 + 40) / 113][Stage 24:========================================>             (85 + 28) / 113][Stage 24:=============================================>        (95 + 18) / 113][Stage 24:===============================================>     (102 + 11) / 113][Stage 24:===================================================>  (107 + 6) / 113][Stage 24:====================================================> (110 + 3) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===============================>                      (66 + 48) / 114][Stage 25:======================================>               (82 + 32) / 114][Stage 25:==============================================>       (98 + 16) / 114][Stage 25:=================================================>    (105 + 9) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.447073874 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=60", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=60,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531310038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:============================>                         (60 + 53) / 113][Stage 26:====================================>                 (76 + 37) / 113][Stage 26:===========================================>          (90 + 23) / 113][Stage 26:===============================================>     (101 + 12) / 113][Stage 26:====================================================> (109 + 4) / 113][Stage 26:=====================================================>(111 + 2) / 113]                                                                                [Stage 27:===========================>                          (59 + 55) / 114][Stage 27:===============================>                      (67 + 47) / 114][Stage 27:=====================================>                (79 + 35) / 114][Stage 27:========================================>             (86 + 28) / 114][Stage 27:==============================================>       (98 + 16) / 114][Stage 27:================================================>    (104 + 10) / 114][Stage 27:=====================================================>(112 + 2) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.229704637 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424763296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (81 + 34) / 115][Stage 28:==========================================>           (90 + 25) / 115][Stage 28:===============================================>     (102 + 13) / 115][Stage 28:================================================>    (105 + 10) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:=======================================>              (85 + 31) / 116][Stage 29:==========================================>           (91 + 25) / 116][Stage 29:===============================================>     (104 + 12) / 116][Stage 29:=====================================================>(114 + 2) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.29630635 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=216", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=216,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425838678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:======================================>               (82 + 33) / 115][Stage 30:=========================================>            (89 + 26) / 115][Stage 30:===============================================>     (103 + 12) / 115][Stage 30:====================================================> (111 + 4) / 115][Stage 30:=====================================================>(113 + 2) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:======================================>               (82 + 34) / 116][Stage 31:==========================================>           (92 + 24) / 116][Stage 31:===============================================>     (105 + 11) / 116][Stage 31:===================================================>  (111 + 5) / 116][Stage 31:====================================================> (112 + 4) / 116][Stage 31:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.500571264 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413574552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (82 + 33) / 115][Stage 32:==========================================>           (90 + 25) / 115][Stage 32:==============================================>      (101 + 14) / 115][Stage 32:====================================================> (111 + 4) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:=======================================>              (84 + 32) / 116][Stage 33:==============================================>       (99 + 17) / 116][Stage 33:====================================================> (112 + 4) / 116][Stage 33:=====================================================>(114 + 2) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.520863209 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441731391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:====================================>                 (76 + 37) / 113][Stage 34:==========================================>           (88 + 25) / 113][Stage 34:=============================================>        (95 + 18) / 113][Stage 34:================================================>    (103 + 10) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:===================================>                  (74 + 40) / 114][Stage 35:========================================>             (85 + 29) / 114][Stage 35:===========================================>          (92 + 22) / 114][Stage 35:=================================================>    (105 + 9) / 114][Stage 35:==================================================>   (107 + 7) / 114][Stage 35:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.229245362 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=213", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=213,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505784452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:============================>                         (63 + 57) / 120][Stage 36:=====================================>                (84 + 36) / 120][Stage 36:============================================>        (100 + 20) / 120][Stage 36:================================================>    (110 + 10) / 120][Stage 36:====================================================> (117 + 3) / 120]                                                                                [Stage 37:===========================>                          (62 + 59) / 121][Stage 37:===============================>                      (71 + 50) / 121][Stage 37:==========================================>           (96 + 25) / 121][Stage 37:===================================================>  (115 + 6) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.942583814 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=197", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=197,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459113104 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (70 + 45) / 115][Stage 38:=======================================>              (84 + 31) / 115][Stage 38:==============================================>       (99 + 16) / 115][Stage 38:==================================================>   (107 + 8) / 115][Stage 38:===================================================>  (109 + 6) / 115][Stage 38:===================================================>  (110 + 5) / 115]                                                                                [Stage 39:===================================>                  (77 + 39) / 116][Stage 39:=========================================>            (89 + 27) / 116][Stage 39:==============================================>      (102 + 14) / 116][Stage 39:===================================================>  (110 + 6) / 116][Stage 39:====================================================> (112 + 4) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.825102415 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=234", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=234,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503919374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (58 + 55) / 113][Stage 40:============================>                         (60 + 53) / 113][Stage 40:===================================>                  (74 + 39) / 113][Stage 40:===========================================>          (90 + 23) / 113][Stage 40:================================================>    (103 + 10) / 113][Stage 40:====================================================> (110 + 3) / 113]                                                                                [Stage 41:=============================>                        (62 + 52) / 114][Stage 41:==================================>                   (72 + 42) / 114][Stage 41:==========================================>           (90 + 24) / 114][Stage 41:==================================================>   (106 + 8) / 114][Stage 41:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.621071481 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51061856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:============================>                         (59 + 54) / 113][Stage 42:============================>                         (60 + 53) / 113][Stage 42:===================================>                  (75 + 38) / 113][Stage 42:=============================================>        (96 + 17) / 113][Stage 42:===================================================>  (107 + 6) / 113]                                                                                [Stage 43:===========================>                          (59 + 55) / 114][Stage 43:=============================>                        (62 + 52) / 114][Stage 43:==================================>                   (73 + 41) / 114][Stage 43:===========================================>          (92 + 22) / 114][Stage 43:===============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.202928371 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=245", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=245,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50898146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:============================>                         (59 + 54) / 113][Stage 44:===============================>                      (65 + 48) / 113][Stage 44:========================================>             (84 + 29) / 113][Stage 44:==============================================>       (98 + 15) / 113][Stage 44:====================================================> (110 + 3) / 113]                                                                                [Stage 45:=============================>                        (63 + 51) / 114][Stage 45:==================================>                   (73 + 41) / 114][Stage 45:=======================================>              (84 + 30) / 114][Stage 45:==============================================>      (101 + 13) / 114][Stage 45:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.433841828 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:>                                                       (0 + 0) / 113][Stage 46:===========================>                          (58 + 55) / 113][Stage 46:============================>                         (60 + 53) / 113][Stage 46:====================================>                 (77 + 36) / 113][Stage 46:===========================================>          (90 + 23) / 113][Stage 46:==================================================>   (106 + 7) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:============================>                         (60 + 54) / 114][Stage 47:=================================>                    (71 + 43) / 114][Stage 47:==========================================>           (90 + 24) / 114][Stage 47:============================================>         (94 + 20) / 114][Stage 47:===================================================>  (108 + 6) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.754836463 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.586577533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (58 + 55) / 113][Stage 48:===============================>                      (65 + 48) / 113][Stage 48:========================================>             (85 + 28) / 113][Stage 48:===============================================>     (102 + 11) / 113][Stage 48:====================================================> (109 + 4) / 113]                                                                                [Stage 49:===========================>                          (59 + 55) / 114][Stage 49:==============================>                       (64 + 50) / 114][Stage 49:======================================>               (81 + 33) / 114][Stage 49:===============================================>     (103 + 11) / 114][Stage 49:====================================================> (111 + 3) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.433648132 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485684071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===============================>                      (67 + 48) / 115][Stage 50:=====================================>                (79 + 36) / 115][Stage 50:=========================================>            (89 + 26) / 115][Stage 50:=============================================>        (96 + 19) / 115][Stage 50:===================================================>  (109 + 6) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:================================>                     (69 + 47) / 116][Stage 51:===================================>                  (76 + 40) / 116][Stage 51:========================================>             (88 + 28) / 116][Stage 51:================================================>    (106 + 10) / 116][Stage 51:===================================================>  (110 + 6) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.471976547 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=57", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=57,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456932154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:==================================>                   (72 + 41) / 113][Stage 52:==============================================>       (97 + 16) / 113][Stage 52:===================================================>  (107 + 6) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:=================================>                    (70 + 44) / 114][Stage 53:============================================>         (93 + 21) / 114][Stage 53:=============================================>        (96 + 18) / 114]                                                                                Time elapsed: 3.279265135 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443146186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:============================>                         (60 + 53) / 113][Stage 54:=================================>                    (70 + 43) / 113][Stage 54:============================================>         (93 + 20) / 113][Stage 54:====================================================> (110 + 3) / 113]                                                                                [Stage 55:===========================>                          (59 + 55) / 114][Stage 55:=============================>                        (62 + 52) / 114][Stage 55:===================================>                  (74 + 40) / 114][Stage 55:==============================================>       (98 + 16) / 114][Stage 55:====================================================> (111 + 3) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.413857474 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=95", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=95,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491987739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (58 + 55) / 113][Stage 56:=============================>                        (62 + 51) / 113][Stage 56:===================================>                  (75 + 38) / 113][Stage 56:==========================================>           (89 + 24) / 113][Stage 56:===============================================>     (101 + 12) / 113][Stage 56:====================================================> (109 + 4) / 113]                                                                                [Stage 57:===========================>                          (58 + 56) / 114][Stage 57:================================>                     (68 + 46) / 114][Stage 57:========================================>             (86 + 28) / 114][Stage 57:===============================================>     (103 + 11) / 114][Stage 57:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.586815878 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434157903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (69 + 46) / 115][Stage 58:====================================>                 (78 + 37) / 115][Stage 58:===========================================>          (92 + 23) / 115][Stage 58:===============================================>     (103 + 12) / 115][Stage 58:====================================================> (111 + 4) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:==================================>                   (75 + 41) / 116][Stage 59:========================================>             (86 + 30) / 116][Stage 59:==============================================>       (99 + 17) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:====================================================> (113 + 3) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.7840131 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494458625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==============================>                       (65 + 50) / 115][Stage 60:====================================>                 (78 + 37) / 115][Stage 60:===========================================>          (93 + 22) / 115][Stage 60:================================================>    (105 + 10) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:====================================>                 (79 + 37) / 116][Stage 61:==========================================>           (91 + 25) / 116][Stage 61:===============================================>     (103 + 13) / 116][Stage 61:=====================================================>(114 + 2) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.148633214 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420057537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:=================================>                    (74 + 44) / 118][Stage 62:=========================================>            (91 + 27) / 118][Stage 62:================================================>    (107 + 11) / 118][Stage 62:====================================================> (115 + 3) / 118]                                                                                [Stage 63:=================================>                    (73 + 46) / 119][Stage 63:=================================>                    (74 + 45) / 119][Stage 63:=========================================>            (91 + 28) / 119][Stage 63:===============================================>     (107 + 12) / 119][Stage 63:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.125068148 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=69", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=69,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445587555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (58 + 55) / 113][Stage 64:==================================>                   (72 + 41) / 113][Stage 64:============================================>         (93 + 20) / 113][Stage 64:================================================>    (103 + 10) / 113][Stage 64:=====================================================>(111 + 2) / 113]                                                                                [Stage 65:============================>                         (61 + 53) / 114][Stage 65:====================================>                 (77 + 37) / 114][Stage 65:=============================================>        (95 + 19) / 114][Stage 65:=================================================>    (105 + 9) / 114][Stage 65:=====================================================>(112 + 2) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.867839652 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=82", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=82,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451416221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:===========================>                          (62 + 58) / 120][Stage 66:==================================>                   (76 + 44) / 120][Stage 66:=========================================>            (93 + 27) / 120][Stage 66:=================================================>    (111 + 9) / 120][Stage 66:=====================================================>(119 + 1) / 120]                                                                                [Stage 67:===========================>                          (61 + 60) / 121][Stage 67:==============================>                       (69 + 52) / 121][Stage 67:=========================================>            (92 + 29) / 121][Stage 67:================================================>    (111 + 10) / 121][Stage 67:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.60608975 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483854865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (58 + 55) / 113][Stage 68:=============================>                        (62 + 51) / 113][Stage 68:=================================>                    (71 + 42) / 113][Stage 68:============================================>         (93 + 20) / 113][Stage 68:====================================================> (109 + 4) / 113]                                                                                [Stage 69:============================>                         (60 + 54) / 114][Stage 69:===============================>                      (66 + 48) / 114][Stage 69:=======================================>              (84 + 30) / 114][Stage 69:==============================================>      (101 + 13) / 114][Stage 69:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.342950866 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423266325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (58 + 55) / 113][Stage 70:=============================>                        (62 + 51) / 113][Stage 70:=======================================>              (82 + 31) / 113][Stage 70:===============================================>     (101 + 12) / 113][Stage 70:====================================================> (110 + 3) / 113]                                                                                [Stage 71:===========================>                          (59 + 55) / 114][Stage 71:============================>                         (61 + 53) / 114][Stage 71:=====================================>                (79 + 35) / 114][Stage 71:==============================================>      (100 + 14) / 114][Stage 71:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.257000618 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402974172 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (72 + 46) / 118][Stage 72:===================================>                  (78 + 40) / 118][Stage 72:=========================================>            (91 + 27) / 118][Stage 72:==================================================>   (110 + 8) / 118][Stage 72:=====================================================>(116 + 2) / 118][Stage 72:=====================================================>(117 + 1) / 118]                                                                                [Stage 73:==================================>                   (75 + 44) / 119][Stage 73:====================================>                 (80 + 39) / 119][Stage 73:============================================>         (99 + 20) / 119][Stage 73:==================================================>   (112 + 7) / 119][Stage 73:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.5683278 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:=====================================>                (83 + 35) / 118][Stage 74:=============================================>       (102 + 16) / 118][Stage 74:====================================================> (114 + 4) / 118]                                                                                [Stage 75:==================================>                   (76 + 43) / 119][Stage 75:======================================>               (84 + 35) / 119][Stage 75:==============================================>      (104 + 15) / 119][Stage 75:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.133123375 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide98"
dataSource: String = /nidan/orc/individualORC/slide98

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458439213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==========================>                           (60 + 61) / 121][Stage 76:===========================>                          (62 + 59) / 121][Stage 76:================================>                     (72 + 49) / 121][Stage 76:========================================>             (91 + 30) / 121][Stage 76:===============================================>     (109 + 12) / 121][Stage 76:====================================================> (117 + 4) / 121]                                                                                [Stage 77:============================>                         (65 + 57) / 122][Stage 77:=================================>                    (75 + 47) / 122][Stage 77:==========================================>           (95 + 27) / 122][Stage 77:==================================================>   (115 + 7) / 122][Stage 77:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.160196308 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=152", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=152,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389124787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:====================================>                 (76 + 37) / 113][Stage 78:=========================================>            (87 + 26) / 113][Stage 78:===========================================>          (90 + 23) / 113][Stage 78:==================================================>   (105 + 8) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:===================================>                  (75 + 39) / 114][Stage 79:========================================>             (86 + 28) / 114][Stage 79:=============================================>        (97 + 17) / 114][Stage 79:==================================================>   (107 + 7) / 114][Stage 79:=====================================================>(112 + 2) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.31287252 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444018926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:============================>                         (64 + 56) / 120][Stage 80:==================================>                   (77 + 43) / 120][Stage 80:==========================================>           (95 + 25) / 120][Stage 80:==================================================>   (112 + 8) / 120][Stage 80:=====================================================>(119 + 1) / 120]                                                                                [Stage 81:===========================>                          (61 + 60) / 121][Stage 81:===============================>                      (70 + 51) / 121][Stage 81:========================================>             (90 + 31) / 121][Stage 81:================================================>    (110 + 11) / 121][Stage 81:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.744226889 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443763848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (60 + 60) / 120][Stage 82:============================>                         (63 + 57) / 120][Stage 82:====================================>                 (80 + 40) / 120][Stage 82:===============================================>     (107 + 13) / 120][Stage 82:=====================================================>(118 + 2) / 120]                                                                                [Stage 83:===========================>                          (61 + 60) / 121][Stage 83:===============================>                      (70 + 51) / 121][Stage 83:=======================================>              (88 + 33) / 121][Stage 83:================================================>    (111 + 10) / 121][Stage 83:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.18254349 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:==============================>                       (68 + 52) / 120][Stage 84:==========================================>           (95 + 25) / 120][Stage 84:==================================================>   (113 + 7) / 120]                                                                                [Stage 85:============================>                         (63 + 58) / 121][Stage 85:===============================>                      (71 + 50) / 121][Stage 85:=========================================>            (94 + 27) / 121][Stage 85:================================================>    (110 + 11) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.461835834 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=102", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=102,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366315936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (82 + 33) / 115][Stage 86:=========================================>            (89 + 26) / 115][Stage 86:==================================================>   (107 + 8) / 115][Stage 86:====================================================> (112 + 3) / 115]                                                                                [Stage 87:=======================================>              (84 + 32) / 116][Stage 87:========================================>             (88 + 28) / 116][Stage 87:==================================================>   (108 + 8) / 116][Stage 87:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.650405896 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=92", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=92,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407761766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:================================>                     (69 + 46) / 115][Stage 88:====================================>                 (77 + 38) / 115][Stage 88:===========================================>          (93 + 22) / 115][Stage 88:===================================================>  (109 + 6) / 115][Stage 88:=====================================================>(113 + 2) / 115]                                                                                [Stage 89:==================================>                   (74 + 42) / 116][Stage 89:============================================>         (96 + 20) / 116][Stage 89:===============================================>     (105 + 11) / 116][Stage 89:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.109348707 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=222", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=222,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===============================>                      (68 + 47) / 115][Stage 90:===================================>                  (76 + 39) / 115][Stage 90:===============================================>     (103 + 12) / 115][Stage 90:==================================================>   (108 + 7) / 115][Stage 90:=====================================================>(114 + 1) / 115]                                                                                [Stage 91:=================================>                    (71 + 45) / 116][Stage 91:=======================================>              (84 + 32) / 116][Stage 91:=============================================>        (98 + 18) / 116][Stage 91:===============================================>     (105 + 11) / 116][Stage 91:==================================================>   (109 + 7) / 116][Stage 91:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.458843723 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=243", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=243,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413180872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==================================>                   (73 + 42) / 115][Stage 92:=======================================>              (85 + 30) / 115][Stage 92:==============================================>      (101 + 14) / 115][Stage 92:==================================================>   (107 + 8) / 115][Stage 92:===================================================>  (109 + 6) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:=================================>                    (73 + 43) / 116][Stage 93:========================================>             (88 + 28) / 116][Stage 93:===============================================>     (104 + 12) / 116][Stage 93:===================================================>  (111 + 5) / 116][Stage 93:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.428061372 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=111", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=111,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425755343 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (60 + 60) / 120][Stage 94:================================>                     (72 + 48) / 120][Stage 94:=========================================>            (92 + 28) / 120][Stage 94:===============================================>     (108 + 12) / 120]                                                                                [Stage 95:============================>                         (63 + 58) / 121][Stage 95:===============================>                      (71 + 50) / 121][Stage 95:=======================================>              (88 + 33) / 121][Stage 95:===============================================>     (109 + 12) / 121][Stage 95:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.38255417 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425924304 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (58 + 55) / 113][Stage 96:==================================>                   (72 + 41) / 113][Stage 96:============================================>         (94 + 19) / 113][Stage 96:====================================================> (109 + 4) / 113]                                                                                [Stage 97:============================>                         (61 + 53) / 114][Stage 97:=================================>                    (71 + 43) / 114][Stage 97:============================================>         (93 + 21) / 114][Stage 97:====================================================> (111 + 3) / 114][Stage 97:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.292873636 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427157746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:==============================>                       (68 + 52) / 120][Stage 98:=======================================>              (87 + 33) / 120][Stage 98:===============================================>     (107 + 13) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:=================================>                    (74 + 47) / 121][Stage 99:======================================>               (87 + 34) / 121][Stage 99:=================================================>    (112 + 9) / 121][Stage 99:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.46370283 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=42", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=42,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:===========================>                         (63 + 57) / 120][Stage 100:==================================>                  (77 + 43) / 120][Stage 100:==========================================>          (97 + 23) / 120][Stage 100:=================================================>   (112 + 8) / 120]                                                                                [Stage 101:============================>                        (64 + 57) / 121][Stage 101:================================>                    (74 + 47) / 121][Stage 101:==========================================>          (97 + 24) / 121][Stage 101:==================================================>  (116 + 5) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.738141718 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368703287 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:======================================>              (83 + 32) / 115][Stage 102:==========================================>          (93 + 22) / 115][Stage 102:==============================================>     (102 + 13) / 115][Stage 102:===================================================> (111 + 4) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:=====================================>               (82 + 34) / 116][Stage 103:========================================>            (88 + 28) / 116][Stage 103:=============================================>       (99 + 17) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.162950274 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408995737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===============================>                     (68 + 47) / 115][Stage 104:======================================>              (84 + 31) / 115][Stage 104:===============================================>    (105 + 10) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:===============================>                     (69 + 47) / 116][Stage 105:======================================>              (84 + 32) / 116][Stage 105:============================================>        (97 + 19) / 116][Stage 105:=================================================>   (109 + 7) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.803731561 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=199", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=199,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38412666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=====================================>               (81 + 32) / 113][Stage 106:==========================================>          (91 + 22) / 113][Stage 106:===============================================>    (103 + 10) / 113][Stage 106:====================================================>(111 + 2) / 113]                                                                                [Stage 107:==================================>                  (74 + 40) / 114][Stage 107:========================================>            (87 + 27) / 114][Stage 107:==============================================>     (103 + 11) / 114][Stage 107:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.767371642 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=252", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=252,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380351698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (72 + 46) / 118][Stage 108:=================================>                   (74 + 44) / 118][Stage 108:======================================>              (85 + 33) / 118][Stage 108:=======================================>             (89 + 29) / 118][Stage 108:============================================>       (101 + 17) / 118][Stage 108:==================================================>  (113 + 5) / 118]                                                                                [Stage 109:================================>                    (73 + 46) / 119][Stage 109:==================================>                  (77 + 42) / 119][Stage 109:====================================>                (81 + 38) / 119][Stage 109:==========================================>          (95 + 24) / 119][Stage 109:==============================================>     (106 + 13) / 119][Stage 109:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.846591262 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400830735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=============================>                       (62 + 51) / 113][Stage 110:===============================>                     (68 + 45) / 113][Stage 110:=======================================>             (84 + 29) / 113][Stage 110:==============================================>     (102 + 11) / 113]                                                                                [Stage 111:===========================>                         (60 + 54) / 114][Stage 111:=================================>                   (71 + 43) / 114][Stage 111:===========================================>         (94 + 20) / 114][Stage 111:===================================================> (110 + 4) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.304756515 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=28", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=28,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (58 + 55) / 113][Stage 112:============================>                        (61 + 52) / 113][Stage 112:====================================>                (78 + 35) / 113][Stage 112:==============================================>      (99 + 14) / 113][Stage 112:===================================================> (110 + 3) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:============================>                        (61 + 53) / 114][Stage 113:===============================>                     (68 + 46) / 114][Stage 113:========================================>            (88 + 26) / 114][Stage 113:=================================================>   (107 + 7) / 114][Stage 113:====================================================>(112 + 2) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.7315822 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420791392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (59 + 54) / 113][Stage 114:==================================>                  (74 + 39) / 113][Stage 114:=========================================>           (89 + 24) / 113][Stage 114:==================================================>  (107 + 6) / 113]                                                                                [Stage 115:===========================>                         (60 + 54) / 114][Stage 115:================================>                    (69 + 45) / 114][Stage 115:=======================================>             (84 + 30) / 114][Stage 115:=================================================>   (107 + 7) / 114][Stage 115:===================================================> (111 + 3) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.430119269 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=141", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=141,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417250851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (62 + 58) / 120][Stage 116:=================================>                   (75 + 45) / 120][Stage 116:===========================================>         (98 + 22) / 120][Stage 116:==================================================>  (115 + 5) / 120][Stage 116:====================================================>(119 + 1) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:============================>                        (66 + 55) / 121][Stage 117:==================================>                  (79 + 42) / 121][Stage 117:===========================================>        (102 + 19) / 121][Stage 117:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.295471818 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=15", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=15,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368622996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (71 + 42) / 113][Stage 118:====================================>                (78 + 35) / 113][Stage 118:===========================================>         (92 + 21) / 113][Stage 118:==============================================>     (100 + 13) / 113][Stage 118:===================================================> (110 + 3) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===================================>                 (76 + 38) / 114][Stage 119:=======================================>             (85 + 29) / 114][Stage 119:===========================================>         (93 + 21) / 114][Stage 119:==============================================>     (101 + 13) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.9101564 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=31", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=31,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:================================>                    (70 + 43) / 113][Stage 120:=====================================>               (79 + 34) / 113][Stage 120:===========================================>         (92 + 21) / 113][Stage 120:=================================================>   (105 + 8) / 113]                                                                                [Stage 121:=====================================>               (80 + 34) / 114][Stage 121:=========================================>           (89 + 25) / 114][Stage 121:==============================================>      (99 + 15) / 114][Stage 121:=================================================>   (107 + 7) / 114][Stage 121:==================================================>  (109 + 5) / 114][Stage 121:====================================================>(112 + 2) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.493402325 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=162", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=162,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39737292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:==================================>                  (76 + 42) / 118][Stage 122:=========================================>           (92 + 26) / 118][Stage 122:===============================================>    (107 + 11) / 118][Stage 122:====================================================>(117 + 1) / 118]                                                                                [Stage 123:================================>                    (74 + 45) / 119][Stage 123:=======================================>             (88 + 31) / 119][Stage 123:==========================================>          (96 + 23) / 119][Stage 123:=============================================>      (105 + 14) / 119][Stage 123:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.528920231 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (73 + 45) / 118][Stage 124:======================================>              (85 + 33) / 118][Stage 124:============================================>       (101 + 17) / 118][Stage 124:==================================================>  (113 + 5) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:===================================>                 (79 + 40) / 119][Stage 125:========================================>            (91 + 28) / 119][Stage 125:=============================================>      (105 + 14) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.248040049 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392658219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=================================>                   (73 + 42) / 115][Stage 126:========================================>            (88 + 27) / 115][Stage 126:=================================================>   (107 + 8) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:================================>                    (72 + 44) / 116][Stage 127:========================================>            (88 + 28) / 116][Stage 127:==============================================>     (103 + 13) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.966811448 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=79", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=79,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423353584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:===========================>                         (63 + 57) / 120][Stage 128:==================================>                  (77 + 43) / 120][Stage 128:============================================>       (102 + 18) / 120][Stage 128:====================================================>(119 + 1) / 120]                                                                                [Stage 129:===========================>                         (62 + 59) / 121][Stage 129:================================>                    (74 + 47) / 121][Stage 129:==========================================>         (100 + 21) / 121][Stage 129:====================================================>(119 + 2) / 121][Stage 129:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.278701853 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=43", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=43,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362756859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=================================>                   (71 + 42) / 113][Stage 130:=======================================>             (85 + 28) / 113][Stage 130:==========================================>          (91 + 22) / 113][Stage 130:==================================================>  (107 + 6) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:=======================================>             (84 + 30) / 114][Stage 131:============================================>        (96 + 18) / 114][Stage 131:================================================>    (105 + 9) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.941909653 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347764148 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (80 + 35) / 115][Stage 132:========================================>            (87 + 28) / 115][Stage 132:===========================================>         (95 + 20) / 115][Stage 132:================================================>    (106 + 9) / 115][Stage 132:==================================================>  (110 + 5) / 115]                                                                                [Stage 133:=======================================>             (86 + 30) / 116][Stage 133:============================================>        (98 + 18) / 116][Stage 133:====================================================>(114 + 2) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.986753368 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=53", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=53,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427422131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==================================>                  (73 + 40) / 113][Stage 134:=====================================>               (80 + 33) / 113][Stage 134:==========================================>          (91 + 22) / 113][Stage 134:==============================================>     (100 + 13) / 113]                                                                                [Stage 135:===================================>                 (76 + 38) / 114][Stage 135:=======================================>             (86 + 28) / 114][Stage 135:==========================================>          (92 + 22) / 114][Stage 135:==============================================>     (102 + 12) / 114][Stage 135:==================================================>  (108 + 6) / 114][Stage 135:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.740984599 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382939858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=============================>                       (65 + 50) / 115][Stage 136:====================================>                (80 + 35) / 115][Stage 136:===========================================>         (94 + 21) / 115][Stage 136:================================================>    (106 + 9) / 115][Stage 136:===================================================> (111 + 4) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:===================================>                 (77 + 39) / 116][Stage 137:==========================================>          (93 + 23) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:=================================================>   (109 + 7) / 116][Stage 137:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.375795711 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369564189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (72 + 46) / 118][Stage 138:==================================>                  (77 + 41) / 118][Stage 138:========================================>            (90 + 28) / 118][Stage 138:================================================>    (109 + 9) / 118]                                                                                [Stage 139:================================>                    (74 + 45) / 119][Stage 139:=====================================>               (85 + 34) / 119][Stage 139:============================================>       (101 + 18) / 119][Stage 139:==================================================>  (114 + 5) / 119][Stage 139:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.253207105 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39604277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:============================>                        (60 + 53) / 113][Stage 140:================================>                    (70 + 43) / 113][Stage 140:======================================>              (83 + 30) / 113][Stage 140:=================================================>   (105 + 8) / 113]                                                                                [Stage 141:===========================>                         (59 + 55) / 114][Stage 141:================================>                    (70 + 44) / 114][Stage 141:========================================>            (87 + 27) / 114][Stage 141:=============================================>      (100 + 14) / 114][Stage 141:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.397806008 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359171222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (71 + 42) / 113][Stage 142:=======================================>             (84 + 29) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:================================================>    (104 + 9) / 113][Stage 142:===================================================> (109 + 4) / 113]                                                                                [Stage 143:===================================>                 (77 + 37) / 114][Stage 143:=========================================>           (89 + 25) / 114][Stage 143:================================================>    (105 + 9) / 114][Stage 143:===================================================> (111 + 3) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.071105721 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383462263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==============================>                      (67 + 48) / 115][Stage 144:====================================>                (79 + 36) / 115][Stage 144:=============================================>       (98 + 17) / 115][Stage 144:===============================================>    (104 + 11) / 115][Stage 144:====================================================>(113 + 2) / 115]                                                                                [Stage 145:=================================>                   (73 + 43) / 116][Stage 145:========================================>            (88 + 28) / 116][Stage 145:==============================================>     (104 + 12) / 116][Stage 145:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.068719407 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405905682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==============================>                      (67 + 48) / 115][Stage 146:====================================>                (80 + 35) / 115][Stage 146:=========================================>           (91 + 24) / 115][Stage 146:=============================================>      (101 + 14) / 115][Stage 146:===================================================> (112 + 3) / 115]                                                                                [Stage 147:===============================>                     (68 + 48) / 116][Stage 147:====================================>                (79 + 37) / 116][Stage 147:===========================================>         (96 + 20) / 116][Stage 147:=================================================>   (109 + 7) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.921907859 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367613613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==================================>                  (73 + 40) / 113][Stage 148:=====================================>               (81 + 32) / 113][Stage 148:==========================================>          (91 + 22) / 113][Stage 148:==============================================>     (100 + 13) / 113][Stage 148:===================================================> (110 + 3) / 113][Stage 148:====================================================>(112 + 1) / 113]                                                                                [Stage 149:===================================>                 (77 + 37) / 114][Stage 149:======================================>              (83 + 31) / 114][Stage 149:===========================================>         (93 + 21) / 114][Stage 149:=================================================>   (106 + 8) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.334899196 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=166", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=166,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377623922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:================================>                    (73 + 45) / 118][Stage 150:====================================>                (82 + 36) / 118][Stage 150:=========================================>           (92 + 26) / 118][Stage 150:==============================================>     (105 + 13) / 118][Stage 150:===================================================> (115 + 3) / 118]                                                                                [Stage 151:=================================>                   (75 + 44) / 119][Stage 151:===================================>                 (80 + 39) / 119][Stage 151:=======================================>             (88 + 31) / 119][Stage 151:=============================================>      (105 + 14) / 119][Stage 151:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.567998752 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339255232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=====================================>               (81 + 34) / 115][Stage 152:=======================================>             (86 + 29) / 115][Stage 152:===========================================>         (95 + 20) / 115][Stage 152:=================================================>   (108 + 7) / 115]                                                                                [Stage 153:=======================================>             (86 + 30) / 116][Stage 153:=============================================>       (99 + 17) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.550967467 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=16", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=16,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395524418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (59 + 54) / 113][Stage 154:=============================>                       (62 + 51) / 113][Stage 154:====================================>                (77 + 36) / 113][Stage 154:=======================================>             (85 + 28) / 113][Stage 154:===================================================> (109 + 4) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:===========================>                         (59 + 55) / 114][Stage 155:================================>                    (70 + 44) / 114][Stage 155:======================================>              (83 + 31) / 114][Stage 155:==========================================>          (92 + 22) / 114][Stage 155:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 4.258875009 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356091367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=====================================>               (81 + 34) / 115][Stage 156:========================================>            (88 + 27) / 115][Stage 156:===============================================>    (104 + 11) / 115][Stage 156:====================================================>(114 + 1) / 115]                                                                                [Stage 157:=======================================>             (87 + 29) / 116][Stage 157:=============================================>      (101 + 15) / 116]                                                                                Time elapsed: 2.378833823 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=196", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=196,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390299816 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:==============================>                      (66 + 47) / 113][Stage 158:===========================================>         (92 + 21) / 113][Stage 158:=================================================>   (105 + 8) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:===========================>                         (59 + 55) / 114][Stage 159:==============================>                      (65 + 49) / 114][Stage 159:=====================================>               (81 + 33) / 114][Stage 159:==============================================>      (99 + 15) / 114][Stage 159:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.249914115 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400501685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:===========================>                         (63 + 57) / 120][Stage 160:================================>                    (73 + 47) / 120][Stage 160:=======================================>             (90 + 30) / 120][Stage 160:=================================================>   (112 + 8) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:=============================>                       (67 + 54) / 121][Stage 161:======================================>              (88 + 33) / 121][Stage 161:=================================================>   (112 + 9) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.23132737 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=39", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=39,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338717516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:====================================>                (79 + 36) / 115][Stage 162:======================================>              (83 + 32) / 115][Stage 162:===========================================>         (94 + 21) / 115][Stage 162:=================================================>   (108 + 7) / 115][Stage 162:====================================================>(113 + 2) / 115]                                                                                [Stage 163:=====================================>               (83 + 33) / 116][Stage 163:===========================================>         (96 + 20) / 116][Stage 163:===============================================>    (105 + 11) / 116][Stage 163:==================================================>  (110 + 6) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.947606082 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=146", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=146,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388910978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==============================>                      (67 + 48) / 115][Stage 164:===================================>                 (78 + 37) / 115][Stage 164:=========================================>           (91 + 24) / 115][Stage 164:==============================================>     (102 + 13) / 115][Stage 164:=================================================>   (108 + 7) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:==============================>                      (66 + 50) / 116][Stage 165:==================================>                  (76 + 40) / 116][Stage 165:=========================================>           (91 + 25) / 116][Stage 165:=============================================>      (101 + 15) / 116][Stage 165:==================================================>  (110 + 6) / 116][Stage 165:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.688001106 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357125594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (81 + 32) / 113][Stage 166:==========================================>          (91 + 22) / 113][Stage 166:==============================================>     (101 + 12) / 113][Stage 166:==================================================>  (107 + 6) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:===================================>                 (76 + 38) / 114][Stage 167:=======================================>             (84 + 30) / 114][Stage 167:=============================================>       (98 + 16) / 114][Stage 167:=================================================>   (106 + 8) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.074154932 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372037827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=================================>                   (74 + 44) / 118][Stage 168:=====================================>               (84 + 34) / 118][Stage 168:===========================================>         (97 + 21) / 118][Stage 168:===============================================>    (107 + 11) / 118][Stage 168:===================================================> (115 + 3) / 118]                                                                                [Stage 169:================================>                    (74 + 45) / 119][Stage 169:====================================>                (81 + 38) / 119][Stage 169:========================================>            (92 + 27) / 119][Stage 169:===========================================>        (100 + 19) / 119][Stage 169:==================================================>  (113 + 6) / 119][Stage 169:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.802102562 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384089798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==============================>                      (67 + 48) / 115][Stage 170:===================================>                 (77 + 38) / 115][Stage 170:=========================================>           (91 + 24) / 115][Stage 170:==============================================>     (102 + 13) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:====================================>                (79 + 37) / 116][Stage 171:========================================>            (89 + 27) / 116][Stage 171:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.925467446 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34922761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=======================================>             (85 + 30) / 115][Stage 172:==========================================>          (93 + 22) / 115][Stage 172:===============================================>    (105 + 10) / 115][Stage 172:====================================================>(113 + 2) / 115]                                                                                [Stage 173:=====================================>               (83 + 33) / 116][Stage 173:=========================================>           (91 + 25) / 116][Stage 173:==============================================>     (103 + 13) / 116][Stage 173:===================================================> (112 + 4) / 116][Stage 173:====================================================>(114 + 2) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.065347963 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=38", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=38,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364047824 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (70 + 43) / 113][Stage 174:==================================>                  (74 + 39) / 113][Stage 174:========================================>            (87 + 26) / 113][Stage 174:=============================================>       (96 + 17) / 113][Stage 174:==================================================>  (107 + 6) / 113][Stage 174:====================================================>(111 + 2) / 113]                                                                                [Stage 175:====================================>                (79 + 35) / 114][Stage 175:========================================>            (87 + 27) / 114][Stage 175:==============================================>     (101 + 13) / 114][Stage 175:=================================================>   (107 + 7) / 114][Stage 175:===================================================> (111 + 3) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.343622609 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388605826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (75 + 40) / 115][Stage 176:=========================================>           (91 + 24) / 115][Stage 176:==============================================>     (102 + 13) / 115][Stage 176:===================================================> (112 + 3) / 115]                                                                                [Stage 177:===============================>                     (69 + 47) / 116][Stage 177:======================================>              (84 + 32) / 116][Stage 177:============================================>        (98 + 18) / 116][Stage 177:===================================================> (113 + 3) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.823361151 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=190", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=190,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362419105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (72 + 46) / 118][Stage 178:=================================>                   (75 + 43) / 118][Stage 178:===================================>                 (80 + 38) / 118][Stage 178:===========================================>         (96 + 22) / 118][Stage 178:================================================>    (109 + 9) / 118][Stage 178:====================================================>(117 + 1) / 118]                                                                                [Stage 179:================================>                    (73 + 46) / 119][Stage 179:===================================>                 (79 + 40) / 119][Stage 179:======================================>              (87 + 32) / 119][Stage 179:=============================================>      (105 + 14) / 119][Stage 179:===================================================> (115 + 4) / 119][Stage 179:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.609416481 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352477938 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==================================>                  (74 + 39) / 113][Stage 180:======================================>              (83 + 30) / 113][Stage 180:============================================>        (94 + 19) / 113][Stage 180:===============================================>    (103 + 10) / 113][Stage 180:===================================================> (109 + 4) / 113]                                                                                [Stage 181:======================================>              (83 + 31) / 114][Stage 181:===========================================>         (93 + 21) / 114][Stage 181:===============================================>    (104 + 10) / 114][Stage 181:===================================================> (110 + 4) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.151860004 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==================================>                  (73 + 40) / 113][Stage 182:======================================>              (82 + 31) / 113][Stage 182:===========================================>         (92 + 21) / 113][Stage 182:===============================================>    (103 + 10) / 113][Stage 182:====================================================>(111 + 2) / 113]                                                                                [Stage 183:======================================>              (83 + 31) / 114][Stage 183:=========================================>           (90 + 24) / 114][Stage 183:==============================================>     (101 + 13) / 114][Stage 183:===================================================> (110 + 4) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.141417704 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=30", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=30,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383946886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (59 + 54) / 113][Stage 184:===============================>                     (68 + 45) / 113][Stage 184:=======================================>             (84 + 29) / 113][Stage 184:===============================================>    (103 + 10) / 113][Stage 184:====================================================>(111 + 2) / 113]                                                                                [Stage 185:============================>                        (61 + 53) / 114][Stage 185:=================================>                   (73 + 41) / 114][Stage 185:==============================================>      (99 + 15) / 114][Stage 185:==================================================>  (109 + 5) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.608567211 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=145", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=145,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377047642 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=============================>                       (65 + 50) / 115][Stage 186:=====================================>               (81 + 34) / 115][Stage 186:==========================================>          (92 + 23) / 115][Stage 186:===================================================> (111 + 4) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:===============================>                     (69 + 47) / 116][Stage 187:=======================================>             (86 + 30) / 116][Stage 187:===============================================>    (106 + 10) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.805446115 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365865673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (72 + 46) / 118][Stage 188:================================>                    (73 + 45) / 118][Stage 188:=====================================>               (83 + 35) / 118][Stage 188:============================================>       (102 + 16) / 118][Stage 188:==================================================>  (113 + 5) / 118]                                                                                [Stage 189:================================>                    (74 + 45) / 119][Stage 189:====================================>                (82 + 37) / 119][Stage 189:============================================>       (102 + 17) / 119][Stage 189:=================================================>   (112 + 7) / 119][Stage 189:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.292037899 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345031736 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (81 + 34) / 115][Stage 190:=========================================>           (90 + 25) / 115][Stage 190:===============================================>    (104 + 11) / 115][Stage 190:==================================================>  (109 + 6) / 115][Stage 190:===================================================> (112 + 3) / 115]                                                                                [Stage 191:=======================================>             (86 + 30) / 116][Stage 191:==========================================>          (93 + 23) / 116][Stage 191:================================================>    (107 + 9) / 116][Stage 191:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.067517875 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=192", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=192,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382477969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===================================>                 (78 + 37) / 115][Stage 192:============================================>        (96 + 19) / 115][Stage 192:=================================================>   (108 + 7) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:===============================>                     (70 + 46) / 116][Stage 193:=======================================>             (87 + 29) / 116][Stage 193:==============================================>     (103 + 13) / 116][Stage 193:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.745426326 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430260571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=============================>                       (63 + 50) / 113][Stage 194:================================>                    (70 + 43) / 113][Stage 194:=======================================>             (84 + 29) / 113][Stage 194:==============================================>      (99 + 14) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:===========================>                         (59 + 55) / 114][Stage 195:=============================>                       (63 + 51) / 114][Stage 195:==================================>                  (75 + 39) / 114][Stage 195:========================================>            (87 + 27) / 114][Stage 195:=============================================>      (100 + 14) / 114][Stage 195:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.51647068 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=40", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=40,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377678648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=============================>                       (64 + 51) / 115][Stage 196:==================================>                  (75 + 40) / 115][Stage 196:===========================================>         (94 + 21) / 115][Stage 196:=================================================>   (108 + 7) / 115][Stage 196:====================================================>(113 + 2) / 115]                                                                                [Stage 197:===============================>                     (68 + 48) / 116][Stage 197:===================================>                 (78 + 38) / 116][Stage 197:=========================================>           (90 + 26) / 116][Stage 197:===============================================>    (105 + 11) / 116][Stage 197:==================================================>  (111 + 5) / 116][Stage 197:===================================================> (113 + 3) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.235683004 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==============================>                      (66 + 49) / 115][Stage 198:===================================>                 (77 + 38) / 115][Stage 198:==========================================>          (92 + 23) / 115][Stage 198:==================================================>  (110 + 5) / 115][Stage 198:===================================================> (112 + 3) / 115]                                                                                [Stage 199:==================================>                  (76 + 40) / 116][Stage 199:=========================================>           (91 + 25) / 116][Stage 199:==============================================>     (104 + 12) / 116][Stage 199:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.072106677 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:======================================>              (83 + 32) / 115][Stage 200:=========================================>           (90 + 25) / 115][Stage 200:===============================================>    (104 + 11) / 115]                                                                                [Stage 201:=======================================>             (86 + 30) / 116][Stage 201:=========================================>           (91 + 25) / 116][Stage 201:=============================================>      (102 + 14) / 116][Stage 201:===================================================> (112 + 4) / 116][Stage 201:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.44415165 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m32.761s
user	11m59.928s
sys	0m52.708s
