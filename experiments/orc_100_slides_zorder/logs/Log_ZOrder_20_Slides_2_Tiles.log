Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 23:15:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:15:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:15:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:15:23 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 23:15:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:15:36 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531231525-0724).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.367759379 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=====================>                                 (45 + 70) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=======================================================(115 + 0) / 115]                                                                                [Stage 1:==================>                                    (38 + 78) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.888893538 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=130", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=130,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.764947303 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=====================>                                 (47 + 73) / 120][Stage 2:======================>                                (48 + 72) / 120][Stage 2:========================>                              (54 + 66) / 120][Stage 2:==========================>                            (58 + 62) / 120][Stage 2:===========================>                           (59 + 61) / 120][Stage 2:==============================>                        (66 + 54) / 120][Stage 2:======================================>                (83 + 37) / 120][Stage 2:===========================================>           (95 + 25) / 120][Stage 2:===============================================>      (106 + 14) / 120][Stage 2:=====================================================> (116 + 4) / 120][Stage 2:======================================================>(119 + 1) / 120]                                                                                [Stage 3:===========================>                           (60 + 61) / 121][Stage 3:==============================>                        (66 + 55) / 121][Stage 3:=================================>                     (73 + 48) / 121][Stage 3:====================================>                  (81 + 40) / 121][Stage 3:============================================>         (100 + 21) / 121][Stage 3:===================================================>   (114 + 7) / 121][Stage 3:======================================================>(119 + 2) / 121][Stage 3:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.480375506 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.686743639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==========================>                            (57 + 63) / 120][Stage 4:===========================>                           (60 + 60) / 120][Stage 4:===========================>                           (61 + 59) / 120][Stage 4:=================================>                     (73 + 47) / 120][Stage 4:========================================>              (88 + 32) / 120][Stage 4:=============================================>        (101 + 19) / 120][Stage 4:=====================================================> (117 + 3) / 120]                                                                                [Stage 5:===========================>                           (61 + 60) / 121][Stage 5:=============================>                         (64 + 57) / 121][Stage 5:===============================>                       (70 + 51) / 121][Stage 5:===================================>                   (79 + 42) / 121][Stage 5:=============================================>        (101 + 20) / 121][Stage 5:====================================================>  (116 + 5) / 121][Stage 5:=====================================================> (118 + 3) / 121][Stage 5:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.535686758 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (59 + 61) / 120][Stage 6:===========================>                           (61 + 59) / 120][Stage 6:=================================>                     (73 + 47) / 120][Stage 6:=====================================>                 (81 + 39) / 120][Stage 6:============================================>          (97 + 23) / 120][Stage 6:===================================================>   (112 + 8) / 120][Stage 6:======================================================>(119 + 1) / 120]                                                                                [Stage 7:===========================>                           (61 + 60) / 121][Stage 7:==============================>                        (68 + 53) / 121][Stage 7:====================================>                  (81 + 40) / 121][Stage 7:===========================================>           (95 + 26) / 121][Stage 7:==============================================>       (104 + 17) / 121][Stage 7:====================================================>  (115 + 6) / 121][Stage 7:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.377654136 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.710643655 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 60) / 120][Stage 8:=============================>                         (64 + 56) / 120][Stage 8:======================================>                (83 + 37) / 120][Stage 8:================================================>     (108 + 12) / 120][Stage 8:=====================================================> (116 + 4) / 120]                                                                                [Stage 9:===========================>                           (61 + 60) / 121][Stage 9:=============================>                         (65 + 56) / 121][Stage 9:=====================================>                 (82 + 39) / 121][Stage 9:=============================================>        (103 + 18) / 121][Stage 9:=================================================>    (111 + 10) / 121][Stage 9:=====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.792432354 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=23", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=23,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (60 + 60) / 120][Stage 10:===========================>                          (61 + 59) / 120][Stage 10:==================================>                   (76 + 44) / 120][Stage 10:===========================================>          (96 + 24) / 120][Stage 10:===============================================>     (108 + 12) / 120][Stage 10:==================================================>   (113 + 7) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:============================>                         (63 + 58) / 121][Stage 11:=====================================>                (84 + 37) / 121][Stage 11:============================================>         (99 + 22) / 121][Stage 11:================================================>    (111 + 10) / 121][Stage 11:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.822492631 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.578228874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (72 + 46) / 118][Stage 12:===================================>                  (78 + 40) / 118][Stage 12:========================================>             (89 + 29) / 118][Stage 12:================================================>    (107 + 11) / 118][Stage 12:====================================================> (114 + 4) / 118]                                                                                [Stage 13:=================================>                    (73 + 46) / 119][Stage 13:=====================================>                (82 + 37) / 119][Stage 13:===========================================>          (95 + 24) / 119][Stage 13:===============================================>     (106 + 13) / 119][Stage 13:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.707049393 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.611066502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (57 + 56) / 113][Stage 14:============================>                         (60 + 53) / 113][Stage 14:==================================>                   (72 + 41) / 113][Stage 14:=======================================>              (82 + 31) / 113][Stage 14:==============================================>       (97 + 16) / 113][Stage 14:==================================================>   (106 + 7) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:================================>                     (68 + 46) / 114][Stage 15:======================================>               (82 + 32) / 114][Stage 15:==============================================>       (98 + 16) / 114][Stage 15:==================================================>   (107 + 7) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.713530366 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539240944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (58 + 55) / 113][Stage 16:==============================>                       (63 + 50) / 113][Stage 16:===================================>                  (75 + 38) / 113][Stage 16:========================================>             (85 + 28) / 113][Stage 16:===============================================>     (101 + 12) / 113][Stage 16:===================================================>  (108 + 5) / 113][Stage 16:====================================================> (110 + 3) / 113]                                                                                [Stage 17:===========================>                          (59 + 55) / 114][Stage 17:============================>                         (61 + 53) / 114][Stage 17:====================================>                 (78 + 36) / 114][Stage 17:==============================================>       (99 + 15) / 114][Stage 17:====================================================> (111 + 3) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.81773432 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527558896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (57 + 56) / 113][Stage 18:=============================>                        (61 + 52) / 113][Stage 18:====================================>                 (77 + 36) / 113][Stage 18:===========================================>          (92 + 21) / 113][Stage 18:====================================================> (109 + 4) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:=============================>                        (62 + 52) / 114][Stage 19:==================================>                   (73 + 41) / 114][Stage 19:=============================================>        (95 + 19) / 114][Stage 19:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.582176784 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456719641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=====================================>                (80 + 35) / 115][Stage 20:======================================>               (82 + 33) / 115][Stage 20:=============================================>        (97 + 18) / 115][Stage 20:==================================================>   (108 + 7) / 115]                                                                                [Stage 21:======================================>               (83 + 33) / 116][Stage 21:=============================================>        (97 + 19) / 116][Stage 21:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.744277789 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552951056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:===========================>                          (61 + 59) / 120][Stage 22:================================>                     (72 + 48) / 120][Stage 22:=======================================>              (88 + 32) / 120][Stage 22:===========================================>          (96 + 24) / 120][Stage 22:==================================================>   (113 + 7) / 120][Stage 22:=====================================================>(119 + 1) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:===========================>                          (62 + 59) / 121][Stage 23:=====================================>                (84 + 37) / 121][Stage 23:================================================>    (111 + 10) / 121][Stage 23:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.591495051 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51306356 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:==============================>                       (67 + 53) / 120][Stage 24:=====================================>                (83 + 37) / 120][Stage 24:================================================>    (109 + 11) / 120][Stage 24:=====================================================>(118 + 2) / 120]                                                                                [Stage 25:===========================>                          (61 + 60) / 121][Stage 25:================================>                     (72 + 49) / 121][Stage 25:========================================>             (90 + 31) / 121][Stage 25:=================================================>    (112 + 9) / 121][Stage 25:==================================================>   (114 + 7) / 121][Stage 25:====================================================> (117 + 4) / 121][Stage 25:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.769990639 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538880502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:=============================>                        (61 + 52) / 113][Stage 26:==================================>                   (72 + 41) / 113][Stage 26:============================================>         (94 + 19) / 113][Stage 26:=================================================>    (104 + 9) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:============================>                         (60 + 54) / 114][Stage 27:===============================>                      (67 + 47) / 114][Stage 27:=====================================>                (80 + 34) / 114][Stage 27:============================================>         (94 + 20) / 114][Stage 27:====================================================> (110 + 4) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.541371607 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=244", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=244,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443666241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=====================================>                (79 + 34) / 113][Stage 28:============================================>         (93 + 20) / 113][Stage 28:==============================================>      (100 + 13) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:====================================>                 (78 + 36) / 114][Stage 29:===========================================>          (91 + 23) / 114][Stage 29:=============================================>        (97 + 17) / 114][Stage 29:===================================================>  (108 + 6) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.120831379 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483547614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:=============================>                        (61 + 52) / 113][Stage 30:=====================================>                (78 + 35) / 113][Stage 30:==============================================>       (97 + 16) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:=============================>                        (62 + 52) / 114][Stage 31:====================================>                 (76 + 38) / 114][Stage 31:================================================>    (104 + 10) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.550978886 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.529834443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (64 + 51) / 115][Stage 32:=====================================>                (79 + 36) / 115][Stage 32:============================================>         (94 + 21) / 115][Stage 32:=================================================>    (106 + 9) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:======================================>               (83 + 33) / 116][Stage 33:============================================>         (95 + 21) / 116][Stage 33:==================================================>   (108 + 8) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.095102135 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46030144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==================================>                   (74 + 41) / 115][Stage 34:========================================>             (86 + 29) / 115][Stage 34:===============================================>     (103 + 12) / 115][Stage 34:===================================================>  (110 + 5) / 115][Stage 34:====================================================> (111 + 4) / 115]                                                                                [Stage 35:====================================>                 (79 + 37) / 116][Stage 35:============================================>         (96 + 20) / 116][Stage 35:===================================================>  (111 + 5) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.074001587 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=86", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=86,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412742708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (82 + 33) / 115][Stage 36:============================================>         (94 + 21) / 115][Stage 36:===============================================>     (104 + 11) / 115][Stage 36:====================================================> (112 + 3) / 115][Stage 36:=====================================================>(113 + 2) / 115]                                                                                [Stage 37:======================================>               (83 + 33) / 116][Stage 37:========================================>             (88 + 28) / 116][Stage 37:=================================================>    (107 + 9) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.060695577 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450606679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (72 + 46) / 118][Stage 38:===================================>                  (78 + 40) / 118][Stage 38:==========================================>           (93 + 25) / 118][Stage 38:===================================================>  (112 + 6) / 118][Stage 38:=====================================================>(116 + 2) / 118]                                                                                [Stage 39:=================================>                    (73 + 46) / 119][Stage 39:==================================>                   (77 + 42) / 119][Stage 39:==========================================>           (93 + 26) / 119][Stage 39:===============================================>     (106 + 13) / 119][Stage 39:====================================================> (115 + 4) / 119][Stage 39:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.446094399 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:=================================>                    (74 + 44) / 118][Stage 40:=====================================>                (83 + 35) / 118][Stage 40:==========================================>           (93 + 25) / 118][Stage 40:================================================>    (107 + 11) / 118]                                                                                [Stage 41:=================================>                    (74 + 45) / 119][Stage 41:======================================>               (85 + 34) / 119][Stage 41:============================================>         (99 + 20) / 119][Stage 41:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.111276371 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:==================================>                   (75 + 43) / 118][Stage 42:=====================================>                (83 + 35) / 118][Stage 42:================================================>    (108 + 10) / 118]                                                                                [Stage 43:=================================>                    (73 + 46) / 119][Stage 43:======================================>               (85 + 34) / 119][Stage 43:===========================================>          (96 + 23) / 119][Stage 43:==================================================>   (112 + 7) / 119][Stage 43:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.037700964 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485352805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===============================>                      (67 + 48) / 115][Stage 44:=====================================>                (79 + 36) / 115][Stage 44:===========================================>          (92 + 23) / 115][Stage 44:===================================================>  (109 + 6) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:=================================>                    (73 + 43) / 116][Stage 45:=======================================>              (85 + 31) / 116][Stage 45:=================================================>    (107 + 9) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.922789071 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450319474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (72 + 46) / 118][Stage 46:==================================>                   (75 + 43) / 118][Stage 46:===========================================>          (95 + 23) / 118][Stage 46:===============================================>     (105 + 13) / 118][Stage 46:===================================================>  (113 + 5) / 118][Stage 46:=====================================================>(117 + 1) / 118]                                                                                [Stage 47:=================================>                    (73 + 46) / 119][Stage 47:===================================>                  (79 + 40) / 119][Stage 47:==========================================>           (93 + 26) / 119][Stage 47:==============================================>      (105 + 14) / 119][Stage 47:====================================================> (115 + 4) / 119][Stage 47:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.626671293 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=24", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=24,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437961239 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:====================================>                 (76 + 37) / 113][Stage 48:===========================================>          (90 + 23) / 113][Stage 48:=================================================>    (104 + 9) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:===================================>                  (74 + 40) / 114][Stage 49:=======================================>              (84 + 30) / 114][Stage 49:==============================================>       (98 + 16) / 114][Stage 49:===================================================>  (108 + 6) / 114][Stage 49:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.199580802 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=166", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=166,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518679468 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:===============================>                      (71 + 49) / 120][Stage 50:=======================================>              (88 + 32) / 120][Stage 50:===============================================>     (108 + 12) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:================================>                     (72 + 49) / 121][Stage 51:==========================================>           (95 + 26) / 121][Stage 51:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.096975417 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46356658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:============================>                         (64 + 56) / 120][Stage 52:===================================>                  (78 + 42) / 120][Stage 52:==============================================>      (106 + 14) / 120][Stage 52:=====================================================>(119 + 1) / 120]                                                                                [Stage 53:===========================>                          (61 + 60) / 121][Stage 53:=============================>                        (66 + 55) / 121][Stage 53:=====================================>                (84 + 37) / 121][Stage 53:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.068762368 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=211", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=211,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416021335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (72 + 46) / 118][Stage 54:=====================================>                (81 + 37) / 118][Stage 54:============================================>         (98 + 20) / 118][Stage 54:==================================================>   (111 + 7) / 118]                                                                                [Stage 55:================================>                     (72 + 47) / 119][Stage 55:=================================>                    (73 + 46) / 119][Stage 55:====================================>                 (81 + 38) / 119][Stage 55:============================================>        (101 + 18) / 119][Stage 55:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.137156265 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:==================================>                   (76 + 42) / 118][Stage 56:=============================================>        (99 + 19) / 118][Stage 56:================================================>    (108 + 10) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:===================================>                  (79 + 40) / 119][Stage 57:===========================================>          (96 + 23) / 119][Stage 57:==================================================>   (111 + 8) / 119][Stage 57:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.186766157 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387067264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (82 + 33) / 115][Stage 58:=============================================>        (96 + 19) / 115][Stage 58:===================================================>  (110 + 5) / 115]                                                                                [Stage 59:======================================>               (83 + 33) / 116][Stage 59:==============================================>       (99 + 17) / 116][Stage 59:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.539136368 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475122609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:=============================>                        (62 + 51) / 113][Stage 60:=====================================>                (78 + 35) / 113][Stage 60:===========================================>          (91 + 22) / 113][Stage 60:===============================================>     (102 + 11) / 113]                                                                                [Stage 61:===========================>                          (59 + 55) / 114][Stage 61:=================================>                    (71 + 43) / 114][Stage 61:=========================================>            (87 + 27) / 114][Stage 61:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.082394207 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416380137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=================================>                    (71 + 42) / 113][Stage 62:=======================================>              (82 + 31) / 113][Stage 62:===========================================>          (92 + 21) / 113][Stage 62:=================================================>    (104 + 9) / 113][Stage 62:====================================================> (109 + 4) / 113]                                                                                [Stage 63:===================================>                  (74 + 40) / 114][Stage 63:=======================================>              (84 + 30) / 114][Stage 63:==============================================>       (98 + 16) / 114][Stage 63:==================================================>   (106 + 8) / 114][Stage 63:====================================================> (111 + 3) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.616648888 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445135107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (58 + 55) / 113][Stage 64:============================>                         (60 + 53) / 113][Stage 64:==================================>                   (72 + 41) / 113][Stage 64:============================================>         (94 + 19) / 113][Stage 64:====================================================> (109 + 4) / 113]                                                                                [Stage 65:=============================>                        (63 + 51) / 114][Stage 65:===================================>                  (74 + 40) / 114][Stage 65:=============================================>        (95 + 19) / 114][Stage 65:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.219646702 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:============================>                         (59 + 54) / 113][Stage 66:================================>                     (67 + 46) / 113][Stage 66:=======================================>              (82 + 31) / 113][Stage 66:===============================================>     (101 + 12) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:============================>                         (60 + 54) / 114][Stage 67:==============================>                       (64 + 50) / 114][Stage 67:======================================>               (81 + 33) / 114][Stage 67:==============================================>      (100 + 14) / 114][Stage 67:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.122002692 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442267311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:>                                                       (0 + 0) / 113][Stage 68:===========================>                          (58 + 55) / 113][Stage 68:================================>                     (68 + 45) / 113][Stage 68:========================================>             (84 + 29) / 113][Stage 68:===============================================>     (101 + 12) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:=============================>                        (63 + 51) / 114][Stage 69:===================================>                  (74 + 40) / 114][Stage 69:==========================================>           (90 + 24) / 114][Stage 69:================================================>    (104 + 10) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.265555917 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410969941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:====================================>                 (80 + 38) / 118][Stage 70:============================================>         (97 + 21) / 118][Stage 70:=================================================>    (109 + 9) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:======================================>               (85 + 34) / 119][Stage 71:============================================>         (98 + 21) / 119][Stage 71:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.979873109 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403191186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (72 + 46) / 118][Stage 72:==================================>                   (75 + 43) / 118][Stage 72:=====================================>                (83 + 35) / 118][Stage 72:===========================================>          (96 + 22) / 118][Stage 72:================================================>    (107 + 11) / 118][Stage 72:====================================================> (115 + 3) / 118]                                                                                [Stage 73:=================================>                    (74 + 45) / 119][Stage 73:====================================>                 (81 + 38) / 119][Stage 73:=========================================>            (92 + 27) / 119][Stage 73:============================================>        (101 + 18) / 119][Stage 73:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.436463231 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454833961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (60 + 60) / 120][Stage 74:================================>                     (73 + 47) / 120][Stage 74:==========================================>           (94 + 26) / 120][Stage 74:==================================================>   (113 + 7) / 120][Stage 74:=====================================================>(118 + 2) / 120]                                                                                [Stage 75:===========================>                          (61 + 60) / 121][Stage 75:=================================>                    (75 + 46) / 121][Stage 75:===========================================>          (98 + 23) / 121][Stage 75:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.251197723 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=44", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=44,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391090351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===================================>                  (74 + 39) / 113][Stage 76:==========================================>           (89 + 24) / 113][Stage 76:=============================================>        (96 + 17) / 113][Stage 76:====================================================> (109 + 4) / 113]                                                                                [Stage 77:===================================>                  (75 + 39) / 114][Stage 77:========================================>             (86 + 28) / 114][Stage 77:==============================================>      (100 + 14) / 114][Stage 77:=================================================>    (105 + 9) / 114][Stage 77:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.489807094 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367238706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:======================================>               (81 + 34) / 115][Stage 78:=========================================>            (88 + 27) / 115][Stage 78:===============================================>     (102 + 13) / 115][Stage 78:===================================================>  (109 + 6) / 115]                                                                                [Stage 79:======================================>               (83 + 33) / 116][Stage 79:=============================================>        (97 + 19) / 116][Stage 79:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.63331524 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359366388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:======================================>               (81 + 34) / 115][Stage 80:==========================================>           (91 + 24) / 115][Stage 80:===============================================>     (102 + 13) / 115][Stage 80:===================================================>  (110 + 5) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:======================================>               (83 + 33) / 116][Stage 81:===========================================>          (94 + 22) / 116][Stage 81:===============================================>     (103 + 13) / 116][Stage 81:===================================================>  (110 + 6) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.04331293 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436555712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (58 + 55) / 113][Stage 82:============================>                         (60 + 53) / 113][Stage 82:================================>                     (68 + 45) / 113][Stage 82:========================================>             (84 + 29) / 113][Stage 82:==============================================>       (98 + 15) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:===========================>                          (59 + 55) / 114][Stage 83:==============================>                       (64 + 50) / 114][Stage 83:=====================================>                (80 + 34) / 114][Stage 83:=============================================>        (96 + 18) / 114][Stage 83:==================================================>   (106 + 8) / 114][Stage 83:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.511529855 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409991845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:====================================>                 (76 + 37) / 113][Stage 84:==========================================>           (89 + 24) / 113][Stage 84:==============================================>       (97 + 16) / 113][Stage 84:===================================================>  (108 + 5) / 113]                                                                                [Stage 85:======================================>               (82 + 32) / 114][Stage 85:===========================================>          (92 + 22) / 114][Stage 85:==============================================>      (101 + 13) / 114][Stage 85:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.856634593 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459855058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:===============================>                      (70 + 50) / 120][Stage 86:========================================>             (90 + 30) / 120][Stage 86:================================================>    (109 + 11) / 120][Stage 86:======================================================(120 + 0) / 120]                                                                                [Stage 87:===========================>                          (62 + 59) / 121][Stage 87:=================================>                    (75 + 46) / 121][Stage 87:=======================================>              (88 + 33) / 121][Stage 87:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.070654225 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396213658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==============================>                       (64 + 51) / 115][Stage 88:===================================>                  (76 + 39) / 115][Stage 88:============================================>         (94 + 21) / 115][Stage 88:==================================================>   (108 + 7) / 115][Stage 88:=====================================================>(113 + 2) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=================================>                    (73 + 43) / 116][Stage 89:=========================================>            (90 + 26) / 116][Stage 89:===============================================>     (103 + 13) / 116][Stage 89:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.965618865 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385721398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===================================>                  (74 + 39) / 113][Stage 90:========================================>             (85 + 28) / 113][Stage 90:=============================================>        (96 + 17) / 113][Stage 90:===================================================>  (108 + 5) / 113]                                                                                [Stage 91:=====================================>                (79 + 35) / 114][Stage 91:============================================>         (93 + 21) / 114][Stage 91:================================================>    (104 + 10) / 114][Stage 91:====================================================> (111 + 3) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.567360941 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=172", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=172,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383194385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:=================================>                    (73 + 45) / 118][Stage 92:=====================================>                (83 + 35) / 118][Stage 92:=============================================>       (101 + 17) / 118][Stage 92:===================================================>  (113 + 5) / 118]                                                                                [Stage 93:=================================>                    (73 + 46) / 119][Stage 93:======================================>               (84 + 35) / 119][Stage 93:============================================>        (100 + 19) / 119][Stage 93:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.064099223 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406129001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:=============================>                        (61 + 52) / 113][Stage 94:==================================>                   (73 + 40) / 113][Stage 94:==============================================>      (100 + 13) / 113][Stage 94:==================================================>   (106 + 7) / 113]                                                                                [Stage 95:===========================>                          (59 + 55) / 114][Stage 95:============================>                         (61 + 53) / 114][Stage 95:=================================>                    (71 + 43) / 114][Stage 95:============================================>         (93 + 21) / 114][Stage 95:===================================================>  (108 + 6) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.236933833 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=35", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=35,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38534427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:================================>                     (72 + 46) / 118][Stage 96:====================================>                 (79 + 39) / 118][Stage 96:=========================================>            (91 + 27) / 118][Stage 96:==============================================>      (104 + 14) / 118][Stage 96:=====================================================>(116 + 2) / 118]                                                                                [Stage 97:==================================>                   (75 + 44) / 119][Stage 97:======================================>               (85 + 34) / 119][Stage 97:============================================>         (98 + 21) / 119][Stage 97:===================================================>  (113 + 6) / 119][Stage 97:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.250441566 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397821398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=================================>                    (71 + 44) / 115][Stage 98:========================================>             (87 + 28) / 115][Stage 98:==============================================>       (99 + 16) / 115][Stage 98:==================================================>   (108 + 7) / 115][Stage 98:=====================================================>(113 + 2) / 115]                                                                                [Stage 99:===============================>                      (68 + 48) / 116][Stage 99:====================================>                 (78 + 38) / 116][Stage 99:=============================================>        (98 + 18) / 116][Stage 99:===============================================>     (105 + 11) / 116][Stage 99:====================================================> (113 + 3) / 116][Stage 99:=====================================================>(114 + 2) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.859015829 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39596204 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==============================>                      (67 + 48) / 115][Stage 100:=======================================>             (85 + 30) / 115][Stage 100:=============================================>      (101 + 14) / 115][Stage 100:=================================================>   (108 + 7) / 115][Stage 100:===================================================> (111 + 4) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:====================================>                (80 + 36) / 116][Stage 101:============================================>        (97 + 19) / 116][Stage 101:=================================================>   (109 + 7) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.251622891 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41442175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (58 + 55) / 113][Stage 102:==============================>                      (65 + 48) / 113][Stage 102:======================================>              (82 + 31) / 113][Stage 102:==============================================>     (102 + 11) / 113][Stage 102:====================================================>(111 + 2) / 113]                                                                                [Stage 103:===========================>                         (59 + 55) / 114][Stage 103:============================>                        (61 + 53) / 114][Stage 103:=================================>                   (73 + 41) / 114][Stage 103:============================================>        (95 + 19) / 114]                                                                                Time elapsed: 3.022413268 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (59 + 54) / 113][Stage 104:=============================>                       (62 + 51) / 113][Stage 104:=================================>                   (71 + 42) / 113][Stage 104:=============================================>       (97 + 16) / 113][Stage 104:===================================================> (109 + 4) / 113]                                                                                [Stage 105:=============================>                       (63 + 51) / 114][Stage 105:==================================>                  (74 + 40) / 114][Stage 105:=============================================>      (100 + 14) / 114][Stage 105:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.010662654 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397479739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (70 + 45) / 115][Stage 106:====================================>                (79 + 36) / 115][Stage 106:=============================================>       (98 + 17) / 115][Stage 106:==================================================>  (110 + 5) / 115]                                                                                [Stage 107:=================================>                   (74 + 42) / 116][Stage 107:============================================>        (97 + 19) / 116][Stage 107:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.684392498 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=161", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=161,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355621099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (81 + 34) / 115][Stage 108:======================================>              (84 + 31) / 115][Stage 108:=============================================>      (101 + 14) / 115]                                                                                [Stage 109:======================================>              (84 + 32) / 116][Stage 109:==========================================>          (92 + 24) / 116][Stage 109:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.410127727 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=221", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=221,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352677724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=======================================>             (85 + 30) / 115][Stage 110:=============================================>      (100 + 15) / 115][Stage 110:==================================================>  (110 + 5) / 115]                                                                                [Stage 111:=====================================>               (83 + 33) / 116][Stage 111:===========================================>         (96 + 20) / 116][Stage 111:=================================================>   (109 + 7) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.640342654 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369751723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:================================>                    (73 + 45) / 118][Stage 112:=======================================>             (87 + 31) / 118][Stage 112:============================================>       (102 + 16) / 118][Stage 112:=================================================>   (111 + 7) / 118]                                                                                [Stage 113:=================================>                   (75 + 44) / 119][Stage 113:======================================>              (86 + 33) / 119][Stage 113:=========================================>           (94 + 25) / 119][Stage 113:=================================================>   (111 + 8) / 119][Stage 113:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.182483255 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502831219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:==============================>                      (65 + 48) / 113][Stage 114:====================================>                (78 + 35) / 113][Stage 114:===========================================>         (93 + 20) / 113][Stage 114:==================================================>  (107 + 6) / 113]                                                                                [Stage 115:============================>                        (61 + 53) / 114][Stage 115:===============================>                     (68 + 46) / 114][Stage 115:========================================>            (87 + 27) / 114][Stage 115:==============================================>     (101 + 13) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.300152221 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=57", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=57,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383041516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:=================================>                   (75 + 43) / 118][Stage 116:=======================================>             (89 + 29) / 118][Stage 116:=================================================>   (110 + 8) / 118]                                                                                [Stage 117:================================>                    (74 + 45) / 119][Stage 117:====================================>                (82 + 37) / 119][Stage 117:=========================================>           (93 + 26) / 119][Stage 117:===============================================>    (109 + 10) / 119][Stage 117:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.084021055 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=255", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=255,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374918056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:==================================>                  (76 + 42) / 118][Stage 118:=======================================>             (89 + 29) / 118][Stage 118:===============================================>    (107 + 11) / 118][Stage 118:====================================================>(117 + 1) / 118]                                                                                [Stage 119:=================================>                   (75 + 44) / 119][Stage 119:========================================>            (90 + 29) / 119][Stage 119:===============================================>    (109 + 10) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.027113728 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=================================>                   (74 + 44) / 118][Stage 120:====================================>                (81 + 37) / 118][Stage 120:===========================================>         (96 + 22) / 118][Stage 120:====================================================>(116 + 2) / 118]                                                                                [Stage 121:==================================>                  (77 + 42) / 119][Stage 121:======================================>              (86 + 33) / 119][Stage 121:==============================================>     (107 + 12) / 119][Stage 121:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.952957844 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:===================================>                 (78 + 40) / 118][Stage 122:==========================================>          (95 + 23) / 118][Stage 122:===============================================>    (108 + 10) / 118][Stage 122:====================================================>(117 + 1) / 118]                                                                                [Stage 123:================================>                    (73 + 46) / 119][Stage 123:=====================================>               (84 + 35) / 119][Stage 123:============================================>        (99 + 20) / 119][Stage 123:=================================================>   (111 + 8) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.535333265 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=================================>                   (74 + 44) / 118][Stage 124:======================================>              (85 + 33) / 118][Stage 124:============================================>       (102 + 16) / 118][Stage 124:===================================================> (115 + 3) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:=====================================>               (85 + 34) / 119][Stage 125:============================================>       (101 + 18) / 119][Stage 125:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.185171326 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430326804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 60) / 120][Stage 126:============================>                        (64 + 56) / 120][Stage 126:====================================>                (82 + 38) / 120][Stage 126:===========================================>        (100 + 20) / 120]                                                                                [Stage 127:===========================>                         (62 + 59) / 121][Stage 127:===============================>                     (71 + 50) / 121][Stage 127:=======================================>             (91 + 30) / 121][Stage 127:=============================================>      (106 + 15) / 121]                                                                                Time elapsed: 2.911899168 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364167526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=================================>                   (71 + 42) / 113][Stage 128:=====================================>               (80 + 33) / 113][Stage 128:============================================>        (94 + 19) / 113][Stage 128:=================================================>   (105 + 8) / 113][Stage 128:====================================================>(112 + 1) / 113]                                                                                [Stage 129:=======================================>             (84 + 30) / 114][Stage 129:============================================>        (95 + 19) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.095887266 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=112", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=112,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376352119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=================================>                   (71 + 42) / 113][Stage 130:=====================================>               (80 + 33) / 113][Stage 130:==========================================>          (91 + 22) / 113][Stage 130:==================================================>  (108 + 5) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:===================================>                 (77 + 37) / 114][Stage 131:======================================>              (83 + 31) / 114][Stage 131:============================================>        (96 + 18) / 114][Stage 131:==================================================>  (109 + 5) / 114][Stage 131:====================================================>(112 + 2) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.073773013 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381481635 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:==================================>                  (76 + 42) / 118][Stage 132:=========================================>           (92 + 26) / 118][Stage 132:==============================================>     (105 + 13) / 118][Stage 132:====================================================>(117 + 1) / 118]                                                                                [Stage 133:================================>                    (73 + 46) / 119][Stage 133:=================================>                   (76 + 43) / 119][Stage 133:========================================>            (92 + 27) / 119][Stage 133:===================================================> (115 + 4) / 119][Stage 133:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.114257611 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399695613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:===============================>                     (71 + 49) / 120][Stage 134:========================================>            (92 + 28) / 120][Stage 134:=================================================>   (113 + 7) / 120][Stage 134:====================================================>(118 + 2) / 120]                                                                                [Stage 135:===========================>                         (63 + 58) / 121][Stage 135:=================================>                   (76 + 45) / 121][Stage 135:===========================================>        (102 + 19) / 121][Stage 135:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.108877297 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351768576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (79 + 34) / 113][Stage 136:==========================================>          (90 + 23) / 113][Stage 136:================================================>    (104 + 9) / 113][Stage 136:====================================================>(111 + 2) / 113]                                                                                [Stage 137:=====================================>               (81 + 33) / 114][Stage 137:============================================>        (95 + 19) / 114][Stage 137:==================================================>  (108 + 6) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.839822277 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340303354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (81 + 34) / 115][Stage 138:==========================================>          (92 + 23) / 115][Stage 138:================================================>    (106 + 9) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:======================================>              (84 + 32) / 116][Stage 139:============================================>        (98 + 18) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.68221314 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335792528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (82 + 33) / 115][Stage 140:===========================================>         (95 + 20) / 115][Stage 140:=================================================>   (108 + 7) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:==========================================>          (94 + 22) / 116][Stage 141:==================================================>  (110 + 6) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.590490832 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399796805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:============================>                        (64 + 56) / 120][Stage 142:==================================>                  (77 + 43) / 120][Stage 142:===========================================>        (101 + 19) / 120][Stage 142:==================================================>  (114 + 6) / 120][Stage 142:====================================================>(119 + 1) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:===========================>                         (63 + 58) / 121][Stage 143:==================================>                  (79 + 42) / 121][Stage 143:=============================================>      (105 + 16) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.400207004 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (62 + 58) / 120][Stage 144:===============================>                     (72 + 48) / 120][Stage 144:===========================================>        (101 + 19) / 120][Stage 144:==================================================>  (115 + 5) / 120]                                                                                [Stage 145:============================>                        (66 + 55) / 121][Stage 145:======================================>              (87 + 34) / 121][Stage 145:==============================================>     (109 + 12) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.931890895 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=27", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=27,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407622415 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (59 + 54) / 113][Stage 146:==============================>                      (66 + 47) / 113][Stage 146:======================================>              (83 + 30) / 113][Stage 146:================================================>    (104 + 9) / 113]                                                                                [Stage 147:============================>                        (61 + 53) / 114][Stage 147:==================================>                  (74 + 40) / 114][Stage 147:============================================>        (96 + 18) / 114][Stage 147:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.001821995 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375509697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:====================================>                (79 + 36) / 115][Stage 148:==========================================>          (93 + 22) / 115][Stage 148:==============================================>     (102 + 13) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:===============================>                     (68 + 48) / 116][Stage 149:=======================================>             (86 + 30) / 116][Stage 149:=============================================>      (101 + 15) / 116][Stage 149:=================================================>   (108 + 8) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.243074229 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==================================>                  (75 + 40) / 115][Stage 150:========================================>            (88 + 27) / 115][Stage 150:=================================================>   (107 + 8) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:===================================>                 (77 + 39) / 116][Stage 151:=========================================>           (90 + 26) / 116][Stage 151:================================================>    (107 + 9) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.968134449 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382961349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==============================>                      (67 + 48) / 115][Stage 152:=======================================>             (86 + 29) / 115][Stage 152:================================================>    (106 + 9) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:===================================>                 (77 + 39) / 116][Stage 153:==========================================>          (92 + 24) / 116][Stage 153:===============================================>    (106 + 10) / 116][Stage 153:===================================================> (113 + 3) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.350924367 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41448073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:===========================>                         (63 + 57) / 120][Stage 154:===================================>                 (81 + 39) / 120][Stage 154:===============================================>    (109 + 11) / 120][Stage 154:====================================================>(119 + 1) / 120]                                                                                [Stage 155:==========================>                          (61 + 60) / 121][Stage 155:=============================>                       (68 + 53) / 121][Stage 155:=====================================>               (86 + 35) / 121][Stage 155:===============================================>    (110 + 11) / 121][Stage 155:===================================================> (118 + 3) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.235861225 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396084308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:==============================>                      (66 + 47) / 113][Stage 156:======================================>              (82 + 31) / 113][Stage 156:=================================================>   (105 + 8) / 113]                                                                                [Stage 157:==============================>                      (65 + 49) / 114][Stage 157:=====================================>               (81 + 33) / 114][Stage 157:==============================================>     (101 + 13) / 114][Stage 157:===================================================> (110 + 4) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.129936963 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377996903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==================================>                  (74 + 41) / 115][Stage 158:===========================================>         (95 + 20) / 115][Stage 158:===============================================>    (104 + 11) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:================================>                    (72 + 44) / 116][Stage 159:======================================>              (84 + 32) / 116][Stage 159:===============================================>    (106 + 10) / 116][Stage 159:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.840683497 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359587359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (73 + 45) / 118][Stage 160:=====================================>               (84 + 34) / 118][Stage 160:============================================>       (100 + 18) / 118][Stage 160:====================================================>(117 + 1) / 118]                                                                                [Stage 161:=================================>                   (76 + 43) / 119][Stage 161:========================================>            (91 + 28) / 119][Stage 161:===============================================>    (108 + 11) / 119]                                                                                Time elapsed: 2.852565322 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368950291 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=================================>                   (71 + 42) / 113][Stage 162:=====================================>               (79 + 34) / 113][Stage 162:===========================================>         (93 + 20) / 113][Stage 162:==============================================>     (101 + 12) / 113][Stage 162:===================================================> (110 + 3) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:====================================>                (79 + 35) / 114][Stage 163:=========================================>           (89 + 25) / 114][Stage 163:===============================================>    (104 + 10) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.996740433 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34318819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=======================================>             (86 + 29) / 115][Stage 164:===========================================>         (95 + 20) / 115][Stage 164:==================================================>  (109 + 6) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:====================================>                (80 + 36) / 116][Stage 165:=========================================>           (91 + 25) / 116][Stage 165:==============================================>     (104 + 12) / 116][Stage 165:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.635579984 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360089837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=================================>                   (71 + 42) / 113][Stage 166:=========================================>           (88 + 25) / 113][Stage 166:=============================================>       (96 + 17) / 113][Stage 166:=================================================>   (106 + 7) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:====================================>                (78 + 36) / 114][Stage 167:=======================================>             (86 + 28) / 114][Stage 167:==============================================>     (101 + 13) / 114][Stage 167:===============================================>    (104 + 10) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.196820664 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340448599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=======================================>             (86 + 29) / 115][Stage 168:============================================>        (96 + 19) / 115][Stage 168:================================================>    (106 + 9) / 115][Stage 168:====================================================>(113 + 2) / 115]                                                                                [Stage 169:=====================================>               (81 + 35) / 116][Stage 169:==========================================>          (94 + 22) / 116][Stage 169:==============================================>     (104 + 12) / 116][Stage 169:==================================================>  (111 + 5) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.846805901 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4760957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=====================================>               (82 + 33) / 115][Stage 170:===========================================>         (95 + 20) / 115][Stage 170:==================================================>  (110 + 5) / 115][Stage 170:====================================================>(113 + 2) / 115]                                                                                [Stage 171:=====================================>               (83 + 33) / 116][Stage 171:==========================================>          (92 + 24) / 116][Stage 171:=================================================>   (108 + 8) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.942530885 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334759206 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:====================================>                (80 + 35) / 115][Stage 172:=======================================>             (86 + 29) / 115][Stage 172:=============================================>      (100 + 15) / 115][Stage 172:====================================================>(113 + 2) / 115]                                                                                [Stage 173:======================================>              (85 + 31) / 116][Stage 173:===========================================>         (95 + 21) / 116][Stage 173:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.528954787 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:====================================>                (80 + 35) / 115][Stage 174:=======================================>             (85 + 30) / 115][Stage 174:===========================================>         (94 + 21) / 115][Stage 174:===============================================>    (105 + 10) / 115][Stage 174:====================================================>(113 + 2) / 115]                                                                                [Stage 175:=====================================>               (83 + 33) / 116][Stage 175:==========================================>          (93 + 23) / 116][Stage 175:===============================================>    (105 + 11) / 116][Stage 175:==================================================>  (111 + 5) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.113961369 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386116083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:============================>                        (61 + 52) / 113][Stage 176:=================================>                   (71 + 42) / 113][Stage 176:============================================>        (94 + 19) / 113][Stage 176:================================================>    (104 + 9) / 113]                                                                                [Stage 177:============================>                        (62 + 52) / 114][Stage 177:===================================>                 (77 + 37) / 114][Stage 177:==========================================>          (91 + 23) / 114][Stage 177:==============================================>     (103 + 11) / 114][Stage 177:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.230783043 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420862772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (70 + 45) / 115][Stage 178:=========================================>           (89 + 26) / 115][Stage 178:==============================================>     (102 + 13) / 115][Stage 178:==================================================>  (110 + 5) / 115]                                                                                [Stage 179:===============================>                     (68 + 48) / 116][Stage 179:=====================================>               (82 + 34) / 116][Stage 179:============================================>       (100 + 16) / 116][Stage 179:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.691725506 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371998299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==============================>                      (67 + 48) / 115][Stage 180:========================================>            (87 + 28) / 115][Stage 180:=============================================>       (98 + 17) / 115][Stage 180:==================================================>  (109 + 6) / 115]                                                                                [Stage 181:===================================>                 (77 + 39) / 116][Stage 181:============================================>       (100 + 16) / 116][Stage 181:===============================================>    (106 + 10) / 116][Stage 181:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.197902459 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39075474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (59 + 54) / 113][Stage 182:================================>                    (70 + 43) / 113][Stage 182:========================================>            (86 + 27) / 113][Stage 182:==============================================>     (102 + 11) / 113][Stage 182:====================================================>(111 + 2) / 113]                                                                                [Stage 183:============================>                        (62 + 52) / 114][Stage 183:====================================>                (78 + 36) / 114][Stage 183:==============================================>     (103 + 11) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.267701028 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334737165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:====================================>                (79 + 36) / 115][Stage 184:=======================================>             (86 + 29) / 115][Stage 184:==============================================>     (102 + 13) / 115][Stage 184:==================================================>  (109 + 6) / 115]                                                                                [Stage 185:=======================================>             (87 + 29) / 116][Stage 185:==============================================>     (104 + 12) / 116][Stage 185:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.589212925 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36327413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (80 + 33) / 113][Stage 186:============================================>        (94 + 19) / 113][Stage 186:=================================================>   (106 + 7) / 113][Stage 186:===================================================> (109 + 4) / 113]                                                                                [Stage 187:=================================>                   (73 + 41) / 114][Stage 187:========================================>            (88 + 26) / 114][Stage 187:=============================================>       (98 + 16) / 114][Stage 187:==================================================>  (109 + 5) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.890388815 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=39", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=39,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397660944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:=============================>                       (66 + 54) / 120][Stage 188:===================================>                 (81 + 39) / 120][Stage 188:===========================================>        (100 + 20) / 120][Stage 188:==================================================>  (115 + 5) / 120]                                                                                [Stage 189:==========================>                          (61 + 60) / 121][Stage 189:===============================>                     (73 + 48) / 121][Stage 189:=========================================>           (95 + 26) / 121][Stage 189:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.167188375 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349334002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=================================>                   (72 + 41) / 113][Stage 190:======================================>              (82 + 31) / 113][Stage 190:===========================================>         (93 + 20) / 113][Stage 190:==============================================>     (102 + 11) / 113][Stage 190:===================================================> (110 + 3) / 113]                                                                                [Stage 191:=======================================>             (85 + 29) / 114][Stage 191:===========================================>         (94 + 20) / 114][Stage 191:=================================================>   (106 + 8) / 114][Stage 191:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.984641798 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==================================>                  (74 + 39) / 113][Stage 192:=======================================>             (85 + 28) / 113][Stage 192:=============================================>       (98 + 15) / 113][Stage 192:==================================================>  (108 + 5) / 113]                                                                                [Stage 193:=====================================>               (80 + 34) / 114][Stage 193:===========================================>         (93 + 21) / 114][Stage 193:===============================================>    (104 + 10) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.842663044 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390318027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:============================>                        (61 + 52) / 113][Stage 194:=================================>                   (71 + 42) / 113][Stage 194:===========================================>         (92 + 21) / 113][Stage 194:==================================================>  (107 + 6) / 113]                                                                                [Stage 195:============================>                        (62 + 52) / 114][Stage 195:=================================>                   (72 + 42) / 114][Stage 195:==========================================>          (91 + 23) / 114][Stage 195:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.130888415 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=194", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=194,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378546039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:============================>                        (60 + 53) / 113][Stage 196:================================>                    (70 + 43) / 113][Stage 196:==========================================>          (90 + 23) / 113][Stage 196:====================================================>(111 + 2) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:===========================>                         (60 + 54) / 114][Stage 197:==============================>                      (65 + 49) / 114][Stage 197:=====================================>               (80 + 34) / 114][Stage 197:============================================>        (96 + 18) / 114][Stage 197:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.213748017 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (58 + 55) / 113][Stage 198:=============================>                       (62 + 51) / 113][Stage 198:======================================>              (83 + 30) / 113][Stage 198:==============================================>     (101 + 12) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:=============================>                       (64 + 50) / 114][Stage 199:=====================================>               (80 + 34) / 114][Stage 199:=============================================>      (100 + 14) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.310388406 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=164", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=164,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.657984255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (60 + 60) / 120][Stage 200:============================>                        (64 + 56) / 120][Stage 200:=================================>                   (76 + 44) / 120][Stage 200:============================================>       (102 + 18) / 120][Stage 200:===================================================> (117 + 3) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:============================>                        (66 + 55) / 121][Stage 201:=====================================>               (86 + 35) / 121][Stage 201:=================================================>   (112 + 9) / 121][Stage 201:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.059409495 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m52.694s
user	11m49.296s
sys	0m35.548s
