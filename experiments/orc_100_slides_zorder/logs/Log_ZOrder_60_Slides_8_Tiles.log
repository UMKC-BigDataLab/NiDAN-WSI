Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 02:22:48 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:23:02 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:23:02 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:23:03 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 02:23:05 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:23:16 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601022305-0742).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.314661272 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (46 + 69) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:============================>                          (61 + 55) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:========================================>              (86 + 30) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.402616227 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===================>                                   (41 + 74) / 115][Stage 2:==========================>                            (55 + 60) / 115][Stage 2:=============================>                         (62 + 53) / 115][Stage 2:=================================>                     (71 + 44) / 115][Stage 2:=====================================>                 (79 + 36) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:=====================================================> (112 + 3) / 115][Stage 2:======================================================>(113 + 2) / 115]                                                                                [Stage 3:============================>                          (61 + 55) / 116][Stage 3:===============================>                       (67 + 49) / 116][Stage 3:=================================>                     (71 + 45) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:============================================>          (93 + 23) / 116][Stage 3:===============================================>      (102 + 14) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.598971989 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.68260183 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:============================>                          (61 + 57) / 118][Stage 4:==============================>                        (66 + 52) / 118][Stage 4:==================================>                    (73 + 45) / 118][Stage 4:==================================>                    (75 + 43) / 118][Stage 4:=====================================>                 (80 + 38) / 118][Stage 4:=========================================>             (89 + 29) / 118][Stage 4:=============================================>        (100 + 18) / 118][Stage 4:===================================================>   (110 + 8) / 118][Stage 4:======================================================>(116 + 2) / 118]                                                                                [Stage 5:=================================>                     (72 + 47) / 119][Stage 5:==================================>                    (75 + 44) / 119][Stage 5:====================================>                  (80 + 39) / 119][Stage 5:========================================>              (88 + 31) / 119][Stage 5:==========================================>            (93 + 26) / 119][Stage 5:==============================================>       (103 + 16) / 119][Stage 5:====================================================>  (113 + 6) / 119][Stage 5:======================================================>(117 + 2) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.453411471 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.560390609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:======================================>                (80 + 35) / 115][Stage 6:=======================================>               (83 + 32) / 115][Stage 6:============================================>          (92 + 23) / 115][Stage 6:=============================================>         (96 + 19) / 115][Stage 6:==================================================>    (106 + 9) / 115]                                                                                [Stage 7:=======================================>               (83 + 33) / 116][Stage 7:==========================================>            (90 + 26) / 116][Stage 7:==============================================>        (99 + 17) / 116][Stage 7:================================================>     (105 + 11) / 116][Stage 7:====================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.480144361 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.63528252 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=============================>                         (62 + 53) / 115][Stage 8:================================>                      (67 + 48) / 115][Stage 8:====================================>                  (77 + 38) / 115][Stage 8:============================================>          (92 + 23) / 115][Stage 8:==============================================>        (98 + 17) / 115][Stage 8:===================================================>   (107 + 8) / 115][Stage 8:=====================================================> (112 + 3) / 115]                                                                                [Stage 9:===============================>                       (67 + 49) / 116][Stage 9:======================================>                (82 + 34) / 116][Stage 9:=========================================>             (88 + 28) / 116][Stage 9:===========================================>           (92 + 24) / 116][Stage 9:==============================================>       (100 + 16) / 116][Stage 9:=================================================>    (106 + 10) / 116][Stage 9:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.043612956 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=172", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=172,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.579467946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (57 + 56) / 113][Stage 10:==============================>                       (64 + 49) / 113][Stage 10:==================================>                   (72 + 41) / 113][Stage 10:=========================================>            (87 + 26) / 113][Stage 10:===========================================>          (92 + 21) / 113][Stage 10:==================================================>   (105 + 8) / 113][Stage 10:====================================================> (110 + 3) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:=============================>                        (63 + 51) / 114][Stage 11:================================>                     (68 + 46) / 114][Stage 11:====================================>                 (78 + 36) / 114][Stage 11:=======================================>              (84 + 30) / 114][Stage 11:==============================================>      (100 + 14) / 114][Stage 11:====================================================> (110 + 4) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.83935759 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547504875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (58 + 55) / 113][Stage 12:=============================>                        (61 + 52) / 113][Stage 12:=================================>                    (71 + 42) / 113][Stage 12:===========================================>          (91 + 22) / 113][Stage 12:===================================================>  (107 + 6) / 113]                                                                                [Stage 13:===========================>                          (57 + 57) / 114][Stage 13:===============================>                      (66 + 48) / 114][Stage 13:===================================>                  (74 + 40) / 114][Stage 13:======================================>               (81 + 33) / 114][Stage 13:==============================================>      (100 + 14) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.954051625 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:============================>                         (59 + 54) / 113][Stage 14:============================>                         (60 + 53) / 113][Stage 14:=====================================>                (78 + 35) / 113][Stage 14:==============================================>       (98 + 15) / 113][Stage 14:====================================================> (109 + 4) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:=============================>                        (62 + 52) / 114][Stage 15:=====================================>                (79 + 35) / 114][Stage 15:=============================================>        (97 + 17) / 114][Stage 15:================================================>    (104 + 10) / 114][Stage 15:==================================================>   (107 + 7) / 114][Stage 15:====================================================> (111 + 3) / 114][Stage 15:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.580731338 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (58 + 55) / 113][Stage 16:=============================>                        (62 + 51) / 113][Stage 16:======================================>               (80 + 33) / 113][Stage 16:=============================================>        (96 + 17) / 113][Stage 16:================================================>    (103 + 10) / 113][Stage 16:==================================================>   (106 + 7) / 113][Stage 16:=====================================================>(111 + 2) / 113]                                                                                [Stage 17:===========================>                          (59 + 55) / 114][Stage 17:==============================>                       (64 + 50) / 114][Stage 17:=====================================>                (79 + 35) / 114][Stage 17:==============================================>      (100 + 14) / 114][Stage 17:==================================================>   (107 + 7) / 114][Stage 17:====================================================> (110 + 4) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.500184001 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=253", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=253,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482579587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:======================================>               (81 + 34) / 115][Stage 18:==========================================>           (91 + 24) / 115][Stage 18:==============================================>       (98 + 17) / 115][Stage 18:===================================================>  (110 + 5) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:========================================>             (88 + 28) / 116][Stage 19:=============================================>        (98 + 18) / 116][Stage 19:==================================================>   (108 + 8) / 116][Stage 19:====================================================> (113 + 3) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.318165655 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.533125534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:======================================>               (83 + 32) / 115][Stage 20:===========================================>          (92 + 23) / 115][Stage 20:==============================================>      (100 + 15) / 115][Stage 20:===============================================>     (104 + 11) / 115][Stage 20:=================================================>    (106 + 9) / 115][Stage 20:===================================================>  (110 + 5) / 115]                                                                                [Stage 21:======================================>               (83 + 33) / 116][Stage 21:=========================================>            (90 + 26) / 116][Stage 21:===============================================>     (103 + 13) / 116][Stage 21:=================================================>    (107 + 9) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.423688215 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=111", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=111,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571163219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:===============================>                      (71 + 49) / 120][Stage 22:======================================>               (85 + 35) / 120][Stage 22:=============================================>       (103 + 17) / 120][Stage 22:====================================================> (116 + 4) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:===============================>                      (71 + 50) / 121][Stage 23:=======================================>              (88 + 33) / 121][Stage 23:===========================================>         (100 + 21) / 121][Stage 23:==================================================>   (114 + 7) / 121][Stage 23:====================================================> (118 + 3) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.298313449 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510880694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:============================>                         (59 + 54) / 113][Stage 24:==============================>                       (63 + 50) / 113][Stage 24:====================================>                 (76 + 37) / 113][Stage 24:=================================================>    (104 + 9) / 113][Stage 24:====================================================> (110 + 3) / 113]                                                                                [Stage 25:============================>                         (61 + 53) / 114][Stage 25:===============================>                      (67 + 47) / 114][Stage 25:========================================>             (86 + 28) / 114][Stage 25:===============================================>     (102 + 12) / 114][Stage 25:====================================================> (110 + 4) / 114][Stage 25:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.834975714 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506931837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (73 + 45) / 118][Stage 26:===================================>                  (78 + 40) / 118][Stage 26:==========================================>           (92 + 26) / 118][Stage 26:==================================================>   (110 + 8) / 118][Stage 26:=====================================================>(117 + 1) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:====================================>                 (80 + 39) / 119][Stage 27:========================================>             (89 + 30) / 119][Stage 27:=============================================>       (103 + 16) / 119][Stage 27:=================================================>    (110 + 9) / 119][Stage 27:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.191758526 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=10", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=10,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.574614582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:==============================>                       (68 + 52) / 120][Stage 28:====================================>                 (81 + 39) / 120][Stage 28:============================================>        (101 + 19) / 120][Stage 28:====================================================> (117 + 3) / 120]                                                                                [Stage 29:===========================>                          (62 + 59) / 121][Stage 29:================================>                     (72 + 49) / 121][Stage 29:======================================>               (86 + 35) / 121][Stage 29:==============================================>      (106 + 15) / 121][Stage 29:================================================>    (110 + 11) / 121][Stage 29:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 5.773656625 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.522808744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:==============================>                       (68 + 52) / 120][Stage 30:=======================================>              (87 + 33) / 120][Stage 30:============================================>        (100 + 20) / 120][Stage 30:==================================================>   (112 + 8) / 120]                                                                                [Stage 31:===========================>                          (62 + 59) / 121][Stage 31:===================================>                  (80 + 41) / 121][Stage 31:============================================>        (102 + 19) / 121][Stage 31:===================================================>  (115 + 6) / 121][Stage 31:=====================================================>(119 + 2) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.316677412 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.554939649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (58 + 55) / 113][Stage 32:============================>                         (59 + 54) / 113][Stage 32:=================================>                    (70 + 43) / 113][Stage 32:===========================================>          (92 + 21) / 113][Stage 32:===================================================>  (108 + 5) / 113][Stage 32:=====================================================>(112 + 1) / 113]                                                                                [Stage 33:============================>                         (60 + 54) / 114][Stage 33:=================================>                    (70 + 44) / 114][Stage 33:========================================>             (85 + 29) / 114][Stage 33:================================================>    (104 + 10) / 114][Stage 33:=====================================================>(112 + 2) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.140765183 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433452402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=================================>                    (70 + 43) / 113][Stage 34:======================================>               (81 + 32) / 113][Stage 34:=============================================>        (95 + 18) / 113][Stage 34:===============================================>     (101 + 12) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:====================================>                 (77 + 37) / 114][Stage 35:=======================================>              (84 + 30) / 114][Stage 35:=============================================>        (97 + 17) / 114][Stage 35:==================================================>   (107 + 7) / 114][Stage 35:====================================================> (111 + 3) / 114][Stage 35:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 8.30897592 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=198", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=198,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47931517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===============================>                      (67 + 48) / 115][Stage 36:=====================================>                (80 + 35) / 115][Stage 36:=============================================>        (96 + 19) / 115][Stage 36:===============================================>     (103 + 12) / 115][Stage 36:====================================================> (112 + 3) / 115]                                                                                [Stage 37:===================================>                  (76 + 40) / 116][Stage 37:==========================================>           (92 + 24) / 116][Stage 37:===============================================>     (103 + 13) / 116][Stage 37:====================================================> (113 + 3) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.240126381 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478549585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:===============================>                      (65 + 48) / 113][Stage 38:=====================================>                (79 + 34) / 113][Stage 38:==============================================>      (100 + 13) / 113][Stage 38:====================================================> (109 + 4) / 113]                                                                                [Stage 39:============================>                         (61 + 53) / 114][Stage 39:==================================>                   (73 + 41) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:===============================================>     (103 + 11) / 114][Stage 39:===================================================>  (109 + 5) / 114][Stage 39:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.961214153 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484184021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (58 + 55) / 113][Stage 40:=============================>                        (61 + 52) / 113][Stage 40:===================================>                  (75 + 38) / 113][Stage 40:===========================================>          (92 + 21) / 113][Stage 40:==============================================>      (100 + 13) / 113][Stage 40:=================================================>    (104 + 9) / 113][Stage 40:===================================================>  (107 + 6) / 113]                                                                                [Stage 41:===========================>                          (59 + 55) / 114][Stage 41:================================>                     (68 + 46) / 114][Stage 41:==========================================>           (90 + 24) / 114][Stage 41:==================================================>   (106 + 8) / 114][Stage 41:==================================================>   (107 + 7) / 114][Stage 41:====================================================> (110 + 4) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.769012946 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497753903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===================================>                  (75 + 40) / 115][Stage 42:===========================================>          (93 + 22) / 115][Stage 42:===============================================>     (103 + 12) / 115][Stage 42:===================================================>  (109 + 6) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=======================================>              (84 + 32) / 116][Stage 43:==========================================>           (92 + 24) / 116][Stage 43:==============================================>       (99 + 17) / 116][Stage 43:===============================================>     (104 + 12) / 116][Stage 43:===================================================>  (111 + 5) / 116][Stage 43:====================================================> (112 + 4) / 116][Stage 43:====================================================> (113 + 3) / 116][Stage 43:=====================================================>(114 + 2) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.876722757 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (70 + 45) / 115][Stage 44:=========================================>            (88 + 27) / 115][Stage 44:==============================================>      (100 + 15) / 115][Stage 44:===================================================>  (110 + 5) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:================================>                     (69 + 47) / 116][Stage 45:====================================>                 (78 + 38) / 116][Stage 45:=============================================>        (98 + 18) / 116][Stage 45:===============================================>     (105 + 11) / 116][Stage 45:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.151518427 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421795186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===================================>                  (75 + 38) / 113][Stage 46:==========================================>           (88 + 25) / 113][Stage 46:===============================================>      (99 + 14) / 113][Stage 46:===================================================>  (108 + 5) / 113][Stage 46:=====================================================>(111 + 2) / 113]                                                                                [Stage 47:=====================================>                (80 + 34) / 114][Stage 47:===========================================>          (92 + 22) / 114][Stage 47:==============================================>      (100 + 14) / 114][Stage 47:==================================================>   (106 + 8) / 114][Stage 47:===================================================>  (109 + 5) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.623601043 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=40", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=40,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:>                                                       (0 + 0) / 113][Stage 48:==================================>                   (73 + 40) / 113][Stage 48:========================================>             (85 + 28) / 113][Stage 48:=============================================>        (96 + 17) / 113][Stage 48:===============================================>     (101 + 12) / 113][Stage 48:===================================================>  (107 + 6) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:====================================>                 (76 + 38) / 114][Stage 49:=======================================>              (83 + 31) / 114][Stage 49:=============================================>        (97 + 17) / 114][Stage 49:=================================================>    (105 + 9) / 114][Stage 49:====================================================> (110 + 4) / 114][Stage 49:=====================================================>(112 + 2) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.503263064 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=108", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=108,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481238076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===============================>                      (68 + 47) / 115][Stage 50:=====================================>                (80 + 35) / 115][Stage 50:=============================================>        (97 + 18) / 115][Stage 50:==================================================>   (107 + 8) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:===============================>                      (67 + 49) / 116][Stage 51:===================================>                  (76 + 40) / 116][Stage 51:=======================================>              (85 + 31) / 116][Stage 51:=============================================>       (100 + 16) / 116][Stage 51:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.078909896 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476880259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:=================================>                    (70 + 43) / 113][Stage 52:=======================================>              (82 + 31) / 113][Stage 52:==============================================>      (100 + 13) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:===================================>                  (75 + 39) / 114][Stage 53:========================================>             (85 + 29) / 114][Stage 53:==================================================>   (107 + 7) / 114][Stage 53:====================================================> (110 + 4) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.152274691 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394747489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (81 + 34) / 115][Stage 54:======================================>               (83 + 32) / 115][Stage 54:==========================================>           (91 + 24) / 115][Stage 54:===============================================>     (102 + 13) / 115][Stage 54:=====================================================>(113 + 2) / 115]                                                                                [Stage 55:======================================>               (82 + 34) / 116][Stage 55:==========================================>           (91 + 25) / 116][Stage 55:===============================================>     (104 + 12) / 116][Stage 55:===================================================>  (110 + 6) / 116][Stage 55:====================================================> (112 + 4) / 116][Stage 55:====================================================> (113 + 3) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.546622237 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401595728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=====================================>                (78 + 35) / 113][Stage 56:============================================>         (93 + 20) / 113][Stage 56:==================================================>   (105 + 8) / 113][Stage 56:=====================================================>(111 + 2) / 113]                                                                                [Stage 57:======================================>               (82 + 32) / 114][Stage 57:==============================================>       (98 + 16) / 114][Stage 57:===============================================>     (103 + 11) / 114][Stage 57:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.008305996 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444565467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (58 + 55) / 113][Stage 58:==============================>                       (64 + 49) / 113][Stage 58:=====================================>                (78 + 35) / 113][Stage 58:============================================>         (94 + 19) / 113][Stage 58:=====================================================>(111 + 2) / 113]                                                                                [Stage 59:===========================>                          (58 + 56) / 114][Stage 59:==============================>                       (65 + 49) / 114][Stage 59:=====================================>                (80 + 34) / 114][Stage 59:==============================================>      (101 + 13) / 114][Stage 59:====================================================> (111 + 3) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.178192548 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447542894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (70 + 45) / 115][Stage 60:=======================================>              (84 + 31) / 115][Stage 60:==============================================>       (99 + 16) / 115][Stage 60:=================================================>    (106 + 9) / 115][Stage 60:=====================================================>(113 + 2) / 115][Stage 60:=====================================================>(114 + 1) / 115]                                                                                [Stage 61:================================>                     (70 + 46) / 116][Stage 61:=======================================>              (84 + 32) / 116][Stage 61:=============================================>       (100 + 16) / 116][Stage 61:=====================================================>(114 + 2) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.275810032 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430598547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (72 + 41) / 113][Stage 62:======================================>               (81 + 32) / 113][Stage 62:===========================================>          (90 + 23) / 113][Stage 62:===============================================>     (101 + 12) / 113][Stage 62:====================================================> (109 + 4) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:====================================>                 (77 + 37) / 114][Stage 63:==========================================>           (89 + 25) / 114][Stage 63:==============================================>      (101 + 13) / 114][Stage 63:===================================================>  (108 + 6) / 114][Stage 63:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.202183149 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461998035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==============================>                       (65 + 50) / 115][Stage 64:==================================>                   (73 + 42) / 115][Stage 64:===========================================>          (93 + 22) / 115][Stage 64:==================================================>   (108 + 7) / 115]                                                                                [Stage 65:===================================>                  (77 + 39) / 116][Stage 65:=========================================>            (89 + 27) / 116][Stage 65:==================================================>   (108 + 8) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.788927023 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399740451 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (72 + 41) / 113][Stage 66:=======================================>              (83 + 30) / 113][Stage 66:===========================================>          (92 + 21) / 113][Stage 66:===============================================>      (99 + 14) / 113][Stage 66:====================================================> (109 + 4) / 113][Stage 66:=====================================================>(111 + 2) / 113]                                                                                [Stage 67:====================================>                 (77 + 37) / 114][Stage 67:=======================================>              (83 + 31) / 114][Stage 67:=============================================>        (96 + 18) / 114][Stage 67:==================================================>   (106 + 8) / 114][Stage 67:====================================================> (111 + 3) / 114][Stage 67:=====================================================>(112 + 2) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.3652346 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442714496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:============================>                         (59 + 54) / 113][Stage 68:==============================>                       (64 + 49) / 113][Stage 68:=======================================>              (82 + 31) / 113][Stage 68:==============================================>      (100 + 13) / 113][Stage 68:==================================================>   (105 + 8) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:============================>                         (60 + 54) / 114][Stage 69:===============================>                      (66 + 48) / 114][Stage 69:======================================>               (81 + 33) / 114][Stage 69:===============================================>     (103 + 11) / 114][Stage 69:=====================================================>(112 + 2) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.858938625 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406811845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==================================>                   (72 + 41) / 113][Stage 70:=====================================>                (79 + 34) / 113][Stage 70:=============================================>        (96 + 17) / 113][Stage 70:==================================================>   (105 + 8) / 113][Stage 70:====================================================> (110 + 3) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:====================================>                 (76 + 38) / 114][Stage 71:=========================================>            (87 + 27) / 114][Stage 71:==============================================>       (98 + 16) / 114][Stage 71:=================================================>    (105 + 9) / 114][Stage 71:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.256941095 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==================================>                   (72 + 41) / 113][Stage 72:=========================================>            (87 + 26) / 113][Stage 72:==============================================>       (97 + 16) / 113][Stage 72:==================================================>   (106 + 7) / 113][Stage 72:=====================================================>(111 + 2) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:=======================================>              (83 + 31) / 114][Stage 73:===========================================>          (92 + 22) / 114][Stage 73:===============================================>     (102 + 12) / 114][Stage 73:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.355380008 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=84", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=84,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373631525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=======================================>              (84 + 31) / 115][Stage 74:==========================================>           (90 + 25) / 115][Stage 74:==================================================>   (107 + 8) / 115][Stage 74:=====================================================>(113 + 2) / 115]                                                                                [Stage 75:=======================================>              (84 + 32) / 116][Stage 75:==========================================>           (92 + 24) / 116][Stage 75:===============================================>     (105 + 11) / 116][Stage 75:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.995596318 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413761755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:===================================>                  (77 + 41) / 118][Stage 76:=======================================>              (86 + 32) / 118][Stage 76:============================================>         (97 + 21) / 118][Stage 76:================================================>    (107 + 11) / 118][Stage 76:=====================================================>(116 + 2) / 118]                                                                                [Stage 77:==================================>                   (76 + 43) / 119][Stage 77:======================================>               (85 + 34) / 119][Stage 77:============================================>         (99 + 20) / 119][Stage 77:==================================================>   (111 + 8) / 119][Stage 77:=====================================================>(117 + 2) / 119][Stage 77:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.045673205 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441537379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:==============================>                       (67 + 53) / 120][Stage 78:===================================>                  (78 + 42) / 120][Stage 78:=========================================>            (92 + 28) / 120][Stage 78:====================================================> (116 + 4) / 120][Stage 78:=====================================================>(119 + 1) / 120]                                                                                [Stage 79:===========================>                          (61 + 60) / 121][Stage 79:===============================>                      (71 + 50) / 121][Stage 79:=====================================>                (85 + 36) / 121][Stage 79:==============================================>      (106 + 15) / 121][Stage 79:==================================================>   (114 + 7) / 121][Stage 79:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.24226282 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413793486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===============================>                      (67 + 48) / 115][Stage 80:====================================>                 (77 + 38) / 115][Stage 80:=============================================>        (96 + 19) / 115][Stage 80:===================================================>  (109 + 6) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:====================================>                 (78 + 38) / 116][Stage 81:=============================================>       (100 + 16) / 116][Stage 81:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.739333315 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389102331 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (80 + 33) / 113][Stage 82:===========================================>          (90 + 23) / 113][Stage 82:==============================================>      (100 + 13) / 113][Stage 82:===================================================>  (108 + 5) / 113][Stage 82:=====================================================>(112 + 1) / 113]                                                                                [Stage 83:====================================>                 (77 + 37) / 114][Stage 83:========================================>             (85 + 29) / 114][Stage 83:=============================================>        (97 + 17) / 114][Stage 83:===================================================>  (108 + 6) / 114][Stage 83:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.041895298 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=59", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=59,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45213345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (69 + 46) / 115][Stage 84:======================================>               (82 + 33) / 115][Stage 84:==========================================>           (91 + 24) / 115][Stage 84:===============================================>     (102 + 13) / 115][Stage 84:===================================================>  (109 + 6) / 115][Stage 84:=====================================================>(113 + 2) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:=================================>                    (73 + 43) / 116][Stage 85:=======================================>              (85 + 31) / 116][Stage 85:===========================================>          (93 + 23) / 116][Stage 85:===============================================>     (103 + 13) / 116][Stage 85:==================================================>   (109 + 7) / 116][Stage 85:====================================================> (112 + 4) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.220096847 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414110234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:>                                                       (0 + 0) / 115][Stage 86:================================>                     (69 + 46) / 115][Stage 86:=====================================>                (80 + 35) / 115][Stage 86:============================================>         (95 + 20) / 115][Stage 86:==============================================>      (101 + 14) / 115][Stage 86:====================================================> (111 + 4) / 115]                                                                                [Stage 87:===============================>                      (67 + 49) / 116][Stage 87:===================================>                  (76 + 40) / 116][Stage 87:========================================>             (88 + 28) / 116][Stage 87:============================================>         (96 + 20) / 116][Stage 87:===============================================>     (103 + 13) / 116][Stage 87:====================================================> (112 + 4) / 116][Stage 87:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.443583708 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=143", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=143,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42391386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==============================>                       (65 + 50) / 115][Stage 88:======================================>               (81 + 34) / 115][Stage 88:==============================================>       (99 + 16) / 115][Stage 88:====================================================> (112 + 3) / 115]                                                                                [Stage 89:================================>                     (69 + 47) / 116][Stage 89:========================================>             (88 + 28) / 116][Stage 89:===============================================>     (103 + 13) / 116][Stage 89:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.751281452 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===============================>                      (67 + 48) / 115][Stage 90:=====================================>                (80 + 35) / 115][Stage 90:============================================>         (94 + 21) / 115][Stage 90:==================================================>   (107 + 8) / 115][Stage 90:====================================================> (112 + 3) / 115]                                                                                [Stage 91:===============================>                      (68 + 48) / 116][Stage 91:======================================>               (82 + 34) / 116][Stage 91:============================================>         (95 + 21) / 116][Stage 91:===============================================>     (104 + 12) / 116][Stage 91:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.959754434 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=125", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=125,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373994747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (70 + 43) / 113][Stage 92:======================================>               (80 + 33) / 113][Stage 92:============================================>         (93 + 20) / 113][Stage 92:===============================================>      (99 + 14) / 113][Stage 92:====================================================> (110 + 3) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:====================================>                 (76 + 38) / 114][Stage 93:=========================================>            (87 + 27) / 114][Stage 93:=============================================>        (97 + 17) / 114][Stage 93:====================================================> (111 + 3) / 114][Stage 93:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.330548595 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=112", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=112,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354260832 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=====================================>                (79 + 36) / 115][Stage 94:========================================>             (86 + 29) / 115][Stage 94:==============================================>       (99 + 16) / 115][Stage 94:===================================================>  (109 + 6) / 115][Stage 94:=====================================================>(113 + 2) / 115]                                                                                [Stage 95:======================================>               (82 + 34) / 116][Stage 95:=========================================>            (89 + 27) / 116][Stage 95:================================================>    (106 + 10) / 116][Stage 95:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.718966038 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425734706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (60 + 60) / 120][Stage 96:================================>                     (72 + 48) / 120][Stage 96:=========================================>            (92 + 28) / 120][Stage 96:=================================================>    (111 + 9) / 120][Stage 96:====================================================> (116 + 4) / 120][Stage 96:=====================================================>(118 + 2) / 120]                                                                                [Stage 97:===========================>                          (61 + 60) / 121][Stage 97:=============================>                        (66 + 55) / 121][Stage 97:===================================>                  (79 + 42) / 121][Stage 97:=========================================>            (92 + 29) / 121][Stage 97:==================================================>   (113 + 8) / 121][Stage 97:=====================================================>(119 + 2) / 121][Stage 97:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.497678272 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=146", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=146,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394921201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==============================>                       (66 + 49) / 115][Stage 98:=======================================>              (85 + 30) / 115][Stage 98:============================================>         (95 + 20) / 115][Stage 98:===================================================>  (110 + 5) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=================================>                    (71 + 45) / 116][Stage 99:======================================>               (82 + 34) / 116][Stage 99:==============================================>       (99 + 17) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.830796849 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381924925 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===================================>                 (75 + 38) / 113][Stage 100:========================================>            (86 + 27) / 113][Stage 100:=============================================>       (96 + 17) / 113][Stage 100:===============================================>    (103 + 10) / 113][Stage 100:====================================================>(111 + 2) / 113]                                                                                [Stage 101:===================================>                 (77 + 37) / 114][Stage 101:=========================================>           (90 + 24) / 114][Stage 101:==============================================>      (99 + 15) / 114][Stage 101:==============================================>     (103 + 11) / 114][Stage 101:===================================================> (110 + 4) / 114][Stage 101:====================================================>(112 + 2) / 114][Stage 101:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.583341476 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (78 + 35) / 113][Stage 102:=========================================>           (89 + 24) / 113][Stage 102:================================================>    (104 + 9) / 113][Stage 102:=================================================>   (106 + 7) / 113][Stage 102:==================================================>  (108 + 5) / 113][Stage 102:====================================================>(112 + 1) / 113]                                                                                [Stage 103:======================================>              (83 + 31) / 114][Stage 103:============================================>        (95 + 19) / 114][Stage 103:==============================================>     (103 + 11) / 114][Stage 103:==================================================>  (109 + 5) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.540909323 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409572617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:====================================>                (80 + 35) / 115][Stage 104:===========================================>         (95 + 20) / 115][Stage 104:==============================================>     (102 + 13) / 115][Stage 104:=================================================>   (108 + 7) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:=============================>                       (65 + 51) / 116][Stage 105:==================================>                  (75 + 41) / 116][Stage 105:=======================================>             (87 + 29) / 116][Stage 105:============================================>        (98 + 18) / 116][Stage 105:==================================================>  (110 + 6) / 116][Stage 105:===================================================> (112 + 4) / 116][Stage 105:===================================================> (113 + 3) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.308962745 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405985767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (66 + 49) / 115][Stage 106:====================================>                (80 + 35) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:===============================================>    (104 + 11) / 115][Stage 106:===================================================> (111 + 4) / 115]                                                                                [Stage 107:================================>                    (72 + 44) / 116][Stage 107:==========================================>          (92 + 24) / 116][Stage 107:===============================================>    (106 + 10) / 116][Stage 107:==================================================>  (111 + 5) / 116][Stage 107:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.108653765 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=85", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=85,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425984917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:=============================>                       (67 + 53) / 120][Stage 108:====================================>                (82 + 38) / 120][Stage 108:===============================================>    (109 + 11) / 120]                                                                                [Stage 109:==========================>                          (61 + 60) / 121][Stage 109:===============================>                     (72 + 49) / 121][Stage 109:========================================>            (92 + 29) / 121][Stage 109:===============================================>    (111 + 10) / 121][Stage 109:====================================================>(119 + 2) / 121][Stage 109:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.008495799 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405376613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (58 + 55) / 113][Stage 110:============================>                        (60 + 53) / 113][Stage 110:==================================>                  (73 + 40) / 113][Stage 110:===========================================>         (93 + 20) / 113][Stage 110:=================================================>   (105 + 8) / 113]                                                                                [Stage 111:============================>                        (62 + 52) / 114][Stage 111:================================>                    (69 + 45) / 114][Stage 111:=======================================>             (84 + 30) / 114][Stage 111:==============================================>     (102 + 12) / 114][Stage 111:====================================================>(112 + 2) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.667472634 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387662422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:=================================>                   (74 + 44) / 118][Stage 112:======================================>              (86 + 32) / 118][Stage 112:============================================>        (99 + 19) / 118][Stage 112:===================================================> (115 + 3) / 118]                                                                                [Stage 113:================================>                    (74 + 45) / 119][Stage 113:====================================>                (83 + 36) / 119][Stage 113:===========================================>        (100 + 19) / 119][Stage 113:==============================================>     (106 + 13) / 119][Stage 113:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.583164078 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413111294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:===========================>                         (63 + 57) / 120][Stage 114:==================================>                  (77 + 43) / 120][Stage 114:===========================================>        (100 + 20) / 120][Stage 114:===================================================> (116 + 4) / 120]                                                                                [Stage 115:==========================>                          (61 + 60) / 121][Stage 115:===============================>                     (71 + 50) / 121][Stage 115:====================================>                (84 + 37) / 121][Stage 115:=================================================>   (113 + 8) / 121][Stage 115:===================================================> (118 + 3) / 121][Stage 115:====================================================>(119 + 2) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 6.038060342 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=94", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=94,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368765594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:======================================>              (83 + 30) / 113][Stage 116:==========================================>          (91 + 22) / 113][Stage 116:==============================================>     (100 + 13) / 113][Stage 116:=================================================>   (106 + 7) / 113][Stage 116:====================================================>(111 + 2) / 113]                                                                                [Stage 117:==================================>                  (75 + 39) / 114][Stage 117:======================================>              (83 + 31) / 114][Stage 117:===========================================>         (94 + 20) / 114][Stage 117:==================================================>  (108 + 6) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.055497457 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372946258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (72 + 41) / 113][Stage 118:====================================>                (78 + 35) / 113][Stage 118:===========================================>         (93 + 20) / 113][Stage 118:================================================>    (104 + 9) / 113][Stage 118:====================================================>(111 + 2) / 113]                                                                                [Stage 119:=====================================>               (80 + 34) / 114][Stage 119:=========================================>           (90 + 24) / 114][Stage 119:============================================>        (96 + 18) / 114][Stage 119:==============================================>     (103 + 11) / 114][Stage 119:=================================================>   (107 + 7) / 114][Stage 119:===================================================> (110 + 4) / 114][Stage 119:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.597039809 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427983429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (62 + 58) / 120][Stage 120:=================================>                   (76 + 44) / 120][Stage 120:========================================>            (91 + 29) / 120][Stage 120:=================================================>   (113 + 7) / 120][Stage 120:====================================================>(119 + 1) / 120]                                                                                [Stage 121:===========================>                         (62 + 59) / 121][Stage 121:===============================>                     (71 + 50) / 121][Stage 121:=====================================>               (86 + 35) / 121][Stage 121:==============================================>     (109 + 12) / 121][Stage 121:===================================================> (118 + 3) / 121][Stage 121:====================================================>(119 + 2) / 121][Stage 121:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.999577264 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=119", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=119,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382545159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:==================================>                  (76 + 42) / 118][Stage 122:=======================================>             (87 + 31) / 118][Stage 122:===========================================>         (97 + 21) / 118][Stage 122:=================================================>   (111 + 7) / 118][Stage 122:====================================================>(117 + 1) / 118]                                                                                [Stage 123:================================>                    (73 + 46) / 119][Stage 123:==================================>                  (77 + 42) / 119][Stage 123:=======================================>             (89 + 30) / 119][Stage 123:============================================>       (101 + 18) / 119][Stage 123:===================================================> (115 + 4) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.877889937 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348119057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=====================================>               (82 + 33) / 115][Stage 124:=========================================>           (91 + 24) / 115][Stage 124:=================================================>   (107 + 8) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:=====================================>               (83 + 33) / 116][Stage 125:=========================================>           (90 + 26) / 116][Stage 125:================================================>    (107 + 9) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.616664029 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501416423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===============================>                     (68 + 47) / 115][Stage 126:====================================>                (80 + 35) / 115][Stage 126:==========================================>          (92 + 23) / 115][Stage 126:=================================================>   (107 + 8) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:================================>                    (72 + 44) / 116][Stage 127:=========================================>           (91 + 25) / 116][Stage 127:=============================================>      (101 + 15) / 116][Stage 127:==================================================>  (110 + 6) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.009864319 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376168955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=================================>                   (72 + 41) / 113][Stage 128:=====================================>               (80 + 33) / 113][Stage 128:===========================================>         (93 + 20) / 113][Stage 128:================================================>    (104 + 9) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:=================================>                   (73 + 41) / 114][Stage 129:=====================================>               (81 + 33) / 114][Stage 129:===========================================>         (94 + 20) / 114][Stage 129:==============================================>     (101 + 13) / 114][Stage 129:===============================================>    (104 + 10) / 114][Stage 129:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 7.53433236 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415260458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (62 + 58) / 120][Stage 130:===============================>                     (71 + 49) / 120][Stage 130:====================================>                (82 + 38) / 120][Stage 130:=============================================>      (106 + 14) / 120][Stage 130:====================================================>(119 + 1) / 120]                                                                                [Stage 131:==========================>                          (61 + 60) / 121][Stage 131:==============================>                      (69 + 52) / 121][Stage 131:========================================>            (92 + 29) / 121][Stage 131:=================================================>   (113 + 8) / 121][Stage 131:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.251949402 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:===========================>                         (63 + 57) / 120][Stage 132:===============================>                     (72 + 48) / 120][Stage 132:===========================================>         (99 + 21) / 120][Stage 132:====================================================>(118 + 2) / 120]                                                                                [Stage 133:==========================>                          (61 + 60) / 121][Stage 133:=============================>                       (68 + 53) / 121][Stage 133:====================================>                (83 + 38) / 121][Stage 133:===========================================>        (102 + 19) / 121][Stage 133:=================================================>   (114 + 7) / 121][Stage 133:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.905189451 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362911148 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (72 + 46) / 118][Stage 134:===================================>                 (78 + 40) / 118][Stage 134:=======================================>             (87 + 31) / 118][Stage 134:===============================================>    (108 + 10) / 118][Stage 134:===================================================> (115 + 3) / 118]                                                                                [Stage 135:================================>                    (74 + 45) / 119][Stage 135:=======================================>             (88 + 31) / 119][Stage 135:===============================================>    (108 + 11) / 119][Stage 135:===================================================> (116 + 3) / 119][Stage 135:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.445142488 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=144", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=144,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349026964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (71 + 42) / 113][Stage 136:======================================>              (82 + 31) / 113][Stage 136:============================================>        (94 + 19) / 113][Stage 136:================================================>    (104 + 9) / 113][Stage 136:==================================================>  (108 + 5) / 113]                                                                                [Stage 137:===================================>                 (77 + 37) / 114][Stage 137:========================================>            (87 + 27) / 114][Stage 137:============================================>        (96 + 18) / 114][Stage 137:================================================>    (105 + 9) / 114][Stage 137:===================================================> (110 + 4) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.261021302 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (79 + 34) / 113][Stage 138:=========================================>           (88 + 25) / 113][Stage 138:=============================================>       (97 + 16) / 113][Stage 138:==================================================>  (108 + 5) / 113][Stage 138:===================================================> (109 + 4) / 113][Stage 138:====================================================>(111 + 2) / 113]                                                                                [Stage 139:======================================>              (82 + 32) / 114][Stage 139:===========================================>         (93 + 21) / 114][Stage 139:==============================================>     (103 + 11) / 114][Stage 139:==================================================>  (109 + 5) / 114][Stage 139:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.457698805 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385965741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==================================>                  (75 + 40) / 115][Stage 140:======================================>              (83 + 32) / 115][Stage 140:=============================================>       (98 + 17) / 115][Stage 140:===============================================>    (105 + 10) / 115][Stage 140:===================================================> (112 + 3) / 115]                                                                                [Stage 141:===============================>                     (70 + 46) / 116][Stage 141:====================================>                (80 + 36) / 116][Stage 141:=========================================>           (91 + 25) / 116][Stage 141:============================================>        (98 + 18) / 116][Stage 141:============================================>       (100 + 16) / 116][Stage 141:=================================================>   (108 + 8) / 116][Stage 141:===================================================> (112 + 4) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.879161327 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383446905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==============================>                      (67 + 48) / 115][Stage 142:===================================>                 (78 + 37) / 115][Stage 142:==========================================>          (92 + 23) / 115][Stage 142:================================================>    (106 + 9) / 115][Stage 142:===================================================> (112 + 3) / 115]                                                                                [Stage 143:================================>                    (71 + 45) / 116][Stage 143:========================================>            (88 + 28) / 116][Stage 143:============================================>        (97 + 19) / 116][Stage 143:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.083470727 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394018062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:==============================>                      (69 + 51) / 120][Stage 144:=====================================>               (86 + 34) / 120][Stage 144:===============================================>    (110 + 10) / 120][Stage 144:====================================================>(119 + 1) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:============================>                        (66 + 55) / 121][Stage 145:====================================>                (83 + 38) / 121][Stage 145:===============================================>    (111 + 10) / 121][Stage 145:====================================================>(119 + 2) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.722355915 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357879525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==================================>                  (74 + 39) / 113][Stage 146:=======================================>             (85 + 28) / 113][Stage 146:============================================>        (94 + 19) / 113][Stage 146:=================================================>   (106 + 7) / 113]                                                                                [Stage 147:=====================================>               (80 + 34) / 114][Stage 147:========================================>            (88 + 26) / 114][Stage 147:============================================>        (96 + 18) / 114][Stage 147:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.892514329 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=23", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=23,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384183962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (58 + 55) / 113][Stage 148:===============================>                     (67 + 46) / 113][Stage 148:=====================================>               (79 + 34) / 113][Stage 148:===========================================>         (93 + 20) / 113][Stage 148:===================================================> (109 + 4) / 113]                                                                                [Stage 149:===========================>                         (60 + 54) / 114][Stage 149:================================>                    (69 + 45) / 114][Stage 149:========================================>            (88 + 26) / 114][Stage 149:================================================>    (105 + 9) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.894850992 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=137", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=137,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382164755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:=================================>                   (74 + 44) / 118][Stage 150:===================================>                 (78 + 40) / 118][Stage 150:===================================>                 (80 + 38) / 118][Stage 150:===========================================>         (96 + 22) / 118][Stage 150:===================================================> (115 + 3) / 118]                                                                                [Stage 151:=================================>                   (75 + 44) / 119][Stage 151:===================================>                 (80 + 39) / 119][Stage 151:========================================>            (90 + 29) / 119][Stage 151:============================================>        (99 + 20) / 119][Stage 151:===================================================> (115 + 4) / 119][Stage 151:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.960836222 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351444402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:====================================>                (78 + 35) / 113][Stage 152:========================================>            (87 + 26) / 113][Stage 152:=============================================>       (96 + 17) / 113][Stage 152:================================================>    (104 + 9) / 113][Stage 152:====================================================>(111 + 2) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:===================================>                 (77 + 37) / 114][Stage 153:==========================================>          (92 + 22) / 114][Stage 153:================================================>    (105 + 9) / 114][Stage 153:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.13738643 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390628765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (59 + 54) / 113][Stage 154:==============================>                      (65 + 48) / 113][Stage 154:=========================================>           (88 + 25) / 113][Stage 154:==============================================>     (101 + 12) / 113][Stage 154:===================================================> (110 + 3) / 113]                                                                                [Stage 155:===========================>                         (60 + 54) / 114][Stage 155:==============================>                      (65 + 49) / 114][Stage 155:========================================>            (87 + 27) / 114][Stage 155:=============================================>       (97 + 17) / 114][Stage 155:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.315625529 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391304488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:================================>                    (69 + 44) / 113][Stage 156:========================================>            (86 + 27) / 113][Stage 156:=================================================>   (105 + 8) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:===========================>                         (60 + 54) / 114][Stage 157:===============================>                     (68 + 46) / 114][Stage 157:=======================================>             (86 + 28) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:==================================================>  (108 + 6) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.11778809 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404270511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:============================>                        (64 + 56) / 120][Stage 158:==================================>                  (77 + 43) / 120][Stage 158:=============================================>      (105 + 15) / 120][Stage 158:===================================================> (117 + 3) / 120]                                                                                [Stage 159:==========================>                          (61 + 60) / 121][Stage 159:==============================>                      (69 + 52) / 121][Stage 159:======================================>              (87 + 34) / 121][Stage 159:============================================>       (103 + 18) / 121][Stage 159:===================================================> (118 + 3) / 121][Stage 159:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.814511603 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=206", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=206,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359710542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (73 + 45) / 118][Stage 160:===================================>                 (79 + 39) / 118][Stage 160:=======================================>             (89 + 29) / 118][Stage 160:============================================>       (100 + 18) / 118][Stage 160:====================================================>(116 + 2) / 118]                                                                                [Stage 161:================================>                    (73 + 46) / 119][Stage 161:=================================>                   (76 + 43) / 119][Stage 161:=======================================>             (89 + 30) / 119][Stage 161:============================================>       (102 + 17) / 119][Stage 161:=================================================>   (112 + 7) / 119][Stage 161:====================================================>(117 + 2) / 119][Stage 161:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.840899344 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385202887 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (58 + 55) / 113][Stage 162:============================>                        (61 + 52) / 113][Stage 162:====================================>                (77 + 36) / 113][Stage 162:==============================================>     (100 + 13) / 113]                                                                                [Stage 163:============================>                        (61 + 53) / 114][Stage 163:=================================>                   (71 + 43) / 114][Stage 163:=========================================>           (90 + 24) / 114][Stage 163:===============================================>    (104 + 10) / 114][Stage 163:====================================================>(112 + 2) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.683477082 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351314159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==================================>                  (74 + 39) / 113][Stage 164:=====================================>               (79 + 34) / 113][Stage 164:=============================================>       (98 + 15) / 113][Stage 164:=================================================>   (105 + 8) / 113][Stage 164:===================================================> (110 + 3) / 113]                                                                                [Stage 165:======================================>              (82 + 32) / 114][Stage 165:===========================================>         (93 + 21) / 114][Stage 165:==============================================>     (103 + 11) / 114][Stage 165:==================================================>  (109 + 5) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.230309613 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394006179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:==========================>                          (61 + 59) / 120][Stage 166:================================>                    (73 + 47) / 120][Stage 166:===========================================>         (99 + 21) / 120][Stage 166:==================================================>  (115 + 5) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:===============================>                     (72 + 49) / 121][Stage 167:=======================================>             (91 + 30) / 121][Stage 167:=================================================>   (113 + 8) / 121][Stage 167:====================================================>(119 + 2) / 121][Stage 167:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.953873427 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381737417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:============================>                        (60 + 53) / 113][Stage 168:===============================>                     (68 + 45) / 113][Stage 168:======================================>              (82 + 31) / 113][Stage 168:==============================================>     (101 + 12) / 113][Stage 168:===================================================> (109 + 4) / 113]                                                                                [Stage 169:=============================>                       (63 + 51) / 114][Stage 169:====================================>                (78 + 36) / 114][Stage 169:===========================================>         (94 + 20) / 114][Stage 169:================================================>    (105 + 9) / 114][Stage 169:====================================================>(112 + 2) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.548545264 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392023808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (71 + 44) / 115][Stage 170:=====================================>               (81 + 34) / 115][Stage 170:==============================================>     (103 + 12) / 115][Stage 170:=================================================>   (108 + 7) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:====================================>                (79 + 37) / 116][Stage 171:============================================>        (97 + 19) / 116][Stage 171:=================================================>   (108 + 8) / 116][Stage 171:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.134641112 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392008524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (59 + 54) / 113][Stage 172:==============================>                      (66 + 47) / 113][Stage 172:======================================>              (82 + 31) / 113][Stage 172:=============================================>       (96 + 17) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:================================>                    (70 + 44) / 114][Stage 173:======================================>              (83 + 31) / 114][Stage 173:==============================================>     (103 + 11) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.719455781 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370966844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (72 + 41) / 113][Stage 174:========================================>            (86 + 27) / 113][Stage 174:=============================================>       (97 + 16) / 113][Stage 174:================================================>    (104 + 9) / 113][Stage 174:====================================================>(111 + 2) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:==================================>                  (74 + 40) / 114][Stage 175:======================================>              (82 + 32) / 114][Stage 175:============================================>        (95 + 19) / 114][Stage 175:==============================================>     (102 + 12) / 114][Stage 175:===================================================> (111 + 3) / 114][Stage 175:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.505458833 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (73 + 40) / 113][Stage 176:=======================================>             (85 + 28) / 113][Stage 176:==============================================>      (99 + 14) / 113][Stage 176:================================================>    (104 + 9) / 113][Stage 176:====================================================>(111 + 2) / 113]                                                                                [Stage 177:====================================>                (79 + 35) / 114][Stage 177:===========================================>         (94 + 20) / 114][Stage 177:==============================================>     (101 + 13) / 114][Stage 177:==================================================>  (109 + 5) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.145334462 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371681482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=============================>                       (65 + 50) / 115][Stage 178:==================================>                  (75 + 40) / 115][Stage 178:=========================================>           (91 + 24) / 115][Stage 178:=============================================>      (100 + 15) / 115][Stage 178:===================================================> (111 + 4) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:==================================>                  (75 + 41) / 116][Stage 179:=======================================>             (86 + 30) / 116][Stage 179:============================================>        (98 + 18) / 116][Stage 179:==================================================>  (110 + 6) / 116][Stage 179:====================================================>(114 + 2) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.517567559 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (70 + 45) / 115][Stage 180:====================================>                (80 + 35) / 115][Stage 180:=========================================>           (91 + 24) / 115][Stage 180:=================================================>   (108 + 7) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:==============================>                      (67 + 49) / 116][Stage 181:===================================>                 (77 + 39) / 116][Stage 181:=========================================>           (90 + 26) / 116][Stage 181:=============================================>      (102 + 14) / 116][Stage 181:==================================================>  (110 + 6) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.153543177 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=244", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=244,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392266707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:============================>                        (64 + 56) / 120][Stage 182:====================================>                (82 + 38) / 120][Stage 182:=============================================>      (104 + 16) / 120]                                                                                [Stage 183:===========================>                         (62 + 59) / 121][Stage 183:==============================>                      (69 + 52) / 121][Stage 183:=======================================>             (90 + 31) / 121][Stage 183:=============================================>      (105 + 16) / 121][Stage 183:==================================================>  (116 + 5) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.145992709 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367338542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:==================================>                  (76 + 42) / 118][Stage 184:=======================================>             (89 + 29) / 118][Stage 184:=============================================>      (104 + 14) / 118][Stage 184:====================================================>(116 + 2) / 118]                                                                                [Stage 185:================================>                    (73 + 46) / 119][Stage 185:=================================>                   (76 + 43) / 119][Stage 185:=======================================>             (89 + 30) / 119][Stage 185:===============================================>    (109 + 10) / 119][Stage 185:===================================================> (116 + 3) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.782020362 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=225", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=225,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365086873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (72 + 46) / 118][Stage 186:=================================>                   (74 + 44) / 118][Stage 186:=======================================>             (88 + 30) / 118][Stage 186:=============================================>      (104 + 14) / 118][Stage 186:===================================================> (115 + 3) / 118]                                                                                [Stage 187:=================================>                   (75 + 44) / 119][Stage 187:======================================>              (86 + 33) / 119][Stage 187:=============================================>      (103 + 16) / 119][Stage 187:==================================================>  (114 + 5) / 119][Stage 187:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.515744201 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376195134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (72 + 43) / 115][Stage 188:======================================>              (83 + 32) / 115][Stage 188:=============================================>       (99 + 16) / 115][Stage 188:================================================>    (106 + 9) / 115][Stage 188:==================================================>  (109 + 6) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:===============================>                     (68 + 48) / 116][Stage 189:===================================>                 (78 + 38) / 116][Stage 189:==========================================>          (93 + 23) / 116][Stage 189:==============================================>     (104 + 12) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.280144549 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==================================>                  (75 + 40) / 115][Stage 190:========================================>            (88 + 27) / 115][Stage 190:============================================>        (97 + 18) / 115][Stage 190:=================================================>   (108 + 7) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:==================================>                  (76 + 40) / 116][Stage 191:=========================================>           (91 + 25) / 116][Stage 191:============================================>        (98 + 18) / 116][Stage 191:==============================================>     (103 + 13) / 116][Stage 191:=================================================>   (109 + 7) / 116][Stage 191:==================================================>  (110 + 6) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.293419874 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===============================>                     (68 + 47) / 115][Stage 192:======================================>              (84 + 31) / 115][Stage 192:=============================================>      (100 + 15) / 115][Stage 192:==================================================>  (110 + 5) / 115][Stage 192:====================================================>(113 + 2) / 115]                                                                                [Stage 193:====================================>                (79 + 37) / 116][Stage 193:=======================================>             (86 + 30) / 116][Stage 193:=============================================>      (102 + 14) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.939677122 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=162", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=162,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===================================>                 (76 + 39) / 115][Stage 194:=======================================>             (86 + 29) / 115][Stage 194:=============================================>       (99 + 16) / 115][Stage 194:=================================================>   (108 + 7) / 115]                                                                                [Stage 195:===================================>                 (78 + 38) / 116][Stage 195:=======================================>             (86 + 30) / 116][Stage 195:==============================================>     (104 + 12) / 116][Stage 195:===================================================> (112 + 4) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.080014924 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=24", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=24,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370929521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===============================>                     (68 + 47) / 115][Stage 196:==================================>                  (75 + 40) / 115][Stage 196:==========================================>          (93 + 22) / 115][Stage 196:=================================================>   (107 + 8) / 115][Stage 196:===================================================> (111 + 4) / 115]                                                                                [Stage 197:===============================>                     (70 + 46) / 116][Stage 197:=====================================>               (82 + 34) / 116][Stage 197:==========================================>          (92 + 24) / 116][Stage 197:==============================================>     (103 + 13) / 116][Stage 197:================================================>    (107 + 9) / 116][Stage 197:===================================================> (113 + 3) / 116][Stage 197:====================================================>(114 + 2) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.037408646 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392290194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:====================================>                (79 + 36) / 115][Stage 198:========================================>            (88 + 27) / 115][Stage 198:==============================================>     (103 + 12) / 115][Stage 198:==================================================>  (110 + 5) / 115]                                                                                [Stage 199:=======================================>             (87 + 29) / 116][Stage 199:============================================>        (98 + 18) / 116][Stage 199:===============================================>    (106 + 10) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.462132788 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535690208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (60 + 60) / 120][Stage 200:==============================>                      (69 + 51) / 120][Stage 200:====================================>                (82 + 38) / 120][Stage 200:==============================================>     (108 + 12) / 120][Stage 200:===================================================> (117 + 3) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:================================>                    (75 + 46) / 121][Stage 201:========================================>            (93 + 28) / 121][Stage 201:=============================================>      (107 + 14) / 121][Stage 201:=================================================>   (113 + 8) / 121][Stage 201:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.85058992 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m45.944s
user	11m57.424s
sys	1m25.708s
