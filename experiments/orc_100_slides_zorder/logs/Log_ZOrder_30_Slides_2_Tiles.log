Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 23:56:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:57:02 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:57:02 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:57:02 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 23:57:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:57:15 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531235704-0728).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.474992929 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (48 + 67) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.10552338 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.861633452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=======================>                               (49 + 64) / 113][Stage 2:=========================>                             (53 + 60) / 113][Stage 2:============================>                          (58 + 55) / 113][Stage 2:============================>                          (59 + 54) / 113][Stage 2:=============================>                         (61 + 52) / 113][Stage 2:==================================>                    (71 + 42) / 113][Stage 2:=========================================>             (85 + 28) / 113][Stage 2:===============================================>       (97 + 16) / 113][Stage 2:====================================================>  (107 + 6) / 113]                                                                                [Stage 3:===========================>                           (56 + 58) / 114][Stage 3:==============================>                        (63 + 51) / 114][Stage 3:==================================>                    (71 + 43) / 114][Stage 3:=======================================>               (82 + 32) / 114][Stage 3:==============================================>        (96 + 18) / 114][Stage 3:===================================================>   (107 + 7) / 114][Stage 3:======================================================>(112 + 2) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.040566559 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.677158302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:>                                                        (0 + 0) / 115][Stage 4:==============================>                        (63 + 52) / 115][Stage 4:===============================>                       (66 + 49) / 115][Stage 4:=================================>                     (69 + 46) / 115][Stage 4:=========================================>             (87 + 28) / 115][Stage 4:============================================>          (92 + 23) / 115][Stage 4:================================================>     (103 + 12) / 115][Stage 4:=================================================>    (105 + 10) / 115][Stage 4:==================================================>    (106 + 9) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:============================>                          (61 + 55) / 116][Stage 5:=================================>                     (70 + 46) / 116][Stage 5:===================================>                   (75 + 41) / 116][Stage 5:=====================================>                 (80 + 36) / 116][Stage 5:=========================================>             (88 + 28) / 116][Stage 5:==============================================>        (99 + 17) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:====================================================>  (110 + 6) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.616750113 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=84", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=84,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.763828519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (55 + 65) / 120][Stage 6:===========================>                           (59 + 61) / 120][Stage 6:==============================>                        (67 + 53) / 120][Stage 6:=====================================>                 (81 + 39) / 120][Stage 6:==========================================>            (92 + 28) / 120][Stage 6:=============================================>        (100 + 20) / 120][Stage 6:===================================================>   (113 + 7) / 120]                                                                                [Stage 7:===========================>                           (61 + 60) / 121][Stage 7:==============================>                        (66 + 55) / 121][Stage 7:==================================>                    (76 + 45) / 121][Stage 7:===========================================>           (95 + 26) / 121][Stage 7:================================================>     (109 + 12) / 121][Stage 7:=====================================================> (117 + 4) / 121]                                                                                Time elapsed: 4.087956452 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.609974308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 60) / 120][Stage 8:=============================>                         (65 + 55) / 120][Stage 8:=====================================>                 (81 + 39) / 120][Stage 8:=============================================>        (101 + 19) / 120][Stage 8:================================================>     (108 + 12) / 120][Stage 8:=====================================================> (117 + 3) / 120]                                                                                [Stage 9:===========================>                           (60 + 61) / 121][Stage 9:=============================>                         (64 + 57) / 121][Stage 9:==================================>                    (76 + 45) / 121][Stage 9:=======================================>               (87 + 34) / 121][Stage 9:=============================================>        (103 + 18) / 121][Stage 9:=====================================================> (118 + 3) / 121][Stage 9:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.061596574 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525267895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==================================>                   (73 + 40) / 113][Stage 10:=======================================>              (82 + 31) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:==============================================>       (98 + 15) / 113][Stage 10:==================================================>   (105 + 8) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:===================================>                  (74 + 40) / 114][Stage 11:========================================>             (85 + 29) / 114][Stage 11:===========================================>          (91 + 23) / 114][Stage 11:=============================================>        (96 + 18) / 114][Stage 11:===============================================>     (103 + 11) / 114][Stage 11:===================================================>  (109 + 5) / 114][Stage 11:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.015712769 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=121", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=121,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46377821 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:======================================>               (82 + 33) / 115][Stage 12:========================================>             (87 + 28) / 115][Stage 12:============================================>         (95 + 20) / 115][Stage 12:===============================================>     (104 + 11) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:======================================>               (82 + 34) / 116][Stage 13:========================================>             (87 + 29) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:==============================================>      (102 + 14) / 116][Stage 13:==================================================>   (109 + 7) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.524023159 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484236292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (80 + 35) / 115][Stage 14:==========================================>           (91 + 24) / 115][Stage 14:==============================================>      (101 + 14) / 115][Stage 14:==================================================>   (107 + 8) / 115][Stage 14:====================================================> (112 + 3) / 115][Stage 14:=====================================================>(113 + 2) / 115]                                                                                [Stage 15:======================================>               (82 + 34) / 116][Stage 15:=======================================>              (85 + 31) / 116][Stage 15:================================================>    (106 + 10) / 116][Stage 15:===================================================>  (110 + 6) / 116][Stage 15:====================================================> (113 + 3) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.79687514 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535958389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==============================>                       (64 + 51) / 115][Stage 16:=================================>                    (72 + 43) / 115][Stage 16:=======================================>              (84 + 31) / 115][Stage 16:=============================================>        (96 + 19) / 115][Stage 16:==============================================>      (100 + 15) / 115][Stage 16:=================================================>    (106 + 9) / 115]                                                                                [Stage 17:================================>                     (69 + 47) / 116][Stage 17:======================================>               (82 + 34) / 116][Stage 17:=============================================>       (100 + 16) / 116][Stage 17:===================================================>  (111 + 5) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.771874352 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527858481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:============================>                         (63 + 57) / 120][Stage 18:===============================>                      (69 + 51) / 120][Stage 18:====================================>                 (80 + 40) / 120][Stage 18:=======================================>              (88 + 32) / 120][Stage 18:=============================================>       (102 + 18) / 120][Stage 18:====================================================> (116 + 4) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:============================>                         (64 + 57) / 121][Stage 19:=====================================>                (83 + 38) / 121][Stage 19:===============================================>     (108 + 13) / 121][Stage 19:====================================================> (117 + 4) / 121][Stage 19:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.03547263 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474839357 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:====================================>                 (76 + 37) / 113][Stage 20:==========================================>           (88 + 25) / 113][Stage 20:==============================================>       (98 + 15) / 113][Stage 20:===================================================>  (108 + 5) / 113][Stage 20:====================================================> (110 + 3) / 113]                                                                                [Stage 21:====================================>                 (78 + 36) / 114][Stage 21:========================================>             (86 + 28) / 114][Stage 21:==============================================>      (101 + 13) / 114][Stage 21:====================================================> (111 + 3) / 114][Stage 21:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.658495254 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535603565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:=================================>                    (73 + 45) / 118][Stage 22:=====================================>                (83 + 35) / 118][Stage 22:=============================================>        (99 + 19) / 118][Stage 22:==================================================>   (111 + 7) / 118][Stage 22:===================================================>  (113 + 5) / 118][Stage 22:=====================================================>(116 + 2) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:==================================>                   (75 + 44) / 119][Stage 23:=======================================>              (87 + 32) / 119][Stage 23:===============================================>     (106 + 13) / 119][Stage 23:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.490650386 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=217", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=217,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465201137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:=================================>                    (74 + 44) / 118][Stage 24:=======================================>              (86 + 32) / 118][Stage 24:=============================================>       (102 + 16) / 118][Stage 24:==================================================>   (110 + 8) / 118][Stage 24:====================================================> (114 + 4) / 118][Stage 24:=====================================================>(117 + 1) / 118]                                                                                [Stage 25:=================================>                    (73 + 46) / 119][Stage 25:==================================>                   (77 + 42) / 119][Stage 25:========================================>             (90 + 29) / 119][Stage 25:==============================================>      (104 + 15) / 119][Stage 25:===================================================>  (114 + 5) / 119][Stage 25:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.765955762 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509679536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:===========================>                          (62 + 58) / 120][Stage 26:===================================>                  (79 + 41) / 120][Stage 26:============================================>        (101 + 19) / 120][Stage 26:==================================================>   (112 + 8) / 120][Stage 26:=====================================================>(118 + 2) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:==============================>                       (68 + 53) / 121][Stage 27:=======================================>              (88 + 33) / 121][Stage 27:==================================================>   (113 + 8) / 121][Stage 27:====================================================> (118 + 3) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.444885938 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471250323 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===============================>                      (67 + 48) / 115][Stage 28:======================================>               (81 + 34) / 115][Stage 28:===============================================>     (103 + 12) / 115][Stage 28:==================================================>   (108 + 7) / 115][Stage 28:===================================================>  (109 + 6) / 115][Stage 28:=====================================================>(113 + 2) / 115]                                                                                [Stage 29:=================================>                    (72 + 44) / 116][Stage 29:=========================================>            (90 + 26) / 116][Stage 29:===============================================>     (104 + 12) / 116][Stage 29:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.376354009 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435920977 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===================================>                  (74 + 39) / 113][Stage 30:=======================================>              (83 + 30) / 113][Stage 30:=============================================>        (96 + 17) / 113][Stage 30:================================================>    (103 + 10) / 113][Stage 30:=====================================================>(111 + 2) / 113]                                                                                [Stage 31:==================================>                   (73 + 41) / 114][Stage 31:=====================================>                (80 + 34) / 114][Stage 31:=============================================>        (95 + 19) / 114][Stage 31:=================================================>    (105 + 9) / 114][Stage 31:===================================================>  (109 + 5) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.639816194 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464729072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=================================>                    (71 + 44) / 115][Stage 32:=========================================>            (89 + 26) / 115][Stage 32:==================================================>   (107 + 8) / 115][Stage 32:====================================================> (112 + 3) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:================================>                     (70 + 46) / 116][Stage 33:=====================================>                (81 + 35) / 116][Stage 33:==============================================>       (99 + 17) / 116][Stage 33:=================================================>    (107 + 9) / 116][Stage 33:==================================================>   (109 + 7) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.643770453 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (69 + 46) / 115][Stage 34:========================================>             (86 + 29) / 115][Stage 34:=============================================>        (97 + 18) / 115][Stage 34:==================================================>   (108 + 7) / 115][Stage 34:====================================================> (112 + 3) / 115]                                                                                [Stage 35:=================================>                    (72 + 44) / 116][Stage 35:=======================================>              (85 + 31) / 116][Stage 35:===============================================>     (103 + 13) / 116][Stage 35:====================================================> (113 + 3) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.131117669 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4330327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (73 + 40) / 113][Stage 36:======================================>               (80 + 33) / 113][Stage 36:===========================================>          (90 + 23) / 113][Stage 36:==============================================>       (98 + 15) / 113][Stage 36:==================================================>   (106 + 7) / 113][Stage 36:=====================================================>(111 + 2) / 113][Stage 36:=====================================================>(112 + 1) / 113]                                                                                [Stage 37:====================================>                 (77 + 37) / 114][Stage 37:=========================================>            (87 + 27) / 114][Stage 37:=============================================>        (97 + 17) / 114][Stage 37:================================================>    (104 + 10) / 114][Stage 37:===================================================>  (109 + 5) / 114][Stage 37:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.689508538 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446785189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=================================>                    (73 + 45) / 118][Stage 38:=====================================>                (82 + 36) / 118][Stage 38:============================================>         (98 + 20) / 118][Stage 38:===============================================>     (105 + 13) / 118][Stage 38:====================================================> (115 + 3) / 118]                                                                                [Stage 39:=================================>                    (74 + 45) / 119][Stage 39:=====================================>                (82 + 37) / 119][Stage 39:===========================================>          (95 + 24) / 119][Stage 39:================================================>    (108 + 11) / 119][Stage 39:=====================================================>(117 + 2) / 119][Stage 39:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.701752266 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489540321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:============================>                         (60 + 53) / 113][Stage 40:================================>                     (68 + 45) / 113][Stage 40:=========================================>            (87 + 26) / 113][Stage 40:==============================================>       (98 + 15) / 113][Stage 40:==================================================>   (106 + 7) / 113][Stage 40:=====================================================>(111 + 2) / 113]                                                                                [Stage 41:==============================>                       (64 + 50) / 114][Stage 41:==================================>                   (73 + 41) / 114][Stage 41:==============================================>      (100 + 14) / 114][Stage 41:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.610270586 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474980648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (69 + 46) / 115][Stage 42:========================================>             (87 + 28) / 115][Stage 42:===============================================>     (102 + 13) / 115][Stage 42:===================================================>  (109 + 6) / 115][Stage 42:====================================================> (112 + 3) / 115]                                                                                [Stage 43:===============================>                      (68 + 48) / 116][Stage 43:=====================================>                (81 + 35) / 116][Stage 43:==============================================>       (99 + 17) / 116][Stage 43:================================================>    (106 + 10) / 116][Stage 43:=================================================>    (107 + 9) / 116][Stage 43:===================================================>  (110 + 6) / 116][Stage 43:====================================================> (113 + 3) / 116][Stage 43:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.922409456 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400448994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (81 + 34) / 115][Stage 44:==========================================>           (91 + 24) / 115][Stage 44:================================================>    (105 + 10) / 115]                                                                                [Stage 45:=======================================>              (84 + 32) / 116][Stage 45:===========================================>          (93 + 23) / 116][Stage 45:===============================================>     (104 + 12) / 116][Stage 45:===================================================>  (110 + 6) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.922568777 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=61", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=61,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4985851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:==============================>                       (67 + 53) / 120][Stage 46:====================================>                 (81 + 39) / 120][Stage 46:==========================================>           (95 + 25) / 120][Stage 46:================================================>    (110 + 10) / 120][Stage 46:=====================================================>(118 + 2) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:=============================>                        (65 + 56) / 121][Stage 47:===================================>                  (80 + 41) / 121][Stage 47:=============================================>       (105 + 16) / 121][Stage 47:=================================================>    (112 + 9) / 121][Stage 47:=====================================================>(119 + 2) / 121][Stage 47:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.774630825 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428380374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (72 + 46) / 118][Stage 48:===================================>                  (77 + 41) / 118][Stage 48:=========================================>            (90 + 28) / 118][Stage 48:=============================================>       (102 + 16) / 118][Stage 48:=====================================================>(116 + 2) / 118]                                                                                [Stage 49:=================================>                    (73 + 46) / 119][Stage 49:=====================================>                (82 + 37) / 119][Stage 49:========================================>             (90 + 29) / 119][Stage 49:=============================================>       (102 + 17) / 119][Stage 49:===================================================>  (113 + 6) / 119][Stage 49:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.660731047 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393677139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:======================================>               (81 + 34) / 115][Stage 50:==========================================>           (90 + 25) / 115][Stage 50:==============================================>      (100 + 15) / 115][Stage 50:====================================================> (111 + 4) / 115][Stage 50:=====================================================>(113 + 2) / 115]                                                                                [Stage 51:=====================================>                (81 + 35) / 116][Stage 51:==========================================>           (91 + 25) / 116][Stage 51:=================================================>    (107 + 9) / 116][Stage 51:=====================================================>(114 + 2) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.403260451 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397920715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:====================================>                 (77 + 36) / 113][Stage 52:==========================================>           (89 + 24) / 113][Stage 52:=================================================>    (104 + 9) / 113][Stage 52:====================================================> (110 + 3) / 113]                                                                                [Stage 53:====================================>                 (78 + 36) / 114][Stage 53:============================================>         (93 + 21) / 114][Stage 53:==============================================>      (101 + 13) / 114][Stage 53:==================================================>   (107 + 7) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.308868037 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=122", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=122,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45459198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (72 + 46) / 118][Stage 54:=================================>                    (74 + 44) / 118][Stage 54:=======================================>              (87 + 31) / 118][Stage 54:============================================>         (98 + 20) / 118][Stage 54:===================================================>  (112 + 6) / 118][Stage 54:=====================================================>(117 + 1) / 118]                                                                                [Stage 55:=================================>                    (73 + 46) / 119][Stage 55:===================================>                  (79 + 40) / 119][Stage 55:=======================================>              (87 + 32) / 119][Stage 55:============================================>         (97 + 22) / 119][Stage 55:=================================================>    (110 + 9) / 119][Stage 55:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.487118212 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398901819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===================================>                  (74 + 39) / 113][Stage 56:========================================>             (84 + 29) / 113][Stage 56:===============================================>     (101 + 12) / 113][Stage 56:====================================================> (109 + 4) / 113]                                                                                [Stage 57:====================================>                 (78 + 36) / 114][Stage 57:===========================================>          (92 + 22) / 114][Stage 57:==============================================>      (101 + 13) / 114][Stage 57:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.037138521 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457974105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (58 + 55) / 113][Stage 58:===============================>                      (65 + 48) / 113][Stage 58:====================================>                 (76 + 37) / 113][Stage 58:==============================================>      (100 + 13) / 113][Stage 58:===================================================>  (107 + 6) / 113]                                                                                [Stage 59:============================>                         (60 + 54) / 114][Stage 59:=================================>                    (70 + 44) / 114][Stage 59:========================================>             (86 + 28) / 114][Stage 59:=================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.176694891 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368612488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (81 + 34) / 115][Stage 60:=========================================>            (88 + 27) / 115][Stage 60:=============================================>        (97 + 18) / 115][Stage 60:================================================>    (105 + 10) / 115][Stage 60:====================================================> (112 + 3) / 115]                                                                                [Stage 61:========================================>             (88 + 28) / 116][Stage 61:============================================>         (96 + 20) / 116][Stage 61:===============================================>     (105 + 11) / 116][Stage 61:====================================================> (113 + 3) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.176514189 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414335455 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==============================>                       (66 + 49) / 115][Stage 62:=====================================>                (79 + 36) / 115][Stage 62:=============================================>        (97 + 18) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:=======================================>              (84 + 32) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:===================================================>  (110 + 6) / 116][Stage 63:====================================================> (113 + 3) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.127491427 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381527029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:======================================>               (81 + 34) / 115][Stage 64:=========================================>            (88 + 27) / 115][Stage 64:=================================================>    (106 + 9) / 115][Stage 64:==================================================>   (108 + 7) / 115]                                                                                [Stage 65:=======================================>              (84 + 32) / 116][Stage 65:============================================>         (95 + 21) / 116][Stage 65:===============================================>     (105 + 11) / 116][Stage 65:=====================================================>(114 + 2) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.957204429 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394966377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=====================================>                (78 + 35) / 113][Stage 66:===========================================>          (91 + 22) / 113][Stage 66:===============================================>      (99 + 14) / 113][Stage 66:==================================================>   (105 + 8) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:====================================>                 (76 + 38) / 114][Stage 67:==========================================>           (90 + 24) / 114][Stage 67:=============================================>        (97 + 17) / 114][Stage 67:================================================>    (104 + 10) / 114][Stage 67:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.1729546 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365549456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (82 + 33) / 115][Stage 68:=======================================>              (85 + 30) / 115][Stage 68:===============================================>     (102 + 13) / 115][Stage 68:====================================================> (112 + 3) / 115]                                                                                [Stage 69:======================================>               (82 + 34) / 116][Stage 69:==========================================>           (91 + 25) / 116][Stage 69:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.384749474 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413145942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===================================>                  (75 + 38) / 113][Stage 70:======================================>               (80 + 33) / 113][Stage 70:============================================>         (94 + 19) / 113][Stage 70:===============================================>     (101 + 12) / 113][Stage 70:====================================================> (109 + 4) / 113]                                                                                [Stage 71:=====================================>                (80 + 34) / 114][Stage 71:===========================================>          (91 + 23) / 114][Stage 71:==============================================>      (100 + 14) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.042684282 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39967204 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==================================>                   (73 + 40) / 113][Stage 72:==========================================>           (88 + 25) / 113][Stage 72:==============================================>       (97 + 16) / 113][Stage 72:====================================================> (109 + 4) / 113]                                                                                [Stage 73:======================================>               (82 + 32) / 114][Stage 73:=============================================>        (95 + 19) / 114][Stage 73:==================================================>   (107 + 7) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.870223318 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398277731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (73 + 45) / 118][Stage 74:====================================>                 (80 + 38) / 118][Stage 74:==========================================>           (93 + 25) / 118][Stage 74:=============================================>       (101 + 17) / 118][Stage 74:===================================================>  (113 + 5) / 118][Stage 74:=====================================================>(117 + 1) / 118]                                                                                [Stage 75:=================================>                    (73 + 46) / 119][Stage 75:====================================>                 (80 + 39) / 119][Stage 75:=========================================>            (92 + 27) / 119][Stage 75:=============================================>       (103 + 16) / 119][Stage 75:==================================================>   (112 + 7) / 119][Stage 75:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.608187694 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415421201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==================================>                   (74 + 41) / 115][Stage 76:==========================================>           (90 + 25) / 115][Stage 76:=================================================>    (106 + 9) / 115][Stage 76:====================================================> (112 + 3) / 115]                                                                                [Stage 77:==================================>                   (74 + 42) / 116][Stage 77:===========================================>          (93 + 23) / 116][Stage 77:=================================================>    (107 + 9) / 116][Stage 77:====================================================> (112 + 4) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.115277484 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=38", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=38,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434175993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:============================>                         (59 + 54) / 113][Stage 78:=============================>                        (62 + 51) / 113][Stage 78:==================================>                   (72 + 41) / 113][Stage 78:==============================================>       (97 + 16) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:===========================>                          (59 + 55) / 114][Stage 79:==============================>                       (64 + 50) / 114][Stage 79:======================================>               (82 + 32) / 114][Stage 79:================================================>    (104 + 10) / 114][Stage 79:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.164911517 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381877851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=================================>                    (70 + 43) / 113][Stage 80:====================================>                 (76 + 37) / 113][Stage 80:===========================================>          (90 + 23) / 113][Stage 80:==============================================>      (100 + 13) / 113][Stage 80:===================================================>  (108 + 5) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:====================================>                 (76 + 38) / 114][Stage 81:==========================================>           (89 + 25) / 114][Stage 81:==============================================>      (100 + 14) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:====================================================> (111 + 3) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.898588799 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360954382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=====================================>                (80 + 35) / 115][Stage 82:======================================>               (82 + 33) / 115][Stage 82:==============================================>       (99 + 16) / 115][Stage 82:===================================================>  (110 + 5) / 115]                                                                                [Stage 83:========================================>             (86 + 30) / 116][Stage 83:=============================================>       (100 + 16) / 116][Stage 83:===================================================>  (111 + 5) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.946319836 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=231", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=231,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421583937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:===============================>                      (70 + 50) / 120][Stage 84:========================================>             (91 + 29) / 120][Stage 84:================================================>    (110 + 10) / 120][Stage 84:=====================================================>(119 + 1) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:===============================>                      (70 + 51) / 121][Stage 85:========================================>             (91 + 30) / 121][Stage 85:==================================================>   (113 + 8) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.192483663 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427305174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:============================>                         (59 + 54) / 113][Stage 86:================================>                     (68 + 45) / 113][Stage 86:=======================================>              (82 + 31) / 113][Stage 86:==============================================>       (98 + 15) / 113]                                                                                [Stage 87:============================>                         (61 + 53) / 114][Stage 87:==============================>                       (65 + 49) / 114][Stage 87:==========================================>           (90 + 24) / 114][Stage 87:==================================================>   (106 + 8) / 114][Stage 87:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.17791167 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=254", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=254,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350935013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (82 + 33) / 115][Stage 88:=========================================>            (88 + 27) / 115][Stage 88:==================================================>   (108 + 7) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=======================================>              (84 + 32) / 116][Stage 89:=========================================>            (90 + 26) / 116][Stage 89:==================================================>   (108 + 8) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.59885145 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391734546 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:====================================>                 (77 + 38) / 115][Stage 90:===========================================>          (93 + 22) / 115][Stage 90:===================================================>  (109 + 6) / 115][Stage 90:===================================================>  (110 + 5) / 115]                                                                                [Stage 91:==================================>                   (74 + 42) / 116][Stage 91:======================================>               (83 + 33) / 116][Stage 91:=============================================>       (100 + 16) / 116][Stage 91:=================================================>    (107 + 9) / 116][Stage 91:===================================================>  (110 + 6) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.247549087 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=130", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=130,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373730503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (70 + 43) / 113][Stage 92:=======================================>              (82 + 31) / 113][Stage 92:=============================================>        (95 + 18) / 113][Stage 92:===============================================>     (102 + 11) / 113][Stage 92:====================================================> (109 + 4) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:====================================>                 (77 + 37) / 114][Stage 93:========================================>             (86 + 28) / 114][Stage 93:=============================================>        (95 + 19) / 114][Stage 93:=================================================>    (105 + 9) / 114][Stage 93:====================================================> (111 + 3) / 114][Stage 93:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.278770416 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359825903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (81 + 34) / 115][Stage 94:=======================================>              (85 + 30) / 115][Stage 94:==============================================>      (101 + 14) / 115][Stage 94:===================================================>  (110 + 5) / 115]                                                                                [Stage 95:========================================>             (87 + 29) / 116][Stage 95:==============================================>      (102 + 14) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.538901082 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40847126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:============================>                         (59 + 54) / 113][Stage 96:==============================>                       (63 + 50) / 113][Stage 96:========================================>             (84 + 29) / 113][Stage 96:================================================>    (103 + 10) / 113]                                                                                [Stage 97:===========================>                          (59 + 55) / 114][Stage 97:==============================>                       (64 + 50) / 114][Stage 97:========================================>             (86 + 28) / 114][Stage 97:==============================================>      (101 + 13) / 114][Stage 97:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.177321195 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384249893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (72 + 46) / 118][Stage 98:==================================>                   (75 + 43) / 118][Stage 98:=========================================>            (90 + 28) / 118][Stage 98:=============================================>        (99 + 19) / 118][Stage 98:====================================================> (114 + 4) / 118]                                                                                [Stage 99:=================================>                    (73 + 46) / 119][Stage 99:======================================>               (84 + 35) / 119][Stage 99:===========================================>          (95 + 24) / 119][Stage 99:================================================>    (108 + 11) / 119][Stage 99:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.294226539 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37840842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==================================>                  (74 + 39) / 113][Stage 100:======================================>              (82 + 31) / 113][Stage 100:============================================>        (94 + 19) / 113][Stage 100:=================================================>   (105 + 8) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:====================================>                (78 + 36) / 114][Stage 101:========================================>            (87 + 27) / 114][Stage 101:=============================================>       (98 + 16) / 114][Stage 101:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.050714117 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404026995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==============================>                      (67 + 48) / 115][Stage 102:==================================>                  (75 + 40) / 115][Stage 102:==============================================>     (103 + 12) / 115][Stage 102:===================================================> (111 + 4) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:===============================>                     (69 + 47) / 116][Stage 103:=========================================>           (90 + 26) / 116][Stage 103:===========================================>         (96 + 20) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:===================================================> (113 + 3) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.506189416 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===============================>                     (69 + 46) / 115][Stage 104:=====================================>               (82 + 33) / 115][Stage 104:=============================================>      (101 + 14) / 115][Stage 104:=================================================>   (108 + 7) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:===================================>                 (77 + 39) / 116][Stage 105:==========================================>          (92 + 24) / 116][Stage 105:==============================================>     (104 + 12) / 116][Stage 105:=================================================>   (109 + 7) / 116][Stage 105:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.284647695 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352212979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:>                                                      (0 + 0) / 115][Stage 106:======================================>              (84 + 31) / 115][Stage 106:=========================================>           (90 + 25) / 115][Stage 106:================================================>    (106 + 9) / 115][Stage 106:===================================================> (112 + 3) / 115]                                                                                [Stage 107:======================================>              (84 + 32) / 116][Stage 107:===========================================>         (96 + 20) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.556293189 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38605666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==============================>                      (66 + 49) / 115][Stage 108:=====================================>               (81 + 34) / 115][Stage 108:=============================================>      (101 + 14) / 115][Stage 108:=================================================>   (107 + 8) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:==============================>                      (67 + 49) / 116][Stage 109:=====================================>               (82 + 34) / 116][Stage 109:===========================================>         (95 + 21) / 116][Stage 109:==================================================>  (111 + 5) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.908190181 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=20", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=20,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362160856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (72 + 41) / 113][Stage 110:=======================================>             (85 + 28) / 113][Stage 110:=============================================>       (96 + 17) / 113][Stage 110:===============================================>    (103 + 10) / 113][Stage 110:==================================================>  (107 + 6) / 113][Stage 110:==================================================>  (108 + 5) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:====================================>                (79 + 35) / 114][Stage 111:=========================================>           (90 + 24) / 114][Stage 111:=============================================>       (97 + 17) / 114][Stage 111:===================================================> (111 + 3) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.356960116 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39054569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==============================>                      (66 + 49) / 115][Stage 112:======================================>              (83 + 32) / 115][Stage 112:===========================================>         (94 + 21) / 115][Stage 112:=================================================>   (108 + 7) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:===============================>                     (69 + 47) / 116][Stage 113:======================================>              (84 + 32) / 116][Stage 113:===========================================>         (96 + 20) / 116][Stage 113:==================================================>  (110 + 6) / 116][Stage 113:====================================================>(114 + 2) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.102041294 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=113", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=113,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379834815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=====================================>               (79 + 34) / 113][Stage 114:=======================================>             (84 + 29) / 113][Stage 114:============================================>        (95 + 18) / 113][Stage 114:===============================================>    (103 + 10) / 113]                                                                                [Stage 115:=====================================>               (81 + 33) / 114][Stage 115:=======================================>             (86 + 28) / 114][Stage 115:=============================================>       (97 + 17) / 114][Stage 115:================================================>    (105 + 9) / 114][Stage 115:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.95929282 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=92", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=92,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424853661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 59) / 120][Stage 116:================================>                    (73 + 47) / 120][Stage 116:===========================================>         (98 + 22) / 120][Stage 116:===================================================> (116 + 4) / 120]                                                                                [Stage 117:==========================>                          (60 + 61) / 121][Stage 117:============================>                        (66 + 55) / 121][Stage 117:===================================>                 (80 + 41) / 121][Stage 117:============================================>       (103 + 18) / 121][Stage 117:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.947715324 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417168809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (61 + 59) / 120][Stage 118:==============================>                      (68 + 52) / 120][Stage 118:==========================================>          (96 + 24) / 120][Stage 118:===================================================> (116 + 4) / 120]                                                                                [Stage 119:============================>                        (65 + 56) / 121][Stage 119:==================================>                  (78 + 43) / 121][Stage 119:===========================================>         (99 + 22) / 121][Stage 119:==================================================>  (115 + 6) / 121][Stage 119:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.242729117 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=187", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=187,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348191635 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (81 + 34) / 115][Stage 120:=======================================>             (85 + 30) / 115][Stage 120:===========================================>         (94 + 21) / 115][Stage 120:==================================================>  (110 + 5) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:=====================================>               (81 + 35) / 116][Stage 121:========================================>            (88 + 28) / 116][Stage 121:============================================>        (98 + 18) / 116][Stage 121:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.866019393 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=244", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=244,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398026862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:============================>                        (61 + 52) / 113][Stage 122:=====================================>               (79 + 34) / 113][Stage 122:==========================================>          (91 + 22) / 113][Stage 122:===============================================>    (103 + 10) / 113][Stage 122:====================================================>(111 + 2) / 113]                                                                                [Stage 123:===========================>                         (59 + 55) / 114][Stage 123:===============================>                     (67 + 47) / 114][Stage 123:====================================>                (79 + 35) / 114][Stage 123:=============================================>      (100 + 14) / 114][Stage 123:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.371441635 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=145", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=145,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362446913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:=================================>                   (74 + 44) / 118][Stage 124:======================================>              (86 + 32) / 118][Stage 124:============================================>       (102 + 16) / 118][Stage 124:==================================================>  (112 + 6) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:===================================>                 (80 + 39) / 119][Stage 125:==========================================>          (96 + 23) / 119][Stage 125:==============================================>     (106 + 13) / 119][Stage 125:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.32570555 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350600339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:================================>                    (70 + 43) / 113][Stage 126:=====================================>               (81 + 32) / 113][Stage 126:=========================================>           (88 + 25) / 113][Stage 126:==============================================>      (99 + 14) / 113][Stage 126:===================================================> (110 + 3) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:===================================>                 (77 + 37) / 114][Stage 127:=======================================>             (86 + 28) / 114][Stage 127:=============================================>       (98 + 16) / 114][Stage 127:===============================================>    (104 + 10) / 114][Stage 127:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.38629107 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=70", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=70,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386833595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:============================>                        (60 + 53) / 113][Stage 128:================================>                    (69 + 44) / 113][Stage 128:============================================>        (95 + 18) / 113][Stage 128:==============================================>     (102 + 11) / 113][Stage 128:====================================================>(112 + 1) / 113]                                                                                [Stage 129:===========================>                         (60 + 54) / 114][Stage 129:================================>                    (69 + 45) / 114][Stage 129:=====================================>               (81 + 33) / 114][Stage 129:=============================================>       (98 + 16) / 114][Stage 129:==================================================>  (109 + 5) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.356700755 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375169882 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (70 + 45) / 115][Stage 130:=======================================>             (86 + 29) / 115][Stage 130:=============================================>       (98 + 17) / 115][Stage 130:================================================>    (106 + 9) / 115][Stage 130:====================================================>(113 + 2) / 115]                                                                                [Stage 131:====================================>                (79 + 37) / 116][Stage 131:===========================================>         (96 + 20) / 116][Stage 131:=================================================>   (109 + 7) / 116][Stage 131:===================================================> (113 + 3) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.023207223 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=195", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=195,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===============================>                     (68 + 47) / 115][Stage 132:======================================>              (84 + 31) / 115][Stage 132:=============================================>       (98 + 17) / 115][Stage 132:==================================================>  (110 + 5) / 115][Stage 132:===================================================> (112 + 3) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:==================================>                  (75 + 41) / 116][Stage 133:=========================================>           (90 + 26) / 116][Stage 133:=============================================>      (102 + 14) / 116][Stage 133:===================================================> (112 + 4) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.343031248 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353536197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:>                                                      (0 + 0) / 113][Stage 134:====================================>                (77 + 36) / 113][Stage 134:=========================================>           (88 + 25) / 113][Stage 134:=============================================>       (97 + 16) / 113][Stage 134:===================================================> (110 + 3) / 113]                                                                                [Stage 135:=======================================>             (85 + 29) / 114][Stage 135:=============================================>       (97 + 17) / 114][Stage 135:=================================================>   (106 + 8) / 114][Stage 135:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.992982583 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417414165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 60) / 120][Stage 136:=============================>                       (67 + 53) / 120][Stage 136:=====================================>               (84 + 36) / 120][Stage 136:===============================================>    (110 + 10) / 120]                                                                                [Stage 137:===========================>                         (62 + 59) / 121][Stage 137:=================================>                   (76 + 45) / 121][Stage 137:=======================================>             (90 + 31) / 121][Stage 137:=================================================>   (114 + 7) / 121][Stage 137:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.194751744 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383829001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (58 + 55) / 113][Stage 138:=============================>                       (62 + 51) / 113][Stage 138:=====================================>               (81 + 32) / 113][Stage 138:=============================================>       (96 + 17) / 113][Stage 138:===================================================> (110 + 3) / 113]                                                                                [Stage 139:============================>                        (62 + 52) / 114][Stage 139:=================================>                   (73 + 41) / 114][Stage 139:=======================================>             (85 + 29) / 114][Stage 139:==============================================>     (103 + 11) / 114][Stage 139:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.198602614 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400060944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:============================>                        (60 + 53) / 113][Stage 140:===============================>                     (68 + 45) / 113][Stage 140:=========================================>           (89 + 24) / 113][Stage 140:==============================================>     (102 + 11) / 113][Stage 140:==================================================>  (108 + 5) / 113][Stage 140:====================================================>(111 + 2) / 113]                                                                                [Stage 141:==========================>                          (58 + 56) / 114][Stage 141:===============================>                     (68 + 46) / 114][Stage 141:======================================>              (83 + 31) / 114][Stage 141:=============================================>      (100 + 14) / 114][Stage 141:===================================================> (111 + 3) / 114][Stage 141:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.452479389 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397099396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:=============================>                       (67 + 53) / 120][Stage 142:=====================================>               (86 + 34) / 120][Stage 142:==============================================>     (108 + 12) / 120][Stage 142:===================================================> (117 + 3) / 120]                                                                                [Stage 143:============================>                        (64 + 57) / 121][Stage 143:===================================>                 (81 + 40) / 121][Stage 143:==========================================>          (98 + 23) / 121][Stage 143:===============================================>    (110 + 11) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.454055533 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365175913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:====================================>                (77 + 36) / 113][Stage 144:=======================================>             (84 + 29) / 113][Stage 144:=============================================>       (96 + 17) / 113][Stage 144:================================================>    (104 + 9) / 113][Stage 144:===================================================> (110 + 3) / 113]                                                                                [Stage 145:=================================>                   (73 + 41) / 114][Stage 145:======================================>              (83 + 31) / 114][Stage 145:============================================>        (95 + 19) / 114][Stage 145:=============================================>      (100 + 14) / 114][Stage 145:==================================================>  (109 + 5) / 114][Stage 145:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.455205796 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379312034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (72 + 43) / 115][Stage 146:=======================================>             (86 + 29) / 115][Stage 146:================================================>    (106 + 9) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:==================================>                  (75 + 41) / 116][Stage 147:============================================>        (97 + 19) / 116][Stage 147:==================================================>  (111 + 5) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.856906533 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344876533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:====================================>                (80 + 35) / 115][Stage 148:========================================>            (87 + 28) / 115][Stage 148:==============================================>     (103 + 12) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:======================================>              (85 + 31) / 116][Stage 149:=============================================>       (99 + 17) / 116][Stage 149:=================================================>   (108 + 8) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.764616751 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353044812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=================================>                   (72 + 41) / 113][Stage 150:======================================>              (83 + 30) / 113][Stage 150:===========================================>         (92 + 21) / 113][Stage 150:==============================================>     (101 + 12) / 113][Stage 150:====================================================>(112 + 1) / 113]                                                                                [Stage 151:===================================>                 (77 + 37) / 114][Stage 151:=========================================>           (90 + 24) / 114][Stage 151:=============================================>       (97 + 17) / 114][Stage 151:===============================================>    (104 + 10) / 114][Stage 151:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.039623008 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369597834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:>                                                      (0 + 0) / 115][Stage 152:================================>                    (70 + 45) / 115][Stage 152:========================================>            (87 + 28) / 115][Stage 152:==============================================>     (102 + 13) / 115][Stage 152:==================================================>  (109 + 6) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:================================>                    (72 + 44) / 116][Stage 153:=======================================>             (86 + 30) / 116][Stage 153:=============================================>      (101 + 15) / 116][Stage 153:==================================================>  (110 + 6) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.094623745 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366170867 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=================================>                   (75 + 43) / 118][Stage 154:=======================================>             (88 + 30) / 118][Stage 154:=============================================>      (103 + 15) / 118][Stage 154:====================================================>(117 + 1) / 118]                                                                                [Stage 155:================================>                    (73 + 46) / 119][Stage 155:===================================>                 (79 + 40) / 119][Stage 155:===========================================>         (97 + 22) / 119][Stage 155:===============================================>    (108 + 11) / 119][Stage 155:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.157805083 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351535516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===================================>                 (76 + 37) / 113][Stage 156:=========================================>           (89 + 24) / 113][Stage 156:=============================================>       (98 + 15) / 113][Stage 156:================================================>    (104 + 9) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:====================================>                (78 + 36) / 114][Stage 157:==========================================>          (92 + 22) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:=================================================>   (107 + 7) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.225946899 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===================================>                 (75 + 38) / 113][Stage 158:========================================>            (87 + 26) / 113][Stage 158:=============================================>       (97 + 16) / 113][Stage 158:================================================>    (104 + 9) / 113][Stage 158:===================================================> (110 + 3) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:=================================>                   (72 + 42) / 114][Stage 159:========================================>            (87 + 27) / 114][Stage 159:=============================================>       (98 + 16) / 114][Stage 159:=================================================>   (107 + 7) / 114][Stage 159:===================================================> (111 + 3) / 114][Stage 159:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.719724367 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=================================>                   (71 + 42) / 113][Stage 160:====================================>                (78 + 35) / 113][Stage 160:===========================================>         (93 + 20) / 113][Stage 160:==============================================>     (101 + 12) / 113][Stage 160:==================================================>  (107 + 6) / 113]                                                                                [Stage 161:=====================================>               (81 + 33) / 114][Stage 161:===========================================>         (94 + 20) / 114][Stage 161:===============================================>    (104 + 10) / 114][Stage 161:==================================================>  (108 + 6) / 114][Stage 161:===================================================> (111 + 3) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.339259276 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351353539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=================================>                   (71 + 42) / 113][Stage 162:=====================================>               (79 + 34) / 113][Stage 162:===========================================>         (93 + 20) / 113][Stage 162:===============================================>    (103 + 10) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:======================================>              (83 + 31) / 114][Stage 163:===========================================>         (94 + 20) / 114][Stage 163:==============================================>     (102 + 12) / 114][Stage 163:===================================================> (111 + 3) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.05094691 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385385764 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (58 + 55) / 113][Stage 164:===============================>                     (67 + 46) / 113][Stage 164:=====================================>               (80 + 33) / 113][Stage 164:==============================================>     (100 + 13) / 113][Stage 164:==================================================>  (108 + 5) / 113]                                                                                [Stage 165:===========================>                         (60 + 54) / 114][Stage 165:=================================>                   (71 + 43) / 114][Stage 165:===========================================>         (94 + 20) / 114][Stage 165:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.308559767 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403070364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (72 + 46) / 118][Stage 166:=================================>                   (74 + 44) / 118][Stage 166:=======================================>             (87 + 31) / 118][Stage 166:============================================>       (101 + 17) / 118][Stage 166:===================================================> (114 + 4) / 118]                                                                                [Stage 167:=================================>                   (76 + 43) / 119][Stage 167:=======================================>             (88 + 31) / 119][Stage 167:==============================================>     (106 + 13) / 119][Stage 167:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.022280031 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37290589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=================================>                   (71 + 42) / 113][Stage 168:======================================>              (83 + 30) / 113][Stage 168:============================================>        (95 + 18) / 113][Stage 168:===================================================> (109 + 4) / 113][Stage 168:===================================================> (110 + 3) / 113]                                                                                [Stage 169:======================================>              (83 + 31) / 114][Stage 169:============================================>        (96 + 18) / 114][Stage 169:==============================================>     (102 + 12) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.984931776 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:====================================>                (78 + 35) / 113][Stage 170:=======================================>             (85 + 28) / 113][Stage 170:============================================>        (95 + 18) / 113][Stage 170:===================================================> (110 + 3) / 113][Stage 170:====================================================>(111 + 2) / 113]                                                                                [Stage 171:==================================>                  (74 + 40) / 114][Stage 171:=========================================>           (89 + 25) / 114][Stage 171:============================================>        (96 + 18) / 114][Stage 171:=================================================>   (106 + 8) / 114][Stage 171:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.051764494 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401335307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (60 + 60) / 120][Stage 172:=============================>                       (67 + 53) / 120][Stage 172:=======================================>             (90 + 30) / 120][Stage 172:=================================================>   (113 + 7) / 120]                                                                                [Stage 173:===========================>                         (62 + 59) / 121][Stage 173:============================>                        (64 + 57) / 121][Stage 173:====================================>                (83 + 38) / 121][Stage 173:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.010838239 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361071711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:=================================>                   (75 + 43) / 118][Stage 174:=======================================>             (88 + 30) / 118][Stage 174:============================================>       (102 + 16) / 118][Stage 174:=================================================>   (111 + 7) / 118]                                                                                [Stage 175:================================>                    (73 + 46) / 119][Stage 175:===================================>                 (80 + 39) / 119][Stage 175:========================================>            (91 + 28) / 119][Stage 175:===============================================>    (109 + 10) / 119][Stage 175:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.362250102 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376257869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===============================>                     (68 + 47) / 115][Stage 176:===================================>                 (77 + 38) / 115][Stage 176:===========================================>         (94 + 21) / 115][Stage 176:====================================================>(113 + 2) / 115]                                                                                [Stage 177:=================================>                   (73 + 43) / 116][Stage 177:========================================>            (88 + 28) / 116][Stage 177:==============================================>     (104 + 12) / 116][Stage 177:==================================================>  (111 + 5) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.742828991 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368508122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (72 + 46) / 118][Stage 178:===================================>                 (80 + 38) / 118][Stage 178:========================================>            (91 + 27) / 118][Stage 178:=================================================>   (111 + 7) / 118][Stage 178:====================================================>(117 + 1) / 118]                                                                                [Stage 179:================================>                    (74 + 45) / 119][Stage 179:====================================>                (83 + 36) / 119][Stage 179:===============================================>    (108 + 11) / 119][Stage 179:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.152127362 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392572562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:==============================>                      (70 + 50) / 120][Stage 180:==========================================>          (96 + 24) / 120][Stage 180:=================================================>   (111 + 9) / 120][Stage 180:====================================================>(118 + 2) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:==============================>                      (69 + 52) / 121][Stage 181:=====================================>               (85 + 36) / 121][Stage 181:=============================================>      (105 + 16) / 121][Stage 181:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.057090858 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381376814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (58 + 55) / 113][Stage 182:==============================>                      (65 + 48) / 113][Stage 182:========================================>            (87 + 26) / 113][Stage 182:===============================================>    (103 + 10) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:==================================>                  (74 + 40) / 114][Stage 183:==========================================>          (92 + 22) / 114][Stage 183:=================================================>   (106 + 8) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.066299516 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360801145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:==================================>                  (76 + 42) / 118][Stage 184:==========================================>          (95 + 23) / 118][Stage 184:=================================================>   (110 + 8) / 118][Stage 184:====================================================>(117 + 1) / 118]                                                                                [Stage 185:================================>                    (73 + 46) / 119][Stage 185:=================================>                   (75 + 44) / 119][Stage 185:=======================================>             (89 + 30) / 119][Stage 185:===============================================>    (108 + 11) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.067020573 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429496171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (82 + 33) / 115][Stage 186:=========================================>           (89 + 26) / 115][Stage 186:=============================================>      (101 + 14) / 115][Stage 186:===================================================> (111 + 4) / 115]                                                                                [Stage 187:======================================>              (84 + 32) / 116][Stage 187:============================================>        (97 + 19) / 116][Stage 187:================================================>    (107 + 9) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.751006782 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376756118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==================================>                  (74 + 39) / 113][Stage 188:=========================================>           (88 + 25) / 113][Stage 188:===========================================>         (93 + 20) / 113][Stage 188:=================================================>   (105 + 8) / 113][Stage 188:===================================================> (110 + 3) / 113]                                                                                [Stage 189:====================================>                (78 + 36) / 114][Stage 189:========================================>            (88 + 26) / 114][Stage 189:==============================================>     (102 + 12) / 114][Stage 189:==================================================>  (108 + 6) / 114][Stage 189:===================================================> (111 + 3) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.537810178 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337656066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (81 + 34) / 115][Stage 190:=========================================>           (90 + 25) / 115][Stage 190:===============================================>    (105 + 10) / 115][Stage 190:===================================================> (112 + 3) / 115]                                                                                [Stage 191:======================================>              (85 + 31) / 116][Stage 191:==========================================>          (94 + 22) / 116][Stage 191:===============================================>    (105 + 11) / 116][Stage 191:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.853256319 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355925645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:===================================>                 (80 + 38) / 118][Stage 192:=======================================>             (89 + 29) / 118][Stage 192:==================================================>  (113 + 5) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:=====================================>               (85 + 34) / 119][Stage 193:=============================================>      (103 + 16) / 119][Stage 193:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.934696011 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378203643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (70 + 45) / 115][Stage 194:======================================>              (83 + 32) / 115][Stage 194:============================================>        (97 + 18) / 115][Stage 194:===============================================>    (104 + 11) / 115][Stage 194:=================================================>   (108 + 7) / 115][Stage 194:==================================================>  (110 + 5) / 115][Stage 194:====================================================>(114 + 1) / 115]                                                                                [Stage 195:===============================>                     (70 + 46) / 116][Stage 195:=====================================>               (83 + 33) / 116][Stage 195:=============================================>       (99 + 17) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.382084699 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==============================>                      (66 + 49) / 115][Stage 196:===================================>                 (76 + 39) / 115][Stage 196:=========================================>           (91 + 24) / 115][Stage 196:==============================================>     (103 + 12) / 115][Stage 196:==================================================>  (110 + 5) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:================================>                    (72 + 44) / 116][Stage 197:======================================>              (84 + 32) / 116][Stage 197:=============================================>      (102 + 14) / 116][Stage 197:==================================================>  (110 + 6) / 116][Stage 197:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.222937816 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36119345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=======================================>             (85 + 30) / 115][Stage 198:============================================>        (96 + 19) / 115][Stage 198:=================================================>   (108 + 7) / 115]                                                                                [Stage 199:=====================================>               (83 + 33) / 116][Stage 199:==========================================>          (94 + 22) / 116][Stage 199:===============================================>    (106 + 10) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.637928768 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345883905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===================================>                 (76 + 37) / 113][Stage 200:==========================================>          (90 + 23) / 113][Stage 200:==============================================>     (101 + 12) / 113][Stage 200:=================================================>   (105 + 8) / 113][Stage 200:==================================================>  (107 + 6) / 113][Stage 200:====================================================>(111 + 2) / 113]                                                                                [Stage 201:===================================>                 (76 + 38) / 114][Stage 201:========================================>            (88 + 26) / 114][Stage 201:=============================================>       (97 + 17) / 114][Stage 201:=================================================>   (106 + 8) / 114][Stage 201:==================================================>  (108 + 6) / 114][Stage 201:===================================================> (110 + 4) / 114][Stage 201:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.086146446 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m5.372s
user	11m41.832s
sys	0m32.968s
