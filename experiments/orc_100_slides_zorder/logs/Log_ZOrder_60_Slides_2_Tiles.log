Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 02:02:12 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:02:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:02:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:02:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 02:02:29 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:02:40 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601020229-0740).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.438003969 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (1 + 114) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (59 + 57) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:========================================>              (86 + 30) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.618511619 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.66445475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===============================>                       (64 + 49) / 113][Stage 2:=================================>                     (69 + 44) / 113][Stage 2:==================================>                    (71 + 42) / 113][Stage 2:=====================================>                 (78 + 35) / 113][Stage 2:===========================================>           (89 + 24) / 113][Stage 2:==============================================>        (95 + 18) / 113][Stage 2:==================================================>    (104 + 9) / 113][Stage 2:=====================================================> (110 + 3) / 113]                                                                                [Stage 3:===============================>                       (65 + 49) / 114][Stage 3:===================================>                   (73 + 41) / 114][Stage 3:====================================>                  (76 + 38) / 114][Stage 3:=======================================>               (82 + 32) / 114][Stage 3:=============================================>         (95 + 19) / 114][Stage 3:===============================================>      (100 + 14) / 114][Stage 3:===================================================>   (106 + 8) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:======================================================>(112 + 2) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.969800795 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.698641461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:========================>                              (53 + 67) / 120][Stage 4:===========================>                           (59 + 61) / 120][Stage 4:============================>                          (63 + 57) / 120][Stage 4:================================>                      (71 + 49) / 120][Stage 4:==================================>                    (75 + 45) / 120][Stage 4:=========================================>             (91 + 29) / 120][Stage 4:===================================================>   (112 + 8) / 120][Stage 4:======================================================>(119 + 1) / 120]                                                                                [Stage 5:===========================>                           (60 + 61) / 121][Stage 5:===============================>                       (69 + 52) / 121][Stage 5:===================================>                   (79 + 42) / 121][Stage 5:=========================================>             (92 + 29) / 121][Stage 5:===============================================>      (106 + 15) / 121][Stage 5:====================================================>  (116 + 5) / 121]                                                                                Time elapsed: 4.266633571 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=35", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=35,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.697795311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==============================>                        (63 + 52) / 115][Stage 6:=================================>                     (70 + 45) / 115][Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:=============================================>         (95 + 20) / 115][Stage 6:===============================================>      (101 + 14) / 115][Stage 6:===================================================>   (108 + 7) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:==============================>                        (65 + 51) / 116][Stage 7:==================================>                    (72 + 44) / 116][Stage 7:=====================================>                 (79 + 37) / 116][Stage 7:======================================>                (81 + 35) / 116][Stage 7:=======================================>               (83 + 33) / 116][Stage 7:============================================>          (94 + 22) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:================================================>     (105 + 11) / 116][Stage 7:====================================================>  (111 + 5) / 116][Stage 7:======================================================>(114 + 2) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.452899038 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.566206339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (69 + 44) / 113][Stage 8:=======================================>               (81 + 32) / 113][Stage 8:===========================================>           (89 + 24) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:=============================================>         (94 + 19) / 113][Stage 8:==================================================>    (104 + 9) / 113][Stage 8:======================================================>(111 + 2) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:================================>                      (68 + 46) / 114][Stage 9:=====================================>                 (78 + 36) / 114][Stage 9:========================================>              (84 + 30) / 114][Stage 9:============================================>          (92 + 22) / 114][Stage 9:===============================================>       (99 + 15) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:=====================================================> (110 + 4) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.324679575 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.540754318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=============================>                        (62 + 53) / 115][Stage 10:=================================>                    (71 + 44) / 115][Stage 10:=====================================>                (80 + 35) / 115][Stage 10:=========================================>            (88 + 27) / 115][Stage 10:===========================================>          (93 + 22) / 115][Stage 10:==================================================>   (107 + 8) / 115][Stage 10:===================================================>  (110 + 5) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:=================================>                    (71 + 45) / 116][Stage 11:====================================>                 (79 + 37) / 116][Stage 11:=========================================>            (90 + 26) / 116][Stage 11:=============================================>        (97 + 19) / 116][Stage 11:==============================================>      (102 + 14) / 116][Stage 11:===================================================>  (110 + 6) / 116][Stage 11:=====================================================>(114 + 2) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.964147405 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.588447051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (72 + 46) / 118][Stage 12:=================================>                    (74 + 44) / 118][Stage 12:====================================>                 (79 + 39) / 118][Stage 12:=======================================>              (86 + 32) / 118][Stage 12:=============================================>        (99 + 19) / 118][Stage 12:==============================================>      (104 + 14) / 118][Stage 12:===================================================>  (112 + 6) / 118][Stage 12:=====================================================>(116 + 2) / 118]                                                                                [Stage 13:=================================>                    (73 + 46) / 119][Stage 13:===================================>                  (79 + 40) / 119][Stage 13:=======================================>              (88 + 31) / 119][Stage 13:============================================>         (97 + 22) / 119][Stage 13:================================================>    (108 + 11) / 119][Stage 13:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.151518112 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:===================================>                  (77 + 41) / 118][Stage 14:=========================================>            (90 + 28) / 118][Stage 14:==========================================>           (93 + 25) / 118][Stage 14:==============================================>      (103 + 15) / 118][Stage 14:=================================================>    (109 + 9) / 118][Stage 14:===================================================>  (113 + 5) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:====================================>                 (80 + 39) / 119][Stage 15:=========================================>            (91 + 28) / 119][Stage 15:=============================================>       (102 + 17) / 119][Stage 15:===================================================>  (113 + 6) / 119][Stage 15:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 4.222929185 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489437711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:>                                                       (0 + 0) / 113][Stage 16:=================================>                    (71 + 42) / 113][Stage 16:======================================>               (81 + 32) / 113][Stage 16:===========================================>          (92 + 21) / 113][Stage 16:==============================================>      (100 + 13) / 113][Stage 16:===================================================>  (107 + 6) / 113][Stage 16:=====================================================>(111 + 2) / 113]                                                                                [Stage 17:======================================>               (82 + 32) / 114][Stage 17:===========================================>          (91 + 23) / 114][Stage 17:=============================================>        (95 + 19) / 114][Stage 17:==================================================>   (106 + 8) / 114][Stage 17:====================================================> (110 + 4) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.91256434 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.546070645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:===============================>                      (71 + 49) / 120][Stage 18:=====================================>                (83 + 37) / 120][Stage 18:================================================>    (109 + 11) / 120][Stage 18:===================================================>  (115 + 5) / 120][Stage 18:=====================================================>(119 + 1) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:=============================>                        (65 + 56) / 121][Stage 19:===================================>                  (80 + 41) / 121][Stage 19:=============================================>       (104 + 17) / 121][Stage 19:===================================================>  (115 + 6) / 121][Stage 19:===================================================>  (116 + 5) / 121][Stage 19:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.022268051 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.529713587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (58 + 62) / 120][Stage 20:==========================>                           (59 + 61) / 120][Stage 20:===============================>                      (71 + 49) / 120][Stage 20:========================================>             (89 + 31) / 120][Stage 20:=============================================>       (103 + 17) / 120][Stage 20:==================================================>   (112 + 8) / 120][Stage 20:=====================================================>(119 + 1) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:=============================>                        (65 + 56) / 121][Stage 21:=====================================>                (83 + 38) / 121][Stage 21:=============================================>       (105 + 16) / 121][Stage 21:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.616506641 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=180", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=180,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:==============================>                       (68 + 52) / 120][Stage 22:====================================>                 (82 + 38) / 120][Stage 22:============================================>        (101 + 19) / 120][Stage 22:====================================================> (116 + 4) / 120][Stage 22:====================================================> (117 + 3) / 120]                                                                                [Stage 23:============================>                         (63 + 58) / 121][Stage 23:=================================>                    (74 + 47) / 121][Stage 23:==========================================>           (96 + 25) / 121][Stage 23:===============================================>     (108 + 13) / 121][Stage 23:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.7358733 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:============================>                         (64 + 56) / 120][Stage 24:==================================>                   (76 + 44) / 120][Stage 24:===========================================>          (96 + 24) / 120][Stage 24:==============================================>      (106 + 14) / 120]                                                                                [Stage 25:===========================>                          (62 + 59) / 121][Stage 25:=================================>                    (75 + 46) / 121][Stage 25:=========================================>            (92 + 29) / 121][Stage 25:===============================================>     (109 + 12) / 121][Stage 25:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.340491026 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=183", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=183,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.529851077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:============================>                         (59 + 54) / 113][Stage 26:===============================>                      (66 + 47) / 113][Stage 26:======================================>               (80 + 33) / 113][Stage 26:==============================================>       (97 + 16) / 113]                                                                                [Stage 27:============================>                         (60 + 54) / 114][Stage 27:==================================>                   (72 + 42) / 114][Stage 27:========================================>             (85 + 29) / 114][Stage 27:===============================================>     (103 + 11) / 114][Stage 27:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.192239394 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503843496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (57 + 56) / 113][Stage 28:============================>                         (60 + 53) / 113][Stage 28:================================>                     (69 + 44) / 113][Stage 28:===========================================>          (91 + 22) / 113][Stage 28:===================================================>  (108 + 5) / 113]                                                                                [Stage 29:=============================>                        (62 + 52) / 114][Stage 29:==================================>                   (73 + 41) / 114][Stage 29:============================================>         (93 + 21) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.152164273 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=227", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=227,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481888834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===============================>                      (68 + 47) / 115][Stage 30:======================================>               (81 + 34) / 115][Stage 30:==============================================>      (101 + 14) / 115][Stage 30:=================================================>    (106 + 9) / 115][Stage 30:==================================================>   (108 + 7) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:=================================>                    (73 + 43) / 116][Stage 31:============================================>         (95 + 21) / 116][Stage 31:==================================================>   (109 + 7) / 116][Stage 31:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.312638558 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.558557677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:============================>                         (59 + 54) / 113][Stage 32:===============================>                      (66 + 47) / 113][Stage 32:==========================================>           (88 + 25) / 113][Stage 32:==================================================>   (105 + 8) / 113][Stage 32:=====================================================>(111 + 2) / 113]                                                                                [Stage 33:============================>                         (60 + 54) / 114][Stage 33:=================================>                    (71 + 43) / 114][Stage 33:===========================================>          (91 + 23) / 114][Stage 33:===============================================>     (103 + 11) / 114][Stage 33:=====================================================>(112 + 2) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.736566627 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=201", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=201,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.565721845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (72 + 46) / 118][Stage 34:=================================>                    (74 + 44) / 118][Stage 34:====================================>                 (79 + 39) / 118][Stage 34:===========================================>          (94 + 24) / 118][Stage 34:====================================================> (114 + 4) / 118]                                                                                [Stage 35:=================================>                    (73 + 46) / 119][Stage 35:===================================>                  (79 + 40) / 119][Stage 35:=======================================>              (86 + 33) / 119][Stage 35:===========================================>          (95 + 24) / 119][Stage 35:===============================================>     (106 + 13) / 119][Stage 35:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.524219807 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448075213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (72 + 46) / 118][Stage 36:======================================>               (84 + 34) / 118][Stage 36:================================================>    (108 + 10) / 118][Stage 36:=====================================================>(116 + 2) / 118]                                                                                [Stage 37:=================================>                    (73 + 46) / 119][Stage 37:==================================>                   (76 + 43) / 119][Stage 37:=======================================>              (86 + 33) / 119][Stage 37:==============================================>      (105 + 14) / 119][Stage 37:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.105032184 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506034131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===============================>                      (68 + 47) / 115][Stage 38:=====================================>                (79 + 36) / 115][Stage 38:============================================>         (95 + 20) / 115][Stage 38:===============================================>     (104 + 11) / 115][Stage 38:==================================================>   (108 + 7) / 115][Stage 38:====================================================> (111 + 4) / 115][Stage 38:=====================================================>(113 + 2) / 115]                                                                                [Stage 39:===============================>                      (68 + 48) / 116][Stage 39:======================================>               (82 + 34) / 116][Stage 39:=============================================>       (100 + 16) / 116][Stage 39:====================================================> (112 + 4) / 116][Stage 39:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.685058225 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507348114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:=============================>                        (65 + 55) / 120][Stage 40:===================================>                  (78 + 42) / 120][Stage 40:===========================================>          (97 + 23) / 120][Stage 40:=================================================>    (111 + 9) / 120][Stage 40:=====================================================>(119 + 1) / 120]                                                                                [Stage 41:===========================>                          (61 + 60) / 121][Stage 41:===============================>                      (70 + 51) / 121][Stage 41:========================================>             (91 + 30) / 121][Stage 41:===============================================>     (109 + 12) / 121][Stage 41:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.356517191 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434776106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (79 + 34) / 113][Stage 42:===========================================>          (92 + 21) / 113][Stage 42:=================================================>    (104 + 9) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:======================================>               (81 + 33) / 114][Stage 43:===========================================>          (92 + 22) / 114][Stage 43:================================================>    (104 + 10) / 114][Stage 43:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.899936449 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464897678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (73 + 45) / 118][Stage 44:=====================================>                (82 + 36) / 118][Stage 44:==========================================>           (93 + 25) / 118][Stage 44:===============================================>     (105 + 13) / 118][Stage 44:====================================================> (114 + 4) / 118]                                                                                [Stage 45:=================================>                    (74 + 45) / 119][Stage 45:=====================================>                (82 + 37) / 119][Stage 45:==========================================>           (94 + 25) / 119][Stage 45:================================================>    (109 + 10) / 119][Stage 45:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.658569361 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=166", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=166,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (71 + 47) / 118][Stage 46:===================================>                  (78 + 40) / 118][Stage 46:========================================>             (88 + 30) / 118][Stage 46:=============================================>       (102 + 16) / 118][Stage 46:===================================================>  (112 + 6) / 118]                                                                                [Stage 47:=================================>                    (74 + 45) / 119][Stage 47:====================================>                 (81 + 38) / 119][Stage 47:========================================>             (89 + 30) / 119][Stage 47:===============================================>     (107 + 12) / 119][Stage 47:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.261339627 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462369541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (74 + 44) / 118][Stage 48:===================================>                  (78 + 40) / 118][Stage 48:============================================>         (97 + 21) / 118][Stage 48:===================================================>  (112 + 6) / 118]                                                                                [Stage 49:=================================>                    (73 + 46) / 119][Stage 49:=====================================>                (83 + 36) / 119][Stage 49:==============================================>      (105 + 14) / 119][Stage 49:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.002787517 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466034714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:>                                                       (0 + 0) / 115][Stage 50:================================>                     (69 + 46) / 115][Stage 50:======================================>               (83 + 32) / 115][Stage 50:=============================================>        (96 + 19) / 115][Stage 50:====================================================> (111 + 4) / 115][Stage 50:=====================================================>(113 + 2) / 115]                                                                                [Stage 51:==================================>                   (75 + 41) / 116][Stage 51:==========================================>           (91 + 25) / 116][Stage 51:==================================================>   (109 + 7) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.984391318 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409407401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:====================================>                 (77 + 36) / 113][Stage 52:===========================================>          (91 + 22) / 113][Stage 52:==============================================>       (97 + 16) / 113][Stage 52:==================================================>   (106 + 7) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:=======================================>              (83 + 31) / 114][Stage 53:===========================================>          (91 + 23) / 114][Stage 53:================================================>    (104 + 10) / 114][Stage 53:===================================================>  (109 + 5) / 114][Stage 53:=====================================================>(112 + 2) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.460629157 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=228", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=228,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:====================================>                 (77 + 36) / 113][Stage 54:===========================================>          (90 + 23) / 113][Stage 54:=============================================>        (95 + 18) / 113][Stage 54:===================================================>  (107 + 6) / 113]                                                                                [Stage 55:=====================================>                (80 + 34) / 114][Stage 55:=========================================>            (88 + 26) / 114][Stage 55:==================================================>   (106 + 8) / 114][Stage 55:====================================================> (110 + 4) / 114][Stage 55:====================================================> (111 + 3) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.304186844 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437794482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:============================>                         (59 + 54) / 113][Stage 56:=================================>                    (70 + 43) / 113][Stage 56:==========================================>           (89 + 24) / 113][Stage 56:==================================================>   (105 + 8) / 113][Stage 56:====================================================> (109 + 4) / 113]                                                                                [Stage 57:=============================>                        (62 + 52) / 114][Stage 57:===================================>                  (74 + 40) / 114][Stage 57:=============================================>        (95 + 19) / 114]                                                                                Time elapsed: 3.125923334 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378944298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (82 + 33) / 115][Stage 58:===========================================>          (93 + 22) / 115][Stage 58:================================================>    (105 + 10) / 115][Stage 58:====================================================> (111 + 4) / 115]                                                                                [Stage 59:=======================================>              (85 + 31) / 116][Stage 59:=============================================>        (98 + 18) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.9773707 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494011345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (60 + 60) / 120][Stage 60:============================>                         (63 + 57) / 120][Stage 60:=================================>                    (74 + 46) / 120][Stage 60:==========================================>           (95 + 25) / 120][Stage 60:=====================================================>(118 + 2) / 120]                                                                                [Stage 61:===========================>                          (62 + 59) / 121][Stage 61:=================================>                    (74 + 47) / 121][Stage 61:===========================================>          (97 + 24) / 121][Stage 61:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.162709802 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455212631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:============================>                         (59 + 54) / 113][Stage 62:================================>                     (67 + 46) / 113][Stage 62:==========================================>           (88 + 25) / 113][Stage 62:================================================>    (103 + 10) / 113][Stage 62:==================================================>   (106 + 7) / 113][Stage 62:=====================================================>(111 + 2) / 113]                                                                                [Stage 63:==============================>                       (65 + 49) / 114][Stage 63:======================================>               (81 + 33) / 114][Stage 63:=============================================>        (97 + 17) / 114]                                                                                Time elapsed: 3.291656334 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418684068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (69 + 46) / 115][Stage 64:=========================================>            (88 + 27) / 115][Stage 64:===============================================>     (104 + 11) / 115][Stage 64:=====================================================>(113 + 2) / 115]                                                                                [Stage 65:=====================================>                (80 + 36) / 116][Stage 65:=============================================>        (98 + 18) / 116][Stage 65:==================================================>   (109 + 7) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.920033337 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403194117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=================================>                    (73 + 45) / 118][Stage 66:===================================>                  (77 + 41) / 118][Stage 66:=============================================>        (99 + 19) / 118][Stage 66:===================================================>  (113 + 5) / 118]                                                                                [Stage 67:=================================>                    (73 + 46) / 119][Stage 67:==================================>                   (75 + 44) / 119][Stage 67:=====================================>                (82 + 37) / 119][Stage 67:============================================>        (100 + 19) / 119][Stage 67:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.122582373 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408602818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:==================================>                   (76 + 42) / 118][Stage 68:====================================>                 (79 + 39) / 118][Stage 68:=========================================>            (91 + 27) / 118][Stage 68:==============================================>      (103 + 15) / 118][Stage 68:====================================================> (115 + 3) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:==================================>                   (75 + 44) / 119][Stage 69:====================================>                 (80 + 39) / 119][Stage 69:====================================>                 (81 + 38) / 119][Stage 69:=======================================>              (88 + 31) / 119][Stage 69:=============================================>       (102 + 17) / 119][Stage 69:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.734465306 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393481029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:=================================>                    (73 + 45) / 118][Stage 70:=====================================>                (81 + 37) / 118][Stage 70:============================================>         (98 + 20) / 118][Stage 70:===================================================>  (113 + 5) / 118][Stage 70:=====================================================>(117 + 1) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:==================================>                   (76 + 43) / 119][Stage 71:=====================================>                (83 + 36) / 119][Stage 71:===========================================>          (95 + 24) / 119][Stage 71:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.381872836 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (72 + 46) / 118][Stage 72:=================================>                    (74 + 44) / 118][Stage 72:====================================>                 (79 + 39) / 118][Stage 72:========================================>             (88 + 30) / 118][Stage 72:===============================================>     (106 + 12) / 118][Stage 72:=====================================================>(117 + 1) / 118]                                                                                [Stage 73:=================================>                    (73 + 46) / 119][Stage 73:==================================>                   (77 + 42) / 119][Stage 73:======================================>               (84 + 35) / 119][Stage 73:==========================================>           (94 + 25) / 119][Stage 73:==============================================>      (104 + 15) / 119][Stage 73:====================================================> (116 + 3) / 119][Stage 73:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.585939072 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379149962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (70 + 43) / 113][Stage 74:===================================>                  (75 + 38) / 113][Stage 74:======================================>               (81 + 32) / 113][Stage 74:==============================================>       (98 + 15) / 113][Stage 74:==================================================>   (106 + 7) / 113][Stage 74:====================================================> (110 + 3) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:===================================>                  (74 + 40) / 114][Stage 75:=======================================>              (84 + 30) / 114][Stage 75:===========================================>          (92 + 22) / 114][Stage 75:===============================================>     (103 + 11) / 114][Stage 75:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.79157497 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427948934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===============================>                      (68 + 47) / 115][Stage 76:==================================>                   (74 + 41) / 115][Stage 76:==========================================>           (91 + 24) / 115][Stage 76:==============================================>      (100 + 15) / 115][Stage 76:==================================================>   (107 + 8) / 115][Stage 76:=====================================================>(113 + 2) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:===============================>                      (68 + 48) / 116][Stage 77:=======================================>              (84 + 32) / 116][Stage 77:==============================================>       (99 + 17) / 116][Stage 77:==================================================>   (109 + 7) / 116][Stage 77:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.676583484 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389132361 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (72 + 46) / 118][Stage 78:=================================>                    (73 + 45) / 118][Stage 78:=====================================>                (82 + 36) / 118][Stage 78:==========================================>           (93 + 25) / 118][Stage 78:================================================>    (107 + 11) / 118]                                                                                [Stage 79:=================================>                    (74 + 45) / 119][Stage 79:=====================================>                (82 + 37) / 119][Stage 79:=========================================>            (92 + 27) / 119][Stage 79:================================================>    (108 + 11) / 119][Stage 79:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.251123884 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372684827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:======================================>               (82 + 33) / 115][Stage 80:========================================>             (86 + 29) / 115][Stage 80:==============================================>      (100 + 15) / 115][Stage 80:==================================================>   (108 + 7) / 115][Stage 80:====================================================> (111 + 4) / 115]                                                                                [Stage 81:=======================================>              (85 + 31) / 116][Stage 81:=============================================>        (98 + 18) / 116][Stage 81:===============================================>     (105 + 11) / 116][Stage 81:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.556289637 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538186447 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:============================>                         (59 + 54) / 113][Stage 82:============================>                         (60 + 53) / 113][Stage 82:====================================>                 (77 + 36) / 113][Stage 82:==============================================>       (97 + 16) / 113][Stage 82:====================================================> (110 + 3) / 113]                                                                                [Stage 83:===========================>                          (59 + 55) / 114][Stage 83:===============================>                      (67 + 47) / 114][Stage 83:=======================================>              (84 + 30) / 114][Stage 83:==============================================>      (101 + 13) / 114][Stage 83:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.983970103 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416363734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (71 + 42) / 113][Stage 84:========================================>             (84 + 29) / 113][Stage 84:=============================================>        (96 + 17) / 113][Stage 84:===================================================>  (107 + 6) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:====================================>                 (77 + 37) / 114][Stage 85:===========================================>          (91 + 23) / 114][Stage 85:===============================================>     (102 + 12) / 114][Stage 85:====================================================> (111 + 3) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.9777622 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (80 + 33) / 113][Stage 86:==========================================>           (89 + 24) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:====================================================> (110 + 3) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:====================================>                 (76 + 38) / 114][Stage 87:==========================================>           (89 + 25) / 114][Stage 87:===============================================>     (103 + 11) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.938219453 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414178699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===============================>                      (68 + 47) / 115][Stage 88:===================================>                  (76 + 39) / 115][Stage 88:==========================================>           (91 + 24) / 115][Stage 88:===============================================>     (104 + 11) / 115][Stage 88:====================================================> (111 + 4) / 115]                                                                                [Stage 89:=================================>                    (71 + 45) / 116][Stage 89:========================================>             (87 + 29) / 116][Stage 89:============================================>         (95 + 21) / 116][Stage 89:==================================================>   (108 + 8) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.205853919 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==============================>                       (64 + 51) / 115][Stage 90:====================================>                 (77 + 38) / 115][Stage 90:=========================================>            (88 + 27) / 115][Stage 90:==============================================>      (100 + 15) / 115][Stage 90:==================================================>   (107 + 8) / 115][Stage 90:=====================================================>(113 + 2) / 115]                                                                                [Stage 91:===================================>                  (76 + 40) / 116][Stage 91:=========================================>            (89 + 27) / 116][Stage 91:=============================================>        (98 + 18) / 116][Stage 91:===================================================>  (110 + 6) / 116][Stage 91:===================================================>  (111 + 5) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.133393422 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407593886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (58 + 55) / 113][Stage 92:============================>                         (60 + 53) / 113][Stage 92:===================================>                  (74 + 39) / 113][Stage 92:=============================================>        (95 + 18) / 113][Stage 92:===================================================>  (108 + 5) / 113]                                                                                [Stage 93:============================>                         (60 + 54) / 114][Stage 93:===================================>                  (74 + 40) / 114][Stage 93:============================================>         (93 + 21) / 114][Stage 93:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.128526947 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=39", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=39,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421680905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 59) / 120][Stage 94:================================>                     (72 + 48) / 120][Stage 94:========================================>             (90 + 30) / 120][Stage 94:===============================================>     (107 + 13) / 120][Stage 94:=====================================================>(119 + 1) / 120]                                                                                [Stage 95:=============================>                        (65 + 56) / 121][Stage 95:====================================>                 (81 + 40) / 121][Stage 95:==========================================>           (96 + 25) / 121][Stage 95:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.335019803 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362510147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===================================>                  (75 + 38) / 113][Stage 96:========================================>             (85 + 28) / 113][Stage 96:===============================================>      (99 + 14) / 113][Stage 96:===================================================>  (108 + 5) / 113][Stage 96:=====================================================>(111 + 2) / 113]                                                                                [Stage 97:=======================================>              (83 + 31) / 114][Stage 97:===========================================>          (92 + 22) / 114][Stage 97:===============================================>     (103 + 11) / 114][Stage 97:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.070182122 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371366383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==================================>                   (72 + 41) / 113][Stage 98:========================================>             (85 + 28) / 113][Stage 98:=============================================>        (96 + 17) / 113][Stage 98:=================================================>    (104 + 9) / 113][Stage 98:====================================================> (110 + 3) / 113][Stage 98:=====================================================>(111 + 2) / 113]                                                                                [Stage 99:====================================>                 (76 + 38) / 114][Stage 99:==========================================>           (89 + 25) / 114][Stage 99:==============================================>      (100 + 14) / 114][Stage 99:=================================================>    (105 + 9) / 114][Stage 99:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.401753294 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34801558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:========================================>            (88 + 27) / 115][Stage 100:===========================================>         (95 + 20) / 115][Stage 100:=================================================>   (108 + 7) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:=======================================>             (86 + 30) / 116][Stage 101:=============================================>       (99 + 17) / 116][Stage 101:==================================================>  (110 + 6) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.260131185 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37146856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (79 + 36) / 115][Stage 102:=====================================>               (82 + 33) / 115][Stage 102:============================================>        (97 + 18) / 115][Stage 102:=================================================>   (108 + 7) / 115]                                                                                [Stage 103:=======================================>             (86 + 30) / 116][Stage 103:===========================================>         (96 + 20) / 116][Stage 103:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.644720341 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37188928 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (70 + 43) / 113][Stage 104:====================================>                (78 + 35) / 113][Stage 104:=========================================>           (88 + 25) / 113][Stage 104:============================================>        (95 + 18) / 113][Stage 104:==================================================>  (108 + 5) / 113]                                                                                [Stage 105:=====================================>               (81 + 33) / 114][Stage 105:===========================================>         (94 + 20) / 114][Stage 105:==============================================>      (99 + 15) / 114][Stage 105:==================================================>  (109 + 5) / 114][Stage 105:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.725816494 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367172717 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=====================================>               (82 + 33) / 115][Stage 106:=======================================>             (86 + 29) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:=================================================>   (108 + 7) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:=====================================>               (83 + 33) / 116][Stage 107:========================================>            (89 + 27) / 116][Stage 107:=============================================>      (101 + 15) / 116][Stage 107:===================================================> (113 + 3) / 116][Stage 107:====================================================>(114 + 2) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.426995589 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366277911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:====================================>                (77 + 36) / 113][Stage 108:==========================================>          (90 + 23) / 113][Stage 108:===============================================>    (103 + 10) / 113][Stage 108:===================================================> (110 + 3) / 113]                                                                                [Stage 109:===================================>                 (77 + 37) / 114][Stage 109:==========================================>          (91 + 23) / 114][Stage 109:==============================================>     (102 + 12) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.81561641 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375113747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:===================================>                 (79 + 39) / 118][Stage 110:=======================================>             (88 + 30) / 118][Stage 110:============================================>        (99 + 19) / 118][Stage 110:=================================================>   (111 + 7) / 118][Stage 110:====================================================>(117 + 1) / 118]                                                                                [Stage 111:=================================>                   (75 + 44) / 119][Stage 111:==================================>                  (78 + 41) / 119][Stage 111:======================================>              (86 + 33) / 119][Stage 111:============================================>        (99 + 20) / 119][Stage 111:===============================================>    (108 + 11) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.84214743 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348548971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:====================================>                (80 + 35) / 115][Stage 112:========================================>            (87 + 28) / 115][Stage 112:=================================================>   (107 + 8) / 115][Stage 112:===================================================> (112 + 3) / 115]                                                                                [Stage 113:=====================================>               (83 + 33) / 116][Stage 113:========================================>            (89 + 27) / 116][Stage 113:=============================================>      (102 + 14) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.788073162 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399981049 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:==============================>                      (66 + 47) / 113][Stage 114:====================================>                (78 + 35) / 113][Stage 114:==============================================>     (102 + 11) / 113][Stage 114:====================================================>(111 + 2) / 113]                                                                                [Stage 115:===========================>                         (60 + 54) / 114][Stage 115:=================================>                   (71 + 43) / 114][Stage 115:===========================================>         (94 + 20) / 114][Stage 115:==============================================>     (103 + 11) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.231928384 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348557068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:======================================>              (83 + 32) / 115][Stage 116:=========================================>           (91 + 24) / 115][Stage 116:=================================================>   (108 + 7) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:======================================>              (85 + 31) / 116][Stage 117:===========================================>         (95 + 21) / 116][Stage 117:===============================================>    (105 + 11) / 116][Stage 117:====================================================>(114 + 2) / 116][Stage 117:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.312515773 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353909408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:====================================>                (80 + 35) / 115][Stage 118:=======================================>             (86 + 29) / 115][Stage 118:=============================================>      (100 + 15) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:======================================>              (84 + 32) / 116][Stage 119:=========================================>           (90 + 26) / 116][Stage 119:==============================================>     (104 + 12) / 116][Stage 119:==================================================>  (111 + 5) / 116][Stage 119:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.742999324 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=106", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=106,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400169543 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (58 + 55) / 113][Stage 120:============================>                        (61 + 52) / 113][Stage 120:===================================>                 (76 + 37) / 113][Stage 120:============================================>        (95 + 18) / 113][Stage 120:===================================================> (109 + 4) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===========================>                         (59 + 55) / 114][Stage 121:===========================>                         (60 + 54) / 114][Stage 121:=====================================>               (80 + 34) / 114][Stage 121:=============================================>       (98 + 16) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.439637774 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389643137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:==================================>                  (77 + 41) / 118][Stage 122:=========================================>           (93 + 25) / 118][Stage 122:===================================================> (115 + 3) / 118][Stage 122:====================================================>(117 + 1) / 118]                                                                                [Stage 123:================================>                    (73 + 46) / 119][Stage 123:======================================>              (86 + 33) / 119][Stage 123:===============================================>    (108 + 11) / 119]                                                                                Time elapsed: 2.980640305 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423694039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:============================>                        (61 + 52) / 113][Stage 124:==============================>                      (66 + 47) / 113][Stage 124:==========================================>          (91 + 22) / 113][Stage 124:==============================================>     (100 + 13) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:===========================>                         (60 + 54) / 114][Stage 125:==============================>                      (66 + 48) / 114][Stage 125:========================================>            (88 + 26) / 114][Stage 125:==============================================>     (102 + 12) / 114][Stage 125:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.364719479 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=12", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=12,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (59 + 54) / 113][Stage 126:==============================>                      (64 + 49) / 113][Stage 126:====================================>                (77 + 36) / 113][Stage 126:==============================================>     (101 + 12) / 113][Stage 126:===================================================> (110 + 3) / 113]                                                                                [Stage 127:============================>                        (62 + 52) / 114][Stage 127:=================================>                   (72 + 42) / 114][Stage 127:========================================>            (88 + 26) / 114][Stage 127:==============================================>      (99 + 15) / 114][Stage 127:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.635559508 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3635598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (80 + 35) / 115][Stage 128:========================================>            (88 + 27) / 115][Stage 128:=============================================>      (100 + 15) / 115][Stage 128:===================================================> (112 + 3) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:======================================>              (84 + 32) / 116][Stage 129:===========================================>         (96 + 20) / 116][Stage 129:================================================>    (107 + 9) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.817820787 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417897627 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 60) / 120][Stage 130:=============================>                       (67 + 53) / 120][Stage 130:======================================>              (87 + 33) / 120][Stage 130:===============================================>    (109 + 11) / 120][Stage 130:====================================================>(119 + 1) / 120]                                                                                [Stage 131:==========================>                          (61 + 60) / 121][Stage 131:==============================>                      (70 + 51) / 121][Stage 131:===================================>                 (81 + 40) / 121][Stage 131:=============================================>      (107 + 14) / 121][Stage 131:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.211786638 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341853504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=====================================>               (82 + 33) / 115][Stage 132:=======================================>             (85 + 30) / 115][Stage 132:=============================================>       (99 + 16) / 115][Stage 132:====================================================>(113 + 2) / 115]                                                                                [Stage 133:=====================================>               (82 + 34) / 116][Stage 133:=========================================>           (90 + 26) / 116][Stage 133:==============================================>     (104 + 12) / 116][Stage 133:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.53397434 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=112", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=112,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339464393 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (80 + 35) / 115][Stage 134:=======================================>             (85 + 30) / 115][Stage 134:=============================================>       (99 + 16) / 115][Stage 134:================================================>    (106 + 9) / 115][Stage 134:===================================================> (112 + 3) / 115]                                                                                [Stage 135:=====================================>               (82 + 34) / 116][Stage 135:=========================================>           (90 + 26) / 116][Stage 135:===============================================>    (105 + 11) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.796549756 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373144713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===================================>                 (77 + 38) / 115][Stage 136:========================================>            (88 + 27) / 115][Stage 136:=============================================>      (101 + 14) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:=======================================>             (86 + 30) / 116][Stage 137:=============================================>       (99 + 17) / 116][Stage 137:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.738398097 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==============================>                      (66 + 49) / 115][Stage 138:=====================================>               (81 + 34) / 115][Stage 138:==========================================>          (93 + 22) / 115][Stage 138:===============================================>    (104 + 11) / 115][Stage 138:===================================================> (112 + 3) / 115]                                                                                [Stage 139:=================================>                   (73 + 43) / 116][Stage 139:==========================================>          (93 + 23) / 116][Stage 139:===============================================>    (105 + 11) / 116][Stage 139:==================================================>  (110 + 6) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.168046533 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===============================>                     (69 + 46) / 115][Stage 140:=====================================>               (81 + 34) / 115][Stage 140:=============================================>       (98 + 17) / 115][Stage 140:=================================================>   (108 + 7) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:============================================>       (100 + 16) / 116][Stage 141:=================================================>   (109 + 7) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.046666506 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392949111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:==============================>                      (70 + 50) / 120][Stage 142:====================================>                (83 + 37) / 120][Stage 142:=============================================>      (105 + 15) / 120][Stage 142:====================================================>(118 + 2) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:==============================>                      (70 + 51) / 121][Stage 143:=====================================>               (86 + 35) / 121][Stage 143:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.04628665 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=92", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=92,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337148235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:====================================>                (80 + 35) / 115][Stage 144:=======================================>             (86 + 29) / 115][Stage 144:==========================================>          (92 + 23) / 115][Stage 144:===============================================>    (104 + 11) / 115][Stage 144:===================================================> (112 + 3) / 115]                                                                                [Stage 145:=======================================>             (86 + 30) / 116][Stage 145:============================================>        (97 + 19) / 116][Stage 145:================================================>    (107 + 9) / 116][Stage 145:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.925694869 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505432718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:=============================>                       (63 + 50) / 113][Stage 146:==================================>                  (73 + 40) / 113][Stage 146:============================================>        (94 + 19) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:===========================>                         (60 + 54) / 114][Stage 147:=============================>                       (64 + 50) / 114][Stage 147:=====================================>               (81 + 33) / 114][Stage 147:==============================================>      (99 + 15) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.353454625 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361030531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:================================>                    (73 + 45) / 118][Stage 148:====================================>                (82 + 36) / 118][Stage 148:============================================>       (101 + 17) / 118][Stage 148:====================================================>(116 + 2) / 118]                                                                                [Stage 149:================================>                    (73 + 46) / 119][Stage 149:====================================>                (82 + 37) / 119][Stage 149:============================================>        (99 + 20) / 119][Stage 149:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.189765963 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353025156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (77 + 36) / 113][Stage 150:=========================================>           (88 + 25) / 113][Stage 150:==============================================>      (99 + 14) / 113][Stage 150:==================================================>  (108 + 5) / 113]                                                                                [Stage 151:=====================================>               (81 + 33) / 114][Stage 151:=========================================>           (89 + 25) / 114][Stage 151:=============================================>       (98 + 16) / 114][Stage 151:=================================================>   (107 + 7) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.019388815 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337103908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:======================================>              (83 + 32) / 115][Stage 152:==========================================>          (93 + 22) / 115][Stage 152:===============================================>    (105 + 10) / 115][Stage 152:====================================================>(113 + 2) / 115]                                                                                [Stage 153:=====================================>               (83 + 33) / 116][Stage 153:===========================================>         (95 + 21) / 116][Stage 153:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.718833006 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403367122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:============================>                        (65 + 55) / 120][Stage 154:===================================>                 (81 + 39) / 120][Stage 154:===============================================>    (109 + 11) / 120]                                                                                [Stage 155:===========================>                         (62 + 59) / 121][Stage 155:===============================>                     (72 + 49) / 121][Stage 155:==========================================>          (96 + 25) / 121][Stage 155:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 3.034053587 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40566235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:===============================>                     (72 + 48) / 120][Stage 156:======================================>              (88 + 32) / 120][Stage 156:=================================================>   (113 + 7) / 120]                                                                                [Stage 157:===========================>                         (62 + 59) / 121][Stage 157:===================================>                 (80 + 41) / 121][Stage 157:=========================================>           (94 + 27) / 121][Stage 157:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.003368784 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411385271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (58 + 55) / 113][Stage 158:=============================>                       (62 + 51) / 113][Stage 158:=====================================>               (80 + 33) / 113][Stage 158:=============================================>       (98 + 15) / 113][Stage 158:==================================================>  (107 + 6) / 113]                                                                                [Stage 159:============================>                        (61 + 53) / 114][Stage 159:===============================>                     (67 + 47) / 114][Stage 159:========================================>            (87 + 27) / 114][Stage 159:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.11194598 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=211", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=211,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398523376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:===========================>                         (63 + 57) / 120][Stage 160:====================================>                (82 + 38) / 120][Stage 160:===========================================>        (100 + 20) / 120][Stage 160:====================================================>(119 + 1) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:===============================>                     (73 + 48) / 121][Stage 161:======================================>              (89 + 32) / 121][Stage 161:=================================================>   (114 + 7) / 121][Stage 161:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.218142765 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381108101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (58 + 55) / 113][Stage 162:================================>                    (69 + 44) / 113][Stage 162:=======================================>             (84 + 29) / 113][Stage 162:=================================================>   (105 + 8) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:===========================>                         (60 + 54) / 114][Stage 163:=============================>                       (63 + 51) / 114][Stage 163:=====================================>               (80 + 34) / 114][Stage 163:=================================================>   (107 + 7) / 114][Stage 163:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.190043993 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=138", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=138,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398731473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===============================>                     (69 + 46) / 115][Stage 164:========================================>            (88 + 27) / 115][Stage 164:=============================================>      (101 + 14) / 115]                                                                                [Stage 165:=================================>                   (74 + 42) / 116][Stage 165:=========================================>           (90 + 26) / 116][Stage 165:=============================================>      (101 + 15) / 116][Stage 165:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.65515838 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361446877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (72 + 46) / 118][Stage 166:=================================>                   (74 + 44) / 118][Stage 166:======================================>              (86 + 32) / 118][Stage 166:============================================>       (102 + 16) / 118][Stage 166:===================================================> (115 + 3) / 118][Stage 166:====================================================>(117 + 1) / 118]                                                                                [Stage 167:================================>                    (73 + 46) / 119][Stage 167:=================================>                   (76 + 43) / 119][Stage 167:======================================>              (87 + 32) / 119][Stage 167:============================================>        (99 + 20) / 119][Stage 167:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.357577374 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390179574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:============================>                        (61 + 52) / 113][Stage 168:=====================================>               (79 + 34) / 113][Stage 168:===========================================>         (92 + 21) / 113][Stage 168:=================================================>   (105 + 8) / 113][Stage 168:====================================================>(112 + 1) / 113]                                                                                [Stage 169:============================>                        (61 + 53) / 114][Stage 169:==================================>                  (75 + 39) / 114][Stage 169:===========================================>         (93 + 21) / 114][Stage 169:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.308874056 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372511398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===============================>                     (69 + 46) / 115][Stage 170:===================================>                 (78 + 37) / 115][Stage 170:=============================================>       (98 + 17) / 115][Stage 170:===================================================> (112 + 3) / 115]                                                                                [Stage 171:===================================>                 (78 + 38) / 116][Stage 171:==========================================>          (94 + 22) / 116][Stage 171:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.644322236 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358425879 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (80 + 33) / 113][Stage 172:==========================================>          (90 + 23) / 113][Stage 172:==============================================>     (100 + 13) / 113][Stage 172:==================================================>  (108 + 5) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:=================================>                   (71 + 43) / 114][Stage 173:=======================================>             (84 + 30) / 114][Stage 173:===========================================>         (94 + 20) / 114][Stage 173:===============================================>    (104 + 10) / 114][Stage 173:====================================================>(112 + 2) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.415775204 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=193", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=193,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (71 + 42) / 113][Stage 174:=====================================>               (80 + 33) / 113][Stage 174:===========================================>         (92 + 21) / 113][Stage 174:================================================>    (104 + 9) / 113][Stage 174:==================================================>  (108 + 5) / 113][Stage 174:====================================================>(111 + 2) / 113]                                                                                [Stage 175:====================================>                (79 + 35) / 114][Stage 175:=========================================>           (90 + 24) / 114][Stage 175:==============================================>     (101 + 13) / 114][Stage 175:==================================================>  (109 + 5) / 114][Stage 175:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.380187379 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:====================================>                (78 + 35) / 113][Stage 176:========================================>            (86 + 27) / 113][Stage 176:=============================================>       (98 + 15) / 113][Stage 176:===================================================> (109 + 4) / 113][Stage 176:====================================================>(112 + 1) / 113]                                                                                [Stage 177:====================================>                (79 + 35) / 114][Stage 177:========================================>            (87 + 27) / 114][Stage 177:=============================================>      (100 + 14) / 114][Stage 177:===================================================> (110 + 4) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.196271826 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432634278 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===================================>                 (77 + 38) / 115][Stage 178:============================================>        (96 + 19) / 115][Stage 178:================================================>    (106 + 9) / 115][Stage 178:====================================================>(113 + 2) / 115]                                                                                [Stage 179:==================================>                  (75 + 41) / 116][Stage 179:==========================================>          (92 + 24) / 116][Stage 179:==============================================>     (103 + 13) / 116][Stage 179:==================================================>  (111 + 5) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.189639522 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398836877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 59) / 120][Stage 180:===============================>                     (71 + 49) / 120][Stage 180:======================================>              (87 + 33) / 120][Stage 180:=================================================>   (113 + 7) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:=============================>                       (68 + 53) / 121][Stage 181:=======================================>             (91 + 30) / 121][Stage 181:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.100758881 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380962922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===============================>                     (69 + 46) / 115][Stage 182:======================================>              (84 + 31) / 115][Stage 182:=============================================>       (98 + 17) / 115][Stage 182:==================================================>  (110 + 5) / 115]                                                                                [Stage 183:================================>                    (72 + 44) / 116][Stage 183:========================================>            (89 + 27) / 116][Stage 183:=============================================>      (101 + 15) / 116][Stage 183:===================================================> (112 + 4) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.257555067 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346093157 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:====================================>                (78 + 35) / 113][Stage 184:========================================>            (87 + 26) / 113][Stage 184:=============================================>       (96 + 17) / 113][Stage 184:==================================================>  (107 + 6) / 113][Stage 184:===================================================> (110 + 3) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:==================================>                  (75 + 39) / 114][Stage 185:========================================>            (87 + 27) / 114][Stage 185:=============================================>      (100 + 14) / 114][Stage 185:=================================================>   (107 + 7) / 114][Stage 185:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.719076398 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=================================>                   (72 + 41) / 113][Stage 186:=====================================>               (79 + 34) / 113][Stage 186:=============================================>       (96 + 17) / 113][Stage 186:===============================================>    (103 + 10) / 113][Stage 186:===================================================> (109 + 4) / 113][Stage 186:====================================================>(111 + 2) / 113]                                                                                [Stage 187:=====================================>               (81 + 33) / 114][Stage 187:===========================================>         (94 + 20) / 114][Stage 187:==============================================>     (103 + 11) / 114][Stage 187:==================================================>  (109 + 5) / 114][Stage 187:===================================================> (110 + 4) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.740040844 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351575795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:====================================>                (77 + 36) / 113][Stage 188:=========================================>           (88 + 25) / 113][Stage 188:==============================================>     (102 + 11) / 113][Stage 188:===================================================> (110 + 3) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:====================================>                (79 + 35) / 114][Stage 189:=======================================>             (84 + 30) / 114][Stage 189:=============================================>      (100 + 14) / 114][Stage 189:=================================================>   (106 + 8) / 114][Stage 189:====================================================>(112 + 2) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.551742975 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411559559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:==============================>                      (68 + 52) / 120][Stage 190:=======================================>             (89 + 31) / 120][Stage 190:==================================================>  (114 + 6) / 120][Stage 190:====================================================>(119 + 1) / 120]                                                                                [Stage 191:===========================>                         (62 + 59) / 121][Stage 191:==============================>                      (70 + 51) / 121][Stage 191:======================================>              (89 + 32) / 121][Stage 191:==============================================>     (108 + 13) / 121][Stage 191:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.338725348 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371585873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (71 + 44) / 115][Stage 192:========================================>            (88 + 27) / 115][Stage 192:================================================>    (106 + 9) / 115][Stage 192:==================================================>  (110 + 5) / 115][Stage 192:===================================================> (112 + 3) / 115]                                                                                [Stage 193:=================================>                   (74 + 42) / 116][Stage 193:======================================>              (85 + 31) / 116][Stage 193:=============================================>      (101 + 15) / 116][Stage 193:==================================================>  (110 + 6) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.545756333 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==============================>                      (67 + 48) / 115][Stage 194:==================================>                  (74 + 41) / 115][Stage 194:==========================================>          (93 + 22) / 115][Stage 194:==================================================>  (110 + 5) / 115][Stage 194:====================================================>(113 + 2) / 115][Stage 194:====================================================>(114 + 1) / 115]                                                                                [Stage 195:==============================>                      (66 + 50) / 116][Stage 195:==================================>                  (75 + 41) / 116][Stage 195:============================================>        (98 + 18) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:===================================================> (112 + 4) / 116][Stage 195:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.420078503 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372062071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==============================>                      (66 + 49) / 115][Stage 196:=====================================>               (81 + 34) / 115][Stage 196:===========================================>         (95 + 20) / 115][Stage 196:===============================================>    (104 + 11) / 115][Stage 196:==================================================>  (109 + 6) / 115]                                                                                [Stage 197:===================================>                 (77 + 39) / 116][Stage 197:==========================================>          (94 + 22) / 116][Stage 197:=================================================>   (109 + 7) / 116][Stage 197:===================================================> (113 + 3) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.299223175 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420067444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (72 + 46) / 118][Stage 198:==================================>                  (77 + 41) / 118][Stage 198:======================================>              (86 + 32) / 118][Stage 198:============================================>        (98 + 20) / 118][Stage 198:===================================================> (115 + 3) / 118]                                                                                [Stage 199:================================>                    (73 + 46) / 119][Stage 199:=================================>                   (76 + 43) / 119][Stage 199:====================================>                (82 + 37) / 119][Stage 199:=========================================>           (94 + 25) / 119][Stage 199:==================================================>  (114 + 5) / 119][Stage 199:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.464872429 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (72 + 46) / 118][Stage 200:=================================>                   (74 + 44) / 118][Stage 200:===================================>                 (80 + 38) / 118][Stage 200:==========================================>          (94 + 24) / 118][Stage 200:==============================================>     (106 + 12) / 118][Stage 200:====================================================>(116 + 2) / 118]                                                                                [Stage 201:================================>                    (73 + 46) / 119][Stage 201:=================================>                   (76 + 43) / 119][Stage 201:=====================================>               (85 + 34) / 119][Stage 201:========================================>            (92 + 27) / 119][Stage 201:=============================================>      (103 + 16) / 119][Stage 201:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.400459831 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 02:12:17 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:47468) dropped. RpcEnv already stopped.
17/06/01 02:12:17 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:47468) dropped. RpcEnv already stopped.

real	10m8.022s
user	11m27.136s
sys	0m37.484s
