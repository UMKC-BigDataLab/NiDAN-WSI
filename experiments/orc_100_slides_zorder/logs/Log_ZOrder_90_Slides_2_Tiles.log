Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 04:08:19 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:08:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:08:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:08:34 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 04:08:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:08:47 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601040836-0752).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.415354026 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========>                                           (24 + 91) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:======================>                                (48 + 68) / 116][Stage 1:=============================>                         (62 + 54) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:===================================================>   (109 + 7) / 116]                                                                                Time elapsed: 12.404184628 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=====================>                                 (44 + 71) / 115][Stage 2:===========================>                           (58 + 57) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:==================================>                    (72 + 43) / 115][Stage 2:=====================================>                 (78 + 37) / 115][Stage 2:=======================================>               (82 + 33) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:================================================>     (103 + 12) / 115][Stage 2:=====================================================> (112 + 3) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:=============================>                         (63 + 53) / 116][Stage 3:=================================>                     (70 + 46) / 116][Stage 3:===================================>                   (74 + 42) / 116][Stage 3:=======================================>               (83 + 33) / 116][Stage 3:=============================================>         (96 + 20) / 116][Stage 3:==============================================>       (100 + 16) / 116][Stage 3:================================================>     (105 + 11) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:====================================================>  (111 + 5) / 116][Stage 3:=====================================================> (112 + 4) / 116][Stage 3:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.642061402 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.685580552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=================================>                     (72 + 46) / 118][Stage 4:===================================>                   (77 + 41) / 118][Stage 4:===========================================>           (93 + 25) / 118][Stage 4:===============================================>      (103 + 15) / 118][Stage 4:===================================================>   (110 + 8) / 118][Stage 4:======================================================>(116 + 2) / 118]                                                                                [Stage 5:===============================>                       (68 + 51) / 119][Stage 5:=================================>                     (73 + 46) / 119][Stage 5:====================================>                  (80 + 39) / 119][Stage 5:===========================================>           (94 + 25) / 119][Stage 5:===============================================>      (104 + 15) / 119][Stage 5:=====================================================> (116 + 3) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.164566797 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=44", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=44,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.816617078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:============================>                          (58 + 55) / 113][Stage 6:================================>                      (66 + 47) / 113][Stage 6:======================================>                (80 + 33) / 113][Stage 6:===========================================>           (89 + 24) / 113][Stage 6:===============================================>      (100 + 13) / 113][Stage 6:====================================================>  (108 + 5) / 113]                                                                                [Stage 7:============================>                          (59 + 55) / 114][Stage 7:==============================>                        (63 + 51) / 114][Stage 7:=====================================>                 (77 + 37) / 114][Stage 7:=============================================>         (94 + 20) / 114][Stage 7:===============================================>      (100 + 14) / 114][Stage 7:===================================================>   (107 + 7) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.330136861 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.688657947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 60) / 120][Stage 8:==============================>                        (66 + 54) / 120][Stage 8:=====================================>                 (81 + 39) / 120][Stage 8:=============================================>         (99 + 21) / 120][Stage 8:===================================================>   (112 + 8) / 120]                                                                                [Stage 9:===========================>                           (61 + 60) / 121][Stage 9:=============================>                         (64 + 57) / 121][Stage 9:==================================>                    (76 + 45) / 121][Stage 9:============================================>          (97 + 24) / 121][Stage 9:===============================================>      (107 + 14) / 121][Stage 9:=====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.882242025 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=187", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=187,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.755552246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (60 + 60) / 120][Stage 10:=============================>                        (65 + 55) / 120][Stage 10:===================================>                  (78 + 42) / 120][Stage 10:==========================================>           (95 + 25) / 120][Stage 10:================================================>    (109 + 11) / 120][Stage 10:=====================================================>(118 + 2) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:===============================>                      (71 + 50) / 121][Stage 11:=====================================>                (83 + 38) / 121][Stage 11:===========================================>         (100 + 21) / 121][Stage 11:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.712588998 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492440295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (79 + 36) / 115][Stage 12:======================================>               (83 + 32) / 115][Stage 12:============================================>         (94 + 21) / 115][Stage 12:==================================================>   (108 + 7) / 115][Stage 12:===================================================>  (110 + 5) / 115][Stage 12:====================================================> (112 + 3) / 115][Stage 12:=====================================================>(113 + 2) / 115]                                                                                [Stage 13:=======================================>              (85 + 31) / 116][Stage 13:============================================>         (95 + 21) / 116][Stage 13:===================================================>  (110 + 6) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.285113283 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.625267466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (58 + 55) / 113][Stage 14:============================>                         (60 + 53) / 113][Stage 14:================================>                     (69 + 44) / 113][Stage 14:=========================================>            (86 + 27) / 113][Stage 14:=============================================>        (96 + 17) / 113][Stage 14:==================================================>   (106 + 7) / 113]                                                                                [Stage 15:============================>                         (60 + 54) / 114][Stage 15:==============================>                       (64 + 50) / 114][Stage 15:===================================>                  (75 + 39) / 114][Stage 15:=============================================>        (97 + 17) / 114][Stage 15:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.684413963 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556294482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:=============================>                        (66 + 54) / 120][Stage 16:====================================>                 (82 + 38) / 120][Stage 16:============================================>         (98 + 22) / 120][Stage 16:==================================================>   (113 + 7) / 120][Stage 16:=====================================================>(119 + 1) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:==============================>                       (69 + 52) / 121][Stage 17:=====================================>                (85 + 36) / 121][Stage 17:=============================================>       (103 + 18) / 121][Stage 17:====================================================> (117 + 4) / 121][Stage 17:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.793772009 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466886518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==================================>                   (72 + 41) / 113][Stage 18:=======================================>              (82 + 31) / 113][Stage 18:=============================================>        (95 + 18) / 113][Stage 18:===============================================>      (99 + 14) / 113][Stage 18:=================================================>    (104 + 9) / 113][Stage 18:===================================================>  (108 + 5) / 113]                                                                                [Stage 19:===================================>                  (74 + 40) / 114][Stage 19:===========================================>          (91 + 23) / 114][Stage 19:==============================================>       (99 + 15) / 114][Stage 19:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.379116737 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520313505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (66 + 49) / 115][Stage 20:=================================>                    (71 + 44) / 115][Stage 20:==========================================>           (90 + 25) / 115][Stage 20:=============================================>        (96 + 19) / 115][Stage 20:=================================================>    (106 + 9) / 115][Stage 20:==================================================>   (108 + 7) / 115]                                                                                [Stage 21:=================================>                    (72 + 44) / 116][Stage 21:=======================================>              (85 + 31) / 116][Stage 21:============================================>         (95 + 21) / 116][Stage 21:===================================================>  (111 + 5) / 116][Stage 21:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.535447224 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57085134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==========================>                           (58 + 62) / 120][Stage 22:===============================>                      (69 + 51) / 120][Stage 22:=======================================>              (88 + 32) / 120][Stage 22:=============================================>       (102 + 18) / 120][Stage 22:==================================================>   (113 + 7) / 120][Stage 22:=====================================================>(118 + 2) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:=============================>                        (67 + 54) / 121][Stage 23:===================================>                  (80 + 41) / 121][Stage 23:===========================================>          (98 + 23) / 121][Stage 23:==============================================>      (107 + 14) / 121][Stage 23:==================================================>   (114 + 7) / 121][Stage 23:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.045642095 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52143805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:==============================>                       (68 + 52) / 120][Stage 24:======================================>               (85 + 35) / 120][Stage 24:===============================================>     (107 + 13) / 120][Stage 24:=====================================================>(118 + 2) / 120]                                                                                [Stage 25:===========================>                          (62 + 59) / 121][Stage 25:================================>                     (73 + 48) / 121][Stage 25:==========================================>           (95 + 26) / 121][Stage 25:===================================================>  (115 + 6) / 121][Stage 25:====================================================> (118 + 3) / 121][Stage 25:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.61745207 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484334408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==============================>                       (66 + 49) / 115][Stage 26:=================================>                    (72 + 43) / 115][Stage 26:=========================================>            (88 + 27) / 115][Stage 26:===============================================>     (102 + 13) / 115][Stage 26:====================================================> (111 + 4) / 115]                                                                                [Stage 27:===================================>                  (76 + 40) / 116][Stage 27:===========================================>          (93 + 23) / 116][Stage 27:====================================================> (112 + 4) / 116][Stage 27:=====================================================>(114 + 2) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.835149814 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51063923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (59 + 61) / 120][Stage 28:==============================>                       (67 + 53) / 120][Stage 28:====================================>                 (80 + 40) / 120][Stage 28:=============================================>       (103 + 17) / 120][Stage 28:=================================================>    (111 + 9) / 120][Stage 28:====================================================> (116 + 4) / 120]                                                                                [Stage 29:===========================>                          (62 + 59) / 121][Stage 29:=================================>                    (76 + 45) / 121][Stage 29:=========================================>            (92 + 29) / 121][Stage 29:================================================>    (110 + 11) / 121][Stage 29:===================================================>  (116 + 5) / 121][Stage 29:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.989647215 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432863211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=================================>                    (70 + 43) / 113][Stage 30:===================================>                  (75 + 38) / 113][Stage 30:=========================================>            (86 + 27) / 113][Stage 30:============================================>         (94 + 19) / 113][Stage 30:=================================================>    (104 + 9) / 113][Stage 30:=====================================================>(111 + 2) / 113]                                                                                [Stage 31:====================================>                 (78 + 36) / 114][Stage 31:=============================================>        (95 + 19) / 114][Stage 31:===============================================>     (102 + 12) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.487989344 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=163", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=163,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421172666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (82 + 33) / 115][Stage 32:============================================>         (95 + 20) / 115][Stage 32:===============================================>     (102 + 13) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:=========================================>            (90 + 26) / 116][Stage 33:============================================>         (96 + 20) / 116][Stage 33:=================================================>    (107 + 9) / 116][Stage 33:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.012190171 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495436533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (61 + 59) / 120][Stage 34:=============================>                        (66 + 54) / 120][Stage 34:=======================================>              (88 + 32) / 120][Stage 34:=============================================>       (104 + 16) / 120][Stage 34:=====================================================>(118 + 2) / 120]                                                                                [Stage 35:============================>                         (64 + 57) / 121][Stage 35:=================================>                    (75 + 46) / 121][Stage 35:=============================================>       (103 + 18) / 121][Stage 35:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.247311242 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511847577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 59) / 120][Stage 36:================================>                     (72 + 48) / 120][Stage 36:===========================================>          (96 + 24) / 120][Stage 36:=================================================>    (111 + 9) / 120][Stage 36:====================================================> (116 + 4) / 120][Stage 36:=====================================================>(119 + 1) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:==============================>                       (69 + 52) / 121][Stage 37:====================================>                 (82 + 39) / 121][Stage 37:===============================================>     (108 + 13) / 121][Stage 37:====================================================> (117 + 4) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.684060074 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404009381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=======================================>              (84 + 31) / 115][Stage 38:=============================================>        (96 + 19) / 115][Stage 38:===================================================>  (109 + 6) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:======================================>               (83 + 33) / 116][Stage 39:========================================>             (88 + 28) / 116][Stage 39:==============================================>      (101 + 15) / 116][Stage 39:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.824025014 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409348423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=====================================>                (80 + 35) / 115][Stage 40:========================================>             (86 + 29) / 115][Stage 40:==============================================>      (100 + 15) / 115][Stage 40:================================================>    (105 + 10) / 115][Stage 40:====================================================> (112 + 3) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:=======================================>              (85 + 31) / 116][Stage 41:==========================================>           (92 + 24) / 116][Stage 41:===============================================>     (105 + 11) / 116][Stage 41:==================================================>   (108 + 8) / 116][Stage 41:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.216159173 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475696019 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (65 + 50) / 115][Stage 42:=====================================>                (80 + 35) / 115][Stage 42:============================================>         (95 + 20) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:====================================================> (112 + 3) / 115]                                                                                [Stage 43:===================================>                  (76 + 40) / 116][Stage 43:========================================>             (86 + 30) / 116][Stage 43:=============================================>       (100 + 16) / 116][Stage 43:===================================================>  (110 + 6) / 116][Stage 43:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.788677992 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464303936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===============================>                      (67 + 48) / 115][Stage 44:=====================================>                (79 + 36) / 115][Stage 44:=========================================>            (89 + 26) / 115][Stage 44:==============================================>      (101 + 14) / 115][Stage 44:==================================================>   (108 + 7) / 115][Stage 44:===================================================>  (110 + 5) / 115][Stage 44:=====================================================>(113 + 2) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:================================>                     (69 + 47) / 116][Stage 45:=======================================>              (85 + 31) / 116][Stage 45:===========================================>          (93 + 23) / 116][Stage 45:==============================================>      (101 + 15) / 116][Stage 45:==================================================>   (108 + 8) / 116][Stage 45:=====================================================>(114 + 2) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.018929607 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=131,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404784046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:====================================>                 (76 + 37) / 113][Stage 46:========================================>             (85 + 28) / 113][Stage 46:==============================================>       (98 + 15) / 113][Stage 46:==================================================>   (106 + 7) / 113][Stage 46:====================================================> (110 + 3) / 113][Stage 46:=====================================================>(111 + 2) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:==================================>                   (72 + 42) / 114][Stage 47:=======================================>              (84 + 30) / 114][Stage 47:=============================================>        (96 + 18) / 114][Stage 47:================================================>    (104 + 10) / 114][Stage 47:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.496513251 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=70", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=70,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450902946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===============================>                      (68 + 47) / 115][Stage 48:=======================================>              (84 + 31) / 115][Stage 48:============================================>         (94 + 21) / 115][Stage 48:===============================================>     (102 + 13) / 115][Stage 48:================================================>    (105 + 10) / 115][Stage 48:==================================================>   (108 + 7) / 115][Stage 48:====================================================> (112 + 3) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:=============================>                        (64 + 52) / 116][Stage 49:====================================>                 (79 + 37) / 116][Stage 49:=======================================>              (84 + 32) / 116][Stage 49:============================================>         (95 + 21) / 116][Stage 49:================================================>    (106 + 10) / 116][Stage 49:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.922781585 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=231", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=231,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418912702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:========================================>             (84 + 29) / 113][Stage 50:===========================================>          (90 + 23) / 113][Stage 50:==============================================>      (100 + 13) / 113][Stage 50:=================================================>    (104 + 9) / 113][Stage 50:====================================================> (110 + 3) / 113]                                                                                [Stage 51:====================================>                 (77 + 37) / 114][Stage 51:=========================================>            (87 + 27) / 114][Stage 51:============================================>         (93 + 21) / 114][Stage 51:===============================================>     (103 + 11) / 114][Stage 51:===================================================>  (109 + 5) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.528438383 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=195", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=195,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=================================>                    (71 + 42) / 113][Stage 52:=======================================>              (83 + 30) / 113][Stage 52:===========================================>          (91 + 22) / 113][Stage 52:===============================================>     (101 + 12) / 113][Stage 52:==================================================>   (106 + 7) / 113][Stage 52:====================================================> (110 + 3) / 113][Stage 52:=====================================================>(111 + 2) / 113]                                                                                [Stage 53:========================================>             (86 + 28) / 114][Stage 53:=============================================>        (96 + 18) / 114][Stage 53:==============================================>      (100 + 14) / 114][Stage 53:=================================================>    (105 + 9) / 114][Stage 53:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.622140151 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410940852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==================================>                   (73 + 40) / 113][Stage 54:========================================>             (85 + 28) / 113][Stage 54:=============================================>        (96 + 17) / 113][Stage 54:==================================================>   (106 + 7) / 113][Stage 54:=====================================================>(112 + 1) / 113]                                                                                [Stage 55:===================================>                  (75 + 39) / 114][Stage 55:=========================================>            (87 + 27) / 114][Stage 55:===============================================>     (103 + 11) / 114][Stage 55:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.112358679 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44649799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:==================================>                   (76 + 42) / 118][Stage 56:=====================================>                (83 + 35) / 118][Stage 56:===========================================>          (95 + 23) / 118][Stage 56:================================================>    (107 + 11) / 118][Stage 56:=====================================================>(116 + 2) / 118]                                                                                [Stage 57:=================================>                    (74 + 45) / 119][Stage 57:====================================>                 (80 + 39) / 119][Stage 57:========================================>             (89 + 30) / 119][Stage 57:============================================>         (97 + 22) / 119][Stage 57:================================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.61732574 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381058817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (80 + 35) / 115][Stage 58:=========================================>            (88 + 27) / 115][Stage 58:===========================================>          (93 + 22) / 115][Stage 58:===============================================>     (104 + 11) / 115][Stage 58:====================================================> (112 + 3) / 115]                                                                                [Stage 59:=======================================>              (84 + 32) / 116][Stage 59:============================================>         (96 + 20) / 116][Stage 59:==================================================>   (108 + 8) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.95858291 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451705352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (61 + 59) / 120][Stage 60:===============================>                      (71 + 49) / 120][Stage 60:=======================================>              (87 + 33) / 120][Stage 60:=============================================>       (102 + 18) / 120][Stage 60:===================================================>  (114 + 6) / 120]                                                                                [Stage 61:===========================>                          (61 + 60) / 121][Stage 61:==============================>                       (68 + 53) / 121][Stage 61:========================================>             (90 + 31) / 121][Stage 61:=============================================>       (105 + 16) / 121][Stage 61:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.449625458 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402561262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:=================================>                    (74 + 44) / 118][Stage 62:===================================>                  (77 + 41) / 118][Stage 62:=====================================>                (81 + 37) / 118][Stage 62:==========================================>           (93 + 25) / 118][Stage 62:============================================>        (100 + 18) / 118][Stage 62:=================================================>    (109 + 9) / 118][Stage 62:====================================================> (114 + 4) / 118][Stage 62:=====================================================>(117 + 1) / 118]                                                                                [Stage 63:=================================>                    (73 + 46) / 119][Stage 63:==================================>                   (76 + 43) / 119][Stage 63:=====================================>                (83 + 36) / 119][Stage 63:=========================================>            (91 + 28) / 119][Stage 63:==============================================>      (104 + 15) / 119][Stage 63:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.300469163 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447312381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (60 + 53) / 113][Stage 64:================================>                     (67 + 46) / 113][Stage 64:==========================================>           (89 + 24) / 113][Stage 64:===================================================>  (107 + 6) / 113]                                                                                [Stage 65:============================>                         (60 + 54) / 114][Stage 65:===============================>                      (67 + 47) / 114][Stage 65:====================================>                 (77 + 37) / 114][Stage 65:==============================================>       (99 + 15) / 114][Stage 65:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.260990169 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:=============================>                        (62 + 51) / 113][Stage 66:===================================>                  (75 + 38) / 113][Stage 66:==============================================>      (100 + 13) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:===========================>                          (59 + 55) / 114][Stage 67:=============================>                        (63 + 51) / 114][Stage 67:====================================>                 (77 + 37) / 114][Stage 67:=============================================>        (97 + 17) / 114][Stage 67:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.084234383 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36252859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=====================================>                (80 + 35) / 115][Stage 68:======================================>               (83 + 32) / 115][Stage 68:==============================================>      (101 + 14) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:=====================================>                (81 + 35) / 116][Stage 69:=========================================>            (89 + 27) / 116][Stage 69:==============================================>       (99 + 17) / 116][Stage 69:===================================================>  (110 + 6) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.857770639 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394409659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (78 + 35) / 113][Stage 70:==========================================>           (88 + 25) / 113][Stage 70:==============================================>      (100 + 13) / 113][Stage 70:===================================================>  (107 + 6) / 113]                                                                                [Stage 71:====================================>                 (76 + 38) / 114][Stage 71:========================================>             (86 + 28) / 114][Stage 71:=============================================>        (96 + 18) / 114][Stage 71:==================================================>   (106 + 8) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.115679564 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374203083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (81 + 34) / 115][Stage 72:===========================================>          (92 + 23) / 115][Stage 72:==============================================>      (100 + 15) / 115][Stage 72:==================================================>   (108 + 7) / 115][Stage 72:===================================================>  (110 + 5) / 115][Stage 72:=====================================================>(113 + 2) / 115]                                                                                [Stage 73:======================================>               (82 + 34) / 116][Stage 73:==========================================>           (91 + 25) / 116][Stage 73:==============================================>      (101 + 15) / 116][Stage 73:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.550734366 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=====================================>                (79 + 36) / 115][Stage 74:=========================================>            (88 + 27) / 115][Stage 74:=============================================>        (96 + 19) / 115][Stage 74:===================================================>  (110 + 5) / 115][Stage 74:=====================================================>(113 + 2) / 115]                                                                                [Stage 75:======================================>               (83 + 33) / 116][Stage 75:=========================================>            (90 + 26) / 116][Stage 75:==============================================>      (101 + 15) / 116][Stage 75:===================================================>  (111 + 5) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.100210817 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=201", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=201,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421528798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:============================>                         (59 + 54) / 113][Stage 76:================================>                     (67 + 46) / 113][Stage 76:===========================================>          (91 + 22) / 113][Stage 76:====================================================> (109 + 4) / 113]                                                                                [Stage 77:=============================>                        (62 + 52) / 114][Stage 77:===================================>                  (75 + 39) / 114][Stage 77:==========================================>           (90 + 24) / 114][Stage 77:==================================================>   (106 + 8) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.161882637 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414036698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==============================>                       (65 + 50) / 115][Stage 78:====================================>                 (77 + 38) / 115][Stage 78:===========================================>          (93 + 22) / 115][Stage 78:================================================>    (105 + 10) / 115][Stage 78:=====================================================>(113 + 2) / 115]                                                                                [Stage 79:===============================>                      (68 + 48) / 116][Stage 79:====================================>                 (79 + 37) / 116][Stage 79:============================================>         (95 + 21) / 116][Stage 79:==================================================>   (108 + 8) / 116][Stage 79:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.879550674 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431590868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:============================>                         (60 + 53) / 113][Stage 80:==================================>                   (72 + 41) / 113][Stage 80:========================================>             (85 + 28) / 113][Stage 80:=================================================>    (104 + 9) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:============================>                         (61 + 53) / 114][Stage 81:================================>                     (69 + 45) / 114][Stage 81:========================================>             (86 + 28) / 114][Stage 81:=================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.466824766 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=66", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=66,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389721412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:====================================>                 (76 + 37) / 113][Stage 82:==========================================>           (88 + 25) / 113][Stage 82:==============================================>      (100 + 13) / 113][Stage 82:====================================================> (109 + 4) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:======================================>               (81 + 33) / 114][Stage 83:==========================================>           (89 + 25) / 114][Stage 83:==============================================>       (99 + 15) / 114][Stage 83:===================================================>  (109 + 5) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.313359424 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:====================================>                 (76 + 37) / 113][Stage 84:=======================================>              (82 + 31) / 113][Stage 84:==========================================>           (89 + 24) / 113][Stage 84:===============================================>     (102 + 11) / 113][Stage 84:=====================================================>(111 + 2) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:===================================>                  (75 + 39) / 114][Stage 85:=======================================>              (83 + 31) / 114][Stage 85:==========================================>           (89 + 25) / 114][Stage 85:==============================================>       (99 + 15) / 114][Stage 85:===================================================>  (109 + 5) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.757434498 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408213766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=====================================>                (79 + 34) / 113][Stage 86:=========================================>            (87 + 26) / 113][Stage 86:==============================================>       (97 + 16) / 113][Stage 86:===============================================>     (102 + 11) / 113][Stage 86:==================================================>   (106 + 7) / 113][Stage 86:===================================================>  (107 + 6) / 113][Stage 86:=====================================================>(111 + 2) / 113]                                                                                [Stage 87:====================================>                 (77 + 37) / 114][Stage 87:==========================================>           (89 + 25) / 114][Stage 87:==============================================>       (98 + 16) / 114][Stage 87:===============================================>     (102 + 12) / 114]                                                                                Time elapsed: 3.600169127 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354119975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (81 + 34) / 115][Stage 88:=========================================>            (88 + 27) / 115][Stage 88:==============================================>       (98 + 17) / 115][Stage 88:=================================================>    (106 + 9) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=======================================>              (84 + 32) / 116][Stage 89:========================================>             (88 + 28) / 116][Stage 89:=============================================>       (100 + 16) / 116][Stage 89:==================================================>   (109 + 7) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.089852581 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=219,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379432606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:==================================>                   (76 + 42) / 118][Stage 90:======================================>               (85 + 33) / 118][Stage 90:===============================================>     (106 + 12) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:=================================>                    (74 + 45) / 119][Stage 91:=========================================>            (91 + 28) / 119][Stage 91:===============================================>     (107 + 12) / 119][Stage 91:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.052367723 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352784012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (82 + 33) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:===============================================>     (102 + 13) / 115][Stage 92:====================================================> (112 + 3) / 115]                                                                                [Stage 93:========================================>             (86 + 30) / 116][Stage 93:===========================================>          (94 + 22) / 116][Stage 93:===============================================>     (105 + 11) / 116][Stage 93:===================================================>  (111 + 5) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.468798683 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412585182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:============================>                         (59 + 54) / 113][Stage 94:=================================>                    (70 + 43) / 113][Stage 94:===========================================>          (91 + 22) / 113][Stage 94:==================================================>   (105 + 8) / 113]                                                                                [Stage 95:============================>                         (61 + 53) / 114][Stage 95:=====================================>                (80 + 34) / 114][Stage 95:===========================================>          (92 + 22) / 114][Stage 95:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.076403105 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365837191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=================================>                    (71 + 42) / 113][Stage 96:======================================>               (80 + 33) / 113][Stage 96:===========================================>          (91 + 22) / 113][Stage 96:===============================================>     (102 + 11) / 113][Stage 96:====================================================> (109 + 4) / 113]                                                                                [Stage 97:====================================>                 (76 + 38) / 114][Stage 97:=======================================>              (83 + 31) / 114][Stage 97:===========================================>          (91 + 23) / 114][Stage 97:=================================================>    (105 + 9) / 114][Stage 97:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.973167562 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.519530905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:============================>                         (64 + 56) / 120][Stage 98:=====================================>                (83 + 37) / 120][Stage 98:=============================================>       (104 + 16) / 120][Stage 98:====================================================> (117 + 3) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:===============================>                      (71 + 50) / 121][Stage 99:=====================================>                (85 + 36) / 121][Stage 99:=============================================>       (105 + 16) / 121]                                                                                Time elapsed: 2.890222195 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377415005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=====================================>               (80 + 33) / 113][Stage 100:===========================================>         (93 + 20) / 113][Stage 100:===============================================>    (103 + 10) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:=====================================>               (81 + 33) / 114][Stage 101:==========================================>          (91 + 23) / 114][Stage 101:==============================================>     (101 + 13) / 114][Stage 101:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.000844874 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393158711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==============================>                      (66 + 49) / 115][Stage 102:===================================>                 (76 + 39) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:==============================================>     (102 + 13) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:===============================>                     (69 + 47) / 116][Stage 103:===================================>                 (78 + 38) / 116][Stage 103:============================================>        (97 + 19) / 116][Stage 103:===============================================>    (106 + 10) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.534160008 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:>                                                      (0 + 0) / 115][Stage 104:================================>                    (70 + 45) / 115][Stage 104:====================================>                (79 + 36) / 115][Stage 104:=========================================>           (89 + 26) / 115][Stage 104:==================================================>  (109 + 6) / 115]                                                                                [Stage 105:================================>                    (71 + 45) / 116][Stage 105:=====================================>               (81 + 35) / 116][Stage 105:===========================================>         (95 + 21) / 116][Stage 105:=================================================>   (108 + 8) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.094313112 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420161369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (59 + 54) / 113][Stage 106:=============================>                       (63 + 50) / 113][Stage 106:=======================================>             (85 + 28) / 113][Stage 106:==============================================>     (102 + 11) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:==============================>                      (65 + 49) / 114][Stage 107:=====================================>               (80 + 34) / 114][Stage 107:============================================>        (95 + 19) / 114][Stage 107:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.128433336 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391316028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (73 + 45) / 118][Stage 108:===================================>                 (78 + 40) / 118][Stage 108:=======================================>             (88 + 30) / 118][Stage 108:============================================>       (101 + 17) / 118][Stage 108:=================================================>   (110 + 8) / 118]                                                                                [Stage 109:=================================>                   (75 + 44) / 119][Stage 109:=====================================>               (84 + 35) / 119][Stage 109:============================================>        (99 + 20) / 119][Stage 109:=============================================>      (105 + 14) / 119][Stage 109:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.348310567 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407874176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===============================>                     (68 + 47) / 115][Stage 110:=====================================>               (81 + 34) / 115][Stage 110:============================================>        (96 + 19) / 115][Stage 110:===============================================>    (105 + 10) / 115][Stage 110:====================================================>(114 + 1) / 115]                                                                                [Stage 111:================================>                    (71 + 45) / 116][Stage 111:======================================>              (85 + 31) / 116][Stage 111:============================================>       (100 + 16) / 116][Stage 111:==================================================>  (110 + 6) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.960669035 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390423647 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===================================>                 (77 + 38) / 115][Stage 112:========================================>            (87 + 28) / 115][Stage 112:=============================================>      (101 + 14) / 115][Stage 112:===================================================> (111 + 4) / 115]                                                                                [Stage 113:================================>                    (72 + 44) / 116][Stage 113:========================================>            (89 + 27) / 116][Stage 113:=============================================>      (101 + 15) / 116][Stage 113:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.96019002 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409780823 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:============================>                        (65 + 55) / 120][Stage 114:====================================>                (82 + 38) / 120][Stage 114:==============================================>     (108 + 12) / 120][Stage 114:====================================================>(119 + 1) / 120]                                                                                [Stage 115:==========================>                          (61 + 60) / 121][Stage 115:==============================>                      (70 + 51) / 121][Stage 115:======================================>              (89 + 32) / 121][Stage 115:=================================================>   (113 + 8) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.010243989 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413448774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:===============================>                     (71 + 49) / 120][Stage 116:=====================================>               (85 + 35) / 120][Stage 116:==================================================>  (115 + 5) / 120][Stage 116:====================================================>(119 + 1) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:===========================>                         (63 + 58) / 121][Stage 117:===================================>                 (80 + 41) / 121][Stage 117:============================================>       (103 + 18) / 121][Stage 117:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.372896447 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389723388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===================================>                 (78 + 37) / 115][Stage 118:========================================>            (88 + 27) / 115][Stage 118:=============================================>      (100 + 15) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:===============================>                     (70 + 46) / 116][Stage 119:=====================================>               (82 + 34) / 116][Stage 119:==========================================>          (93 + 23) / 116][Stage 119:===============================================>    (106 + 10) / 116][Stage 119:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.901366934 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403423628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:================================>                    (72 + 46) / 118][Stage 120:====================================>                (81 + 37) / 118][Stage 120:============================================>        (99 + 19) / 118][Stage 120:====================================================>(116 + 2) / 118]                                                                                [Stage 121:================================>                    (73 + 46) / 119][Stage 121:==================================>                  (77 + 42) / 119][Stage 121:=========================================>           (94 + 25) / 119][Stage 121:=================================================>   (112 + 7) / 119][Stage 121:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.002013007 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433791436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 59) / 120][Stage 122:================================>                    (74 + 46) / 120][Stage 122:========================================>            (91 + 29) / 120][Stage 122:==================================================>  (115 + 5) / 120]                                                                                [Stage 123:===========================>                         (63 + 58) / 121][Stage 123:=================================>                   (77 + 44) / 121][Stage 123:==========================================>         (100 + 21) / 121][Stage 123:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.084560868 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430299227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (61 + 59) / 120][Stage 124:=============================>                       (66 + 54) / 120][Stage 124:========================================>            (91 + 29) / 120][Stage 124:===================================================> (116 + 4) / 120][Stage 124:====================================================>(119 + 1) / 120]                                                                                [Stage 125:==========================>                          (61 + 60) / 121][Stage 125:=============================>                       (67 + 54) / 121][Stage 125:====================================>                (83 + 38) / 121][Stage 125:===========================================>        (102 + 19) / 121][Stage 125:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.104315632 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (62 + 58) / 120][Stage 126:===================================>                 (80 + 40) / 120][Stage 126:=========================================>           (93 + 27) / 120][Stage 126:===================================================> (117 + 3) / 120]                                                                                [Stage 127:==========================>                          (61 + 60) / 121][Stage 127:==============================>                      (69 + 52) / 121][Stage 127:=====================================>               (86 + 35) / 121][Stage 127:=============================================>      (106 + 15) / 121]                                                                                Time elapsed: 2.851419918 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=87", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=87,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:============================>                        (65 + 55) / 120][Stage 128:======================================>              (88 + 32) / 120][Stage 128:===================================================> (116 + 4) / 120]                                                                                [Stage 129:===========================>                         (62 + 59) / 121][Stage 129:===============================>                     (73 + 48) / 121][Stage 129:=============================================>      (105 + 16) / 121][Stage 129:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.002606235 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388842511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:>                                                      (0 + 0) / 113][Stage 130:===========================>                         (59 + 54) / 113][Stage 130:================================>                    (70 + 43) / 113][Stage 130:======================================>              (83 + 30) / 113][Stage 130:==============================================>      (99 + 14) / 113][Stage 130:===================================================> (109 + 4) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:===========================>                         (59 + 55) / 114][Stage 131:==============================>                      (66 + 48) / 114][Stage 131:==================================>                  (74 + 40) / 114][Stage 131:============================================>        (95 + 19) / 114][Stage 131:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.285589631 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38124715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===========================>                         (59 + 54) / 113][Stage 132:================================>                    (70 + 43) / 113][Stage 132:======================================>              (83 + 30) / 113][Stage 132:============================================>        (95 + 18) / 113][Stage 132:==================================================>  (108 + 5) / 113]                                                                                [Stage 133:============================>                        (61 + 53) / 114][Stage 133:==================================>                  (75 + 39) / 114][Stage 133:=======================================>             (85 + 29) / 114][Stage 133:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.177298169 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358273525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (77 + 36) / 113][Stage 134:=========================================>           (89 + 24) / 113][Stage 134:============================================>        (94 + 19) / 113][Stage 134:================================================>    (104 + 9) / 113]                                                                                [Stage 135:=====================================>               (81 + 33) / 114][Stage 135:===========================================>         (93 + 21) / 114][Stage 135:===============================================>    (104 + 10) / 114][Stage 135:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.912912919 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37023906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (71 + 44) / 115][Stage 136:=====================================>               (81 + 34) / 115][Stage 136:=============================================>       (98 + 17) / 115][Stage 136:=================================================>   (107 + 8) / 115]                                                                                [Stage 137:================================>                    (71 + 45) / 116][Stage 137:======================================>              (84 + 32) / 116][Stage 137:============================================>       (100 + 16) / 116][Stage 137:==================================================>  (110 + 6) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.983349227 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483394146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=============================>                       (65 + 50) / 115][Stage 138:==================================>                  (75 + 40) / 115][Stage 138:==========================================>          (93 + 22) / 115][Stage 138:==================================================>  (109 + 6) / 115]                                                                                [Stage 139:==============================>                      (66 + 50) / 116][Stage 139:===================================>                 (77 + 39) / 116][Stage 139:==========================================>          (93 + 23) / 116][Stage 139:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.631069203 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36246946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (72 + 46) / 118][Stage 140:===================================>                 (79 + 39) / 118][Stage 140:===========================================>         (96 + 22) / 118][Stage 140:==================================================>  (113 + 5) / 118]                                                                                [Stage 141:================================>                    (73 + 46) / 119][Stage 141:===================================>                 (79 + 40) / 119][Stage 141:==========================================>          (95 + 24) / 119][Stage 141:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 2.954463577 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398747465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:============================>                        (64 + 56) / 120][Stage 142:=====================================>               (84 + 36) / 120][Stage 142:==============================================>     (108 + 12) / 120][Stage 142:====================================================>(119 + 1) / 120]                                                                                [Stage 143:===========================>                         (63 + 58) / 121][Stage 143:===================================>                 (80 + 41) / 121][Stage 143:=============================================>      (107 + 14) / 121][Stage 143:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.117872573 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388177675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (59 + 54) / 113][Stage 144:==============================>                      (64 + 49) / 113][Stage 144:=================================>                   (72 + 41) / 113][Stage 144:============================================>        (94 + 19) / 113][Stage 144:===================================================> (110 + 3) / 113]                                                                                [Stage 145:===========================>                         (59 + 55) / 114][Stage 145:===============================>                     (67 + 47) / 114][Stage 145:=====================================>               (81 + 33) / 114][Stage 145:==============================================>     (101 + 13) / 114][Stage 145:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.165217276 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381152716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (72 + 43) / 115][Stage 146:=======================================>             (86 + 29) / 115][Stage 146:=========================================>           (91 + 24) / 115][Stage 146:=================================================>   (107 + 8) / 115][Stage 146:====================================================>(113 + 2) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:=============================>                       (65 + 51) / 116][Stage 147:====================================>                (80 + 36) / 116][Stage 147:============================================>        (97 + 19) / 116][Stage 147:==============================================>     (103 + 13) / 116][Stage 147:===================================================> (113 + 3) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.418316292 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=111", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=111,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399131789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (58 + 55) / 113][Stage 148:============================>                        (61 + 52) / 113][Stage 148:================================>                    (70 + 43) / 113][Stage 148:==========================================>          (90 + 23) / 113][Stage 148:===============================================>    (103 + 10) / 113]                                                                                [Stage 149:===========================>                         (59 + 55) / 114][Stage 149:===============================>                     (68 + 46) / 114][Stage 149:=======================================>             (84 + 30) / 114][Stage 149:================================================>    (105 + 9) / 114][Stage 149:===================================================> (111 + 3) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.401391871 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37502592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:>                                                      (0 + 0) / 115][Stage 150:===============================>                     (68 + 47) / 115][Stage 150:=======================================>             (85 + 30) / 115][Stage 150:=============================================>       (98 + 17) / 115][Stage 150:===================================================> (112 + 3) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:===============================>                     (70 + 46) / 116][Stage 151:=======================================>             (87 + 29) / 116][Stage 151:============================================>        (98 + 18) / 116][Stage 151:===============================================>    (106 + 10) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.478432281 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361198561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=================================>                   (75 + 43) / 118][Stage 152:======================================>              (86 + 32) / 118][Stage 152:=========================================>           (92 + 26) / 118][Stage 152:============================================>       (102 + 16) / 118][Stage 152:==================================================>  (112 + 6) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:=================================>                   (76 + 43) / 119][Stage 153:====================================>                (83 + 36) / 119][Stage 153:===========================================>         (97 + 22) / 119][Stage 153:=================================================>   (111 + 8) / 119][Stage 153:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.064080638 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=228", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=228,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448865555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=====================================>               (80 + 33) / 113][Stage 154:=========================================>           (89 + 24) / 113][Stage 154:==============================================>     (102 + 11) / 113][Stage 154:=================================================>   (106 + 7) / 113]                                                                                [Stage 155:==================================>                  (74 + 40) / 114][Stage 155:=======================================>             (85 + 29) / 114][Stage 155:============================================>        (96 + 18) / 114][Stage 155:================================================>    (105 + 9) / 114][Stage 155:===================================================> (111 + 3) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.258955045 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=====================================>               (81 + 32) / 113][Stage 156:===========================================>         (93 + 20) / 113][Stage 156:=============================================>       (98 + 15) / 113][Stage 156:==================================================>  (107 + 6) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:===================================>                 (76 + 38) / 114][Stage 157:=======================================>             (84 + 30) / 114][Stage 157:=============================================>       (98 + 16) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.17852006 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351382416 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (79 + 34) / 113][Stage 158:===========================================>         (92 + 21) / 113][Stage 158:==============================================>     (101 + 12) / 113][Stage 158:==================================================>  (108 + 5) / 113]                                                                                [Stage 159:=====================================>               (81 + 33) / 114][Stage 159:=======================================>             (84 + 30) / 114][Stage 159:==============================================>     (103 + 11) / 114][Stage 159:===================================================> (110 + 4) / 114][Stage 159:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.004540865 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364279293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 46) / 118][Stage 160:===================================>                 (78 + 40) / 118][Stage 160:========================================>            (91 + 27) / 118][Stage 160:==============================================>     (105 + 13) / 118][Stage 160:=================================================>   (111 + 7) / 118]                                                                                [Stage 161:================================>                    (73 + 46) / 119][Stage 161:===================================>                 (80 + 39) / 119][Stage 161:=========================================>           (93 + 26) / 119][Stage 161:=============================================>      (105 + 14) / 119][Stage 161:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.286453327 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395573845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:=============================>                       (67 + 53) / 120][Stage 162:========================================>            (92 + 28) / 120][Stage 162:=================================================>   (111 + 9) / 120]                                                                                [Stage 163:===========================>                         (63 + 58) / 121][Stage 163:================================>                    (75 + 46) / 121][Stage 163:========================================>            (93 + 28) / 121][Stage 163:=================================================>   (114 + 7) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.149866079 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375431167 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (72 + 46) / 118][Stage 164:==================================>                  (77 + 41) / 118][Stage 164:=====================================>               (84 + 34) / 118][Stage 164:===========================================>         (97 + 21) / 118][Stage 164:=================================================>   (111 + 7) / 118][Stage 164:====================================================>(117 + 1) / 118]                                                                                [Stage 165:================================>                    (74 + 45) / 119][Stage 165:=================================>                   (75 + 44) / 119][Stage 165:========================================>            (92 + 27) / 119][Stage 165:============================================>       (102 + 17) / 119][Stage 165:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.555531781 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339821825 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:======================================>              (83 + 32) / 115][Stage 166:=========================================>           (90 + 25) / 115][Stage 166:================================================>    (106 + 9) / 115][Stage 166:====================================================>(113 + 2) / 115]                                                                                [Stage 167:=======================================>             (86 + 30) / 116][Stage 167:============================================>       (100 + 16) / 116][Stage 167:=================================================>   (109 + 7) / 116][Stage 167:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.843324604 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide84;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (82 + 33) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:===============================================>    (104 + 11) / 115][Stage 168:==================================================>  (110 + 5) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=====================================>               (82 + 34) / 116][Stage 169:========================================>            (89 + 27) / 116][Stage 169:==============================================>     (103 + 13) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.822262949 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360400306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:======================================>              (83 + 30) / 113][Stage 170:============================================>        (94 + 19) / 113][Stage 170:==============================================>     (102 + 11) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:=====================================>               (81 + 33) / 114][Stage 171:===========================================>         (94 + 20) / 114][Stage 171:=================================================>   (107 + 7) / 114][Stage 171:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.912953318 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339697367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:====================================>                (80 + 35) / 115][Stage 172:======================================>              (84 + 31) / 115][Stage 172:============================================>        (96 + 19) / 115][Stage 172:===================================================> (111 + 4) / 115]                                                                                [Stage 173:======================================>              (85 + 31) / 116][Stage 173:==========================================>          (93 + 23) / 116][Stage 173:=================================================>   (108 + 8) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.858041304 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412101558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 60) / 120][Stage 174:================================>                    (73 + 47) / 120][Stage 174:====================================>                (82 + 38) / 120][Stage 174:=============================================>      (106 + 14) / 120][Stage 174:====================================================>(119 + 1) / 120]                                                                                [Stage 175:==========================>                          (61 + 60) / 121][Stage 175:============================>                        (66 + 55) / 121][Stage 175:=====================================>               (85 + 36) / 121][Stage 175:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 2.914168934 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=176,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362911996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:==================================>                  (76 + 42) / 118][Stage 176:======================================>              (86 + 32) / 118][Stage 176:============================================>       (101 + 17) / 118][Stage 176:==================================================>  (113 + 5) / 118]                                                                                [Stage 177:================================>                    (74 + 45) / 119][Stage 177:==================================>                  (78 + 41) / 119][Stage 177:========================================>            (90 + 29) / 119][Stage 177:=============================================>      (103 + 16) / 119][Stage 177:===================================================> (115 + 4) / 119][Stage 177:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.235052394 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36042917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=======================================>             (84 + 29) / 113][Stage 178:===========================================>         (92 + 21) / 113][Stage 178:==============================================>     (101 + 12) / 113][Stage 178:===================================================> (110 + 3) / 113]                                                                                [Stage 179:==================================>                  (74 + 40) / 114][Stage 179:========================================>            (87 + 27) / 114][Stage 179:==============================================>      (99 + 15) / 114][Stage 179:==================================================>  (108 + 6) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.822750521 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335576598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (82 + 33) / 115][Stage 180:==========================================>          (92 + 23) / 115][Stage 180:================================================>    (106 + 9) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:======================================>              (84 + 32) / 116][Stage 181:========================================>            (88 + 28) / 116][Stage 181:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.539961642 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33602604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=======================================>             (85 + 30) / 115][Stage 182:===========================================>         (95 + 20) / 115][Stage 182:==============================================>     (103 + 12) / 115][Stage 182:====================================================>(113 + 2) / 115]                                                                                [Stage 183:======================================>              (85 + 31) / 116][Stage 183:===========================================>         (95 + 21) / 116][Stage 183:==============================================>     (103 + 13) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.901437941 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39763596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (61 + 59) / 120][Stage 184:==============================>                      (69 + 51) / 120][Stage 184:==========================================>          (97 + 23) / 120][Stage 184:====================================================>(119 + 1) / 120]                                                                                [Stage 185:===========================>                         (62 + 59) / 121][Stage 185:==================================>                  (78 + 43) / 121][Stage 185:===========================================>        (101 + 20) / 121][Stage 185:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.03268453 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (61 + 59) / 120][Stage 186:==================================>                  (78 + 42) / 120][Stage 186:===========================================>        (101 + 19) / 120][Stage 186:===================================================> (116 + 4) / 120]                                                                                [Stage 187:===========================>                         (62 + 59) / 121][Stage 187:================================>                    (74 + 47) / 121][Stage 187:=========================================>           (95 + 26) / 121][Stage 187:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.148358035 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364488525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (72 + 46) / 118][Stage 188:======================================>              (86 + 32) / 118][Stage 188:===========================================>         (97 + 21) / 118][Stage 188:=================================================>   (110 + 8) / 118][Stage 188:====================================================>(117 + 1) / 118]                                                                                [Stage 189:================================>                    (73 + 46) / 119][Stage 189:==================================>                  (78 + 41) / 119][Stage 189:========================================>            (90 + 29) / 119][Stage 189:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.190309885 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337123186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (82 + 33) / 115][Stage 190:========================================>            (88 + 27) / 115][Stage 190:============================================>        (97 + 18) / 115][Stage 190:==================================================>  (109 + 6) / 115]                                                                                [Stage 191:=====================================>               (83 + 33) / 116][Stage 191:============================================>        (97 + 19) / 116][Stage 191:==================================================>  (110 + 6) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.686111257 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377323464 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (70 + 45) / 115][Stage 192:======================================>              (83 + 32) / 115][Stage 192:===========================================>         (95 + 20) / 115][Stage 192:==================================================>  (110 + 5) / 115]                                                                                [Stage 193:===============================>                     (69 + 47) / 116][Stage 193:======================================>              (84 + 32) / 116][Stage 193:==============================================>     (104 + 12) / 116][Stage 193:==================================================>  (111 + 5) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.939236103 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40648477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==============================>                      (66 + 49) / 115][Stage 194:====================================>                (79 + 36) / 115][Stage 194:============================================>        (97 + 18) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:================================>                    (71 + 45) / 116][Stage 195:======================================>              (85 + 31) / 116][Stage 195:===========================================>         (96 + 20) / 116][Stage 195:===================================================> (112 + 4) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.842896927 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=56", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=56,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333482337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=======================================>             (85 + 30) / 115][Stage 196:==========================================>          (93 + 22) / 115][Stage 196:=================================================>   (108 + 7) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:=====================================>               (81 + 35) / 116][Stage 197:=======================================>             (87 + 29) / 116][Stage 197:==============================================>     (104 + 12) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.997383905 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=236", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=236,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=======================================>             (85 + 30) / 115][Stage 198:=============================================>      (100 + 15) / 115][Stage 198:================================================>    (106 + 9) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:=====================================>               (81 + 35) / 116][Stage 199:========================================>            (89 + 27) / 116][Stage 199:==============================================>     (103 + 13) / 116][Stage 199:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.643896315 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354208119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===================================>                 (76 + 37) / 113][Stage 200:=========================================>           (89 + 24) / 113][Stage 200:==============================================>     (101 + 12) / 113][Stage 200:==================================================>  (107 + 6) / 113][Stage 200:====================================================>(111 + 2) / 113]                                                                                [Stage 201:====================================>                (78 + 36) / 114][Stage 201:==========================================>          (92 + 22) / 114][Stage 201:==============================================>     (101 + 13) / 114][Stage 201:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.093819281 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m0.107s
user	11m26.676s
sys	0m34.320s
