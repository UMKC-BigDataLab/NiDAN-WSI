Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 00:48:18 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:48:32 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:48:32 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:48:33 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 00:48:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:48:46 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601004835-0733).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.36248574 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=========================>                             (53 + 62) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=======================================>               (82 + 33) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:============================>                          (61 + 55) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.735267407 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.75367638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (48 + 72) / 120][Stage 2:========================>                              (53 + 67) / 120][Stage 2:==========================>                            (58 + 62) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:=================================>                     (72 + 48) / 120][Stage 2:====================================>                  (80 + 40) / 120][Stage 2:=============================================>        (102 + 18) / 120][Stage 2:================================================>     (108 + 12) / 120][Stage 2:==================================================>    (111 + 9) / 120][Stage 2:=====================================================> (117 + 3) / 120]                                                                                [Stage 3:===========================>                           (61 + 60) / 121][Stage 3:============================>                          (63 + 58) / 121][Stage 3:==============================>                        (67 + 54) / 121][Stage 3:================================>                      (72 + 49) / 121][Stage 3:========================================>              (88 + 33) / 121][Stage 3:============================================>          (98 + 23) / 121][Stage 3:=================================================>    (111 + 10) / 121]                                                                                Time elapsed: 5.117064856 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=15", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=15,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.630743815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==================================>                    (70 + 43) / 113][Stage 4:====================================>                  (76 + 37) / 113][Stage 4:========================================>              (83 + 30) / 113][Stage 4:==========================================>            (88 + 25) / 113][Stage 4:=============================================>         (94 + 19) / 113][Stage 4:=================================================>    (103 + 10) / 113][Stage 4:===================================================>   (105 + 8) / 113][Stage 4:=====================================================> (110 + 3) / 113][Stage 4:======================================================>(112 + 1) / 113]                                                                                [Stage 5:=================================>                     (70 + 44) / 114][Stage 5:=====================================>                 (77 + 37) / 114][Stage 5:======================================>                (80 + 34) / 114][Stage 5:=======================================>               (82 + 32) / 114][Stage 5:==========================================>            (89 + 25) / 114][Stage 5:============================================>          (92 + 22) / 114][Stage 5:==================================================>    (105 + 9) / 114][Stage 5:=====================================================> (110 + 4) / 114][Stage 5:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.092615397 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.761154908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:============================>                          (60 + 55) / 115][Stage 6:===============================>                       (66 + 49) / 115][Stage 6:===================================>                   (74 + 41) / 115][Stage 6:========================================>              (85 + 30) / 115][Stage 6:===========================================>           (91 + 24) / 115][Stage 6:==============================================>        (98 + 17) / 115][Stage 6:=================================================>    (105 + 10) / 115][Stage 6:======================================================>(113 + 2) / 115]                                                                                [Stage 7:==================================>                    (72 + 44) / 116][Stage 7:======================================>                (81 + 35) / 116][Stage 7:=========================================>             (87 + 29) / 116][Stage 7:============================================>          (93 + 23) / 116][Stage 7:===============================================>      (101 + 15) / 116][Stage 7:====================================================>  (110 + 6) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.292070166 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===============================>                       (65 + 50) / 115][Stage 8:=====================================>                 (78 + 37) / 115][Stage 8:========================================>              (85 + 30) / 115][Stage 8:==========================================>            (89 + 26) / 115][Stage 8:============================================>          (94 + 21) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:=====================================================> (111 + 4) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:=============================>                         (62 + 54) / 116][Stage 9:==================================>                    (72 + 44) / 116][Stage 9:======================================>                (82 + 34) / 116][Stage 9:=========================================>             (88 + 28) / 116][Stage 9:===============================================>      (102 + 14) / 116][Stage 9:=================================================>    (106 + 10) / 116][Stage 9:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 6.72677962 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=162", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=162,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.554467423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (71 + 42) / 113][Stage 10:=====================================>                (79 + 34) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:=============================================>        (95 + 18) / 113][Stage 10:==============================================>       (98 + 15) / 113][Stage 10:===============================================>     (102 + 11) / 113][Stage 10:==================================================>   (105 + 8) / 113][Stage 10:====================================================> (109 + 4) / 113]                                                                                [Stage 11:===================================>                  (74 + 40) / 114][Stage 11:==========================================>           (90 + 24) / 114][Stage 11:============================================>         (93 + 21) / 114][Stage 11:==============================================>      (101 + 13) / 114][Stage 11:================================================>    (104 + 10) / 114][Stage 11:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.309952691 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.575378955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==============================>                       (65 + 50) / 115][Stage 12:===================================>                  (75 + 40) / 115][Stage 12:=======================================>              (84 + 31) / 115][Stage 12:==========================================>           (91 + 24) / 115][Stage 12:=============================================>        (96 + 19) / 115][Stage 12:===============================================>     (103 + 12) / 115][Stage 12:=====================================================>(113 + 2) / 115]                                                                                [Stage 13:=================================>                    (72 + 44) / 116][Stage 13:========================================>             (87 + 29) / 116][Stage 13:===========================================>          (94 + 22) / 116][Stage 13:==============================================>      (101 + 15) / 116][Stage 13:===============================================>     (104 + 12) / 116][Stage 13:===================================================>  (110 + 6) / 116][Stage 13:===================================================>  (111 + 5) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.290620583 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.632104051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:==================================>                   (76 + 42) / 118][Stage 14:========================================>             (88 + 30) / 118][Stage 14:============================================>        (100 + 18) / 118][Stage 14:==================================================>   (111 + 7) / 118]                                                                                [Stage 15:===============================>                      (70 + 49) / 119][Stage 15:===================================>                  (78 + 41) / 119][Stage 15:===========================================>          (96 + 23) / 119][Stage 15:================================================>    (108 + 11) / 119][Stage 15:===================================================>  (113 + 6) / 119][Stage 15:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.933495785 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518412539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:============================>                         (59 + 54) / 113][Stage 16:================================>                     (68 + 45) / 113][Stage 16:=====================================>                (78 + 35) / 113][Stage 16:===========================================>          (91 + 22) / 113][Stage 16:===============================================>     (101 + 12) / 113][Stage 16:===================================================>  (107 + 6) / 113]                                                                                [Stage 17:============================>                         (60 + 54) / 114][Stage 17:=============================>                        (62 + 52) / 114][Stage 17:=====================================>                (79 + 35) / 114][Stage 17:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.670030246 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=233", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=233,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.586341855 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:====================================>                 (77 + 36) / 113][Stage 18:==========================================>           (88 + 25) / 113][Stage 18:=============================================>        (96 + 17) / 113][Stage 18:==================================================>   (106 + 7) / 113][Stage 18:====================================================> (110 + 3) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:======================================>               (82 + 32) / 114][Stage 19:==========================================>           (90 + 24) / 114][Stage 19:==============================================>      (100 + 14) / 114][Stage 19:==================================================>   (106 + 8) / 114][Stage 19:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.601624845 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527246523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:=============================>                        (65 + 55) / 120][Stage 20:=====================================>                (84 + 36) / 120][Stage 20:===============================================>     (108 + 12) / 120][Stage 20:=====================================================>(118 + 2) / 120]                                                                                [Stage 21:===========================>                          (62 + 59) / 121][Stage 21:=============================>                        (67 + 54) / 121][Stage 21:=======================================>              (88 + 33) / 121][Stage 21:=============================================>       (105 + 16) / 121][Stage 21:====================================================> (118 + 3) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.730204257 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=174", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=174,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:==============================>                       (68 + 52) / 120][Stage 22:========================================>             (90 + 30) / 120][Stage 22:===================================================>  (115 + 5) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:============================>                         (64 + 57) / 121][Stage 23:===================================>                  (79 + 42) / 121][Stage 23:============================================>        (101 + 20) / 121][Stage 23:===================================================>  (116 + 5) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.379656338 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=108", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=108,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573064435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:======================================>               (81 + 34) / 115][Stage 24:==========================================>           (90 + 25) / 115][Stage 24:=================================================>    (106 + 9) / 115][Stage 24:====================================================> (112 + 3) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:======================================>               (83 + 33) / 116][Stage 25:=========================================>            (89 + 27) / 116][Stage 25:============================================>         (95 + 21) / 116][Stage 25:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.963519832 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=133", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=133,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=====================================>                (80 + 35) / 115][Stage 26:========================================>             (86 + 29) / 115][Stage 26:=============================================>        (96 + 19) / 115][Stage 26:====================================================> (111 + 4) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:======================================>               (83 + 33) / 116][Stage 27:========================================>             (87 + 29) / 116][Stage 27:============================================>         (96 + 20) / 116][Stage 27:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.822588838 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448598726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==================================>                   (73 + 40) / 113][Stage 28:========================================>             (85 + 28) / 113][Stage 28:===========================================>          (92 + 21) / 113][Stage 28:==================================================>   (105 + 8) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:===================================>                  (74 + 40) / 114][Stage 29:=====================================>                (80 + 34) / 114][Stage 29:=========================================>            (88 + 26) / 114][Stage 29:===============================================>     (103 + 11) / 114][Stage 29:====================================================> (110 + 4) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.683744241 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507010562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==================================>                   (73 + 42) / 115][Stage 30:==========================================>           (90 + 25) / 115][Stage 30:==================================================>   (107 + 8) / 115][Stage 30:=====================================================>(113 + 2) / 115]                                                                                [Stage 31:=================================>                    (73 + 43) / 116][Stage 31:=======================================>              (84 + 32) / 116][Stage 31:=============================================>        (97 + 19) / 116][Stage 31:==================================================>   (108 + 8) / 116][Stage 31:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.644503746 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=237,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506339436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (64 + 51) / 115][Stage 32:================================>                     (69 + 46) / 115][Stage 32:=========================================>            (88 + 27) / 115][Stage 32:===============================================>     (103 + 12) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:====================================>                 (78 + 38) / 116][Stage 33:========================================>             (86 + 30) / 116][Stage 33:================================================>    (106 + 10) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.331356511 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=20", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=20,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52273498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:============================>                         (63 + 57) / 120][Stage 34:===================================>                  (79 + 41) / 120][Stage 34:=========================================>            (93 + 27) / 120][Stage 34:=================================================>    (111 + 9) / 120][Stage 34:====================================================> (117 + 3) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:===============================>                      (70 + 51) / 121][Stage 35:==========================================>           (95 + 26) / 121][Stage 35:==================================================>   (114 + 7) / 121][Stage 35:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.650479286 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=83", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=83,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418010195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (81 + 34) / 115][Stage 36:========================================>             (87 + 28) / 115][Stage 36:==============================================>      (100 + 15) / 115][Stage 36:================================================>    (105 + 10) / 115]                                                                                [Stage 37:=======================================>              (84 + 32) / 116][Stage 37:============================================>         (95 + 21) / 116][Stage 37:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.732962567 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:======================================>               (81 + 34) / 115][Stage 38:========================================>             (87 + 28) / 115][Stage 38:==============================================>       (98 + 17) / 115][Stage 38:===================================================>  (109 + 6) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:=====================================>                (81 + 35) / 116][Stage 39:===========================================>          (93 + 23) / 116][Stage 39:===============================================>     (104 + 12) / 116][Stage 39:===================================================>  (111 + 5) / 116][Stage 39:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.111273848 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=226", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=226,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405725048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (81 + 34) / 115][Stage 40:=========================================>            (88 + 27) / 115][Stage 40:=============================================>        (97 + 18) / 115][Stage 40:==================================================>   (107 + 8) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:======================================>               (82 + 34) / 116][Stage 41:============================================>         (96 + 20) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.747181925 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=121", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=121,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.541538473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (58 + 55) / 113][Stage 42:==============================>                       (64 + 49) / 113][Stage 42:====================================>                 (77 + 36) / 113][Stage 42:==============================================>       (97 + 16) / 113][Stage 42:==================================================>   (105 + 8) / 113][Stage 42:=====================================================>(111 + 2) / 113]                                                                                [Stage 43:============================>                         (60 + 54) / 114][Stage 43:===================================>                  (74 + 40) / 114][Stage 43:===========================================>          (91 + 23) / 114][Stage 43:===================================================>  (108 + 6) / 114][Stage 43:====================================================> (111 + 3) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.084381367 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480602106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:============================>                         (59 + 54) / 113][Stage 44:=============================>                        (62 + 51) / 113][Stage 44:======================================>               (80 + 33) / 113][Stage 44:==============================================>       (98 + 15) / 113][Stage 44:====================================================> (110 + 3) / 113]                                                                                [Stage 45:==============================>                       (64 + 50) / 114][Stage 45:====================================>                 (76 + 38) / 114][Stage 45:==============================================>       (98 + 16) / 114][Stage 45:===================================================>  (108 + 6) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.439239789 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49825665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:============================>                         (64 + 56) / 120][Stage 46:===================================>                  (78 + 42) / 120][Stage 46:============================================>         (99 + 21) / 120][Stage 46:===================================================>  (115 + 5) / 120][Stage 46:=====================================================>(118 + 2) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:===============================>                      (70 + 51) / 121][Stage 47:=======================================>              (89 + 32) / 121][Stage 47:===============================================>     (108 + 13) / 121][Stage 47:====================================================> (118 + 3) / 121][Stage 47:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.855825009 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432176176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==================================>                   (73 + 40) / 113][Stage 48:======================================>               (80 + 33) / 113][Stage 48:============================================>         (94 + 19) / 113][Stage 48:==================================================>   (105 + 8) / 113][Stage 48:====================================================> (110 + 3) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:======================================>               (81 + 33) / 114][Stage 49:===========================================>          (92 + 22) / 114][Stage 49:===============================================>     (103 + 11) / 114][Stage 49:====================================================> (110 + 4) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.127247958 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===================================>                  (75 + 38) / 113][Stage 50:=======================================>              (83 + 30) / 113][Stage 50:============================================>         (93 + 20) / 113][Stage 50:================================================>    (103 + 10) / 113][Stage 50:====================================================> (109 + 4) / 113]                                                                                [Stage 51:==================================>                   (73 + 41) / 114][Stage 51:========================================>             (86 + 28) / 114][Stage 51:============================================>         (94 + 20) / 114][Stage 51:====================================================> (110 + 4) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.542069797 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436035174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:=================================>                    (74 + 44) / 118][Stage 52:=======================================>              (87 + 31) / 118][Stage 52:=================================================>    (109 + 9) / 118][Stage 52:=====================================================>(117 + 1) / 118]                                                                                [Stage 53:=================================>                    (73 + 46) / 119][Stage 53:==================================>                   (77 + 42) / 119][Stage 53:==========================================>           (93 + 26) / 119][Stage 53:===============================================>     (106 + 13) / 119][Stage 53:==================================================>   (112 + 7) / 119][Stage 53:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.49595881 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (72 + 46) / 118][Stage 54:=================================>                    (73 + 45) / 118][Stage 54:========================================>             (88 + 30) / 118][Stage 54:==============================================>      (104 + 14) / 118][Stage 54:=====================================================>(116 + 2) / 118]                                                                                [Stage 55:=================================>                    (73 + 46) / 119][Stage 55:==================================>                   (77 + 42) / 119][Stage 55:=======================================>              (88 + 31) / 119][Stage 55:================================================>    (108 + 11) / 119][Stage 55:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.129659425 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:===================================>                  (78 + 40) / 118][Stage 56:============================================>         (98 + 20) / 118][Stage 56:===============================================>     (105 + 13) / 118][Stage 56:====================================================> (114 + 4) / 118]                                                                                [Stage 57:=================================>                    (74 + 45) / 119][Stage 57:=====================================>                (83 + 36) / 119][Stage 57:============================================>        (101 + 18) / 119][Stage 57:===================================================>  (113 + 6) / 119][Stage 57:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.694164448 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535248781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==========================>                           (59 + 61) / 120][Stage 58:===========================>                          (60 + 60) / 120][Stage 58:============================>                         (64 + 56) / 120][Stage 58:========================================>             (90 + 30) / 120][Stage 58:===============================================>     (108 + 12) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:==============================>                       (69 + 52) / 121][Stage 59:======================================>               (86 + 35) / 121][Stage 59:==================================================>   (113 + 8) / 121][Stage 59:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.355044948 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=214", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=214,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547549397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (60 + 60) / 120][Stage 60:============================>                         (63 + 57) / 120][Stage 60:===================================>                  (79 + 41) / 120][Stage 60:============================================>         (99 + 21) / 120][Stage 60:================================================>    (109 + 11) / 120][Stage 60:=====================================================>(118 + 2) / 120]                                                                                [Stage 61:============================>                         (63 + 58) / 121][Stage 61:==================================>                   (78 + 43) / 121][Stage 61:==========================================>           (95 + 26) / 121][Stage 61:===================================================>  (115 + 6) / 121][Stage 61:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.516560315 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=53", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=53,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382009468 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (83 + 32) / 115][Stage 62:============================================>         (94 + 21) / 115][Stage 62:====================================================> (111 + 4) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:=====================================>                (81 + 35) / 116][Stage 63:==========================================>           (91 + 25) / 116][Stage 63:===============================================>     (104 + 12) / 116][Stage 63:====================================================> (112 + 4) / 116][Stage 63:====================================================> (113 + 3) / 116][Stage 63:=====================================================>(114 + 2) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.216826353 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438006993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==============================>                       (66 + 49) / 115][Stage 64:===================================>                  (75 + 40) / 115][Stage 64:==========================================>           (91 + 24) / 115][Stage 64:=================================================>    (106 + 9) / 115][Stage 64:===================================================>  (109 + 6) / 115][Stage 64:=====================================================>(113 + 2) / 115]                                                                                [Stage 65:=================================>                    (73 + 43) / 116][Stage 65:=============================================>       (100 + 16) / 116][Stage 65:=================================================>    (107 + 9) / 116][Stage 65:====================================================> (112 + 4) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.548724539 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=249,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429130175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=================================>                    (70 + 43) / 113][Stage 66:======================================>               (81 + 32) / 113][Stage 66:===========================================>          (90 + 23) / 113][Stage 66:===============================================>     (102 + 11) / 113][Stage 66:=====================================================>(111 + 2) / 113]                                                                                [Stage 67:====================================>                 (76 + 38) / 114][Stage 67:========================================>             (85 + 29) / 114][Stage 67:==============================================>       (99 + 15) / 114][Stage 67:===================================================>  (109 + 5) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.874656591 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411392244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==================================>                   (72 + 41) / 113][Stage 68:========================================>             (84 + 29) / 113][Stage 68:==============================================>      (100 + 13) / 113][Stage 68:===================================================>  (108 + 5) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:====================================>                 (77 + 37) / 114][Stage 69:=========================================>            (87 + 27) / 114][Stage 69:==============================================>       (99 + 15) / 114][Stage 69:===================================================>  (108 + 6) / 114][Stage 69:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.176369559 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=171", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=171,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473154756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:===============================>                      (69 + 51) / 120][Stage 70:======================================>               (85 + 35) / 120][Stage 70:=================================================>    (111 + 9) / 120]                                                                                [Stage 71:============================>                         (64 + 57) / 121][Stage 71:=====================================>                (84 + 37) / 121][Stage 71:=============================================>       (103 + 18) / 121][Stage 71:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.006285449 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=7", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=7,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43260737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==============================>                       (64 + 51) / 115][Stage 72:================================>                     (70 + 45) / 115][Stage 72:==========================================>           (91 + 24) / 115][Stage 72:================================================>    (105 + 10) / 115][Stage 72:===================================================>  (110 + 5) / 115][Stage 72:====================================================> (112 + 3) / 115]                                                                                [Stage 73:==============================>                       (66 + 50) / 116][Stage 73:======================================>               (82 + 34) / 116][Stage 73:============================================>         (96 + 20) / 116][Stage 73:==============================================>      (102 + 14) / 116][Stage 73:===================================================>  (111 + 5) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.123296825 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426771056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:==================================>                   (76 + 42) / 118][Stage 74:=========================================>            (90 + 28) / 118][Stage 74:================================================>    (108 + 10) / 118][Stage 74:=====================================================>(117 + 1) / 118]                                                                                [Stage 75:=================================>                    (73 + 46) / 119][Stage 75:=====================================>                (82 + 37) / 119][Stage 75:============================================>        (100 + 19) / 119][Stage 75:================================================>    (108 + 11) / 119][Stage 75:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.53182896 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403671557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=====================================>                (78 + 35) / 113][Stage 76:============================================>         (93 + 20) / 113][Stage 76:===============================================>     (102 + 11) / 113][Stage 76:====================================================> (110 + 3) / 113]                                                                                [Stage 77:=========================================>            (87 + 27) / 114][Stage 77:============================================>         (93 + 21) / 114][Stage 77:==============================================>       (98 + 16) / 114][Stage 77:===================================================>  (108 + 6) / 114][Stage 77:=====================================================>(112 + 2) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.09018856 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=95", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=95,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459625938 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:===========================>                          (62 + 58) / 120][Stage 78:===================================>                  (78 + 42) / 120][Stage 78:=============================================>       (103 + 17) / 120][Stage 78:==================================================>   (112 + 8) / 120]                                                                                [Stage 79:=============================>                        (67 + 54) / 121][Stage 79:=====================================>                (83 + 38) / 121][Stage 79:============================================>        (101 + 20) / 121][Stage 79:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.16228089 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400110485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:>                                                       (0 + 0) / 118][Stage 80:================================>                     (72 + 46) / 118][Stage 80:==================================>                   (76 + 42) / 118][Stage 80:===========================================>          (94 + 24) / 118][Stage 80:================================================>    (108 + 10) / 118][Stage 80:=====================================================>(117 + 1) / 118]                                                                                [Stage 81:=================================>                    (73 + 46) / 119][Stage 81:==================================>                   (75 + 44) / 119][Stage 81:========================================>             (90 + 29) / 119][Stage 81:=============================================>       (103 + 16) / 119][Stage 81:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.187475423 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=122", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=122,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:=================================>                    (74 + 44) / 118][Stage 82:======================================>               (85 + 33) / 118][Stage 82:===============================================>     (106 + 12) / 118][Stage 82:====================================================> (115 + 3) / 118]                                                                                [Stage 83:=================================>                    (74 + 45) / 119][Stage 83:=====================================>                (82 + 37) / 119][Stage 83:===============================================>     (106 + 13) / 119][Stage 83:==================================================>   (112 + 7) / 119][Stage 83:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.410366432 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=11", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=11,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408663511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (72 + 46) / 118][Stage 84:===================================>                  (77 + 41) / 118][Stage 84:===========================================>          (96 + 22) / 118][Stage 84:===================================================>  (112 + 6) / 118]                                                                                [Stage 85:=================================>                    (73 + 46) / 119][Stage 85:=====================================>                (82 + 37) / 119][Stage 85:============================================>        (100 + 19) / 119][Stage 85:================================================>    (108 + 11) / 119][Stage 85:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.36889346 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:===================================>                  (78 + 40) / 118][Stage 86:=======================================>              (87 + 31) / 118][Stage 86:===============================================>     (106 + 12) / 118]                                                                                [Stage 87:=================================>                    (73 + 46) / 119][Stage 87:======================================>               (85 + 34) / 119][Stage 87:============================================>         (97 + 22) / 119][Stage 87:================================================>    (108 + 11) / 119][Stage 87:====================================================> (116 + 3) / 119][Stage 87:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.520577197 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=142", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=142,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43309258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:==============================>                       (67 + 53) / 120][Stage 88:====================================>                 (82 + 38) / 120][Stage 88:================================================>    (110 + 10) / 120][Stage 88:=====================================================>(119 + 1) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:=============================>                        (67 + 54) / 121][Stage 89:====================================>                 (81 + 40) / 121][Stage 89:=============================================>       (104 + 17) / 121][Stage 89:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.272110101 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430351932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (58 + 55) / 113][Stage 90:==============================>                       (63 + 50) / 113][Stage 90:==================================>                   (73 + 40) / 113][Stage 90:===============================================>      (99 + 14) / 113][Stage 90:===================================================>  (107 + 6) / 113]                                                                                [Stage 91:============================>                         (61 + 53) / 114][Stage 91:====================================>                 (77 + 37) / 114][Stage 91:============================================>         (94 + 20) / 114][Stage 91:====================================================> (111 + 3) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.26836993 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=103", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=103,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392801694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:=================================>                    (74 + 44) / 118][Stage 92:======================================>               (85 + 33) / 118][Stage 92:============================================>        (100 + 18) / 118][Stage 92:====================================================> (115 + 3) / 118]                                                                                [Stage 93:=================================>                    (73 + 46) / 119][Stage 93:====================================>                 (80 + 39) / 119][Stage 93:========================================>             (89 + 30) / 119][Stage 93:===============================================>     (106 + 13) / 119][Stage 93:===================================================>  (114 + 5) / 119][Stage 93:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.632383013 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=32", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=32,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412019958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:===============================>                      (66 + 47) / 113][Stage 94:======================================>               (80 + 33) / 113][Stage 94:==============================================>      (100 + 13) / 113]                                                                                [Stage 95:===========================>                          (59 + 55) / 114][Stage 95:================================>                     (68 + 46) / 114][Stage 95:=====================================>                (79 + 35) / 114][Stage 95:===============================================>     (102 + 12) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.211956853 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=190", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=190,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36708137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (78 + 35) / 113][Stage 96:===========================================>          (92 + 21) / 113][Stage 96:==============================================>       (98 + 15) / 113][Stage 96:===================================================>  (108 + 5) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:===================================>                  (75 + 39) / 114][Stage 97:======================================>               (82 + 32) / 114][Stage 97:=============================================>        (97 + 17) / 114][Stage 97:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.016643167 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=196", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=196,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:====================================>                 (77 + 36) / 113][Stage 98:=======================================>              (82 + 31) / 113][Stage 98:============================================>         (94 + 19) / 113][Stage 98:==============================================>      (100 + 13) / 113][Stage 98:=====================================================>(111 + 2) / 113]                                                                                [Stage 99:====================================>                 (77 + 37) / 114][Stage 99:========================================>             (86 + 28) / 114][Stage 99:==============================================>       (98 + 16) / 114][Stage 99:===============================================>     (103 + 11) / 114][Stage 99:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.147107812 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=193", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=193,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367699485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===================================>                 (76 + 37) / 113][Stage 100:======================================>              (82 + 31) / 113][Stage 100:===========================================>         (93 + 20) / 113][Stage 100:==================================================>  (107 + 6) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:=================================>                   (73 + 41) / 114][Stage 101:=======================================>             (85 + 29) / 114][Stage 101:============================================>        (96 + 18) / 114][Stage 101:================================================>    (105 + 9) / 114][Stage 101:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.116216124 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502341534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (78 + 35) / 113][Stage 102:========================================>            (86 + 27) / 113][Stage 102:===============================================>    (103 + 10) / 113][Stage 102:====================================================>(111 + 2) / 113]                                                                                [Stage 103:======================================>              (83 + 31) / 114][Stage 103:=============================================>       (97 + 17) / 114][Stage 103:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 2.807856142 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=57", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=57,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354016501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=====================================>               (82 + 33) / 115][Stage 104:========================================>            (87 + 28) / 115][Stage 104:=============================================>       (98 + 17) / 115][Stage 104:=================================================>   (107 + 8) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:=====================================>               (82 + 34) / 116][Stage 105:==========================================>          (92 + 24) / 116][Stage 105:=============================================>      (102 + 14) / 116][Stage 105:===================================================> (112 + 4) / 116][Stage 105:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.842087039 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370594641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==================================>                  (73 + 40) / 113][Stage 106:=====================================>               (81 + 32) / 113][Stage 106:===========================================>         (92 + 21) / 113][Stage 106:=============================================>       (98 + 15) / 113][Stage 106:=================================================>   (106 + 7) / 113]                                                                                [Stage 107:====================================>                (79 + 35) / 114][Stage 107:=========================================>           (90 + 24) / 114][Stage 107:=============================================>       (97 + 17) / 114][Stage 107:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.97377307 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385015638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:====================================>                (78 + 35) / 113][Stage 108:=======================================>             (84 + 29) / 113][Stage 108:==============================================>     (101 + 12) / 113][Stage 108:===================================================> (109 + 4) / 113]                                                                                [Stage 109:=====================================>               (81 + 33) / 114][Stage 109:==========================================>          (91 + 23) / 114][Stage 109:=============================================>      (100 + 14) / 114][Stage 109:=================================================>   (107 + 7) / 114][Stage 109:====================================================>(112 + 2) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.721662348 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (72 + 41) / 113][Stage 110:======================================>              (82 + 31) / 113][Stage 110:==========================================>          (90 + 23) / 113][Stage 110:==============================================>     (100 + 13) / 113][Stage 110:================================================>    (104 + 9) / 113]                                                                                [Stage 111:=====================================>               (80 + 34) / 114][Stage 111:=======================================>             (86 + 28) / 114][Stage 111:==============================================>     (102 + 12) / 114][Stage 111:===================================================> (111 + 3) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.922195494 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42780563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:==============================>                      (69 + 51) / 120][Stage 112:=======================================>             (90 + 30) / 120][Stage 112:=================================================>   (111 + 9) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:=============================>                       (67 + 54) / 121][Stage 113:===================================>                 (82 + 39) / 121][Stage 113:===============================================>    (111 + 10) / 121][Stage 113:====================================================>(119 + 2) / 121][Stage 113:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.531239922 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=180", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=180,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472689948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (70 + 43) / 113][Stage 114:====================================>                (78 + 35) / 113][Stage 114:===========================================>         (92 + 21) / 113][Stage 114:===============================================>    (103 + 10) / 113][Stage 114:====================================================>(111 + 2) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:==================================>                  (75 + 39) / 114][Stage 115:========================================>            (88 + 26) / 114][Stage 115:==============================================>      (99 + 15) / 114][Stage 115:===============================================>    (104 + 10) / 114][Stage 115:===================================================> (111 + 3) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.275747043 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378824757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:=====================================>               (84 + 34) / 118][Stage 116:==============================================>     (105 + 13) / 118][Stage 116:===================================================> (114 + 4) / 118]                                                                                [Stage 117:================================>                    (73 + 46) / 119][Stage 117:==================================>                  (78 + 41) / 119][Stage 117:=======================================>             (88 + 31) / 119][Stage 117:=============================================>      (103 + 16) / 119][Stage 117:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.520607251 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=30", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=30,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400965524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:=================================>                   (75 + 43) / 118][Stage 118:=======================================>             (87 + 31) / 118][Stage 118:=============================================>      (103 + 15) / 118][Stage 118:==================================================>  (112 + 6) / 118][Stage 118:====================================================>(117 + 1) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:===================================>                 (79 + 40) / 119][Stage 119:=======================================>             (88 + 31) / 119][Stage 119:============================================>       (102 + 17) / 119][Stage 119:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.709680637 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=197", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=197,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37041908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:================================>                    (70 + 43) / 113][Stage 120:======================================>              (82 + 31) / 113][Stage 120:===========================================>         (92 + 21) / 113][Stage 120:==============================================>     (100 + 13) / 113][Stage 120:==================================================>  (108 + 5) / 113][Stage 120:====================================================>(111 + 2) / 113]                                                                                [Stage 121:=======================================>             (84 + 30) / 114][Stage 121:============================================>        (96 + 18) / 114][Stage 121:================================================>    (105 + 9) / 114][Stage 121:==================================================>  (109 + 5) / 114][Stage 121:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.307036806 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=215", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=215,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392513346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:=============================>                       (63 + 50) / 113][Stage 122:==================================>                  (73 + 40) / 113][Stage 122:============================================>        (95 + 18) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:===========================>                         (60 + 54) / 114][Stage 123:============================>                        (62 + 52) / 114][Stage 123:==================================>                  (75 + 39) / 114][Stage 123:===========================================>         (94 + 20) / 114][Stage 123:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.136104773 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=59", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=59,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410792947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (61 + 59) / 120][Stage 124:===============================>                     (71 + 49) / 120][Stage 124:=====================================>               (85 + 35) / 120][Stage 124:==============================================>     (108 + 12) / 120]                                                                                [Stage 125:==========================>                          (61 + 60) / 121][Stage 125:===============================>                     (72 + 49) / 121][Stage 125:======================================>              (87 + 34) / 121][Stage 125:==========================================>          (98 + 23) / 121][Stage 125:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.447067901 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415592891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (63 + 57) / 120][Stage 126:================================>                    (73 + 47) / 120][Stage 126:======================================>              (88 + 32) / 120][Stage 126:=================================================>   (113 + 7) / 120][Stage 126:====================================================>(118 + 2) / 120]                                                                                [Stage 127:=============================>                       (67 + 54) / 121][Stage 127:===================================>                 (82 + 39) / 121][Stage 127:==========================================>          (98 + 23) / 121][Stage 127:=================================================>   (114 + 7) / 121][Stage 127:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.650243782 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3496219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=====================================>               (81 + 34) / 115][Stage 128:========================================>            (88 + 27) / 115][Stage 128:=============================================>      (101 + 14) / 115]                                                                                [Stage 129:=====================================>               (82 + 34) / 116][Stage 129:===========================================>         (96 + 20) / 116][Stage 129:==============================================>     (104 + 12) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.559804222 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=172", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=172,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509992448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (71 + 44) / 115][Stage 130:=====================================>               (81 + 34) / 115][Stage 130:==========================================>          (93 + 22) / 115][Stage 130:==================================================>  (109 + 6) / 115]                                                                                [Stage 131:====================================>                (80 + 36) / 116][Stage 131:============================================>        (98 + 18) / 116][Stage 131:===============================================>    (106 + 10) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.912233505 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=228", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=228,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419426806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:===========================>                         (62 + 58) / 120][Stage 132:=================================>                   (76 + 44) / 120][Stage 132:=========================================>           (94 + 26) / 120][Stage 132:===============================================>    (110 + 10) / 120][Stage 132:====================================================>(118 + 2) / 120]                                                                                [Stage 133:==========================>                          (61 + 60) / 121][Stage 133:===============================>                     (72 + 49) / 121][Stage 133:======================================>              (88 + 33) / 121][Stage 133:===============================================>    (111 + 10) / 121][Stage 133:===================================================> (118 + 3) / 121][Stage 133:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.72589692 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390862346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (58 + 55) / 113][Stage 134:============================>                        (61 + 52) / 113][Stage 134:==================================>                  (73 + 40) / 113][Stage 134:========================================>            (86 + 27) / 113][Stage 134:==============================================>      (99 + 14) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:===========================>                         (59 + 55) / 114][Stage 135:=============================>                       (63 + 51) / 114][Stage 135:=====================================>               (80 + 34) / 114][Stage 135:============================================>        (95 + 19) / 114][Stage 135:================================================>    (105 + 9) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.659169983 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403203758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 60) / 120][Stage 136:=============================>                       (67 + 53) / 120][Stage 136:======================================>              (88 + 32) / 120][Stage 136:==================================================>  (114 + 6) / 120][Stage 136:====================================================>(118 + 2) / 120]                                                                                [Stage 137:=============================>                       (67 + 54) / 121][Stage 137:=================================>                   (76 + 45) / 121][Stage 137:=========================================>           (94 + 27) / 121][Stage 137:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.102559721 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:>                                                      (0 + 0) / 120][Stage 138:==========================>                          (60 + 60) / 120][Stage 138:=============================>                       (66 + 54) / 120][Stage 138:========================================>            (91 + 29) / 120][Stage 138:==================================================>  (114 + 6) / 120]                                                                                [Stage 139:===========================>                         (62 + 59) / 121][Stage 139:================================>                    (74 + 47) / 121][Stage 139:======================================>              (87 + 34) / 121][Stage 139:==============================================>     (109 + 12) / 121][Stage 139:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.854571136 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383433707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=============================>                       (64 + 51) / 115][Stage 140:=====================================>               (82 + 33) / 115][Stage 140:=============================================>       (99 + 16) / 115][Stage 140:===================================================> (111 + 4) / 115]                                                                                [Stage 141:==================================>                  (75 + 41) / 116][Stage 141:============================================>        (97 + 19) / 116][Stage 141:==================================================>  (110 + 6) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.796592645 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=120", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=120,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404729071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 59) / 120][Stage 142:=============================>                       (66 + 54) / 120][Stage 142:=====================================>               (85 + 35) / 120][Stage 142:=================================================>   (112 + 8) / 120][Stage 142:====================================================>(118 + 2) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:=============================>                       (68 + 53) / 121][Stage 143:==================================>                  (79 + 42) / 121][Stage 143:=============================================>      (106 + 15) / 121][Stage 143:===================================================> (117 + 4) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.362198617 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373028868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==============================>                      (67 + 48) / 115][Stage 144:=====================================>               (81 + 34) / 115][Stage 144:=============================================>      (100 + 15) / 115][Stage 144:================================================>    (106 + 9) / 115][Stage 144:====================================================>(113 + 2) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:===============================>                     (70 + 46) / 116][Stage 145:=======================================>             (86 + 30) / 116][Stage 145:=============================================>      (102 + 14) / 116][Stage 145:===================================================> (112 + 4) / 116][Stage 145:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.224837601 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35974911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (74 + 44) / 118][Stage 146:======================================>              (85 + 33) / 118][Stage 146:===============================================>    (107 + 11) / 118][Stage 146:====================================================>(117 + 1) / 118]                                                                                [Stage 147:==================================>                  (78 + 41) / 119][Stage 147:=======================================>             (89 + 30) / 119][Stage 147:================================================>    (110 + 9) / 119][Stage 147:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.359479124 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=18", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=18,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363353071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (74 + 44) / 118][Stage 148:=====================================>               (84 + 34) / 118][Stage 148:===========================================>         (97 + 21) / 118][Stage 148:=================================================>   (110 + 8) / 118][Stage 148:====================================================>(117 + 1) / 118]                                                                                [Stage 149:================================>                    (74 + 45) / 119][Stage 149:====================================>                (83 + 36) / 119][Stage 149:===========================================>        (100 + 19) / 119][Stage 149:=================================================>   (111 + 8) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.419586594 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37323418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=============================>                       (65 + 50) / 115][Stage 150:====================================>                (79 + 36) / 115][Stage 150:==========================================>          (92 + 23) / 115][Stage 150:==============================================>     (103 + 12) / 115][Stage 150:===================================================> (111 + 4) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:=====================================>               (81 + 35) / 116][Stage 151:=============================================>       (99 + 17) / 116][Stage 151:==================================================>  (110 + 6) / 116][Stage 151:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.199313777 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=============================>                       (65 + 50) / 115][Stage 152:===================================>                 (76 + 39) / 115][Stage 152:==========================================>          (93 + 22) / 115][Stage 152:=================================================>   (108 + 7) / 115][Stage 152:====================================================>(113 + 2) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:===============================>                     (68 + 48) / 116][Stage 153:======================================>              (84 + 32) / 116][Stage 153:============================================>       (100 + 16) / 116][Stage 153:===============================================>    (106 + 10) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.143662026 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361740221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=================================>                   (71 + 42) / 113][Stage 154:======================================>              (82 + 31) / 113][Stage 154:============================================>        (94 + 19) / 113][Stage 154:=================================================>   (105 + 8) / 113][Stage 154:===================================================> (110 + 3) / 113]                                                                                [Stage 155:======================================>              (83 + 31) / 114][Stage 155:========================================>            (88 + 26) / 114][Stage 155:=============================================>       (98 + 16) / 114][Stage 155:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.979163084 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365719903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=====================================>               (80 + 33) / 113][Stage 156:===========================================>         (92 + 21) / 113][Stage 156:================================================>    (104 + 9) / 113][Stage 156:=================================================>   (106 + 7) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:=================================>                   (72 + 42) / 114][Stage 157:======================================>              (82 + 32) / 114][Stage 157:==============================================>      (99 + 15) / 114][Stage 157:=================================================>   (106 + 8) / 114][Stage 157:===================================================> (111 + 3) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.362661026 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=248,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370005986 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=================================>                   (72 + 43) / 115][Stage 158:========================================>            (87 + 28) / 115][Stage 158:=============================================>      (100 + 15) / 115][Stage 158:==================================================>  (110 + 5) / 115]                                                                                [Stage 159:===================================>                 (78 + 38) / 116][Stage 159:============================================>        (97 + 19) / 116][Stage 159:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.704836552 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406064927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:==============================>                      (68 + 52) / 120][Stage 160:==================================>                  (78 + 42) / 120][Stage 160:===========================================>         (99 + 21) / 120][Stage 160:====================================================>(119 + 1) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:=============================>                       (68 + 53) / 121][Stage 161:===================================>                 (82 + 39) / 121][Stage 161:=============================================>      (105 + 16) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.369247547 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=225", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=225,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392884747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:==============================>                      (69 + 51) / 120][Stage 162:========================================>            (91 + 29) / 120][Stage 162:==================================================>  (114 + 6) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:===============================>                     (72 + 49) / 121][Stage 163:======================================>              (88 + 33) / 121][Stage 163:=================================================>   (113 + 8) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.768821735 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=9", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=9,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333386275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (80 + 35) / 115][Stage 164:=======================================>             (85 + 30) / 115][Stage 164:================================================>    (106 + 9) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:======================================>              (84 + 32) / 116][Stage 165:===========================================>         (96 + 20) / 116][Stage 165:=============================================>      (102 + 14) / 116][Stage 165:===================================================> (113 + 3) / 116][Stage 165:====================================================>(114 + 2) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.069121618 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=64", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=64,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40850542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:============================>                        (65 + 55) / 120][Stage 166:=======================================>             (89 + 31) / 120][Stage 166:==================================================>  (114 + 6) / 120]                                                                                [Stage 167:===========================>                         (62 + 59) / 121][Stage 167:=============================>                       (68 + 53) / 121][Stage 167:=====================================>               (85 + 36) / 121][Stage 167:=============================================>      (105 + 16) / 121][Stage 167:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.702768195 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330417725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:========================================>            (88 + 27) / 115][Stage 168:=============================================>       (99 + 16) / 115][Stage 168:=================================================>   (107 + 8) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=====================================>               (83 + 33) / 116][Stage 169:=======================================>             (87 + 29) / 116][Stage 169:=============================================>      (101 + 15) / 116][Stage 169:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.762606095 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=195", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=195,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403232927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 59) / 120][Stage 170:==============================>                      (69 + 51) / 120][Stage 170:========================================>            (92 + 28) / 120][Stage 170:==================================================>  (114 + 6) / 120][Stage 170:====================================================>(118 + 2) / 120]                                                                                [Stage 171:============================>                        (65 + 56) / 121][Stage 171:===============================>                     (71 + 50) / 121][Stage 171:=======================================>             (90 + 31) / 121][Stage 171:=================================================>   (112 + 9) / 121][Stage 171:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.572272112 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=42", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=42,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341038213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:====================================>                (79 + 36) / 115][Stage 172:=======================================>             (85 + 30) / 115][Stage 172:============================================>        (96 + 19) / 115][Stage 172:=================================================>   (107 + 8) / 115]                                                                                [Stage 173:=======================================>             (87 + 29) / 116][Stage 173:=============================================>       (99 + 17) / 116][Stage 173:===============================================>    (106 + 10) / 116][Stage 173:====================================================>(114 + 2) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.141475137 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=153", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=153,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409692349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 60) / 120][Stage 174:==============================>                      (68 + 52) / 120][Stage 174:=====================================>               (86 + 34) / 120][Stage 174:=================================================>   (112 + 8) / 120][Stage 174:====================================================>(118 + 2) / 120]                                                                                [Stage 175:===========================>                         (62 + 59) / 121][Stage 175:=============================>                       (68 + 53) / 121][Stage 175:======================================>              (87 + 34) / 121][Stage 175:===============================================>    (110 + 11) / 121][Stage 175:===================================================> (118 + 3) / 121][Stage 175:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.512304605 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=210", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=210,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357847606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:====================================>                (77 + 36) / 113][Stage 176:=========================================>           (89 + 24) / 113][Stage 176:==============================================>      (99 + 14) / 113][Stage 176:====================================================>(111 + 2) / 113]                                                                                [Stage 177:==================================>                  (75 + 39) / 114][Stage 177:=======================================>             (85 + 29) / 114][Stage 177:=============================================>      (100 + 14) / 114][Stage 177:==================================================>  (108 + 6) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.899728627 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400468613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (58 + 55) / 113][Stage 178:============================>                        (61 + 52) / 113][Stage 178:====================================>                (77 + 36) / 113][Stage 178:=============================================>       (96 + 17) / 113]                                                                                [Stage 179:===========================>                         (60 + 54) / 114][Stage 179:=================================>                   (73 + 41) / 114][Stage 179:========================================>            (87 + 27) / 114][Stage 179:===============================================>    (104 + 10) / 114][Stage 179:===================================================> (111 + 3) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.50705877 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364335389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (72 + 46) / 118][Stage 180:=====================================>               (83 + 35) / 118][Stage 180:============================================>       (101 + 17) / 118]                                                                                [Stage 181:================================>                    (73 + 46) / 119][Stage 181:==================================>                  (77 + 42) / 119][Stage 181:===========================================>         (97 + 22) / 119][Stage 181:==============================================>     (107 + 12) / 119][Stage 181:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.092925061 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=181", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=181,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378339922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:============================>                        (60 + 53) / 113][Stage 182:==================================>                  (73 + 40) / 113][Stage 182:=============================================>       (97 + 16) / 113][Stage 182:====================================================>(111 + 2) / 113]                                                                                [Stage 183:============================>                        (61 + 53) / 114][Stage 183:===================================>                 (76 + 38) / 114][Stage 183:==========================================>          (92 + 22) / 114][Stage 183:==================================================>  (108 + 6) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.220490562 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345614503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==================================>                  (73 + 40) / 113][Stage 184:=====================================>               (80 + 33) / 113][Stage 184:============================================>        (94 + 19) / 113][Stage 184:=================================================>   (105 + 8) / 113][Stage 184:===================================================> (109 + 4) / 113]                                                                                [Stage 185:===================================>                 (77 + 37) / 114][Stage 185:=======================================>             (86 + 28) / 114][Stage 185:=============================================>      (100 + 14) / 114][Stage 185:=================================================>   (106 + 8) / 114][Stage 185:====================================================>(112 + 2) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.152570964 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389244789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:============================>                        (64 + 56) / 120][Stage 186:==================================>                  (78 + 42) / 120][Stage 186:=========================================>           (95 + 25) / 120][Stage 186:=================================================>   (113 + 7) / 120][Stage 186:====================================================>(119 + 1) / 120]                                                                                [Stage 187:==========================>                          (61 + 60) / 121][Stage 187:==============================>                      (70 + 51) / 121][Stage 187:====================================>                (84 + 37) / 121][Stage 187:=============================================>      (107 + 14) / 121][Stage 187:=================================================>   (114 + 7) / 121][Stage 187:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.670796031 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345406057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==================================>                  (74 + 39) / 113][Stage 188:=====================================>               (80 + 33) / 113][Stage 188:============================================>        (94 + 19) / 113][Stage 188:================================================>    (104 + 9) / 113][Stage 188:====================================================>(111 + 2) / 113]                                                                                [Stage 189:=======================================>             (84 + 30) / 114][Stage 189:===========================================>         (93 + 21) / 114][Stage 189:=============================================>      (100 + 14) / 114][Stage 189:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.986929697 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388537943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (59 + 54) / 113][Stage 190:==================================>                  (74 + 39) / 113][Stage 190:==============================================>      (99 + 14) / 113][Stage 190:===================================================> (109 + 4) / 113]                                                                                [Stage 191:===========================>                         (59 + 55) / 114][Stage 191:==============================>                      (65 + 49) / 114][Stage 191:====================================>                (79 + 35) / 114][Stage 191:==============================================>      (99 + 15) / 114][Stage 191:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.050153307 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380003591 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:=============================>                       (63 + 50) / 113][Stage 192:=====================================>               (81 + 32) / 113][Stage 192:==============================================>      (99 + 14) / 113]                                                                                [Stage 193:===========================>                         (60 + 54) / 114][Stage 193:===============================>                     (68 + 46) / 114][Stage 193:========================================>            (88 + 26) / 114][Stage 193:==============================================>     (101 + 13) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.184758271 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358795865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:=================================>                   (75 + 43) / 118][Stage 194:=========================================>           (92 + 26) / 118][Stage 194:=================================================>   (110 + 8) / 118]                                                                                [Stage 195:================================>                    (74 + 45) / 119][Stage 195:====================================>                (82 + 37) / 119][Stage 195:=============================================>      (105 + 14) / 119][Stage 195:==================================================>  (113 + 6) / 119][Stage 195:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.041979897 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389850936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (73 + 45) / 118][Stage 196:====================================>                (81 + 37) / 118][Stage 196:===========================================>         (96 + 22) / 118][Stage 196:=================================================>   (111 + 7) / 118]                                                                                [Stage 197:=================================>                   (75 + 44) / 119][Stage 197:=====================================>               (84 + 35) / 119][Stage 197:=============================================>      (105 + 14) / 119][Stage 197:==================================================>  (114 + 5) / 119][Stage 197:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.362922837 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363365065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (79 + 34) / 113][Stage 198:============================================>        (94 + 19) / 113][Stage 198:==============================================>     (102 + 11) / 113][Stage 198:====================================================>(111 + 2) / 113]                                                                                [Stage 199:=====================================>               (80 + 34) / 114][Stage 199:=========================================>           (90 + 24) / 114][Stage 199:===============================================>    (104 + 10) / 114][Stage 199:==================================================>  (108 + 6) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.75482026 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=194", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=194,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (79 + 34) / 113][Stage 200:============================================>        (95 + 18) / 113][Stage 200:=================================================>   (106 + 7) / 113][Stage 200:===================================================> (110 + 3) / 113]                                                                                [Stage 201:=======================================>             (84 + 30) / 114][Stage 201:===========================================>         (93 + 21) / 114][Stage 201:==============================================>     (101 + 13) / 114][Stage 201:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.937771376 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m25.470s
user	11m43.960s
sys	0m53.548s
