Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 03:36:16 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:36:31 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:36:31 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:36:31 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 03:36:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:36:44 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601033633-0749).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@158cb50a

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.364940982 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=================>                                     (37 + 78) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:========================>                              (51 + 65) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.76378193 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.72408555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (39 + 79) / 118][Stage 2:=========================>                             (55 + 63) / 118][Stage 2:================================>                      (69 + 49) / 118][Stage 2:===================================>                   (76 + 42) / 118][Stage 2:====================================>                  (79 + 39) / 118][Stage 2:========================================>              (87 + 31) / 118][Stage 2:=========================================>             (88 + 30) / 118][Stage 2:===========================================>           (94 + 24) / 118][Stage 2:===================================================>   (110 + 8) / 118][Stage 2:======================================================>(117 + 1) / 118]                                                                                [Stage 3:================================>                      (70 + 49) / 119][Stage 3:=================================>                     (72 + 47) / 119][Stage 3:====================================>                  (78 + 41) / 119][Stage 3:=====================================>                 (82 + 37) / 119][Stage 3:======================================>                (84 + 35) / 119][Stage 3:=============================================>        (101 + 18) / 119][Stage 3:===============================================>      (105 + 14) / 119][Stage 3:====================================================>  (113 + 6) / 119][Stage 3:======================================================>(117 + 2) / 119][Stage 3:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.346973321 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.703739861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (56 + 57) / 113][Stage 4:==============================>                        (62 + 51) / 113][Stage 4:=================================>                     (69 + 44) / 113][Stage 4:======================================>                (79 + 34) / 113][Stage 4:==============================================>        (96 + 17) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:======================================================>(111 + 2) / 113]                                                                                [Stage 5:============================>                          (60 + 54) / 114][Stage 5:===============================>                       (66 + 48) / 114][Stage 5:=====================================>                 (77 + 37) / 114][Stage 5:============================================>          (92 + 22) / 114][Stage 5:=================================================>    (104 + 10) / 114][Stage 5:=====================================================> (110 + 4) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.592819542 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.592485105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (72 + 46) / 118][Stage 6:===================================>                   (77 + 41) / 118][Stage 6:======================================>                (82 + 36) / 118][Stage 6:=========================================>             (89 + 29) / 118][Stage 6:=============================================>         (98 + 20) / 118][Stage 6:================================================>     (105 + 13) / 118][Stage 6:======================================================>(116 + 2) / 118]                                                                                [Stage 7:===================================>                   (76 + 43) / 119][Stage 7:====================================>                  (79 + 40) / 119][Stage 7:==========================================>            (92 + 27) / 119][Stage 7:=============================================>         (98 + 21) / 119][Stage 7:================================================>     (107 + 12) / 119]                                                                                Time elapsed: 4.125607935 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.517389308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:======================================>                (80 + 35) / 115][Stage 8:=======================================>               (82 + 33) / 115][Stage 8:=============================================>         (95 + 20) / 115][Stage 8:===============================================>      (102 + 13) / 115][Stage 8:=====================================================> (111 + 4) / 115]                                                                                [Stage 9:=====================================>                 (80 + 36) / 116][Stage 9:=========================================>             (87 + 29) / 116][Stage 9:=============================================>         (95 + 21) / 116][Stage 9:===============================================>      (102 + 14) / 116][Stage 9:===================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.250645307 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.52059501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (71 + 47) / 118][Stage 10:==================================>                   (76 + 42) / 118][Stage 10:=========================================>            (91 + 27) / 118][Stage 10:=============================================>       (101 + 17) / 118][Stage 10:===============================================>     (106 + 12) / 118][Stage 10:=====================================================>(116 + 2) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:====================================>                 (80 + 39) / 119][Stage 11:========================================>             (90 + 29) / 119][Stage 11:================================================>    (108 + 11) / 119][Stage 11:=====================================================>(117 + 2) / 119][Stage 11:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.078651097 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=226", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=226,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530814661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (71 + 42) / 113][Stage 12:=====================================>                (79 + 34) / 113][Stage 12:===========================================>          (90 + 23) / 113][Stage 12:=============================================>        (95 + 18) / 113][Stage 12:=================================================>    (104 + 9) / 113][Stage 12:====================================================> (109 + 4) / 113][Stage 12:=====================================================>(111 + 2) / 113]                                                                                [Stage 13:====================================>                 (78 + 36) / 114][Stage 13:=========================================>            (87 + 27) / 114][Stage 13:============================================>         (94 + 20) / 114][Stage 13:===============================================>     (103 + 11) / 114][Stage 13:================================================>    (104 + 10) / 114][Stage 13:===================================================>  (109 + 5) / 114][Stage 13:====================================================> (111 + 3) / 114][Stage 13:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.208970713 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.568249805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=========================>                            (56 + 64) / 120][Stage 14:==========================>                           (58 + 62) / 120][Stage 14:================================>                     (73 + 47) / 120][Stage 14:========================================>             (90 + 30) / 120][Stage 14:===============================================>     (108 + 12) / 120][Stage 14:====================================================> (116 + 4) / 120][Stage 14:=====================================================>(119 + 1) / 120]                                                                                [Stage 15:===========================>                          (61 + 60) / 121][Stage 15:=============================>                        (66 + 55) / 121][Stage 15:=================================>                    (76 + 45) / 121][Stage 15:===========================================>         (100 + 21) / 121][Stage 15:===================================================>  (115 + 6) / 121][Stage 15:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.915965474 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.546528429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (57 + 56) / 113][Stage 16:=============================>                        (61 + 52) / 113][Stage 16:================================>                     (69 + 44) / 113][Stage 16:========================================>             (84 + 29) / 113][Stage 16:==============================================>      (100 + 13) / 113]                                                                                [Stage 17:============================>                         (60 + 54) / 114][Stage 17:=================================>                    (70 + 44) / 114][Stage 17:========================================>             (85 + 29) / 114][Stage 17:==============================================>      (101 + 13) / 114][Stage 17:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.44876834 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427065578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (80 + 35) / 115][Stage 18:========================================>             (86 + 29) / 115][Stage 18:============================================>         (94 + 21) / 115][Stage 18:==================================================>   (107 + 8) / 115][Stage 18:====================================================> (111 + 4) / 115]                                                                                [Stage 19:======================================>               (83 + 33) / 116][Stage 19:===========================================>          (93 + 23) / 116][Stage 19:=============================================>        (97 + 19) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:==================================================>   (108 + 8) / 116][Stage 19:====================================================> (113 + 3) / 116][Stage 19:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.700108679 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=33,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:======================================>               (81 + 34) / 115][Stage 20:=========================================>            (88 + 27) / 115][Stage 20:==============================================>      (100 + 15) / 115][Stage 20:==================================================>   (108 + 7) / 115][Stage 20:===================================================>  (109 + 6) / 115][Stage 20:====================================================> (112 + 3) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:======================================>               (83 + 33) / 116][Stage 21:=========================================>            (89 + 27) / 116][Stage 21:==============================================>      (101 + 15) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:==================================================>   (108 + 8) / 116][Stage 21:=====================================================>(114 + 2) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.817652234 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=140,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497853479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===============================>                      (67 + 48) / 115][Stage 22:=====================================>                (79 + 36) / 115][Stage 22:==========================================>           (90 + 25) / 115][Stage 22:==================================================>   (107 + 8) / 115][Stage 22:=====================================================>(114 + 1) / 115]                                                                                [Stage 23:==================================>                   (75 + 41) / 116][Stage 23:========================================>             (87 + 29) / 116][Stage 23:=============================================>        (98 + 18) / 116][Stage 23:==================================================>   (108 + 8) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.315582723 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==============================>                       (66 + 49) / 115][Stage 24:======================================>               (83 + 32) / 115][Stage 24:===========================================>          (93 + 22) / 115][Stage 24:====================================================> (111 + 4) / 115][Stage 24:====================================================> (112 + 3) / 115]                                                                                [Stage 25:===============================>                      (68 + 48) / 116][Stage 25:======================================>               (83 + 33) / 116][Stage 25:==========================================>           (91 + 25) / 116][Stage 25:==============================================>       (99 + 17) / 116][Stage 25:==============================================>      (101 + 15) / 116][Stage 25:=================================================>    (107 + 9) / 116][Stage 25:=====================================================>(114 + 2) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.829647994 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.55336625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:=============================>                        (65 + 55) / 120][Stage 26:====================================>                 (81 + 39) / 120][Stage 26:=============================================>       (102 + 18) / 120][Stage 26:====================================================> (117 + 3) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:=================================>                    (74 + 47) / 121][Stage 27:========================================>             (90 + 31) / 121][Stage 27:==============================================>      (107 + 14) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.412765774 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 59) / 120][Stage 28:=============================>                        (66 + 54) / 120][Stage 28:=====================================>                (84 + 36) / 120][Stage 28:==============================================>      (106 + 14) / 120][Stage 28:====================================================> (117 + 3) / 120]                                                                                [Stage 29:============================>                         (63 + 58) / 121][Stage 29:==============================>                       (69 + 52) / 121][Stage 29:===========================================>          (98 + 23) / 121][Stage 29:================================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.525514705 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=211", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=211,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487635941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=================================>                    (70 + 43) / 113][Stage 30:========================================>             (84 + 29) / 113][Stage 30:============================================>         (93 + 20) / 113][Stage 30:================================================>    (103 + 10) / 113][Stage 30:=====================================================>(111 + 2) / 113]                                                                                [Stage 31:====================================>                 (76 + 38) / 114][Stage 31:======================================>               (82 + 32) / 114][Stage 31:=========================================>            (88 + 26) / 114][Stage 31:===============================================>     (103 + 11) / 114][Stage 31:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.09185716 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=149,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.551701054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:>                                                       (0 + 0) / 115][Stage 32:===============================>                      (68 + 47) / 115][Stage 32:======================================>               (83 + 32) / 115][Stage 32:==============================================>      (100 + 15) / 115][Stage 32:=====================================================>(113 + 2) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:===============================>                      (68 + 48) / 116][Stage 33:====================================>                 (79 + 37) / 116][Stage 33:===========================================>          (94 + 22) / 116][Stage 33:===============================================>     (105 + 11) / 116][Stage 33:=================================================>    (107 + 9) / 116][Stage 33:=====================================================>(114 + 2) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.648762662 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445127477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==================================>                   (72 + 41) / 113][Stage 34:========================================>             (85 + 28) / 113][Stage 34:============================================>         (93 + 20) / 113][Stage 34:===================================================>  (107 + 6) / 113][Stage 34:====================================================> (109 + 4) / 113][Stage 34:====================================================> (110 + 3) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:====================================>                 (78 + 36) / 114][Stage 35:=========================================>            (88 + 26) / 114][Stage 35:=============================================>        (95 + 19) / 114][Stage 35:==================================================>   (106 + 8) / 114][Stage 35:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.684343046 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53319646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 59) / 120][Stage 36:==============================>                       (67 + 53) / 120][Stage 36:============================================>         (98 + 22) / 120][Stage 36:===================================================>  (114 + 6) / 120][Stage 36:=====================================================>(119 + 1) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:===========================>                          (62 + 59) / 121][Stage 37:====================================>                 (82 + 39) / 121][Stage 37:============================================>        (102 + 19) / 121][Stage 37:================================================>    (111 + 10) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.748108148 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=45", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=45,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479414918 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:============================>                         (59 + 54) / 113][Stage 38:================================>                     (67 + 46) / 113][Stage 38:==========================================>           (89 + 24) / 113][Stage 38:===================================================>  (108 + 5) / 113][Stage 38:====================================================> (109 + 4) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:===========================>                          (59 + 55) / 114][Stage 39:==============================>                       (65 + 49) / 114][Stage 39:===================================>                  (75 + 39) / 114][Stage 39:==========================================>           (89 + 25) / 114][Stage 39:==================================================>   (107 + 7) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.669930565 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=43", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=43,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:============================>                         (60 + 53) / 113][Stage 40:==================================>                   (73 + 40) / 113][Stage 40:=============================================>        (95 + 18) / 113][Stage 40:===================================================>  (107 + 6) / 113]                                                                                [Stage 41:============================>                         (60 + 54) / 114][Stage 41:================================>                     (69 + 45) / 114][Stage 41:=======================================>              (84 + 30) / 114][Stage 41:===============================================>     (103 + 11) / 114][Stage 41:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.38112835 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483413064 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=================================>                    (73 + 45) / 118][Stage 42:==================================>                   (75 + 43) / 118][Stage 42:============================================>        (100 + 18) / 118][Stage 42:====================================================> (114 + 4) / 118][Stage 42:=====================================================>(117 + 1) / 118]                                                                                [Stage 43:=================================>                    (73 + 46) / 119][Stage 43:====================================>                 (80 + 39) / 119][Stage 43:============================================>         (98 + 21) / 119][Stage 43:===================================================>  (113 + 6) / 119][Stage 43:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.519877045 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509096404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:=============================>                        (65 + 55) / 120][Stage 44:====================================>                 (81 + 39) / 120][Stage 44:============================================>        (100 + 20) / 120][Stage 44:====================================================> (117 + 3) / 120]                                                                                [Stage 45:===========================>                          (61 + 60) / 121][Stage 45:=============================>                        (66 + 55) / 121][Stage 45:==================================>                   (78 + 43) / 121][Stage 45:===========================================>         (100 + 21) / 121][Stage 45:====================================================> (117 + 4) / 121][Stage 45:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.655532316 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474864581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (58 + 55) / 113][Stage 46:================================>                     (67 + 46) / 113][Stage 46:========================================>             (84 + 29) / 113][Stage 46:=================================================>    (104 + 9) / 113]                                                                                [Stage 47:============================>                         (61 + 53) / 114][Stage 47:==================================>                   (72 + 42) / 114][Stage 47:=============================================>        (96 + 18) / 114][Stage 47:===============================================>     (103 + 11) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.230078957 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=155", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=155,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.597126025 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:=============================>                        (65 + 55) / 120][Stage 48:=======================================>              (88 + 32) / 120][Stage 48:================================================>    (109 + 11) / 120][Stage 48:=====================================================>(118 + 2) / 120]                                                                                [Stage 49:=============================>                        (65 + 56) / 121][Stage 49:=================================>                    (75 + 46) / 121][Stage 49:=========================================>            (92 + 29) / 121][Stage 49:================================================>    (110 + 11) / 121][Stage 49:=====================================================>(119 + 2) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.806456366 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=133", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=133,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:=============================>                        (66 + 54) / 120][Stage 50:=========================================>            (93 + 27) / 120][Stage 50:================================================>    (110 + 10) / 120]                                                                                [Stage 51:===========================>                          (62 + 59) / 121][Stage 51:================================>                     (73 + 48) / 121][Stage 51:=======================================>              (89 + 32) / 121][Stage 51:================================================>    (110 + 11) / 121][Stage 51:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.537203893 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=199", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=199,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405603067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (79 + 36) / 115][Stage 52:=======================================>              (84 + 31) / 115][Stage 52:==============================================>       (98 + 17) / 115][Stage 52:=====================================================>(113 + 2) / 115]                                                                                [Stage 53:========================================>             (87 + 29) / 116][Stage 53:==============================================>      (102 + 14) / 116][Stage 53:====================================================> (112 + 4) / 116][Stage 53:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.725547148 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=26", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=26,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430629424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:=====================================>                (78 + 35) / 113][Stage 54:=========================================>            (86 + 27) / 113][Stage 54:===============================================>      (99 + 14) / 113][Stage 54:====================================================> (110 + 3) / 113]                                                                                [Stage 55:===================================>                  (75 + 39) / 114][Stage 55:========================================>             (85 + 29) / 114][Stage 55:============================================>         (94 + 20) / 114][Stage 55:==============================================>      (100 + 14) / 114][Stage 55:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.499224675 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=153", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=153,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401295016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=====================================>                (78 + 35) / 113][Stage 56:=======================================>              (83 + 30) / 113][Stage 56:==========================================>           (89 + 24) / 113][Stage 56:===============================================>     (102 + 11) / 113][Stage 56:====================================================> (110 + 3) / 113]                                                                                [Stage 57:====================================>                 (78 + 36) / 114][Stage 57:=========================================>            (87 + 27) / 114][Stage 57:============================================>         (94 + 20) / 114][Stage 57:==================================================>   (107 + 7) / 114][Stage 57:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.473786279 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (78 + 35) / 113][Stage 58:==========================================>           (88 + 25) / 113][Stage 58:===============================================>     (102 + 11) / 113][Stage 58:====================================================> (110 + 3) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:====================================>                 (77 + 37) / 114][Stage 59:=========================================>            (87 + 27) / 114][Stage 59:=============================================>        (96 + 18) / 114][Stage 59:================================================>    (104 + 10) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.175167323 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571331194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (60 + 60) / 120][Stage 60:===========================>                          (62 + 58) / 120][Stage 60:================================>                     (73 + 47) / 120][Stage 60:=========================================>            (93 + 27) / 120][Stage 60:================================================>    (109 + 11) / 120]                                                                                [Stage 61:===========================>                          (61 + 60) / 121][Stage 61:==============================>                       (69 + 52) / 121][Stage 61:======================================>               (87 + 34) / 121][Stage 61:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.263849222 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=236", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=236,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424714678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:====================================>                 (76 + 37) / 113][Stage 62:===========================================>          (91 + 22) / 113][Stage 62:=============================================>        (96 + 17) / 113][Stage 62:===================================================>  (108 + 5) / 113]                                                                                [Stage 63:=====================================>                (79 + 35) / 114][Stage 63:============================================>         (94 + 20) / 114][Stage 63:===============================================>     (103 + 11) / 114][Stage 63:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.879648924 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=121", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=121,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456127179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (73 + 40) / 113][Stage 64:======================================>               (80 + 33) / 113][Stage 64:==========================================>           (89 + 24) / 113][Stage 64:==============================================>       (98 + 15) / 113][Stage 64:====================================================> (110 + 3) / 113]                                                                                [Stage 65:====================================>                 (78 + 36) / 114][Stage 65:=========================================>            (87 + 27) / 114][Stage 65:===============================================>     (103 + 11) / 114][Stage 65:====================================================> (111 + 3) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.130272465 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445647004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:==============================>                       (63 + 50) / 113][Stage 66:=====================================>                (78 + 35) / 113][Stage 66:==============================================>       (97 + 16) / 113]                                                                                [Stage 67:===========================>                          (59 + 55) / 114][Stage 67:==============================>                       (64 + 50) / 114][Stage 67:=======================================>              (84 + 30) / 114][Stage 67:=================================================>    (105 + 9) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.375564689 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=180", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=180,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408897523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:==================================>                   (75 + 43) / 118][Stage 68:======================================>               (84 + 34) / 118][Stage 68:=============================================>        (99 + 19) / 118][Stage 68:==================================================>   (111 + 7) / 118]                                                                                [Stage 69:=================================>                    (74 + 45) / 119][Stage 69:====================================>                 (81 + 38) / 119][Stage 69:========================================>             (90 + 29) / 119][Stage 69:================================================>    (108 + 11) / 119][Stage 69:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.55548077 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423415205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:============================>                         (59 + 54) / 113][Stage 70:==============================>                       (64 + 49) / 113][Stage 70:=========================================>            (86 + 27) / 113][Stage 70:===============================================>     (102 + 11) / 113]                                                                                [Stage 71:==============================>                       (64 + 50) / 114][Stage 71:====================================>                 (77 + 37) / 114][Stage 71:========================================>             (86 + 28) / 114][Stage 71:===============================================>     (102 + 12) / 114][Stage 71:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.239762396 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407613872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=====================================>                (78 + 35) / 113][Stage 72:==========================================>           (88 + 25) / 113][Stage 72:===============================================>      (99 + 14) / 113][Stage 72:==================================================>   (105 + 8) / 113][Stage 72:====================================================> (109 + 4) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:=====================================>                (80 + 34) / 114][Stage 73:=========================================>            (88 + 26) / 114][Stage 73:==============================================>      (100 + 14) / 114][Stage 73:===================================================>  (108 + 6) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.413580594 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=212", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=212,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433971457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (60 + 60) / 120][Stage 74:==============================>                       (67 + 53) / 120][Stage 74:=====================================>                (84 + 36) / 120][Stage 74:================================================>    (110 + 10) / 120][Stage 74:=====================================================>(119 + 1) / 120]                                                                                [Stage 75:===========================>                          (61 + 60) / 121][Stage 75:============================>                         (64 + 57) / 121][Stage 75:======================================>               (87 + 34) / 121][Stage 75:=============================================>       (104 + 17) / 121][Stage 75:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.372167795 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=139", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=139,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434193738 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==============================>                       (65 + 50) / 115][Stage 76:======================================>               (82 + 33) / 115][Stage 76:============================================>         (94 + 21) / 115][Stage 76:=================================================>    (106 + 9) / 115][Stage 76:===================================================>  (110 + 5) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:==============================>                       (66 + 50) / 116][Stage 77:======================================>               (82 + 34) / 116][Stage 77:=============================================>        (98 + 18) / 116][Stage 77:===================================================>  (111 + 5) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.28754735 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438651929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:=============================>                        (65 + 55) / 120][Stage 78:===================================>                  (79 + 41) / 120][Stage 78:============================================>        (101 + 19) / 120][Stage 78:===================================================>  (114 + 6) / 120]                                                                                [Stage 79:===========================>                          (62 + 59) / 121][Stage 79:=================================>                    (76 + 45) / 121][Stage 79:===========================================>          (97 + 24) / 121][Stage 79:===================================================>  (115 + 6) / 121][Stage 79:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.39076321 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=222", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=222,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416638853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:===============================>                      (65 + 48) / 113][Stage 80:======================================>               (81 + 32) / 113][Stage 80:==============================================>       (98 + 15) / 113]                                                                                [Stage 81:============================>                         (60 + 54) / 114][Stage 81:==============================>                       (64 + 50) / 114][Stage 81:=======================================>              (83 + 31) / 114][Stage 81:===============================================>     (103 + 11) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.234010999 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412688044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:====================================>                 (79 + 39) / 118][Stage 82:==========================================>           (92 + 26) / 118][Stage 82:=================================================>    (109 + 9) / 118][Stage 82:====================================================> (115 + 3) / 118]                                                                                [Stage 83:=================================>                    (74 + 45) / 119][Stage 83:====================================>                 (81 + 38) / 119][Stage 83:============================================>         (98 + 21) / 119][Stage 83:==================================================>   (111 + 8) / 119][Stage 83:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.347686052 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=208", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=208,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480119097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:==============================>                       (67 + 53) / 120][Stage 84:======================================>               (86 + 34) / 120][Stage 84:================================================>    (109 + 11) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:================================>                     (72 + 49) / 121][Stage 85:===========================================>          (97 + 24) / 121][Stage 85:=================================================>    (112 + 9) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.268673109 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=41", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=41,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:===============================>                      (69 + 51) / 120][Stage 86:=========================================>            (92 + 28) / 120][Stage 86:=================================================>    (111 + 9) / 120]                                                                                [Stage 87:============================>                         (64 + 57) / 121][Stage 87:=================================>                    (76 + 45) / 121][Stage 87:==========================================>           (96 + 25) / 121][Stage 87:===================================================>  (116 + 5) / 121][Stage 87:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.287574635 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=164", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=164,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388894174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=================================>                    (71 + 42) / 113][Stage 88:=======================================>              (83 + 30) / 113][Stage 88:===========================================>          (92 + 21) / 113][Stage 88:==============================================>      (100 + 13) / 113][Stage 88:=====================================================>(111 + 2) / 113]                                                                                [Stage 89:=====================================>                (80 + 34) / 114][Stage 89:=========================================>            (88 + 26) / 114][Stage 89:================================================>    (104 + 10) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.011507448 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435628421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (60 + 60) / 120][Stage 90:=============================>                        (65 + 55) / 120][Stage 90:===================================>                  (79 + 41) / 120][Stage 90:============================================>         (99 + 21) / 120][Stage 90:===================================================>  (115 + 5) / 120]                                                                                [Stage 91:===========================>                          (61 + 60) / 121][Stage 91:==============================>                       (69 + 52) / 121][Stage 91:=====================================>                (85 + 36) / 121][Stage 91:=============================================>       (104 + 17) / 121][Stage 91:====================================================> (117 + 4) / 121][Stage 91:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.356386505 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374352571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=====================================>                (79 + 36) / 115][Stage 92:=======================================>              (84 + 31) / 115][Stage 92:============================================>         (95 + 20) / 115][Stage 92:==============================================>       (99 + 16) / 115][Stage 92:===================================================>  (110 + 5) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:=====================================>                (81 + 35) / 116][Stage 93:=========================================>            (89 + 27) / 116][Stage 93:=============================================>       (100 + 16) / 116][Stage 93:====================================================> (112 + 4) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.196520334 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412530438 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:============================>                         (60 + 53) / 113][Stage 94:=================================>                    (70 + 43) / 113][Stage 94:======================================>               (80 + 33) / 113][Stage 94:===========================================>          (90 + 23) / 113][Stage 94:==================================================>   (106 + 7) / 113][Stage 94:=====================================================>(112 + 1) / 113]                                                                                [Stage 95:============================>                         (60 + 54) / 114][Stage 95:===============================>                      (66 + 48) / 114][Stage 95:========================================>             (85 + 29) / 114][Stage 95:==============================================>      (101 + 13) / 114][Stage 95:===================================================>  (109 + 5) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.789973255 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=115", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=115,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483810417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:================================>                     (70 + 45) / 115][Stage 96:======================================>               (82 + 33) / 115][Stage 96:===============================================>     (103 + 12) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:===================================>                  (77 + 39) / 116][Stage 97:========================================>             (88 + 28) / 116][Stage 97:===============================================>     (105 + 11) / 116][Stage 97:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.875033424 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=246", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=246,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417221269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:===================================>                  (78 + 42) / 120][Stage 98:==========================================>           (94 + 26) / 120][Stage 98:===================================================>  (115 + 5) / 120]                                                                                [Stage 99:============================>                         (63 + 58) / 121][Stage 99:===============================>                      (71 + 50) / 121][Stage 99:==========================================>           (96 + 25) / 121][Stage 99:===================================================>  (116 + 5) / 121][Stage 99:=====================================================>(119 + 2) / 121][Stage 99:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.604127314 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=240,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 59) / 120][Stage 100:==============================>                      (69 + 51) / 120][Stage 100:=======================================>             (89 + 31) / 120][Stage 100:===============================================>    (109 + 11) / 120]                                                                                [Stage 101:===========================>                         (62 + 59) / 121][Stage 101:==============================>                      (69 + 52) / 121][Stage 101:==========================================>          (96 + 25) / 121][Stage 101:===============================================>    (110 + 11) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.311915457 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383796653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (73 + 45) / 118][Stage 102:===================================>                 (80 + 38) / 118][Stage 102:===========================================>         (96 + 22) / 118][Stage 102:=================================================>   (111 + 7) / 118][Stage 102:====================================================>(117 + 1) / 118]                                                                                [Stage 103:=================================>                   (75 + 44) / 119][Stage 103:=====================================>               (84 + 35) / 119][Stage 103:===========================================>         (97 + 22) / 119][Stage 103:===============================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.28632821 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=91,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412418473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 59) / 120][Stage 104:===============================>                     (72 + 48) / 120][Stage 104:==========================================>          (96 + 24) / 120][Stage 104:====================================================>(118 + 2) / 120]                                                                                [Stage 105:==========================>                          (61 + 60) / 121][Stage 105:=============================>                       (68 + 53) / 121][Stage 105:==================================>                  (78 + 43) / 121][Stage 105:===============================================>    (110 + 11) / 121][Stage 105:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.054621579 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395262231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:==================================>                  (76 + 42) / 118][Stage 106:=========================================>           (93 + 25) / 118][Stage 106:==============================================>     (106 + 12) / 118][Stage 106:====================================================>(116 + 2) / 118]                                                                                [Stage 107:================================>                    (74 + 45) / 119][Stage 107:=======================================>             (89 + 30) / 119][Stage 107:==============================================>     (107 + 12) / 119][Stage 107:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.212844662 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=136", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=136,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391188882 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (71 + 44) / 115][Stage 108:=======================================>             (86 + 29) / 115][Stage 108:=============================================>      (101 + 14) / 115][Stage 108:=================================================>   (108 + 7) / 115]                                                                                [Stage 109:=================================>                   (74 + 42) / 116][Stage 109:=============================================>      (101 + 15) / 116][Stage 109:=================================================>   (108 + 8) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.808942344 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=220,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358472272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (82 + 33) / 115][Stage 110:=========================================>           (91 + 24) / 115][Stage 110:==============================================>     (102 + 13) / 115][Stage 110:==================================================>  (109 + 6) / 115]                                                                                [Stage 111:======================================>              (84 + 32) / 116][Stage 111:==========================================>          (94 + 22) / 116][Stage 111:===============================================>    (106 + 10) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.78480181 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444527974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:======================================>              (83 + 32) / 115][Stage 112:==========================================>          (93 + 22) / 115][Stage 112:================================================>    (106 + 9) / 115][Stage 112:===================================================> (112 + 3) / 115]                                                                                [Stage 113:=====================================>               (81 + 35) / 116][Stage 113:========================================>            (88 + 28) / 116][Stage 113:=============================================>      (101 + 15) / 116][Stage 113:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.724111879 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413299995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:================================>                    (74 + 46) / 120][Stage 114:=========================================>           (93 + 27) / 120][Stage 114:=================================================>   (111 + 9) / 120][Stage 114:===================================================> (117 + 3) / 120]                                                                                [Stage 115:=============================>                       (67 + 54) / 121][Stage 115:=================================>                   (77 + 44) / 121][Stage 115:===========================================>         (99 + 22) / 121][Stage 115:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.250019977 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372718369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:=================================>                   (74 + 44) / 118][Stage 116:====================================>                (82 + 36) / 118][Stage 116:============================================>        (98 + 20) / 118][Stage 116:==================================================>  (112 + 6) / 118]                                                                                [Stage 117:================================>                    (74 + 45) / 119][Stage 117:====================================>                (82 + 37) / 119][Stage 117:==========================================>          (95 + 24) / 119][Stage 117:==============================================>     (106 + 13) / 119][Stage 117:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.30572412 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=225", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=225,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346887307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:=========================================>           (90 + 25) / 115][Stage 118:==============================================>     (102 + 13) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:=====================================>               (82 + 34) / 116][Stage 119:=======================================>             (87 + 29) / 116][Stage 119:=============================================>      (102 + 14) / 116][Stage 119:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.575390822 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354129778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (81 + 34) / 115][Stage 120:========================================>            (88 + 27) / 115][Stage 120:=============================================>      (100 + 15) / 115][Stage 120:==================================================>  (109 + 6) / 115]                                                                                [Stage 121:========================================>            (89 + 27) / 116][Stage 121:============================================>       (100 + 16) / 116][Stage 121:==================================================>  (110 + 6) / 116][Stage 121:===================================================> (112 + 4) / 116][Stage 121:===================================================> (113 + 3) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.101949797 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=9", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=9,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419909377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 60) / 120][Stage 122:===============================>                     (72 + 48) / 120][Stage 122:===========================================>         (98 + 22) / 120][Stage 122:===============================================>    (110 + 10) / 120]                                                                                [Stage 123:===========================>                         (62 + 59) / 121][Stage 123:================================>                    (74 + 47) / 121][Stage 123:=======================================>             (91 + 30) / 121][Stage 123:===============================================>    (111 + 10) / 121][Stage 123:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.596151748 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390678712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=============================>                       (65 + 50) / 115][Stage 124:===================================>                 (77 + 38) / 115][Stage 124:=========================================>           (90 + 25) / 115][Stage 124:=================================================>   (108 + 7) / 115][Stage 124:===================================================> (111 + 4) / 115]                                                                                [Stage 125:==================================>                  (76 + 40) / 116][Stage 125:==========================================>          (94 + 22) / 116][Stage 125:===============================================>    (106 + 10) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.871710356 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=157", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=157,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346804964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:====================================>                (80 + 35) / 115][Stage 126:======================================>              (83 + 32) / 115][Stage 126:=============================================>      (100 + 15) / 115][Stage 126:=================================================>   (107 + 8) / 115][Stage 126:===================================================> (111 + 4) / 115]                                                                                [Stage 127:======================================>              (85 + 31) / 116][Stage 127:=========================================>           (90 + 26) / 116][Stage 127:===============================================>    (106 + 10) / 116][Stage 127:====================================================>(114 + 2) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.219915865 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (84 + 31) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:===============================================>    (105 + 10) / 115][Stage 128:====================================================>(113 + 2) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:======================================>              (84 + 32) / 116][Stage 129:============================================>        (98 + 18) / 116][Stage 129:================================================>    (107 + 9) / 116][Stage 129:==================================================>  (110 + 6) / 116][Stage 129:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.096439056 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=181", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=181,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410474027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=============================>                       (65 + 50) / 115][Stage 130:=====================================>               (81 + 34) / 115][Stage 130:=============================================>       (99 + 16) / 115][Stage 130:==================================================>  (109 + 6) / 115]                                                                                [Stage 131:================================>                    (72 + 44) / 116][Stage 131:========================================>            (88 + 28) / 116][Stage 131:==============================================>     (103 + 13) / 116][Stage 131:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.820466982 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=171", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=171,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386691681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===========================>                         (58 + 55) / 113][Stage 132:============================>                        (61 + 52) / 113][Stage 132:=================================>                   (72 + 41) / 113][Stage 132:============================================>        (94 + 19) / 113][Stage 132:=================================================>   (106 + 7) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:===========================>                         (60 + 54) / 114][Stage 133:================================>                    (70 + 44) / 114][Stage 133:=======================================>             (86 + 28) / 114][Stage 133:=============================================>       (97 + 17) / 114][Stage 133:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.308869367 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=253,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38089038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=================================>                   (72 + 43) / 115][Stage 134:====================================>                (80 + 35) / 115][Stage 134:==============================================>     (103 + 12) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:================================>                    (71 + 45) / 116][Stage 135:======================================>              (85 + 31) / 116][Stage 135:=============================================>       (99 + 17) / 116][Stage 135:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.77884384 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=80", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=80,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380572176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:>                                                      (0 + 0) / 115][Stage 136:================================>                    (70 + 45) / 115][Stage 136:======================================>              (84 + 31) / 115][Stage 136:=============================================>       (99 + 16) / 115][Stage 136:===================================================> (112 + 3) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:=================================>                   (73 + 43) / 116][Stage 137:========================================>            (89 + 27) / 116][Stage 137:===============================================>    (105 + 11) / 116]                                                                                Time elapsed: 2.719884463 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=229", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=229,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386547398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (58 + 55) / 113][Stage 138:=================================>                   (71 + 42) / 113][Stage 138:======================================>              (83 + 30) / 113][Stage 138:==============================================>     (102 + 11) / 113][Stage 138:====================================================>(111 + 2) / 113]                                                                                [Stage 139:=============================>                       (63 + 51) / 114][Stage 139:=================================>                   (71 + 43) / 114][Stage 139:==========================================>          (91 + 23) / 114][Stage 139:===============================================>    (104 + 10) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.395746013 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=124,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377998977 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (59 + 54) / 113][Stage 140:=================================>                   (71 + 42) / 113][Stage 140:=========================================>           (89 + 24) / 113][Stage 140:=================================================>   (105 + 8) / 113]                                                                                [Stage 141:============================>                        (61 + 53) / 114][Stage 141:===============================>                     (68 + 46) / 114][Stage 141:========================================>            (88 + 26) / 114][Stage 141:=================================================>   (106 + 8) / 114][Stage 141:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.331198136 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=23,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399133363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:==============================>                      (70 + 50) / 120][Stage 142:======================================>              (87 + 33) / 120][Stage 142:=============================================>      (105 + 15) / 120][Stage 142:====================================================>(119 + 1) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:===============================>                     (71 + 50) / 121][Stage 143:=======================================>             (90 + 31) / 121][Stage 143:=================================================>   (112 + 9) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.207962689 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=167,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:============================>                        (64 + 56) / 120][Stage 144:====================================>                (82 + 38) / 120][Stage 144:=============================================>      (106 + 14) / 120]                                                                                [Stage 145:============================>                        (64 + 57) / 121][Stage 145:=================================>                   (77 + 44) / 121][Stage 145:=========================================>           (95 + 26) / 121][Stage 145:=================================================>   (114 + 7) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.316885782 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=42", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=42,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (61 + 59) / 120][Stage 146:============================>                        (65 + 55) / 120][Stage 146:======================================>              (88 + 32) / 120][Stage 146:=================================================>   (113 + 7) / 120]                                                                                [Stage 147:==========================>                          (61 + 60) / 121][Stage 147:============================>                        (65 + 56) / 121][Stage 147:================================>                    (75 + 46) / 121][Stage 147:==========================================>         (100 + 21) / 121][Stage 147:===================================================> (118 + 3) / 121][Stage 147:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.601885161 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392774456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 60) / 120][Stage 148:==============================>                      (69 + 51) / 120][Stage 148:===================================>                 (81 + 39) / 120][Stage 148:=============================================>      (106 + 14) / 120][Stage 148:===================================================> (116 + 4) / 120]                                                                                [Stage 149:============================>                        (64 + 57) / 121][Stage 149:===============================>                     (72 + 49) / 121][Stage 149:=========================================>           (94 + 27) / 121][Stage 149:===================================================> (118 + 3) / 121][Stage 149:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.345790069 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=239,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341542859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:======================================>              (84 + 31) / 115][Stage 150:===========================================>         (95 + 20) / 115][Stage 150:===============================================>    (104 + 11) / 115][Stage 150:====================================================>(113 + 2) / 115]                                                                                [Stage 151:=====================================>               (82 + 34) / 116][Stage 151:==========================================>          (92 + 24) / 116][Stage 151:=============================================>      (102 + 14) / 116][Stage 151:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.741612315 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=66,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=======================================>             (86 + 29) / 115][Stage 152:============================================>        (97 + 18) / 115][Stage 152:=================================================>   (108 + 7) / 115]                                                                                [Stage 153:========================================>            (88 + 28) / 116][Stage 153:============================================>        (98 + 18) / 116][Stage 153:===================================================> (112 + 4) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.864948689 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38483008 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (58 + 55) / 113][Stage 154:=============================>                       (63 + 50) / 113][Stage 154:=====================================>               (80 + 33) / 113][Stage 154:==============================================>     (102 + 11) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:===========================>                         (60 + 54) / 114][Stage 155:=============================>                       (64 + 50) / 114][Stage 155:===================================>                 (77 + 37) / 114][Stage 155:==============================================>     (103 + 11) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.409189672 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=27,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399211779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=============================>                       (62 + 51) / 113][Stage 156:====================================>                (77 + 36) / 113][Stage 156:============================================>        (94 + 19) / 113][Stage 156:===============================================>    (103 + 10) / 113]                                                                                [Stage 157:=============================>                       (63 + 51) / 114][Stage 157:=================================>                   (73 + 41) / 114][Stage 157:==========================================>          (92 + 22) / 114][Stage 157:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.150125962 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=95", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=95,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351326284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===================================>                 (76 + 37) / 113][Stage 158:==========================================>          (91 + 22) / 113][Stage 158:==============================================>      (99 + 14) / 113][Stage 158:==================================================>  (107 + 6) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:====================================>                (78 + 36) / 114][Stage 159:==========================================>          (91 + 23) / 114][Stage 159:==============================================>     (101 + 13) / 114][Stage 159:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.847836593 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=191", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=191,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344755278 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=====================================>               (82 + 33) / 115][Stage 160:=======================================>             (86 + 29) / 115][Stage 160:==============================================>     (102 + 13) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:======================================>              (85 + 31) / 116][Stage 161:============================================>       (100 + 16) / 116][Stage 161:=================================================>   (109 + 7) / 116][Stage 161:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.668718022 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=94,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394459443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==============================>                      (66 + 49) / 115][Stage 162:==================================>                  (75 + 40) / 115][Stage 162:===========================================>         (94 + 21) / 115][Stage 162:===============================================>    (104 + 11) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:=====================================>               (82 + 34) / 116][Stage 163:=========================================>           (91 + 25) / 116][Stage 163:=============================================>      (102 + 14) / 116][Stage 163:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.95681394 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357096063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===================================>                 (75 + 38) / 113][Stage 164:=======================================>             (85 + 28) / 113][Stage 164:=============================================>       (96 + 17) / 113][Stage 164:===================================================> (109 + 4) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:=====================================>               (81 + 33) / 114][Stage 165:===========================================>         (94 + 20) / 114][Stage 165:================================================>    (105 + 9) / 114][Stage 165:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.230604778 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=64", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=64,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339141237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (82 + 33) / 115][Stage 166:========================================>            (87 + 28) / 115][Stage 166:=============================================>       (99 + 16) / 115][Stage 166:====================================================>(113 + 2) / 115]                                                                                [Stage 167:=====================================>               (82 + 34) / 116][Stage 167:========================================>            (89 + 27) / 116][Stage 167:============================================>        (97 + 19) / 116][Stage 167:===================================================> (113 + 3) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.47224457 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=159", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=159,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396663196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:==============================>                      (64 + 49) / 113][Stage 168:=======================================>             (84 + 29) / 113][Stage 168:=============================================>       (98 + 15) / 113][Stage 168:===================================================> (110 + 3) / 113]                                                                                [Stage 169:============================>                        (61 + 53) / 114][Stage 169:===============================>                     (68 + 46) / 114][Stage 169:======================================>              (82 + 32) / 114][Stage 169:=============================================>       (98 + 16) / 114][Stage 169:===================================================> (110 + 4) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.592328057 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=221", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=221,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493877631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (58 + 55) / 113][Stage 170:=============================>                       (63 + 50) / 113][Stage 170:====================================>                (78 + 35) / 113][Stage 170:===============================================>    (103 + 10) / 113]                                                                                [Stage 171:============================>                        (62 + 52) / 114][Stage 171:==================================>                  (75 + 39) / 114][Stage 171:==========================================>          (91 + 23) / 114][Stage 171:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.051433514 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=177", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=177,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352129685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (81 + 32) / 113][Stage 172:=========================================>           (88 + 25) / 113][Stage 172:=============================================>       (97 + 16) / 113][Stage 172:=================================================>   (106 + 7) / 113][Stage 172:====================================================>(111 + 2) / 113]                                                                                [Stage 173:====================================>                (79 + 35) / 114][Stage 173:==========================================>          (91 + 23) / 114][Stage 173:==============================================>      (99 + 15) / 114][Stage 173:==================================================>  (108 + 6) / 114][Stage 173:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.11512583 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=55", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=55,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338641451 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=======================================>             (85 + 30) / 115][Stage 174:==========================================>          (92 + 23) / 115][Stage 174:==================================================>  (110 + 5) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:======================================>              (85 + 31) / 116][Stage 175:==========================================>          (92 + 24) / 116][Stage 175:===============================================>    (105 + 11) / 116][Stage 175:====================================================>(114 + 2) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.770423332 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=129", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=129,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382711096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (66 + 49) / 115][Stage 176:====================================>                (79 + 36) / 115][Stage 176:===========================================>         (94 + 21) / 115][Stage 176:===================================================> (111 + 4) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:====================================>                (79 + 37) / 116][Stage 177:=============================================>      (101 + 15) / 116][Stage 177:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.838583418 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399864315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (58 + 55) / 113][Stage 178:==============================>                      (65 + 48) / 113][Stage 178:=====================================>               (81 + 32) / 113][Stage 178:=================================================>   (106 + 7) / 113]                                                                                [Stage 179:===========================>                         (59 + 55) / 114][Stage 179:=================================>                   (72 + 42) / 114][Stage 179:=========================================>           (89 + 25) / 114][Stage 179:==============================================>     (101 + 13) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.273769791 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379006649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:============================>                        (61 + 52) / 113][Stage 180:==============================>                      (66 + 47) / 113][Stage 180:=======================================>             (84 + 29) / 113][Stage 180:===============================================>    (103 + 10) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:===========================>                         (60 + 54) / 114][Stage 181:==============================>                      (66 + 48) / 114][Stage 181:=====================================>               (80 + 34) / 114][Stage 181:==============================================>      (99 + 15) / 114][Stage 181:==================================================>  (109 + 5) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.56294133 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=10", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=10,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (58 + 55) / 113][Stage 182:============================>                        (61 + 52) / 113][Stage 182:====================================>                (78 + 35) / 113][Stage 182:===============================================>    (103 + 10) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:=================================>                   (71 + 43) / 114][Stage 183:=========================================>           (90 + 24) / 114][Stage 183:================================================>    (105 + 9) / 114][Stage 183:===================================================> (111 + 3) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.515880301 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:=============================>                       (62 + 51) / 113][Stage 184:======================================>              (82 + 31) / 113][Stage 184:==============================================>     (100 + 13) / 113][Stage 184:====================================================>(111 + 2) / 113]                                                                                [Stage 185:===========================>                         (59 + 55) / 114][Stage 185:===============================>                     (67 + 47) / 114][Stage 185:====================================>                (78 + 36) / 114][Stage 185:===============================================>    (104 + 10) / 114][Stage 185:===================================================> (111 + 3) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.348666448 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=28", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=28,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378051219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:==============================>                      (66 + 47) / 113][Stage 186:======================================>              (83 + 30) / 113][Stage 186:==============================================>      (99 + 14) / 113][Stage 186:====================================================>(112 + 1) / 113]                                                                                [Stage 187:===========================>                         (59 + 55) / 114][Stage 187:============================>                        (61 + 53) / 114][Stage 187:====================================>                (78 + 36) / 114][Stage 187:=================================================>   (107 + 7) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.303636389 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=142", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=142,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363221336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (72 + 46) / 118][Stage 188:=================================>                   (74 + 44) / 118][Stage 188:===================================>                 (80 + 38) / 118][Stage 188:========================================>            (90 + 28) / 118][Stage 188:============================================>       (101 + 17) / 118][Stage 188:===================================================> (114 + 4) / 118]                                                                                [Stage 189:================================>                    (73 + 46) / 119][Stage 189:=================================>                   (75 + 44) / 119][Stage 189:==================================>                  (78 + 41) / 119][Stage 189:=======================================>             (89 + 30) / 119][Stage 189:============================================>       (102 + 17) / 119][Stage 189:==================================================>  (114 + 5) / 119][Stage 189:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.046403307 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350139385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===================================>                 (75 + 38) / 113][Stage 190:==========================================>          (91 + 22) / 113][Stage 190:==============================================>     (101 + 12) / 113][Stage 190:==================================================>  (108 + 5) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:=================================>                   (71 + 43) / 114][Stage 191:=======================================>             (86 + 28) / 114][Stage 191:=============================================>      (100 + 14) / 114][Stage 191:=================================================>   (107 + 7) / 114][Stage 191:====================================================>(112 + 2) / 114][Stage 191:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.586822559 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=12", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=12,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401807641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (60 + 60) / 120][Stage 192:============================>                        (65 + 55) / 120][Stage 192:==================================>                  (78 + 42) / 120][Stage 192:===========================================>        (100 + 20) / 120][Stage 192:===================================================> (116 + 4) / 120]                                                                                [Stage 193:==========================>                          (61 + 60) / 121][Stage 193:============================>                        (65 + 56) / 121][Stage 193:=================================>                   (77 + 44) / 121][Stage 193:===========================================>         (99 + 22) / 121][Stage 193:=================================================>   (114 + 7) / 121][Stage 193:===================================================> (118 + 3) / 121][Stage 193:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.636589092 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405668688 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 60) / 120][Stage 194:==============================>                      (69 + 51) / 120][Stage 194:====================================>                (83 + 37) / 120][Stage 194:============================================>       (103 + 17) / 120][Stage 194:==================================================>  (115 + 5) / 120]                                                                                [Stage 195:============================>                        (64 + 57) / 121][Stage 195:=================================>                   (76 + 45) / 121][Stage 195:=========================================>           (94 + 27) / 121][Stage 195:==============================================>     (109 + 12) / 121][Stage 195:====================================================>(119 + 2) / 121][Stage 195:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.971494179 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=58", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=58,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354375232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==================================>                  (74 + 39) / 113][Stage 196:========================================>            (87 + 26) / 113][Stage 196:=============================================>       (96 + 17) / 113][Stage 196:==============================================>     (102 + 11) / 113][Stage 196:====================================================>(111 + 2) / 113]                                                                                [Stage 197:======================================>              (83 + 31) / 114][Stage 197:=========================================>           (90 + 24) / 114][Stage 197:==============================================>     (101 + 13) / 114][Stage 197:================================================>    (105 + 9) / 114][Stage 197:==================================================>  (109 + 5) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.397358215 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=50,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44972809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:>                                                      (0 + 0) / 115][Stage 198:===============================>                     (69 + 46) / 115][Stage 198:=====================================>               (82 + 33) / 115][Stage 198:=============================================>      (100 + 15) / 115][Stage 198:=================================================>   (108 + 7) / 115]                                                                                [Stage 199:===================================>                 (77 + 39) / 116][Stage 199:========================================>            (89 + 27) / 116][Stage 199:==============================================>     (103 + 13) / 116][Stage 199:===================================================> (112 + 4) / 116][Stage 199:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.029370034 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=67,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===================================>                 (76 + 39) / 115][Stage 200:=======================================>             (85 + 30) / 115][Stage 200:=================================================>   (108 + 7) / 115]                                                                                [Stage 201:================================>                    (72 + 44) / 116][Stage 201:============================================>        (98 + 18) / 116][Stage 201:===================================================> (113 + 3) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.652130132 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m21.598s
user	11m37.376s
sys	0m51.108s
