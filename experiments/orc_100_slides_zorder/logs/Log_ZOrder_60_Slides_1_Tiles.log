Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 01:52:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:52:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:52:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 01:52:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:52:47 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601015237-0739).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.339550703 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=====================>                                 (45 + 70) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:============================>                          (60 + 56) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.819875518 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.633438881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================>                                  (43 + 70) / 113][Stage 2:============================>                          (58 + 55) / 113][Stage 2:==================================>                    (71 + 42) / 113][Stage 2:====================================>                  (74 + 39) / 113][Stage 2:========================================>              (83 + 30) / 113][Stage 2:===========================================>           (89 + 24) / 113][Stage 2:==============================================>        (95 + 18) / 113][Stage 2:==================================================>    (104 + 9) / 113][Stage 2:=====================================================> (109 + 4) / 113][Stage 2:=====================================================> (110 + 3) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:==================================>                    (71 + 43) / 114][Stage 3:====================================>                  (75 + 39) / 114][Stage 3:=====================================>                 (77 + 37) / 114][Stage 3:==========================================>            (89 + 25) / 114][Stage 3:===============================================>      (100 + 14) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.014838481 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.661641264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===================>                                   (41 + 72) / 113][Stage 4:=========================>                             (53 + 60) / 113][Stage 4:====================================>                  (74 + 39) / 113][Stage 4:======================================>                (79 + 34) / 113][Stage 4:==========================================>            (87 + 26) / 113][Stage 4:============================================>          (92 + 21) / 113][Stage 4:================================================>     (101 + 12) / 113][Stage 4:===================================================>   (106 + 7) / 113]                                                                                [Stage 5:===============================>                       (65 + 49) / 114][Stage 5:====================================>                  (75 + 39) / 114][Stage 5:======================================>                (79 + 35) / 114][Stage 5:==========================================>            (88 + 26) / 114][Stage 5:=============================================>         (94 + 20) / 114][Stage 5:=================================================>    (104 + 10) / 114][Stage 5:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.392118312 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==================================>                    (70 + 43) / 113][Stage 6:===================================>                   (73 + 40) / 113][Stage 6:====================================>                  (76 + 37) / 113][Stage 6:=======================================>               (81 + 32) / 113][Stage 6:============================================>          (92 + 21) / 113][Stage 6:================================================>      (99 + 14) / 113][Stage 6:=====================================================> (110 + 3) / 113][Stage 6:======================================================>(111 + 2) / 113][Stage 6:======================================================>(112 + 1) / 113]                                                                                [Stage 7:==================================>                    (71 + 43) / 114][Stage 7:=======================================>               (81 + 33) / 114][Stage 7:=========================================>             (87 + 27) / 114][Stage 7:===========================================>           (91 + 23) / 114][Stage 7:==============================================>        (97 + 17) / 114][Stage 7:===============================================>      (100 + 14) / 114][Stage 7:==================================================>    (105 + 9) / 114][Stage 7:=====================================================> (111 + 3) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.135815895 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=126", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=126,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.568872198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===================================>                   (73 + 40) / 113][Stage 8:=======================================>               (82 + 31) / 113][Stage 8:==========================================>            (88 + 25) / 113][Stage 8:=============================================>         (94 + 19) / 113][Stage 8:================================================>     (102 + 11) / 113][Stage 8:===================================================>   (105 + 8) / 113][Stage 8:====================================================>  (108 + 5) / 113]                                                                                [Stage 9:===================================>                   (73 + 41) / 114][Stage 9:========================================>              (84 + 30) / 114][Stage 9:===========================================>           (91 + 23) / 114][Stage 9:===============================================>      (100 + 14) / 114][Stage 9:================================================>     (102 + 12) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:======================================================>(112 + 2) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.382487391 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.609258127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (58 + 62) / 120][Stage 10:=============================>                        (66 + 54) / 120][Stage 10:=================================>                    (75 + 45) / 120][Stage 10:=========================================>            (93 + 27) / 120][Stage 10:===============================================>     (107 + 13) / 120][Stage 10:=====================================================>(119 + 1) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:=============================>                        (67 + 54) / 121][Stage 11:=====================================>                (83 + 38) / 121][Stage 11:==============================================>      (106 + 15) / 121][Stage 11:===================================================>  (116 + 5) / 121][Stage 11:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.980383683 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.534455205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (58 + 55) / 113][Stage 12:================================>                     (67 + 46) / 113][Stage 12:========================================>             (85 + 28) / 113][Stage 12:===============================================>     (102 + 11) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:===========================>                          (59 + 55) / 114][Stage 13:==============================>                       (64 + 50) / 114][Stage 13:====================================>                 (78 + 36) / 114][Stage 13:============================================>         (93 + 21) / 114][Stage 13:==================================================>   (107 + 7) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.717839422 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499370836 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:======================================>               (81 + 34) / 115][Stage 14:=======================================>              (85 + 30) / 115][Stage 14:============================================>         (94 + 21) / 115][Stage 14:==================================================>   (107 + 8) / 115][Stage 14:=====================================================>(113 + 2) / 115]                                                                                [Stage 15:=====================================>                (81 + 35) / 116][Stage 15:=======================================>              (85 + 31) / 116][Stage 15:============================================>         (96 + 20) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.257777205 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505645845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===============================>                      (67 + 48) / 115][Stage 16:======================================>               (81 + 34) / 115][Stage 16:============================================>         (94 + 21) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:================================================>    (105 + 10) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:=================================>                    (73 + 43) / 116][Stage 17:========================================>             (87 + 29) / 116][Stage 17:=================================================>    (107 + 9) / 116][Stage 17:===================================================>  (110 + 6) / 116][Stage 17:====================================================> (112 + 4) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.09144321 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=58", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=58,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483409324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (71 + 42) / 113][Stage 18:=========================================>            (86 + 27) / 113][Stage 18:==============================================>      (100 + 13) / 113][Stage 18:==================================================>   (106 + 7) / 113][Stage 18:====================================================> (109 + 4) / 113][Stage 18:====================================================> (110 + 3) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:====================================>                 (78 + 36) / 114][Stage 19:=========================================>            (87 + 27) / 114][Stage 19:==============================================>       (98 + 16) / 114][Stage 19:==================================================>   (106 + 8) / 114][Stage 19:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.934969254 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=186", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=186,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===================================>                  (74 + 39) / 113][Stage 20:==========================================>           (89 + 24) / 113][Stage 20:==============================================>       (97 + 16) / 113][Stage 20:===================================================>  (107 + 6) / 113][Stage 20:====================================================> (109 + 4) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:======================================>               (81 + 33) / 114][Stage 21:=============================================>        (95 + 19) / 114][Stage 21:==============================================>      (101 + 13) / 114][Stage 21:================================================>    (104 + 10) / 114][Stage 21:===================================================>  (108 + 6) / 114][Stage 21:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.894141388 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=96", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=96,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555281754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (58 + 55) / 113][Stage 22:================================>                     (68 + 45) / 113][Stage 22:========================================>             (84 + 29) / 113][Stage 22:===============================================>     (102 + 11) / 113][Stage 22:====================================================> (110 + 3) / 113]                                                                                [Stage 23:===========================>                          (57 + 57) / 114][Stage 23:===============================>                      (67 + 47) / 114][Stage 23:=====================================>                (79 + 35) / 114][Stage 23:==============================================>       (99 + 15) / 114][Stage 23:================================================>    (104 + 10) / 114][Stage 23:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.634742057 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482265587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (71 + 42) / 113][Stage 24:=======================================>              (82 + 31) / 113][Stage 24:============================================>         (94 + 19) / 113][Stage 24:===============================================>     (101 + 12) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:======================================>               (81 + 33) / 114][Stage 25:=============================================>        (96 + 18) / 114][Stage 25:==================================================>   (106 + 8) / 114][Stage 25:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.960895783 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.567130048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:==============================>                       (64 + 49) / 113][Stage 26:======================================>               (80 + 33) / 113][Stage 26:============================================>         (93 + 20) / 113][Stage 26:==================================================>   (105 + 8) / 113]                                                                                [Stage 27:===========================>                          (58 + 56) / 114][Stage 27:============================>                         (61 + 53) / 114][Stage 27:===================================>                  (75 + 39) / 114][Stage 27:==============================================>       (98 + 16) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.265432634 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486635302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===================================>                  (74 + 39) / 113][Stage 28:========================================>             (85 + 28) / 113][Stage 28:=============================================>        (96 + 17) / 113][Stage 28:===================================================>  (108 + 5) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:===================================>                  (75 + 39) / 114][Stage 29:=========================================>            (87 + 27) / 114][Stage 29:==============================================>      (101 + 13) / 114][Stage 29:====================================================> (111 + 3) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.051159653 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=125", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=125,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419888912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:======================================>               (81 + 34) / 115][Stage 30:========================================>             (87 + 28) / 115][Stage 30:=============================================>        (97 + 18) / 115][Stage 30:=====================================================>(113 + 2) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:========================================>             (88 + 28) / 116][Stage 31:==============================================>      (102 + 14) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.76690523 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=114", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=114,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49306731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (64 + 51) / 115][Stage 32:===================================>                  (75 + 40) / 115][Stage 32:===========================================>          (93 + 22) / 115][Stage 32:===============================================>     (103 + 12) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:==================================>                   (74 + 42) / 116][Stage 33:==========================================>           (91 + 25) / 116][Stage 33:==============================================>      (102 + 14) / 116][Stage 33:===================================================>  (110 + 6) / 116][Stage 33:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.229582782 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403235539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (82 + 33) / 115][Stage 34:============================================>         (95 + 20) / 115][Stage 34:==================================================>   (107 + 8) / 115][Stage 34:=====================================================>(113 + 2) / 115]                                                                                [Stage 35:=======================================>              (85 + 31) / 116][Stage 35:=============================================>        (97 + 19) / 116][Stage 35:================================================>    (106 + 10) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.221562439 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=155", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=155,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406797755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (82 + 33) / 115][Stage 36:==========================================>           (90 + 25) / 115][Stage 36:===============================================>     (102 + 13) / 115][Stage 36:==================================================>   (108 + 7) / 115][Stage 36:=====================================================>(113 + 2) / 115]                                                                                [Stage 37:=======================================>              (84 + 32) / 116][Stage 37:============================================>         (96 + 20) / 116][Stage 37:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.932952177 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490528507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:============================>                         (64 + 56) / 120][Stage 38:===================================>                  (78 + 42) / 120][Stage 38:===========================================>          (97 + 23) / 120][Stage 38:====================================================> (117 + 3) / 120]                                                                                [Stage 39:=============================>                        (66 + 55) / 121][Stage 39:====================================>                 (81 + 40) / 121][Stage 39:=============================================>       (103 + 18) / 121][Stage 39:===================================================>  (115 + 6) / 121][Stage 39:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.208164806 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=57", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=57,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408025695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (83 + 32) / 115][Stage 40:========================================>             (87 + 28) / 115][Stage 40:==============================================>      (100 + 15) / 115][Stage 40:==================================================>   (108 + 7) / 115]                                                                                [Stage 41:=======================================>              (84 + 32) / 116][Stage 41:===========================================>          (94 + 22) / 116][Stage 41:==============================================>      (102 + 14) / 116][Stage 41:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.948300998 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438853072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (79 + 36) / 115][Stage 42:======================================>               (81 + 34) / 115][Stage 42:===========================================>          (92 + 23) / 115][Stage 42:===============================================>     (103 + 12) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:===================================================>  (110 + 5) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:======================================>               (83 + 33) / 116][Stage 43:==========================================>           (92 + 24) / 116][Stage 43:====================================================> (112 + 4) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.352810651 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452713722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (71 + 44) / 115][Stage 44:======================================>               (82 + 33) / 115][Stage 44:==============================================>      (101 + 14) / 115][Stage 44:==================================================>   (107 + 8) / 115][Stage 44:==================================================>   (108 + 7) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:================================>                     (70 + 46) / 116][Stage 45:========================================>             (86 + 30) / 116][Stage 45:================================================>    (106 + 10) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:====================================================> (112 + 4) / 116][Stage 45:=====================================================>(114 + 2) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.842068176 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498112613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:===============================>                      (69 + 51) / 120][Stage 46:=====================================>                (84 + 36) / 120][Stage 46:===================================================>  (114 + 6) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:==============================>                       (69 + 52) / 121][Stage 47:====================================>                 (82 + 39) / 121][Stage 47:==============================================>      (106 + 15) / 121][Stage 47:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.149407494 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.519924961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:==============================>                       (67 + 53) / 120][Stage 48:======================================>               (85 + 35) / 120][Stage 48:==============================================>      (105 + 15) / 120][Stage 48:====================================================> (116 + 4) / 120]                                                                                [Stage 49:=============================>                        (65 + 56) / 121][Stage 49:====================================>                 (81 + 40) / 121][Stage 49:===========================================>          (97 + 24) / 121][Stage 49:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.161525114 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=133", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=133,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494102605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (58 + 55) / 113][Stage 50:=============================>                        (61 + 52) / 113][Stage 50:======================================>               (80 + 33) / 113][Stage 50:==============================================>       (97 + 16) / 113][Stage 50:====================================================> (110 + 3) / 113]                                                                                [Stage 51:=============================>                        (62 + 52) / 114][Stage 51:====================================>                 (77 + 37) / 114][Stage 51:==============================================>      (100 + 14) / 114][Stage 51:===================================================>  (109 + 5) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.203030787 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373572742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (81 + 34) / 115][Stage 52:=======================================>              (84 + 31) / 115][Stage 52:==============================================>      (101 + 14) / 115][Stage 52:===================================================>  (109 + 6) / 115]                                                                                [Stage 53:=======================================>              (84 + 32) / 116][Stage 53:=============================================>       (100 + 16) / 116][Stage 53:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.579952424 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458553976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (60 + 60) / 120][Stage 54:=============================>                        (66 + 54) / 120][Stage 54:==========================================>           (94 + 26) / 120][Stage 54:================================================>    (110 + 10) / 120]                                                                                [Stage 55:===========================>                          (62 + 59) / 121][Stage 55:================================>                     (72 + 49) / 121][Stage 55:========================================>             (91 + 30) / 121][Stage 55:==================================================>   (113 + 8) / 121][Stage 55:=====================================================>(119 + 2) / 121][Stage 55:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.304280927 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43453969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:=================================>                    (74 + 44) / 118][Stage 56:======================================>               (84 + 34) / 118][Stage 56:===========================================>          (96 + 22) / 118][Stage 56:===================================================>  (113 + 5) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:==================================>                   (75 + 44) / 119][Stage 57:===================================>                  (79 + 40) / 119][Stage 57:=========================================>            (91 + 28) / 119][Stage 57:=================================================>    (110 + 9) / 119][Stage 57:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.563933875 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45664342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:============================>                         (63 + 57) / 120][Stage 58:=================================>                    (74 + 46) / 120][Stage 58:=============================================>       (102 + 18) / 120]                                                                                [Stage 59:============================>                         (63 + 58) / 121][Stage 59:=================================>                    (76 + 45) / 121][Stage 59:=========================================>            (93 + 28) / 121][Stage 59:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 2.936205437 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426524263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===============================>                      (67 + 48) / 115][Stage 60:======================================>               (81 + 34) / 115][Stage 60:===============================================>     (102 + 13) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:=================================>                    (73 + 43) / 116][Stage 61:========================================>             (88 + 28) / 116][Stage 61:===============================================>     (103 + 13) / 116][Stage 61:====================================================> (113 + 3) / 116][Stage 61:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.120953824 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409234812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (70 + 45) / 115][Stage 62:======================================>               (81 + 34) / 115][Stage 62:===============================================>     (102 + 13) / 115]                                                                                [Stage 63:==================================>                   (74 + 42) / 116][Stage 63:========================================>             (86 + 30) / 116][Stage 63:================================================>    (106 + 10) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.732360479 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432662269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:================================>                     (67 + 46) / 113][Stage 64:=========================================>            (87 + 26) / 113][Stage 64:====================================================> (110 + 3) / 113]                                                                                [Stage 65:=============================>                        (63 + 51) / 114][Stage 65:===================================>                  (74 + 40) / 114][Stage 65:==============================================>       (98 + 16) / 114][Stage 65:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.982863741 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=101", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=101,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412788065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=================================>                    (72 + 43) / 115][Stage 66:======================================>               (83 + 32) / 115][Stage 66:==============================================>       (99 + 16) / 115][Stage 66:=====================================================>(113 + 2) / 115]                                                                                [Stage 67:===============================>                      (67 + 49) / 116][Stage 67:=====================================>                (81 + 35) / 116][Stage 67:=========================================>            (89 + 27) / 116][Stage 67:==============================================>      (102 + 14) / 116][Stage 67:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.847514592 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437664269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (60 + 60) / 120][Stage 68:=============================>                        (65 + 55) / 120][Stage 68:====================================>                 (82 + 38) / 120][Stage 68:===========================================>          (97 + 23) / 120][Stage 68:=================================================>    (111 + 9) / 120][Stage 68:=====================================================>(119 + 1) / 120]                                                                                [Stage 69:===========================>                          (61 + 60) / 121][Stage 69:==============================>                       (69 + 52) / 121][Stage 69:=======================================>              (88 + 33) / 121][Stage 69:===========================================>          (98 + 23) / 121][Stage 69:===================================================>  (116 + 5) / 121][Stage 69:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.478384705 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=245", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=245,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440781182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (61 + 59) / 120][Stage 70:==============================>                       (68 + 52) / 120][Stage 70:=======================================>              (87 + 33) / 120][Stage 70:================================================>    (109 + 11) / 120][Stage 70:==================================================>   (113 + 7) / 120]                                                                                [Stage 71:=============================>                        (67 + 54) / 121][Stage 71:=====================================>                (84 + 37) / 121][Stage 71:=============================================>       (103 + 18) / 121][Stage 71:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.110527792 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (60 + 60) / 120][Stage 72:=============================>                        (65 + 55) / 120][Stage 72:=====================================>                (84 + 36) / 120][Stage 72:=============================================>       (104 + 16) / 120][Stage 72:====================================================> (116 + 4) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:===============================>                      (70 + 51) / 121][Stage 73:==========================================>           (95 + 26) / 121][Stage 73:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.106046889 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (60 + 60) / 120][Stage 74:=============================>                        (65 + 55) / 120][Stage 74:====================================>                 (82 + 38) / 120][Stage 74:==============================================>      (105 + 15) / 120]                                                                                [Stage 75:===========================>                          (61 + 60) / 121][Stage 75:=============================>                        (67 + 54) / 121][Stage 75:====================================>                 (82 + 39) / 121][Stage 75:=============================================>       (105 + 16) / 121][Stage 75:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.982784365 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=104", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=104,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433872919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:>                                                       (0 + 0) / 120][Stage 76:===========================>                          (60 + 60) / 120][Stage 76:=============================>                        (65 + 55) / 120][Stage 76:========================================>             (90 + 30) / 120][Stage 76:================================================>    (110 + 10) / 120][Stage 76:=====================================================>(119 + 1) / 120]                                                                                [Stage 77:============================>                         (63 + 58) / 121][Stage 77:=================================>                    (74 + 47) / 121][Stage 77:=======================================>              (89 + 32) / 121][Stage 77:===================================================>  (115 + 6) / 121][Stage 77:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.231183365 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417397132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (69 + 46) / 115][Stage 78:=======================================>              (85 + 30) / 115][Stage 78:==============================================>       (99 + 16) / 115][Stage 78:=================================================>    (106 + 9) / 115][Stage 78:====================================================> (112 + 3) / 115]                                                                                [Stage 79:==================================>                   (75 + 41) / 116][Stage 79:=======================================>              (84 + 32) / 116][Stage 79:===========================================>          (93 + 23) / 116][Stage 79:===============================================>     (103 + 13) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.126379874 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380598044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=====================================>                (80 + 35) / 115][Stage 80:=======================================>              (85 + 30) / 115][Stage 80:==============================================>       (99 + 16) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:========================================>             (88 + 28) / 116][Stage 81:=============================================>       (100 + 16) / 116][Stage 81:================================================>    (106 + 10) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.297260937 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386950933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (80 + 33) / 113][Stage 82:===========================================>          (92 + 21) / 113][Stage 82:=================================================>    (104 + 9) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:========================================>             (85 + 29) / 114][Stage 83:============================================>         (93 + 21) / 114][Stage 83:==================================================>   (107 + 7) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.109366769 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40255795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:>                                                       (0 + 0) / 118][Stage 84:================================>                     (72 + 46) / 118][Stage 84:===================================>                  (77 + 41) / 118][Stage 84:===========================================>          (95 + 23) / 118][Stage 84:================================================>    (107 + 11) / 118]                                                                                [Stage 85:=================================>                    (74 + 45) / 119][Stage 85:=====================================>                (82 + 37) / 119][Stage 85:============================================>         (98 + 21) / 119][Stage 85:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.007427555 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:=====================================>                (81 + 37) / 118][Stage 86:=============================================>        (99 + 19) / 118][Stage 86:=====================================================>(116 + 2) / 118]                                                                                [Stage 87:=================================>                    (73 + 46) / 119][Stage 87:===================================>                  (79 + 40) / 119][Stage 87:============================================>        (100 + 19) / 119][Stage 87:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.920989363 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=160", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=160,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424484795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:==============================>                       (63 + 50) / 113][Stage 88:====================================>                 (77 + 36) / 113][Stage 88:==============================================>       (98 + 15) / 113][Stage 88:====================================================> (109 + 4) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:===============================>                      (67 + 47) / 114][Stage 89:======================================>               (81 + 33) / 114][Stage 89:==============================================>      (101 + 13) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.188220808 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=243", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=243,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363305066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:====================================>                 (77 + 36) / 113][Stage 90:==========================================>           (88 + 25) / 113][Stage 90:===============================================>     (101 + 12) / 113][Stage 90:===================================================>  (107 + 6) / 113]                                                                                [Stage 91:====================================>                 (77 + 37) / 114][Stage 91:==========================================>           (90 + 24) / 114][Stage 91:===============================================>     (102 + 12) / 114][Stage 91:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.842374012 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=86", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=86,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421563876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (61 + 59) / 120][Stage 92:===============================>                      (70 + 50) / 120][Stage 92:========================================>             (90 + 30) / 120][Stage 92:===================================================>  (115 + 5) / 120][Stage 92:=====================================================>(119 + 1) / 120]                                                                                [Stage 93:===========================>                          (61 + 60) / 121][Stage 93:==============================>                       (68 + 53) / 121][Stage 93:========================================>             (90 + 31) / 121][Stage 93:==================================================>   (113 + 8) / 121][Stage 93:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.058178998 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=250", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=250,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400786488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:=================================>                    (71 + 42) / 113][Stage 94:========================================>             (84 + 29) / 113][Stage 94:===================================================>  (107 + 6) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:=============================>                        (63 + 51) / 114][Stage 95:===================================>                  (75 + 39) / 114][Stage 95:===========================================>          (92 + 22) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.100159329 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=82", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=82,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:============================>                         (59 + 54) / 113][Stage 96:=============================>                        (61 + 52) / 113][Stage 96:===================================>                  (74 + 39) / 113][Stage 96:===========================================>          (92 + 21) / 113][Stage 96:==================================================>   (105 + 8) / 113]                                                                                [Stage 97:============================>                         (60 + 54) / 114][Stage 97:====================================>                 (76 + 38) / 114][Stage 97:===========================================>          (92 + 22) / 114][Stage 97:==================================================>   (106 + 8) / 114][Stage 97:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.121495137 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401555127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:============================>                         (59 + 54) / 113][Stage 98:===============================>                      (65 + 48) / 113][Stage 98:========================================>             (85 + 28) / 113][Stage 98:=================================================>    (104 + 9) / 113]                                                                                [Stage 99:============================>                         (60 + 54) / 114][Stage 99:==================================>                   (72 + 42) / 114][Stage 99:==========================================>           (90 + 24) / 114][Stage 99:=================================================>    (105 + 9) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.050082901 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=162", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=162,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416214599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:===============================>                     (72 + 48) / 120][Stage 100:=====================================>               (86 + 34) / 120][Stage 100:=============================================>      (105 + 15) / 120][Stage 100:===================================================> (117 + 3) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:================================>                    (74 + 47) / 121][Stage 101:=====================================>               (86 + 35) / 121][Stage 101:==============================================>     (108 + 13) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.387431426 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364978161 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==================================>                  (73 + 40) / 113][Stage 102:=======================================>             (85 + 28) / 113][Stage 102:==============================================>     (100 + 13) / 113][Stage 102:==================================================>  (107 + 6) / 113][Stage 102:====================================================>(111 + 2) / 113]                                                                                [Stage 103:==================================>                  (75 + 39) / 114][Stage 103:=========================================>           (89 + 25) / 114][Stage 103:==============================================>     (102 + 12) / 114][Stage 103:==================================================>  (108 + 6) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.265965018 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401375899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:==================================>                  (75 + 40) / 115][Stage 104:===========================================>         (94 + 21) / 115][Stage 104:===============================================>    (105 + 10) / 115][Stage 104:===================================================> (112 + 3) / 115]                                                                                [Stage 105:=================================>                   (73 + 43) / 116][Stage 105:==========================================>          (93 + 23) / 116][Stage 105:================================================>    (107 + 9) / 116][Stage 105:====================================================>(114 + 2) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.545512148 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=12", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=12,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393433797 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:================================>                    (73 + 45) / 118][Stage 106:===================================>                 (80 + 38) / 118][Stage 106:===========================================>         (97 + 21) / 118][Stage 106:==============================================>     (105 + 13) / 118][Stage 106:===================================================> (115 + 3) / 118]                                                                                [Stage 107:================================>                    (74 + 45) / 119][Stage 107:==================================>                  (77 + 42) / 119][Stage 107:=======================================>             (88 + 31) / 119][Stage 107:==============================================>     (106 + 13) / 119][Stage 107:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.400919986 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343792647 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (82 + 33) / 115][Stage 108:===========================================>         (94 + 21) / 115][Stage 108:===============================================>    (105 + 10) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=======================================>             (87 + 29) / 116][Stage 109:===========================================>         (96 + 20) / 116][Stage 109:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.871466677 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=91", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=91,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365067072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=================================>                   (72 + 41) / 113][Stage 110:=========================================>           (89 + 24) / 113][Stage 110:=============================================>       (97 + 16) / 113][Stage 110:=================================================>   (105 + 8) / 113][Stage 110:===================================================> (110 + 3) / 113]                                                                                [Stage 111:===================================>                 (76 + 38) / 114][Stage 111:=========================================>           (89 + 25) / 114][Stage 111:==============================================>     (103 + 11) / 114][Stage 111:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.046025526 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=252", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=252,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340652748 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:======================================>              (83 + 32) / 115][Stage 112:============================================>        (96 + 19) / 115][Stage 112:===================================================> (111 + 4) / 115]                                                                                [Stage 113:======================================>              (85 + 31) / 116][Stage 113:=========================================>           (91 + 25) / 116][Stage 113:================================================>    (107 + 9) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.610590011 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377632609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:=================================>                   (75 + 43) / 118][Stage 114:=======================================>             (88 + 30) / 118][Stage 114:==============================================>     (105 + 13) / 118][Stage 114:==================================================>  (113 + 5) / 118]                                                                                [Stage 115:================================>                    (74 + 45) / 119][Stage 115:==================================>                  (78 + 41) / 119][Stage 115:=========================================>           (94 + 25) / 119][Stage 115:==============================================>     (106 + 13) / 119]                                                                                Time elapsed: 3.132769819 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373329446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:=================================>                   (75 + 43) / 118][Stage 116:=====================================>               (83 + 35) / 118][Stage 116:============================================>        (99 + 19) / 118][Stage 116:===================================================> (114 + 4) / 118]                                                                                [Stage 117:================================>                    (73 + 46) / 119][Stage 117:===================================>                 (79 + 40) / 119][Stage 117:=========================================>           (94 + 25) / 119][Stage 117:==============================================>     (107 + 12) / 119][Stage 117:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.216403574 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411085989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (58 + 55) / 113][Stage 118:==============================>                      (66 + 47) / 113][Stage 118:=======================================>             (84 + 29) / 113][Stage 118:==============================================>     (102 + 11) / 113][Stage 118:====================================================>(111 + 2) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:===========================>                         (60 + 54) / 114][Stage 119:=======================================>             (85 + 29) / 114][Stage 119:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.857391822 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=49", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=49,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417463179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (60 + 60) / 120][Stage 120:==================================>                  (77 + 43) / 120][Stage 120:=========================================>           (94 + 26) / 120][Stage 120:=================================================>   (113 + 7) / 120]                                                                                [Stage 121:==========================>                          (61 + 60) / 121][Stage 121:============================>                        (65 + 56) / 121][Stage 121:=================================>                   (76 + 45) / 121][Stage 121:=============================================>      (106 + 15) / 121]                                                                                Time elapsed: 2.869590186 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394287682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (73 + 42) / 115][Stage 122:==========================================>          (93 + 22) / 115][Stage 122:================================================>    (106 + 9) / 115][Stage 122:====================================================>(113 + 2) / 115]                                                                                [Stage 123:===============================>                     (69 + 47) / 116][Stage 123:=======================================>             (86 + 30) / 116][Stage 123:=============================================>       (99 + 17) / 116][Stage 123:===================================================> (113 + 3) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.80895383 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=248", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=248,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3942482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:=======================================>             (87 + 31) / 118][Stage 124:==================================================>  (112 + 6) / 118][Stage 124:====================================================>(117 + 1) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:=====================================>               (84 + 35) / 119][Stage 125:=============================================>      (103 + 16) / 119][Stage 125:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.994246666 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=80", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=80,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397793815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:================================>                    (71 + 44) / 115][Stage 126:====================================>                (80 + 35) / 115][Stage 126:=============================================>      (101 + 14) / 115][Stage 126:==================================================>  (109 + 6) / 115][Stage 126:==================================================>  (110 + 5) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:================================>                    (71 + 45) / 116][Stage 127:=====================================>               (83 + 33) / 116][Stage 127:============================================>       (100 + 16) / 116][Stage 127:=================================================>   (109 + 7) / 116][Stage 127:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.274142863 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368126187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:================================>                    (72 + 46) / 118][Stage 128:===================================>                 (79 + 39) / 118][Stage 128:=========================================>           (92 + 26) / 118][Stage 128:=============================================>      (104 + 14) / 118]                                                                                [Stage 129:================================>                    (73 + 46) / 119][Stage 129:==================================>                  (78 + 41) / 119][Stage 129:======================================>              (86 + 33) / 119][Stage 129:============================================>        (99 + 20) / 119][Stage 129:===============================================>    (109 + 10) / 119][Stage 129:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.299844369 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=77", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=77,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490769766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (72 + 46) / 118][Stage 130:===================================>                 (78 + 40) / 118][Stage 130:========================================>            (91 + 27) / 118][Stage 130:==============================================>     (106 + 12) / 118][Stage 130:====================================================>(116 + 2) / 118]                                                                                [Stage 131:================================>                    (73 + 46) / 119][Stage 131:==================================>                  (78 + 41) / 119][Stage 131:=======================================>             (88 + 31) / 119][Stage 131:===========================================>         (98 + 21) / 119][Stage 131:===============================================>    (109 + 10) / 119][Stage 131:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.350277654 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=203", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=203,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368403424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:===================================>                 (79 + 39) / 118][Stage 132:=======================================>             (87 + 31) / 118][Stage 132:===========================================>         (97 + 21) / 118][Stage 132:==================================================>  (112 + 6) / 118][Stage 132:====================================================>(117 + 1) / 118]                                                                                [Stage 133:================================>                    (73 + 46) / 119][Stage 133:==================================>                  (77 + 42) / 119][Stage 133:===================================>                 (79 + 40) / 119][Stage 133:========================================>            (92 + 27) / 119][Stage 133:============================================>       (102 + 17) / 119][Stage 133:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.512255045 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=102", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=102,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335735302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (80 + 35) / 115][Stage 134:======================================>              (84 + 31) / 115][Stage 134:==========================================>          (92 + 23) / 115][Stage 134:================================================>    (106 + 9) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:=====================================>               (82 + 34) / 116][Stage 135:=========================================>           (90 + 26) / 116][Stage 135:==============================================>     (104 + 12) / 116][Stage 135:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.810617035 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=225", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=225,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349407127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (80 + 33) / 113][Stage 136:==========================================>          (90 + 23) / 113][Stage 136:=============================================>       (97 + 16) / 113][Stage 136:==================================================>  (108 + 5) / 113]                                                                                [Stage 137:=====================================>               (80 + 34) / 114][Stage 137:=============================================>       (98 + 16) / 114][Stage 137:================================================>    (105 + 9) / 114][Stage 137:==================================================>  (109 + 5) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.000245005 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364528398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (72 + 46) / 118][Stage 138:=================================>                   (75 + 43) / 118][Stage 138:=======================================>             (87 + 31) / 118][Stage 138:==============================================>     (105 + 13) / 118][Stage 138:==================================================>  (113 + 5) / 118]                                                                                [Stage 139:================================>                    (74 + 45) / 119][Stage 139:=====================================>               (85 + 34) / 119][Stage 139:============================================>       (102 + 17) / 119][Stage 139:==================================================>  (114 + 5) / 119][Stage 139:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.253204741 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=55", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=55,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510217425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:============================>                        (60 + 53) / 113][Stage 140:=================================>                   (72 + 41) / 113][Stage 140:==========================================>          (91 + 22) / 113][Stage 140:===================================================> (110 + 3) / 113]                                                                                [Stage 141:============================>                        (62 + 52) / 114][Stage 141:===================================>                 (77 + 37) / 114][Stage 141:===========================================>         (94 + 20) / 114][Stage 141:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.063215035 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=171", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=171,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33700556 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=====================================>               (81 + 34) / 115][Stage 142:=======================================>             (86 + 29) / 115][Stage 142:=============================================>       (99 + 16) / 115][Stage 142:==================================================>  (110 + 5) / 115]                                                                                [Stage 143:========================================>            (88 + 28) / 116][Stage 143:==============================================>     (104 + 12) / 116][Stage 143:==================================================>  (110 + 6) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.752907589 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371977528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:==================================>                  (76 + 42) / 118][Stage 144:=======================================>             (87 + 31) / 118][Stage 144:==================================================>  (112 + 6) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:=====================================>               (85 + 34) / 119][Stage 145:===========================================>         (98 + 21) / 119][Stage 145:==============================================>     (107 + 12) / 119][Stage 145:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.940037822 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39761013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:============================>                        (64 + 56) / 120][Stage 146:=================================>                   (76 + 44) / 120][Stage 146:============================================>       (102 + 18) / 120][Stage 146:==================================================>  (115 + 5) / 120]                                                                                [Stage 147:===========================>                         (63 + 58) / 121][Stage 147:=================================>                   (76 + 45) / 121][Stage 147:==========================================>          (96 + 25) / 121][Stage 147:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.02741153 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364863969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==================================>                  (74 + 39) / 113][Stage 148:=======================================>             (85 + 28) / 113][Stage 148:============================================>        (95 + 18) / 113][Stage 148:==============================================>     (102 + 11) / 113]                                                                                [Stage 149:=====================================>               (81 + 33) / 114][Stage 149:========================================>            (88 + 26) / 114][Stage 149:============================================>        (95 + 19) / 114][Stage 149:================================================>    (105 + 9) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.929028516 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=22", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=22,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==================================>                  (74 + 39) / 113][Stage 150:========================================>            (86 + 27) / 113][Stage 150:=============================================>       (96 + 17) / 113][Stage 150:=================================================>   (106 + 7) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:==================================>                  (74 + 40) / 114][Stage 151:======================================>              (83 + 31) / 114][Stage 151:===========================================>         (93 + 21) / 114][Stage 151:===============================================>    (104 + 10) / 114][Stage 151:====================================================>(112 + 2) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.440584614 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371739498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=================================>                   (75 + 43) / 118][Stage 152:======================================>              (85 + 33) / 118][Stage 152:===========================================>         (96 + 22) / 118][Stage 152:================================================>    (109 + 9) / 118]                                                                                [Stage 153:================================>                    (74 + 45) / 119][Stage 153:====================================>                (82 + 37) / 119][Stage 153:===========================================>         (97 + 22) / 119][Stage 153:=============================================>      (104 + 15) / 119][Stage 153:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.280342958 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=79", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=79,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337560391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=======================================>             (85 + 30) / 115][Stage 154:==========================================>          (93 + 22) / 115][Stage 154:==================================================>  (109 + 6) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:=====================================>               (81 + 35) / 116][Stage 155:========================================>            (88 + 28) / 116][Stage 155:===============================================>    (106 + 10) / 116][Stage 155:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.612611555 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384885858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:=============================>                       (62 + 51) / 113][Stage 156:===================================>                 (76 + 37) / 113][Stage 156:===========================================>         (93 + 20) / 113][Stage 156:==================================================>  (108 + 5) / 113]                                                                                [Stage 157:============================>                        (61 + 53) / 114][Stage 157:=================================>                   (71 + 43) / 114][Stage 157:=======================================>             (86 + 28) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.196924599 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=220", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=220,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357633404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (73 + 45) / 118][Stage 158:==================================>                  (77 + 41) / 118][Stage 158:=======================================>             (88 + 30) / 118][Stage 158:============================================>       (101 + 17) / 118][Stage 158:==================================================>  (112 + 6) / 118]                                                                                [Stage 159:================================>                    (74 + 45) / 119][Stage 159:==================================>                  (77 + 42) / 119][Stage 159:===================================>                 (80 + 39) / 119][Stage 159:========================================>            (90 + 29) / 119][Stage 159:===============================================>    (109 + 10) / 119][Stage 159:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.459514165 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=23", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=23,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372602494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (73 + 45) / 118][Stage 160:===================================>                 (78 + 40) / 118][Stage 160:==========================================>          (95 + 23) / 118][Stage 160:===============================================>    (108 + 10) / 118][Stage 160:====================================================>(116 + 2) / 118][Stage 160:====================================================>(117 + 1) / 118]                                                                                [Stage 161:================================>                    (74 + 45) / 119][Stage 161:===================================>                 (80 + 39) / 119][Stage 161:=======================================>             (89 + 30) / 119][Stage 161:=============================================>      (104 + 15) / 119][Stage 161:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.230430201 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=135", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=135,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335024991 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=====================================>               (82 + 33) / 115][Stage 162:=========================================>           (89 + 26) / 115][Stage 162:=============================================>       (98 + 17) / 115][Stage 162:================================================>    (106 + 9) / 115][Stage 162:====================================================>(113 + 2) / 115]                                                                                [Stage 163:======================================>              (84 + 32) / 116][Stage 163:=========================================>           (91 + 25) / 116][Stage 163:================================================>    (107 + 9) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.823361147 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351201806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=====================================>               (80 + 33) / 113][Stage 164:=========================================>           (88 + 25) / 113][Stage 164:==============================================>      (99 + 14) / 113][Stage 164:====================================================>(111 + 2) / 113]                                                                                [Stage 165:=================================>                   (72 + 42) / 114][Stage 165:=======================================>             (85 + 29) / 114][Stage 165:=============================================>       (98 + 16) / 114][Stage 165:==============================================>     (103 + 11) / 114][Stage 165:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.974320075 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=152", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=152,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376357405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (71 + 44) / 115][Stage 166:=====================================>               (81 + 34) / 115][Stage 166:=========================================>           (91 + 24) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:===============================>                     (70 + 46) / 116][Stage 167:========================================>            (89 + 27) / 116][Stage 167:=============================================>      (101 + 15) / 116][Stage 167:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.080450367 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401248583 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 59) / 120][Stage 168:==============================>                      (69 + 51) / 120][Stage 168:=======================================>             (89 + 31) / 120][Stage 168:===============================================>    (110 + 10) / 120]                                                                                [Stage 169:==========================>                          (61 + 60) / 121][Stage 169:===============================>                     (72 + 49) / 121][Stage 169:========================================>            (92 + 29) / 121][Stage 169:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.93866863 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364539485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (72 + 46) / 118][Stage 170:===================================>                 (78 + 40) / 118][Stage 170:==========================================>          (94 + 24) / 118][Stage 170:============================================>        (98 + 20) / 118][Stage 170:================================================>    (109 + 9) / 118]                                                                                [Stage 171:================================>                    (73 + 46) / 119][Stage 171:===================================>                 (80 + 39) / 119][Stage 171:==========================================>          (95 + 24) / 119][Stage 171:===============================================>    (108 + 11) / 119][Stage 171:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.282177416 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513062532 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (58 + 55) / 113][Stage 172:=============================>                       (62 + 51) / 113][Stage 172:===================================>                 (76 + 37) / 113][Stage 172:=========================================>           (89 + 24) / 113][Stage 172:===============================================>    (103 + 10) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:================================>                    (69 + 45) / 114][Stage 173:======================================>              (83 + 31) / 114][Stage 173:=============================================>      (100 + 14) / 114][Stage 173:====================================================>(112 + 2) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.363476344 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360619401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:==================================>                  (77 + 41) / 118][Stage 174:=====================================>               (83 + 35) / 118][Stage 174:==========================================>          (94 + 24) / 118][Stage 174:=============================================>      (104 + 14) / 118][Stage 174:===================================================> (115 + 3) / 118]                                                                                [Stage 175:================================>                    (74 + 45) / 119][Stage 175:==================================>                  (78 + 41) / 119][Stage 175:======================================>              (87 + 32) / 119][Stage 175:============================================>       (102 + 17) / 119][Stage 175:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.601272577 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=149", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=149,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377354118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:==================================>                  (76 + 42) / 118][Stage 176:======================================>              (86 + 32) / 118][Stage 176:===========================================>         (96 + 22) / 118][Stage 176:=============================================>      (104 + 14) / 118]                                                                                [Stage 177:================================>                    (73 + 46) / 119][Stage 177:===================================>                 (80 + 39) / 119][Stage 177:========================================>            (90 + 29) / 119][Stage 177:==============================================>     (106 + 13) / 119][Stage 177:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.341360857 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=249", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=249,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382781342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:============================>                        (60 + 53) / 113][Stage 178:=====================================>               (81 + 32) / 113][Stage 178:=================================================>   (106 + 7) / 113]                                                                                [Stage 179:===========================>                         (60 + 54) / 114][Stage 179:=================================>                   (71 + 43) / 114][Stage 179:========================================>            (88 + 26) / 114][Stage 179:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 2.932202231 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=21", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=21,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (59 + 54) / 113][Stage 180:==============================>                      (66 + 47) / 113][Stage 180:=======================================>             (84 + 29) / 113][Stage 180:==============================================>     (101 + 12) / 113]                                                                                [Stage 181:===========================>                         (60 + 54) / 114][Stage 181:================================>                    (70 + 44) / 114][Stage 181:============================================>        (95 + 19) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.800909911 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=169", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=169,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367835147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===================================>                 (76 + 37) / 113][Stage 182:=======================================>             (84 + 29) / 113][Stage 182:============================================>        (94 + 19) / 113][Stage 182:==================================================>  (107 + 6) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:=====================================>               (80 + 34) / 114][Stage 183:=========================================>           (89 + 25) / 114][Stage 183:==============================================>      (99 + 15) / 114][Stage 183:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.059029239 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386218132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=================================>                   (73 + 42) / 115][Stage 184:========================================>            (88 + 27) / 115][Stage 184:=============================================>       (99 + 16) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:===============================>                     (70 + 46) / 116][Stage 185:======================================>              (84 + 32) / 116][Stage 185:============================================>        (97 + 19) / 116][Stage 185:=================================================>   (108 + 8) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.897264975 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=87", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=87,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392008817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (63 + 57) / 120][Stage 186:================================>                    (74 + 46) / 120][Stage 186:=======================================>             (90 + 30) / 120][Stage 186:===================================================> (116 + 4) / 120]                                                                                [Stage 187:============================>                        (64 + 57) / 121][Stage 187:=================================>                   (76 + 45) / 121][Stage 187:======================================>              (88 + 33) / 121][Stage 187:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.003629863 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (63 + 57) / 120][Stage 188:====================================>                (83 + 37) / 120][Stage 188:===========================================>        (100 + 20) / 120][Stage 188:====================================================>(118 + 2) / 120]                                                                                [Stage 189:==========================>                          (61 + 60) / 121][Stage 189:===============================>                     (71 + 50) / 121][Stage 189:======================================>              (88 + 33) / 121][Stage 189:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 2.784463689 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345728895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (79 + 34) / 113][Stage 190:=========================================>           (89 + 24) / 113][Stage 190:==============================================>     (101 + 12) / 113][Stage 190:==================================================>  (107 + 6) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:===================================>                 (76 + 38) / 114][Stage 191:======================================>              (83 + 31) / 114][Stage 191:=============================================>       (98 + 16) / 114][Stage 191:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.926510086 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=219", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=219,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420152624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:================================>                    (69 + 44) / 113][Stage 192:========================================>            (86 + 27) / 113][Stage 192:=================================================>   (105 + 8) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:============================>                        (62 + 52) / 114][Stage 193:==================================>                  (74 + 40) / 114][Stage 193:============================================>        (95 + 19) / 114][Stage 193:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.188092463 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=238", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=238,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364633479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:=================================>                   (74 + 44) / 118][Stage 194:=======================================>             (88 + 30) / 118][Stage 194:================================================>    (109 + 9) / 118][Stage 194:===================================================> (114 + 4) / 118]                                                                                [Stage 195:================================>                    (74 + 45) / 119][Stage 195:=====================================>               (85 + 34) / 119][Stage 195:============================================>        (99 + 20) / 119][Stage 195:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.911963564 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337408729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:======================================>              (83 + 32) / 115][Stage 196:==========================================>          (92 + 23) / 115][Stage 196:===============================================>    (105 + 10) / 115][Stage 196:==================================================>  (110 + 5) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:=======================================>             (86 + 30) / 116][Stage 197:=============================================>       (99 + 17) / 116][Stage 197:=================================================>   (109 + 7) / 116][Stage 197:====================================================>(114 + 2) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.271825102 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=60", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=60,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:======================================>              (83 + 32) / 115][Stage 198:==========================================>          (92 + 23) / 115][Stage 198:==============================================>     (102 + 13) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:======================================>              (84 + 32) / 116][Stage 199:==========================================>          (94 + 22) / 116][Stage 199:==============================================>     (103 + 13) / 116][Stage 199:====================================================>(114 + 2) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.900272196 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=188", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=188,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333575907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (82 + 33) / 115][Stage 200:==========================================>          (92 + 23) / 115][Stage 200:=================================================>   (108 + 7) / 115][Stage 200:===================================================> (111 + 4) / 115]                                                                                [Stage 201:======================================>              (85 + 31) / 116][Stage 201:============================================>        (97 + 19) / 116][Stage 201:=================================================>   (109 + 7) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.799319085 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 02:02:09 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:48844) dropped. RpcEnv already stopped.
17/06/01 02:02:09 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:48844) dropped. RpcEnv already stopped.

real	9m51.987s
user	11m21.216s
sys	0m26.736s
