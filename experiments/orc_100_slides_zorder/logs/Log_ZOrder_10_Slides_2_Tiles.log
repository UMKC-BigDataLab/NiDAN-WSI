Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 22:32:13 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:32:27 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:32:27 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:32:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 22:32:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:32:40 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531223229-0720).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.440180406 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (1 + 113) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 13.074148421 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.71304885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================>                                  (44 + 74) / 118][Stage 2:=================================>                     (71 + 47) / 118][Stage 2:==================================>                    (73 + 45) / 118][Stage 2:===================================>                   (77 + 41) / 118][Stage 2:====================================>                  (79 + 39) / 118][Stage 2:=======================================>               (84 + 34) / 118][Stage 2:===========================================>           (94 + 24) / 118][Stage 2:================================================>     (105 + 13) / 118][Stage 2:====================================================>  (113 + 5) / 118]                                                                                [Stage 3:=================================>                     (72 + 47) / 119][Stage 3:==================================>                    (74 + 45) / 119][Stage 3:====================================>                  (80 + 39) / 119][Stage 3:========================================>              (87 + 32) / 119][Stage 3:==========================================>            (91 + 28) / 119][Stage 3:==============================================>       (102 + 17) / 119][Stage 3:=====================================================> (115 + 4) / 119][Stage 3:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.091039571 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.710206677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:>                                                        (0 + 0) / 120][Stage 4:===========================>                           (59 + 61) / 120][Stage 4:===========================>                           (60 + 60) / 120][Stage 4:============================>                          (63 + 57) / 120][Stage 4:================================>                      (70 + 50) / 120][Stage 4:====================================>                  (79 + 41) / 120][Stage 4:=========================================>             (90 + 30) / 120][Stage 4:===============================================>      (106 + 14) / 120][Stage 4:=====================================================> (117 + 3) / 120]                                                                                [Stage 5:===========================>                           (61 + 60) / 121][Stage 5:==============================>                        (66 + 55) / 121][Stage 5:=================================>                     (73 + 48) / 121][Stage 5:=======================================>               (86 + 35) / 121][Stage 5:==========================================>            (94 + 27) / 121][Stage 5:====================================================>  (115 + 6) / 121]                                                                                Time elapsed: 4.264058906 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (59 + 61) / 120][Stage 6:============================>                          (63 + 57) / 120][Stage 6:===================================>                   (77 + 43) / 120][Stage 6:==========================================>            (93 + 27) / 120][Stage 6:=============================================>        (102 + 18) / 120][Stage 6:=================================================>    (110 + 10) / 120][Stage 6:======================================================>(119 + 1) / 120]                                                                                [Stage 7:===========================>                           (60 + 61) / 121][Stage 7:=============================>                         (64 + 57) / 121][Stage 7:===============================>                       (70 + 51) / 121][Stage 7:=====================================>                 (83 + 38) / 121][Stage 7:==============================================>       (104 + 17) / 121][Stage 7:=====================================================> (117 + 4) / 121][Stage 7:======================================================>(119 + 2) / 121][Stage 7:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.499132154 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539716781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==================================>                    (71 + 42) / 113][Stage 8:=======================================>               (82 + 31) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:===============================================>       (97 + 16) / 113][Stage 8:================================================>     (101 + 12) / 113][Stage 8:====================================================>  (108 + 5) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:==================================>                    (71 + 43) / 114][Stage 9:========================================>              (83 + 31) / 114][Stage 9:==========================================>            (89 + 25) / 114][Stage 9:===============================================>      (100 + 14) / 114][Stage 9:===================================================>   (107 + 7) / 114][Stage 9:======================================================>(112 + 2) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.099363526 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (71 + 42) / 113][Stage 10:=========================================>            (86 + 27) / 113][Stage 10:==============================================>       (97 + 16) / 113][Stage 10:===============================================>     (102 + 11) / 113][Stage 10:====================================================> (109 + 4) / 113][Stage 10:====================================================> (110 + 3) / 113]                                                                                [Stage 11:=================================>                    (71 + 43) / 114][Stage 11:=======================================>              (83 + 31) / 114][Stage 11:==========================================>           (90 + 24) / 114][Stage 11:============================================>         (94 + 20) / 114][Stage 11:==============================================>      (101 + 13) / 114][Stage 11:===================================================>  (108 + 6) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.266809978 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.611905747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (59 + 61) / 120][Stage 12:===========================>                          (62 + 58) / 120][Stage 12:=================================>                    (74 + 46) / 120][Stage 12:=========================================>            (93 + 27) / 120][Stage 12:===============================================>     (107 + 13) / 120][Stage 12:====================================================> (116 + 4) / 120][Stage 12:=====================================================>(119 + 1) / 120]                                                                                [Stage 13:==========================>                           (59 + 62) / 121][Stage 13:=============================>                        (66 + 55) / 121][Stage 13:====================================>                 (81 + 40) / 121][Stage 13:=========================================>            (92 + 29) / 121][Stage 13:==============================================>      (106 + 15) / 121][Stage 13:==================================================>   (113 + 8) / 121][Stage 13:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.016924386 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454836099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:=======================================>              (85 + 30) / 115][Stage 14:=============================================>        (96 + 19) / 115][Stage 14:===================================================>  (109 + 6) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:======================================>               (82 + 34) / 116][Stage 15:============================================>         (95 + 21) / 116][Stage 15:================================================>    (106 + 10) / 116][Stage 15:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.14450559 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=90,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.601745474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:===========================>                          (61 + 59) / 120][Stage 16:==============================>                       (68 + 52) / 120][Stage 16:=========================================>            (92 + 28) / 120][Stage 16:==================================================>   (113 + 7) / 120][Stage 16:=====================================================>(118 + 2) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:================================>                     (73 + 48) / 121][Stage 17:==========================================>           (96 + 25) / 121][Stage 17:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.399714053 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:============================>                         (63 + 57) / 120][Stage 18:=================================>                    (75 + 45) / 120][Stage 18:===========================================>          (97 + 23) / 120][Stage 18:==============================================>      (106 + 14) / 120][Stage 18:=====================================================>(119 + 1) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:==============================>                       (69 + 52) / 121][Stage 19:====================================>                 (81 + 40) / 121][Stage 19:=============================================>       (104 + 17) / 121][Stage 19:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.434052247 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=111", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=111,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.545724691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:=============================>                        (65 + 55) / 120][Stage 20:===================================>                  (79 + 41) / 120][Stage 20:==========================================>           (94 + 26) / 120][Stage 20:===============================================>     (107 + 13) / 120][Stage 20:===================================================>  (114 + 6) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:==============================>                       (69 + 52) / 121][Stage 21:========================================>             (91 + 30) / 121][Stage 21:==================================================>   (113 + 8) / 121][Stage 21:=====================================================>(119 + 2) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.719287545 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498704324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=================================>                    (70 + 43) / 113][Stage 22:======================================>               (80 + 33) / 113][Stage 22:=============================================>        (96 + 17) / 113][Stage 22:===================================================>  (108 + 5) / 113]                                                                                [Stage 23:====================================>                 (76 + 38) / 114][Stage 23:=========================================>            (87 + 27) / 114][Stage 23:=============================================>        (96 + 18) / 114][Stage 23:===================================================>  (109 + 5) / 114][Stage 23:====================================================> (111 + 3) / 114][Stage 23:=====================================================>(112 + 2) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.343675101 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==================================>                   (72 + 41) / 113][Stage 24:===========================================>          (90 + 23) / 113][Stage 24:===============================================>     (101 + 12) / 113][Stage 24:==================================================>   (106 + 7) / 113][Stage 24:=====================================================>(111 + 2) / 113]                                                                                [Stage 25:===================================>                  (74 + 40) / 114][Stage 25:========================================>             (85 + 29) / 114][Stage 25:============================================>         (94 + 20) / 114][Stage 25:===============================================>     (102 + 12) / 114][Stage 25:===================================================>  (109 + 5) / 114][Stage 25:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.694609417 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.537188662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:======================================>               (83 + 32) / 115][Stage 26:==========================================>           (90 + 25) / 115][Stage 26:=================================================>    (106 + 9) / 115][Stage 26:====================================================> (111 + 4) / 115][Stage 26:====================================================> (112 + 3) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:======================================>               (82 + 34) / 116][Stage 27:============================================>         (96 + 20) / 116][Stage 27:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.027467465 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472324293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (81 + 34) / 115][Stage 28:=========================================>            (88 + 27) / 115][Stage 28:===============================================>     (102 + 13) / 115][Stage 28:===================================================>  (110 + 5) / 115][Stage 28:====================================================> (112 + 3) / 115]                                                                                [Stage 29:========================================>             (86 + 30) / 116][Stage 29:===============================================>     (105 + 11) / 116][Stage 29:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.095783784 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521971776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:============================>                         (63 + 57) / 120][Stage 30:===================================>                  (79 + 41) / 120][Stage 30:============================================>         (99 + 21) / 120][Stage 30:===================================================>  (114 + 6) / 120][Stage 30:====================================================> (116 + 4) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:==================================>                   (78 + 43) / 121][Stage 31:===========================================>          (98 + 23) / 121][Stage 31:===============================================>     (109 + 12) / 121][Stage 31:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.607849029 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.537858051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (60 + 60) / 120][Stage 32:===========================>                          (62 + 58) / 120][Stage 32:==============================>                       (67 + 53) / 120][Stage 32:========================================>             (90 + 30) / 120][Stage 32:==================================================>   (112 + 8) / 120]                                                                                [Stage 33:============================>                         (63 + 58) / 121][Stage 33:===============================>                      (71 + 50) / 121][Stage 33:=======================================>              (89 + 32) / 121][Stage 33:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.110316771 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556675431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (72 + 46) / 118][Stage 34:==================================>                   (75 + 43) / 118][Stage 34:======================================>               (84 + 34) / 118][Stage 34:=============================================>       (101 + 17) / 118][Stage 34:===================================================>  (112 + 6) / 118][Stage 34:=====================================================>(116 + 2) / 118]                                                                                [Stage 35:=================================>                    (73 + 46) / 119][Stage 35:====================================>                 (80 + 39) / 119][Stage 35:==========================================>           (94 + 25) / 119][Stage 35:==============================================>      (104 + 15) / 119][Stage 35:=====================================================>(117 + 2) / 119][Stage 35:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.550680714 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468119526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (71 + 44) / 115][Stage 36:========================================>             (86 + 29) / 115][Stage 36:==============================================>       (99 + 16) / 115][Stage 36:=================================================>    (106 + 9) / 115]                                                                                [Stage 37:=================================>                    (71 + 45) / 116][Stage 37:==========================================>           (91 + 25) / 116][Stage 37:===============================================>     (104 + 12) / 116][Stage 37:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.959619045 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432189905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==================================>                   (73 + 40) / 113][Stage 38:========================================>             (85 + 28) / 113][Stage 38:============================================>         (93 + 20) / 113][Stage 38:=================================================>    (104 + 9) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:====================================>                 (76 + 38) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:===============================================>     (102 + 12) / 114][Stage 39:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.858459289 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471112453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:============================>                         (59 + 54) / 113][Stage 40:==============================>                       (64 + 49) / 113][Stage 40:=====================================>                (78 + 35) / 113][Stage 40:===============================================>     (102 + 11) / 113][Stage 40:====================================================> (109 + 4) / 113][Stage 40:=====================================================>(112 + 1) / 113]                                                                                [Stage 41:============================>                         (60 + 54) / 114][Stage 41:===============================>                      (66 + 48) / 114][Stage 41:======================================>               (82 + 32) / 114][Stage 41:==============================================>       (98 + 16) / 114][Stage 41:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.240267635 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446468565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===================================>                  (74 + 39) / 113][Stage 42:==========================================>           (88 + 25) / 113][Stage 42:==============================================>       (98 + 15) / 113][Stage 42:===================================================>  (108 + 5) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:==================================>                   (72 + 42) / 114][Stage 43:=========================================>            (87 + 27) / 114][Stage 43:==============================================>       (99 + 15) / 114][Stage 43:==================================================>   (106 + 8) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.017728344 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=233,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475201425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (73 + 45) / 118][Stage 44:===================================>                  (78 + 40) / 118][Stage 44:==========================================>           (93 + 25) / 118][Stage 44:=============================================>       (102 + 16) / 118][Stage 44:===================================================>  (113 + 5) / 118]                                                                                [Stage 45:=================================>                    (73 + 46) / 119][Stage 45:====================================>                 (81 + 38) / 119][Stage 45:========================================>             (90 + 29) / 119][Stage 45:==============================================>      (105 + 14) / 119][Stage 45:====================================================> (116 + 3) / 119][Stage 45:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.509888471 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=209", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=209,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406859365 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:======================================>               (83 + 32) / 115][Stage 46:==============================================>       (98 + 17) / 115][Stage 46:===================================================>  (109 + 6) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:=======================================>              (84 + 32) / 116][Stage 47:========================================>             (88 + 28) / 116][Stage 47:===============================================>     (104 + 12) / 116][Stage 47:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.738688236 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487018613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:================================>                     (67 + 46) / 113][Stage 48:===========================================>          (90 + 23) / 113][Stage 48:================================================>    (103 + 10) / 113][Stage 48:===================================================>  (107 + 6) / 113]                                                                                [Stage 49:============================>                         (61 + 53) / 114][Stage 49:====================================>                 (76 + 38) / 114][Stage 49:=============================================>        (97 + 17) / 114][Stage 49:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.226339133 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497359671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (59 + 54) / 113][Stage 50:=================================>                    (70 + 43) / 113][Stage 50:========================================>             (85 + 28) / 113][Stage 50:==============================================>       (98 + 15) / 113]                                                                                [Stage 51:============================>                         (61 + 53) / 114][Stage 51:================================>                     (69 + 45) / 114][Stage 51:===========================================>          (91 + 23) / 114][Stage 51:=================================================>    (105 + 9) / 114][Stage 51:====================================================> (110 + 4) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.495535663 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432293505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=================================>                    (74 + 44) / 118][Stage 52:======================================>               (85 + 33) / 118][Stage 52:============================================>         (98 + 20) / 118][Stage 52:================================================>    (107 + 11) / 118]                                                                                [Stage 53:==================================>                   (75 + 44) / 119][Stage 53:====================================>                 (80 + 39) / 119][Stage 53:==========================================>           (93 + 26) / 119][Stage 53:===============================================>     (107 + 12) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.292289302 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461774757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (60 + 60) / 120][Stage 54:===============================>                      (70 + 50) / 120][Stage 54:========================================>             (91 + 29) / 120][Stage 54:==================================================>   (113 + 7) / 120]                                                                                [Stage 55:============================>                         (63 + 58) / 121][Stage 55:=================================>                    (74 + 47) / 121][Stage 55:==========================================>           (96 + 25) / 121][Stage 55:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.020893377 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44605788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:>                                                       (0 + 0) / 113][Stage 56:===========================>                          (58 + 55) / 113][Stage 56:=============================>                        (62 + 51) / 113][Stage 56:=====================================>                (79 + 34) / 113][Stage 56:==============================================>      (100 + 13) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:============================>                         (60 + 54) / 114][Stage 57:================================>                     (69 + 45) / 114][Stage 57:======================================>               (81 + 33) / 114][Stage 57:==============================================>       (99 + 15) / 114][Stage 57:==================================================>   (106 + 8) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.273673539 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=252,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=============================>                        (62 + 51) / 113][Stage 58:==================================>                   (73 + 40) / 113][Stage 58:============================================>         (93 + 20) / 113][Stage 58:==================================================>   (106 + 7) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:===========================>                          (59 + 55) / 114][Stage 59:=============================>                        (63 + 51) / 114][Stage 59:========================================>             (86 + 28) / 114][Stage 59:================================================>    (104 + 10) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.188203813 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422515498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===================================>                  (74 + 39) / 113][Stage 60:========================================>             (85 + 28) / 113][Stage 60:===============================================>     (101 + 12) / 113][Stage 60:===================================================>  (107 + 6) / 113]                                                                                [Stage 61:====================================>                 (77 + 37) / 114][Stage 61:==========================================>           (90 + 24) / 114][Stage 61:=================================================>    (105 + 9) / 114][Stage 61:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.928263279 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489822522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (60 + 60) / 120][Stage 62:==============================>                       (68 + 52) / 120][Stage 62:==========================================>           (94 + 26) / 120][Stage 62:==================================================>   (113 + 7) / 120][Stage 62:=====================================================>(118 + 2) / 120]                                                                                [Stage 63:===========================>                          (61 + 60) / 121][Stage 63:==============================>                       (69 + 52) / 121][Stage 63:======================================>               (86 + 35) / 121][Stage 63:==============================================>      (106 + 15) / 121][Stage 63:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.239418754 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418622887 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (74 + 41) / 115][Stage 64:==========================================>           (91 + 24) / 115][Stage 64:===============================================>     (102 + 13) / 115][Stage 64:=================================================>    (106 + 9) / 115][Stage 64:===================================================>  (110 + 5) / 115]                                                                                [Stage 65:=================================>                    (72 + 44) / 116][Stage 65:==========================================>           (92 + 24) / 116][Stage 65:===============================================>     (104 + 12) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.168242519 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384029898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (72 + 41) / 113][Stage 66:=========================================>            (86 + 27) / 113][Stage 66:============================================>         (93 + 20) / 113][Stage 66:===============================================>     (101 + 12) / 113][Stage 66:===================================================>  (108 + 5) / 113][Stage 66:=====================================================>(111 + 2) / 113]                                                                                [Stage 67:======================================>               (82 + 32) / 114][Stage 67:============================================>         (93 + 21) / 114][Stage 67:===============================================>     (103 + 11) / 114][Stage 67:===================================================>  (109 + 5) / 114][Stage 67:=====================================================>(112 + 2) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.076407214 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=171,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===================================>                  (75 + 38) / 113][Stage 68:==========================================>           (89 + 24) / 113][Stage 68:===============================================>     (101 + 12) / 113][Stage 68:==================================================>   (106 + 7) / 113][Stage 68:=====================================================>(111 + 2) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:======================================>               (82 + 32) / 114][Stage 69:=============================================>        (95 + 19) / 114][Stage 69:=================================================>    (105 + 9) / 114][Stage 69:====================================================> (111 + 3) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.38248164 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364044445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (82 + 33) / 115][Stage 70:==========================================>           (90 + 25) / 115][Stage 70:=================================================>    (106 + 9) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:=====================================>                (81 + 35) / 116][Stage 71:==========================================>           (91 + 25) / 116][Stage 71:===============================================>     (103 + 13) / 116]                                                                                Time elapsed: 2.605464058 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=====================================>                (79 + 36) / 115][Stage 72:=======================================>              (84 + 31) / 115][Stage 72:==============================================>       (98 + 17) / 115][Stage 72:====================================================> (112 + 3) / 115][Stage 72:=====================================================>(113 + 2) / 115]                                                                                [Stage 73:=====================================>                (81 + 35) / 116][Stage 73:=======================================>              (85 + 31) / 116][Stage 73:==============================================>       (99 + 17) / 116][Stage 73:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.808224952 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412421648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===============================>                      (67 + 48) / 115][Stage 74:========================================>             (87 + 28) / 115][Stage 74:=============================================>        (96 + 19) / 115][Stage 74:===============================================>     (103 + 12) / 115][Stage 74:====================================================> (112 + 3) / 115]                                                                                [Stage 75:=================================>                    (73 + 43) / 116][Stage 75:========================================>             (86 + 30) / 116][Stage 75:==============================================>       (99 + 17) / 116][Stage 75:===================================================>  (111 + 5) / 116][Stage 75:====================================================> (113 + 3) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.745269095 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391470354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:======================================>               (80 + 33) / 113][Stage 76:============================================>         (93 + 20) / 113][Stage 76:===============================================>     (102 + 11) / 113][Stage 76:===================================================>  (108 + 5) / 113]                                                                                [Stage 77:====================================>                 (78 + 36) / 114][Stage 77:=============================================>        (97 + 17) / 114][Stage 77:==================================================>   (106 + 8) / 114][Stage 77:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.915408904 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428748982 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (69 + 46) / 115][Stage 78:======================================>               (81 + 34) / 115][Stage 78:===========================================>          (92 + 23) / 115][Stage 78:================================================>    (105 + 10) / 115]                                                                                [Stage 79:==================================>                   (74 + 42) / 116][Stage 79:=========================================>            (89 + 27) / 116][Stage 79:=============================================>        (98 + 18) / 116][Stage 79:===================================================>  (111 + 5) / 116][Stage 79:====================================================> (113 + 3) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.63406585 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436253593 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (60 + 60) / 120][Stage 80:===========================>                          (61 + 59) / 120][Stage 80:===============================>                      (71 + 49) / 120][Stage 80:========================================>             (91 + 29) / 120][Stage 80:================================================>    (109 + 11) / 120][Stage 80:===================================================>  (114 + 6) / 120][Stage 80:====================================================> (117 + 3) / 120]                                                                                [Stage 81:============================>                         (64 + 57) / 121][Stage 81:=================================>                    (75 + 46) / 121][Stage 81:==========================================>           (95 + 26) / 121][Stage 81:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.572789046 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391116473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (73 + 45) / 118][Stage 82:=====================================>                (82 + 36) / 118][Stage 82:==========================================>           (92 + 26) / 118][Stage 82:================================================>    (107 + 11) / 118][Stage 82:====================================================> (115 + 3) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:=================================>                    (73 + 46) / 119][Stage 83:===================================>                  (79 + 40) / 119][Stage 83:========================================>             (89 + 30) / 119][Stage 83:=============================================>       (102 + 17) / 119][Stage 83:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.40259287 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428782723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:============================>                         (59 + 54) / 113][Stage 84:===============================>                      (66 + 47) / 113][Stage 84:========================================>             (84 + 29) / 113][Stage 84:==============================================>      (100 + 13) / 113][Stage 84:====================================================> (110 + 3) / 113]                                                                                [Stage 85:============================>                         (61 + 53) / 114][Stage 85:================================>                     (68 + 46) / 114][Stage 85:=======================================>              (83 + 31) / 114][Stage 85:===============================================>     (102 + 12) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.289107802 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=163", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=163,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392604084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==================================>                   (73 + 40) / 113][Stage 86:========================================>             (84 + 29) / 113][Stage 86:===========================================>          (92 + 21) / 113][Stage 86:===============================================>     (102 + 11) / 113][Stage 86:====================================================> (109 + 4) / 113]                                                                                [Stage 87:=====================================>                (80 + 34) / 114][Stage 87:===========================================>          (91 + 23) / 114][Stage 87:=================================================>    (105 + 9) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.075078684 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=226", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=226,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414951097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===================================>                  (75 + 40) / 115][Stage 88:===========================================>          (92 + 23) / 115][Stage 88:==================================================>   (108 + 7) / 115][Stage 88:=====================================================>(113 + 2) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:===============================>                      (67 + 49) / 116][Stage 89:====================================>                 (78 + 38) / 116][Stage 89:==============================================>      (101 + 15) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.959264319 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=120", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=120,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409665244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (58 + 55) / 113][Stage 90:=============================>                        (62 + 51) / 113][Stage 90:=======================================>              (82 + 31) / 113][Stage 90:==============================================>       (97 + 16) / 113][Stage 90:=====================================================>(111 + 2) / 113]                                                                                [Stage 91:===============================>                      (66 + 48) / 114][Stage 91:====================================>                 (78 + 36) / 114][Stage 91:=============================================>        (97 + 17) / 114]                                                                                Time elapsed: 2.961395068 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369854942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (80 + 33) / 113][Stage 92:============================================>         (93 + 20) / 113][Stage 92:==============================================>       (97 + 16) / 113][Stage 92:==================================================>   (106 + 7) / 113][Stage 92:===================================================>  (107 + 6) / 113][Stage 92:====================================================> (110 + 3) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:=====================================>                (79 + 35) / 114][Stage 93:===========================================>          (91 + 23) / 114][Stage 93:==============================================>      (101 + 13) / 114][Stage 93:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.470616227 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428143265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 59) / 120][Stage 94:===============================>                      (70 + 50) / 120][Stage 94:=======================================>              (87 + 33) / 120][Stage 94:==================================================>   (112 + 8) / 120][Stage 94:====================================================> (116 + 4) / 120]                                                                                [Stage 95:============================>                         (63 + 58) / 121][Stage 95:=================================>                    (76 + 45) / 121][Stage 95:===========================================>         (100 + 21) / 121][Stage 95:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.174625256 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404760681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (58 + 55) / 113][Stage 96:===============================>                      (65 + 48) / 113][Stage 96:===================================>                  (75 + 38) / 113][Stage 96:===============================================>      (99 + 14) / 113][Stage 96:====================================================> (110 + 3) / 113]                                                                                [Stage 97:============================>                         (60 + 54) / 114][Stage 97:===============================>                      (67 + 47) / 114][Stage 97:============================================>         (94 + 20) / 114][Stage 97:===================================================>  (109 + 5) / 114][Stage 97:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.433690138 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=142", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=142,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387567572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==============================>                       (65 + 50) / 115][Stage 98:======================================>               (83 + 32) / 115][Stage 98:=============================================>        (97 + 18) / 115][Stage 98:===================================================>  (110 + 5) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:================================>                     (70 + 46) / 116][Stage 99:========================================>             (88 + 28) / 116][Stage 99:============================================>         (96 + 20) / 116][Stage 99:==================================================>   (109 + 7) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.971722729 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357701293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:====================================>                (79 + 36) / 115][Stage 100:========================================>            (88 + 27) / 115][Stage 100:===============================================>    (105 + 10) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:========================================>            (88 + 28) / 116][Stage 101:=============================================>      (102 + 14) / 116][Stage 101:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.625878027 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424212882 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (59 + 54) / 113][Stage 102:=============================>                       (62 + 51) / 113][Stage 102:======================================>              (82 + 31) / 113][Stage 102:===============================================>    (103 + 10) / 113][Stage 102:====================================================>(112 + 1) / 113]                                                                                [Stage 103:===========================>                         (60 + 54) / 114][Stage 103:==============================>                      (66 + 48) / 114][Stage 103:========================================>            (87 + 27) / 114][Stage 103:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 2.980780429 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352494128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:====================================>                (79 + 36) / 115][Stage 104:=======================================>             (85 + 30) / 115][Stage 104:=============================================>      (101 + 14) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:=====================================>               (81 + 35) / 116][Stage 105:========================================>            (89 + 27) / 116][Stage 105:=============================================>      (102 + 14) / 116][Stage 105:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.556269164 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421835577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (59 + 54) / 113][Stage 106:==============================>                      (64 + 49) / 113][Stage 106:=======================================>             (85 + 28) / 113][Stage 106:==============================================>      (99 + 14) / 113][Stage 106:===================================================> (110 + 3) / 113]                                                                                [Stage 107:===========================>                         (59 + 55) / 114][Stage 107:==============================>                      (66 + 48) / 114][Stage 107:======================================>              (83 + 31) / 114][Stage 107:============================================>        (96 + 18) / 114][Stage 107:==================================================>  (108 + 6) / 114][Stage 107:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.333577372 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=128", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=128,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405505009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:============================>                        (60 + 53) / 113][Stage 108:=================================>                   (72 + 41) / 113][Stage 108:==========================================>          (91 + 22) / 113][Stage 108:==============================================>     (102 + 11) / 113]                                                                                [Stage 109:=============================>                       (63 + 51) / 114][Stage 109:=================================>                   (73 + 41) / 114][Stage 109:============================================>        (96 + 18) / 114][Stage 109:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.007641292 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380267587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:=================================>                   (75 + 43) / 118][Stage 110:=====================================>               (84 + 34) / 118][Stage 110:==========================================>          (95 + 23) / 118][Stage 110:==================================================>  (113 + 5) / 118]                                                                                [Stage 111:=================================>                   (75 + 44) / 119][Stage 111:======================================>              (87 + 32) / 119][Stage 111:============================================>       (101 + 18) / 119][Stage 111:=================================================>   (112 + 7) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.258577349 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359426311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===================================>                 (76 + 37) / 113][Stage 112:==========================================>          (91 + 22) / 113][Stage 112:==============================================>     (102 + 11) / 113][Stage 112:===================================================> (109 + 4) / 113]                                                                                [Stage 113:=====================================>               (80 + 34) / 114][Stage 113:=============================================>       (97 + 17) / 114][Stage 113:==============================================>     (102 + 12) / 114][Stage 113:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.884163994 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376086807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:====================================>                (82 + 36) / 118][Stage 114:==========================================>          (95 + 23) / 118][Stage 114:==================================================>  (113 + 5) / 118][Stage 114:====================================================>(117 + 1) / 118]                                                                                [Stage 115:================================>                    (73 + 46) / 119][Stage 115:==================================>                  (78 + 41) / 119][Stage 115:=========================================>           (93 + 26) / 119][Stage 115:=============================================>      (105 + 14) / 119][Stage 115:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.536285565 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369229579 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (71 + 42) / 113][Stage 116:======================================>              (83 + 30) / 113][Stage 116:===========================================>         (93 + 20) / 113][Stage 116:==============================================>     (102 + 11) / 113][Stage 116:====================================================>(111 + 2) / 113]                                                                                [Stage 117:=======================================>             (85 + 29) / 114][Stage 117:============================================>        (96 + 18) / 114][Stage 117:=================================================>   (106 + 8) / 114][Stage 117:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.970304371 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428247138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 60) / 120][Stage 118:=============================>                       (66 + 54) / 120][Stage 118:====================================>                (82 + 38) / 120][Stage 118:==============================================>     (107 + 13) / 120][Stage 118:===================================================> (117 + 3) / 120]                                                                                [Stage 119:==========================>                          (61 + 60) / 121][Stage 119:=============================>                       (67 + 54) / 121][Stage 119:======================================>              (87 + 34) / 121][Stage 119:===============================================>    (110 + 11) / 121][Stage 119:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.132885126 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422465671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (60 + 60) / 120][Stage 120:============================>                        (65 + 55) / 120][Stage 120:===================================>                 (81 + 39) / 120][Stage 120:==============================================>     (108 + 12) / 120][Stage 120:====================================================>(119 + 1) / 120]                                                                                [Stage 121:==========================>                          (61 + 60) / 121][Stage 121:============================>                        (65 + 56) / 121][Stage 121:==================================>                  (78 + 43) / 121][Stage 121:===============================================>    (110 + 11) / 121][Stage 121:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.003920917 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395311475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (59 + 54) / 113][Stage 122:================================>                    (70 + 43) / 113][Stage 122:=============================================>       (96 + 17) / 113][Stage 122:===================================================> (110 + 3) / 113]                                                                                [Stage 123:=============================>                       (63 + 51) / 114][Stage 123:=================================>                   (72 + 42) / 114][Stage 123:==========================================>          (92 + 22) / 114][Stage 123:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.102299641 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380686271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=================================>                   (74 + 44) / 118][Stage 124:====================================>                (82 + 36) / 118][Stage 124:============================================>       (102 + 16) / 118][Stage 124:=================================================>   (110 + 8) / 118][Stage 124:===================================================> (115 + 3) / 118][Stage 124:====================================================>(117 + 1) / 118]                                                                                [Stage 125:=================================>                   (75 + 44) / 119][Stage 125:=====================================>               (85 + 34) / 119][Stage 125:==============================================>     (106 + 13) / 119][Stage 125:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.430934942 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=27", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=27,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379517865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=============================>                       (65 + 50) / 115][Stage 126:======================================>              (84 + 31) / 115][Stage 126:=============================================>      (100 + 15) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:=================================>                   (73 + 43) / 116][Stage 127:=======================================>             (86 + 30) / 116][Stage 127:=============================================>      (102 + 14) / 116][Stage 127:=================================================>   (108 + 8) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.57760735 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395721017 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:============================>                        (60 + 53) / 113][Stage 128:================================>                    (69 + 44) / 113][Stage 128:===========================================>         (92 + 21) / 113][Stage 128:=================================================>   (105 + 8) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:===========================>                         (59 + 55) / 114][Stage 129:===============================>                     (68 + 46) / 114][Stage 129:===================================>                 (77 + 37) / 114][Stage 129:===========================================>         (93 + 21) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.383800606 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=187", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=187,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373754233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===============================>                     (69 + 46) / 115][Stage 130:========================================>            (87 + 28) / 115][Stage 130:==============================================>     (102 + 13) / 115][Stage 130:================================================>    (106 + 9) / 115]                                                                                [Stage 131:==================================>                  (76 + 40) / 116][Stage 131:===========================================>         (96 + 20) / 116][Stage 131:=================================================>   (109 + 7) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.778647008 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=61", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=61,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356363668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (78 + 35) / 113][Stage 132:==========================================>          (91 + 22) / 113][Stage 132:==============================================>     (102 + 11) / 113][Stage 132:===================================================> (110 + 3) / 113]                                                                                [Stage 133:========================================>            (87 + 27) / 114][Stage 133:==============================================>     (102 + 12) / 114][Stage 133:=================================================>   (106 + 8) / 114][Stage 133:====================================================>(112 + 2) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.325173768 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=57", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=57,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=================================>                   (72 + 41) / 113][Stage 134:=======================================>             (85 + 28) / 113][Stage 134:=============================================>       (98 + 15) / 113][Stage 134:===================================================> (110 + 3) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:=======================================>             (85 + 29) / 114][Stage 135:==========================================>          (91 + 23) / 114][Stage 135:=================================================>   (107 + 7) / 114][Stage 135:===================================================> (111 + 3) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.616496292 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391191035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (58 + 55) / 113][Stage 136:===============================>                     (67 + 46) / 113][Stage 136:==========================================>          (90 + 23) / 113][Stage 136:===================================================> (110 + 3) / 113]                                                                                [Stage 137:===========================>                         (60 + 54) / 114][Stage 137:==================================>                  (74 + 40) / 114][Stage 137:============================================>        (96 + 18) / 114][Stage 137:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.970524932 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352231259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (70 + 43) / 113][Stage 138:========================================>            (86 + 27) / 113][Stage 138:=============================================>       (97 + 16) / 113][Stage 138:================================================>    (104 + 9) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:===================================>                 (76 + 38) / 114][Stage 139:=========================================>           (90 + 24) / 114][Stage 139:=============================================>      (100 + 14) / 114][Stage 139:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.886059266 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376385465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=================================>                   (73 + 42) / 115][Stage 140:======================================>              (84 + 31) / 115][Stage 140:================================================>    (106 + 9) / 115]                                                                                [Stage 141:==================================>                  (75 + 41) / 116][Stage 141:========================================>            (89 + 27) / 116][Stage 141:=============================================>      (101 + 15) / 116][Stage 141:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.702559502 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37870624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (72 + 43) / 115][Stage 142:=========================================>           (91 + 24) / 115][Stage 142:==============================================>     (103 + 12) / 115][Stage 142:===================================================> (112 + 3) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:===============================>                     (70 + 46) / 116][Stage 143:=======================================>             (86 + 30) / 116][Stage 143:============================================>       (100 + 16) / 116][Stage 143:===================================================> (113 + 3) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.00021601 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380441846 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==============================>                      (67 + 48) / 115][Stage 144:=======================================>             (85 + 30) / 115][Stage 144:=============================================>       (98 + 17) / 115][Stage 144:=================================================>   (107 + 8) / 115][Stage 144:====================================================>(113 + 2) / 115]                                                                                [Stage 145:=================================>                   (73 + 43) / 116][Stage 145:========================================>            (88 + 28) / 116][Stage 145:=============================================>      (102 + 14) / 116][Stage 145:=================================================>   (109 + 7) / 116][Stage 145:===================================================> (112 + 4) / 116][Stage 145:====================================================>(114 + 2) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.513950075 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362224837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===================================>                 (76 + 37) / 113][Stage 146:========================================>            (87 + 26) / 113][Stage 146:============================================>        (94 + 19) / 113][Stage 146:==================================================>  (108 + 5) / 113][Stage 146:====================================================>(111 + 2) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:==================================>                  (75 + 39) / 114][Stage 147:======================================>              (83 + 31) / 114][Stage 147:==========================================>          (92 + 22) / 114][Stage 147:===============================================>    (104 + 10) / 114][Stage 147:==================================================>  (109 + 5) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.768579849 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=106", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=106,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==================================>                  (73 + 40) / 113][Stage 148:=======================================>             (85 + 28) / 113][Stage 148:============================================>        (95 + 18) / 113][Stage 148:==================================================>  (107 + 6) / 113][Stage 148:====================================================>(111 + 2) / 113]                                                                                [Stage 149:========================================>            (88 + 26) / 114][Stage 149:============================================>        (95 + 19) / 114][Stage 149:================================================>    (105 + 9) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.046966468 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=40", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=40,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392886623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (59 + 54) / 113][Stage 150:==============================>                      (66 + 47) / 113][Stage 150:=====================================>               (81 + 32) / 113][Stage 150:===============================================>    (103 + 10) / 113]                                                                                [Stage 151:=============================>                       (63 + 51) / 114][Stage 151:=================================>                   (73 + 41) / 114][Stage 151:=======================================>             (86 + 28) / 114][Stage 151:==============================================>     (103 + 11) / 114][Stage 151:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.193091493 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===========================>                         (58 + 55) / 113][Stage 152:==============================>                      (64 + 49) / 113][Stage 152:====================================>                (77 + 36) / 113][Stage 152:==============================================>     (100 + 13) / 113][Stage 152:====================================================>(111 + 2) / 113]                                                                                [Stage 153:===========================>                         (59 + 55) / 114][Stage 153:===============================>                     (67 + 47) / 114][Stage 153:==================================>                  (75 + 39) / 114][Stage 153:==============================================>      (99 + 15) / 114][Stage 153:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.022986585 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423954002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:======================================>              (84 + 31) / 115][Stage 154:=========================================>           (89 + 26) / 115][Stage 154:=================================================>   (107 + 8) / 115]                                                                                [Stage 155:======================================>              (84 + 32) / 116][Stage 155:==========================================>          (94 + 22) / 116][Stage 155:=================================================>   (109 + 7) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.580613576 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=205", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=205,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357939219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==================================>                  (73 + 40) / 113][Stage 156:=========================================>           (89 + 24) / 113][Stage 156:==============================================>     (101 + 12) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:====================================>                (78 + 36) / 114][Stage 157:==========================================>          (91 + 23) / 114][Stage 157:=============================================>      (100 + 14) / 114][Stage 157:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.843733526 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399567696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:============================>                        (65 + 55) / 120][Stage 158:=================================>                   (76 + 44) / 120][Stage 158:===========================================>         (99 + 21) / 120][Stage 158:===================================================> (117 + 3) / 120]                                                                                [Stage 159:===========================>                         (62 + 59) / 121][Stage 159:=================================>                   (76 + 45) / 121][Stage 159:=========================================>           (94 + 27) / 121][Stage 159:=================================================>   (114 + 7) / 121][Stage 159:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.219882365 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384810223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (58 + 55) / 113][Stage 160:==============================>                      (65 + 48) / 113][Stage 160:========================================>            (86 + 27) / 113][Stage 160:==============================================>     (102 + 11) / 113][Stage 160:====================================================>(111 + 2) / 113]                                                                                [Stage 161:===============================>                     (67 + 47) / 114][Stage 161:==================================>                  (75 + 39) / 114][Stage 161:==============================================>      (99 + 15) / 114][Stage 161:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.139698907 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362879262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (72 + 46) / 118][Stage 162:==================================>                  (77 + 41) / 118][Stage 162:=======================================>             (88 + 30) / 118][Stage 162:============================================>       (101 + 17) / 118][Stage 162:====================================================>(116 + 2) / 118]                                                                                [Stage 163:==================================>                  (77 + 42) / 119][Stage 163:====================================>                (83 + 36) / 119][Stage 163:===========================================>         (97 + 22) / 119][Stage 163:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.22790711 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464769947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (72 + 46) / 118][Stage 164:==================================>                  (77 + 41) / 118][Stage 164:======================================>              (86 + 32) / 118][Stage 164:============================================>       (102 + 16) / 118][Stage 164:===================================================> (115 + 3) / 118]                                                                                [Stage 165:=================================>                   (75 + 44) / 119][Stage 165:======================================>              (87 + 32) / 119][Stage 165:===========================================>         (97 + 22) / 119][Stage 165:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.133352813 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395478143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:============================>                        (65 + 55) / 120][Stage 166:==================================>                  (79 + 41) / 120][Stage 166:==============================================>     (107 + 13) / 120][Stage 166:====================================================>(119 + 1) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:============================>                        (66 + 55) / 121][Stage 167:=====================================>               (85 + 36) / 121][Stage 167:===========================================>        (102 + 19) / 121][Stage 167:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.019459743 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=172", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=172,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352601184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:========================================>            (86 + 27) / 113][Stage 168:==========================================>          (90 + 23) / 113][Stage 168:=================================================>   (106 + 7) / 113][Stage 168:====================================================>(111 + 2) / 113][Stage 168:====================================================>(112 + 1) / 113]                                                                                [Stage 169:========================================>            (87 + 27) / 114][Stage 169:==============================================>      (99 + 15) / 114][Stage 169:=================================================>   (106 + 8) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.102845142 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=145", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=145,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369830851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (71 + 42) / 113][Stage 170:=====================================>               (81 + 32) / 113][Stage 170:=========================================>           (89 + 24) / 113][Stage 170:==============================================>     (102 + 11) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:=======================================>             (86 + 28) / 114][Stage 171:============================================>        (95 + 19) / 114][Stage 171:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.765328161 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353418016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===================================>                 (76 + 37) / 113][Stage 172:===========================================>         (93 + 20) / 113][Stage 172:=================================================>   (105 + 8) / 113]                                                                                [Stage 173:=====================================>               (81 + 33) / 114][Stage 173:=========================================>           (90 + 24) / 114][Stage 173:==============================================>     (101 + 13) / 114][Stage 173:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.885344984 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (71 + 42) / 113][Stage 174:========================================>            (87 + 26) / 113][Stage 174:==============================================>      (99 + 14) / 113][Stage 174:===================================================> (110 + 3) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:=====================================>               (80 + 34) / 114][Stage 175:==========================================>          (91 + 23) / 114][Stage 175:=============================================>       (97 + 17) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.471636463 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420196719 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:============================>                        (60 + 53) / 113][Stage 176:===================================>                 (76 + 37) / 113][Stage 176:==============================================>     (100 + 13) / 113][Stage 176:===================================================> (110 + 3) / 113]                                                                                [Stage 177:=============================>                       (63 + 51) / 114][Stage 177:===================================>                 (77 + 37) / 114][Stage 177:===========================================>         (93 + 21) / 114][Stage 177:===============================================>    (104 + 10) / 114][Stage 177:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.219038917 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=251,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373307414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==================================>                  (74 + 41) / 115][Stage 178:=========================================>           (91 + 24) / 115][Stage 178:===============================================>    (104 + 11) / 115][Stage 178:=================================================>   (108 + 7) / 115][Stage 178:==================================================>  (109 + 6) / 115]                                                                                [Stage 179:==================================>                  (75 + 41) / 116][Stage 179:=========================================>           (91 + 25) / 116][Stage 179:==============================================>     (104 + 12) / 116][Stage 179:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.045704113 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397601097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:============================>                        (65 + 55) / 120][Stage 180:==================================>                  (78 + 42) / 120][Stage 180:===========================================>         (98 + 22) / 120][Stage 180:=================================================>   (111 + 9) / 120][Stage 180:====================================================>(119 + 1) / 120]                                                                                [Stage 181:===========================>                         (62 + 59) / 121][Stage 181:=================================>                   (77 + 44) / 121][Stage 181:==========================================>          (97 + 24) / 121][Stage 181:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.457607357 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38590395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (59 + 54) / 113][Stage 182:==============================>                      (66 + 47) / 113][Stage 182:=====================================>               (81 + 32) / 113][Stage 182:=============================================>       (98 + 15) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:===========================>                         (59 + 55) / 114][Stage 183:===============================>                     (67 + 47) / 114][Stage 183:=======================================>             (84 + 30) / 114][Stage 183:=============================================>      (100 + 14) / 114][Stage 183:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.020505333 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334060553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:====================================>                (79 + 36) / 115][Stage 184:======================================>              (84 + 31) / 115][Stage 184:============================================>        (97 + 18) / 115][Stage 184:===================================================> (111 + 4) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:=====================================>               (82 + 34) / 116][Stage 185:=========================================>           (90 + 26) / 116][Stage 185:===============================================>    (105 + 11) / 116][Stage 185:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.980425551 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (82 + 33) / 115][Stage 186:==========================================>          (93 + 22) / 115][Stage 186:===============================================>    (104 + 11) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:=======================================>             (87 + 29) / 116][Stage 187:==============================================>     (104 + 12) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.574277912 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=====================================>               (81 + 34) / 115][Stage 188:========================================>            (88 + 27) / 115][Stage 188:===============================================>    (105 + 10) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:=====================================>               (83 + 33) / 116][Stage 189:=========================================>           (91 + 25) / 116][Stage 189:===============================================>    (106 + 10) / 116][Stage 189:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.679985154 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355778221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==================================>                  (74 + 39) / 113][Stage 190:========================================>            (87 + 26) / 113][Stage 190:===========================================>         (93 + 20) / 113][Stage 190:================================================>    (104 + 9) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:===================================>                 (76 + 38) / 114][Stage 191:========================================>            (87 + 27) / 114][Stage 191:============================================>        (96 + 18) / 114][Stage 191:=================================================>   (106 + 8) / 114][Stage 191:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.882167034 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381097332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:===============================>                     (68 + 45) / 113][Stage 192:=========================================>           (89 + 24) / 113][Stage 192:==================================================>  (108 + 5) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:===========================>                         (60 + 54) / 114][Stage 193:===============================>                     (68 + 46) / 114][Stage 193:=======================================>             (84 + 30) / 114][Stage 193:=============================================>      (100 + 14) / 114][Stage 193:===================================================> (110 + 4) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.488504286 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335456673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:======================================>              (83 + 32) / 115][Stage 194:=========================================>           (89 + 26) / 115][Stage 194:=============================================>      (101 + 14) / 115][Stage 194:====================================================>(113 + 2) / 115]                                                                                [Stage 195:======================================>              (84 + 32) / 116][Stage 195:=======================================>             (86 + 30) / 116][Stage 195:============================================>        (97 + 19) / 116][Stage 195:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.889269761 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=227", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=227,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398242902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==============================>                      (67 + 48) / 115][Stage 196:=======================================>             (86 + 29) / 115][Stage 196:============================================>        (97 + 18) / 115][Stage 196:=================================================>   (108 + 7) / 115]                                                                                [Stage 197:==================================>                  (75 + 41) / 116][Stage 197:======================================>              (85 + 31) / 116][Stage 197:============================================>        (98 + 18) / 116][Stage 197:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.879406351 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400504643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (59 + 54) / 113][Stage 198:==================================>                  (73 + 40) / 113][Stage 198:=============================================>       (97 + 16) / 113][Stage 198:===================================================> (110 + 3) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:===========================>                         (59 + 55) / 114][Stage 199:=============================>                       (63 + 51) / 114][Stage 199:==================================>                  (75 + 39) / 114][Stage 199:==============================================>     (102 + 12) / 114][Stage 199:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.186498581 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=============================>                       (63 + 50) / 113][Stage 200:==================================>                  (74 + 39) / 113][Stage 200:=============================================>       (98 + 15) / 113][Stage 200:===================================================> (109 + 4) / 113][Stage 200:====================================================>(111 + 2) / 113]                                                                                [Stage 201:===========================>                         (59 + 55) / 114][Stage 201:================================>                    (70 + 44) / 114][Stage 201:=======================================>             (86 + 28) / 114][Stage 201:==============================================>      (99 + 15) / 114][Stage 201:===================================================> (111 + 3) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.521178848 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/31 22:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.39:40264) dropped. RpcEnv already stopped.
17/05/31 22:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.39:40264) dropped. RpcEnv already stopped.
17/05/31 22:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:58442) dropped. RpcEnv already stopped.
17/05/31 22:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:56890) dropped. RpcEnv already stopped.
17/05/31 22:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:58442) dropped. RpcEnv already stopped.
17/05/31 22:42:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:56890) dropped. RpcEnv already stopped.

real	9m58.903s
user	11m19.704s
sys	0m36.860s
