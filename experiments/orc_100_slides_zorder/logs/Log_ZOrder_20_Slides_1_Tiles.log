Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 23:05:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:05:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:05:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:05:38 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 23:05:40 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:05:51 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531230540-0723).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.345363808 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (51 + 64) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:=======================================================(115 + 0) / 115]                                                                                [Stage 1:======================>                                (47 + 69) / 116][Stage 1:============================>                          (60 + 56) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.770843301 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.701857776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:============================>                          (59 + 54) / 113][Stage 2:==================================>                    (70 + 43) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:====================================>                  (75 + 38) / 113][Stage 2:=======================================>               (81 + 32) / 113][Stage 2:============================================>          (92 + 21) / 113][Stage 2:===============================================>       (98 + 15) / 113][Stage 2:===================================================>   (106 + 7) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:=================================>                     (69 + 45) / 114][Stage 3:==================================>                    (72 + 42) / 114][Stage 3:===================================>                   (74 + 40) / 114][Stage 3:=========================================>             (85 + 29) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:================================================>     (103 + 11) / 114][Stage 3:=================================================>    (104 + 10) / 114][Stage 3:====================================================>  (109 + 5) / 114][Stage 3:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.849107342 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.716062225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:======================>                                (50 + 70) / 120][Stage 4:===========================>                           (60 + 60) / 120][Stage 4:============================>                          (63 + 57) / 120][Stage 4:===============================>                       (69 + 51) / 120][Stage 4:=================================>                     (74 + 46) / 120][Stage 4:======================================>                (85 + 35) / 120][Stage 4:===============================================>      (105 + 15) / 120][Stage 4:=====================================================> (116 + 4) / 120]                                                                                [Stage 5:==========================>                            (58 + 63) / 121][Stage 5:=============================>                         (64 + 57) / 121][Stage 5:================================>                      (71 + 50) / 121][Stage 5:======================================>                (85 + 36) / 121][Stage 5:============================================>          (98 + 23) / 121][Stage 5:=====================================================> (117 + 4) / 121][Stage 5:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.408189058 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=70", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=70,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.582516476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==================================>                    (70 + 43) / 113][Stage 6:=====================================>                 (78 + 35) / 113][Stage 6:=========================================>             (86 + 27) / 113][Stage 6:=============================================>         (94 + 19) / 113][Stage 6:================================================>     (102 + 11) / 113][Stage 6:=====================================================> (110 + 3) / 113]                                                                                [Stage 7:===================================>                   (73 + 41) / 114][Stage 7:=======================================>               (81 + 33) / 114][Stage 7:===========================================>           (91 + 23) / 114][Stage 7:===============================================>       (98 + 16) / 114][Stage 7:================================================>     (102 + 12) / 114][Stage 7:====================================================>  (109 + 5) / 114][Stage 7:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.989517681 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (69 + 44) / 113][Stage 8:====================================>                  (74 + 39) / 113][Stage 8:=======================================>               (82 + 31) / 113][Stage 8:==========================================>            (87 + 26) / 113][Stage 8:==============================================>        (96 + 17) / 113][Stage 8:====================================================>  (108 + 5) / 113][Stage 8:=====================================================> (109 + 4) / 113]                                                                                [Stage 9:==================================>                    (71 + 43) / 114][Stage 9:======================================>                (80 + 34) / 114][Stage 9:==========================================>            (89 + 25) / 114][Stage 9:=============================================>         (95 + 19) / 114][Stage 9:===================================================>   (106 + 8) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.119126419 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=75", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=75,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (70 + 43) / 113][Stage 10:======================================>               (81 + 32) / 113][Stage 10:=========================================>            (86 + 27) / 113][Stage 10:=========================================>            (87 + 26) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:==============================================>       (97 + 16) / 113][Stage 10:=====================================================>(111 + 2) / 113]                                                                                [Stage 11:======================================>               (81 + 33) / 114][Stage 11:===========================================>          (91 + 23) / 114][Stage 11:================================================>    (104 + 10) / 114][Stage 11:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.592810238 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.522017669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==================================>                   (72 + 41) / 113][Stage 12:=======================================>              (82 + 31) / 113][Stage 12:===========================================>          (90 + 23) / 113][Stage 12:=============================================>        (96 + 17) / 113][Stage 12:================================================>    (103 + 10) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:=================================>                    (71 + 43) / 114][Stage 13:========================================>             (85 + 29) / 114][Stage 13:=============================================>        (95 + 19) / 114][Stage 13:================================================>    (104 + 10) / 114][Stage 13:====================================================> (110 + 4) / 114][Stage 13:====================================================> (111 + 3) / 114][Stage 13:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.335843668 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=16", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=16,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46433911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (80 + 35) / 115][Stage 14:========================================>             (86 + 29) / 115][Stage 14:===============================================>     (102 + 13) / 115][Stage 14:===================================================>  (109 + 6) / 115][Stage 14:=====================================================>(113 + 2) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:====================================>                 (79 + 37) / 116][Stage 15:============================================>         (95 + 21) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:=================================================>    (107 + 9) / 116][Stage 15:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.701982794 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=195", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=195,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.533165709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (71 + 47) / 118][Stage 16:==================================>                   (75 + 43) / 118][Stage 16:=======================================>              (86 + 32) / 118][Stage 16:=================================================>    (109 + 9) / 118][Stage 16:=====================================================>(116 + 2) / 118]                                                                                [Stage 17:=================================>                    (73 + 46) / 119][Stage 17:====================================>                 (80 + 39) / 119][Stage 17:=========================================>            (92 + 27) / 119][Stage 17:=============================================>       (103 + 16) / 119][Stage 17:==================================================>   (112 + 7) / 119][Stage 17:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.707029683 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=254", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=254,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.546841295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:============================>                         (59 + 54) / 113][Stage 18:==============================>                       (63 + 50) / 113][Stage 18:=======================================>              (82 + 31) / 113][Stage 18:==================================================>   (106 + 7) / 113][Stage 18:===================================================>  (107 + 6) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:=============================>                        (62 + 52) / 114][Stage 19:===================================>                  (75 + 39) / 114][Stage 19:==============================================>       (98 + 16) / 114][Stage 19:===================================================>  (108 + 6) / 114][Stage 19:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.582905178 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=240", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=240,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499714969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:>                                                       (0 + 0) / 115][Stage 20:===============================>                      (67 + 48) / 115][Stage 20:===================================>                  (75 + 40) / 115][Stage 20:==========================================>           (90 + 25) / 115][Stage 20:===============================================>     (104 + 11) / 115][Stage 20:==================================================>   (107 + 8) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:==================================>                   (75 + 41) / 116][Stage 21:=========================================>            (90 + 26) / 116][Stage 21:===============================================>     (103 + 13) / 116][Stage 21:===============================================>     (104 + 12) / 116][Stage 21:==================================================>   (108 + 8) / 116][Stage 21:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.751867289 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=148", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=148,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46542596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===================================>                  (75 + 38) / 113][Stage 22:=========================================>            (86 + 27) / 113][Stage 22:==============================================>      (100 + 13) / 113][Stage 22:====================================================> (110 + 3) / 113]                                                                                [Stage 23:======================================>               (82 + 32) / 114][Stage 23:==========================================>           (90 + 24) / 114][Stage 23:==============================================>       (98 + 16) / 114][Stage 23:================================================>    (104 + 10) / 114][Stage 23:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.215854007 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484504917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:==================================>                   (75 + 43) / 118][Stage 24:========================================>             (89 + 29) / 118][Stage 24:==============================================>      (103 + 15) / 118][Stage 24:===================================================>  (113 + 5) / 118]                                                                                [Stage 25:=================================>                    (73 + 46) / 119][Stage 25:===================================>                  (79 + 40) / 119][Stage 25:=======================================>              (88 + 31) / 119][Stage 25:=================================================>    (110 + 9) / 119][Stage 25:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.283206524 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446879579 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:====================================>                 (77 + 38) / 115][Stage 26:=========================================>            (89 + 26) / 115][Stage 26:==============================================>       (99 + 16) / 115][Stage 26:==================================================>   (107 + 8) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:=======================================>              (85 + 31) / 116][Stage 27:=============================================>       (100 + 16) / 116][Stage 27:==================================================>   (109 + 7) / 116][Stage 27:====================================================> (113 + 3) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.359201982 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=120", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=120,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477205683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:================================>                     (71 + 47) / 118][Stage 28:================================>                     (72 + 46) / 118][Stage 28:=====================================>                (82 + 36) / 118][Stage 28:===========================================>          (96 + 22) / 118][Stage 28:==================================================>   (110 + 8) / 118]                                                                                [Stage 29:=================================>                    (74 + 45) / 119][Stage 29:====================================>                 (81 + 38) / 119][Stage 29:==============================================>      (104 + 15) / 119][Stage 29:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.17168565 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506759956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==========================>                           (59 + 61) / 120][Stage 30:===========================>                          (60 + 60) / 120][Stage 30:=============================>                        (66 + 54) / 120][Stage 30:===================================>                  (79 + 41) / 120][Stage 30:=============================================>       (103 + 17) / 120][Stage 30:===================================================>  (114 + 6) / 120][Stage 30:====================================================> (117 + 3) / 120][Stage 30:=====================================================>(119 + 1) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:==============================>                       (68 + 53) / 121][Stage 31:=====================================>                (85 + 36) / 121][Stage 31:================================================>    (111 + 10) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.577494677 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458407282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=====================================>                (80 + 35) / 115][Stage 32:========================================>             (86 + 29) / 115][Stage 32:===============================================>     (104 + 11) / 115][Stage 32:====================================================> (111 + 4) / 115]                                                                                [Stage 33:========================================>             (87 + 29) / 116][Stage 33:=============================================>       (100 + 16) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.82647654 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443134507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (72 + 46) / 118][Stage 34:======================================>               (85 + 33) / 118][Stage 34:=============================================>       (102 + 16) / 118][Stage 34:==================================================>   (111 + 7) / 118][Stage 34:=====================================================>(117 + 1) / 118]                                                                                [Stage 35:=================================>                    (73 + 46) / 119][Stage 35:===================================>                  (78 + 41) / 119][Stage 35:============================================>         (98 + 21) / 119][Stage 35:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.043232909 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=190", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=190,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505423617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:============================>                         (63 + 57) / 120][Stage 36:===============================>                      (70 + 50) / 120][Stage 36:=========================================>            (92 + 28) / 120][Stage 36:====================================================> (117 + 3) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:==============================>                       (68 + 53) / 121][Stage 37:======================================>               (86 + 35) / 121][Stage 37:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.890682208 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=102", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=102,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490941414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:=============================>                        (65 + 55) / 120][Stage 38:==================================>                   (77 + 43) / 120][Stage 38:============================================>        (101 + 19) / 120][Stage 38:==================================================>   (113 + 7) / 120][Stage 38:=====================================================>(119 + 1) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:=============================>                        (66 + 55) / 121][Stage 39:====================================>                 (82 + 39) / 121][Stage 39:===============================================>     (108 + 13) / 121][Stage 39:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.363597166 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518810016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===============================>                      (70 + 50) / 120][Stage 40:========================================>             (90 + 30) / 120][Stage 40:==================================================>   (113 + 7) / 120][Stage 40:=====================================================>(119 + 1) / 120]                                                                                [Stage 41:============================>                         (64 + 57) / 121][Stage 41:==================================>                   (77 + 44) / 121][Stage 41:=============================================>       (104 + 17) / 121]                                                                                Time elapsed: 3.044240138 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=6", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=6,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411809868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:======================================>               (82 + 33) / 115][Stage 42:========================================>             (86 + 29) / 115][Stage 42:===============================================>     (104 + 11) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:======================================>               (83 + 33) / 116][Stage 43:==========================================>           (91 + 25) / 116][Stage 43:===============================================>     (105 + 11) / 116][Stage 43:====================================================> (112 + 4) / 116][Stage 43:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.074277371 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437379754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:=====================================>                (82 + 36) / 118][Stage 44:============================================>         (97 + 21) / 118][Stage 44:================================================>    (107 + 11) / 118]                                                                                [Stage 45:=================================>                    (74 + 45) / 119][Stage 45:===================================>                  (79 + 40) / 119][Stage 45:========================================>             (90 + 29) / 119][Stage 45:==============================================>      (105 + 14) / 119][Stage 45:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.247321577 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469532069 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:>                                                       (0 + 0) / 115][Stage 46:===============================>                      (68 + 47) / 115][Stage 46:======================================>               (82 + 33) / 115][Stage 46:==============================================>      (101 + 14) / 115][Stage 46:===================================================>  (109 + 6) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:==================================>                   (74 + 42) / 116][Stage 47:=========================================>            (90 + 26) / 116][Stage 47:===============================================>     (104 + 12) / 116][Stage 47:==================================================>   (109 + 7) / 116][Stage 47:=====================================================>(114 + 2) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.377569063 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=194", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=194,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44205013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (72 + 46) / 118][Stage 48:=================================>                    (74 + 44) / 118][Stage 48:========================================>             (89 + 29) / 118][Stage 48:================================================>    (107 + 11) / 118][Stage 48:===================================================>  (112 + 6) / 118]                                                                                [Stage 49:=================================>                    (74 + 45) / 119][Stage 49:=========================================>            (92 + 27) / 119][Stage 49:===============================================>     (107 + 12) / 119][Stage 49:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.040572399 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459676112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (58 + 55) / 113][Stage 50:================================>                     (68 + 45) / 113][Stage 50:=======================================>              (82 + 31) / 113][Stage 50:===============================================>     (101 + 12) / 113][Stage 50:================================================>    (103 + 10) / 113][Stage 50:===================================================>  (107 + 6) / 113][Stage 50:=====================================================>(112 + 1) / 113]                                                                                [Stage 51:============================>                         (61 + 53) / 114][Stage 51:================================>                     (69 + 45) / 114][Stage 51:========================================>             (85 + 29) / 114][Stage 51:=================================================>    (105 + 9) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.569737557 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=165", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=165,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387727894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=======================================>              (84 + 31) / 115][Stage 52:=============================================>        (97 + 18) / 115][Stage 52:==================================================>   (108 + 7) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:========================================>             (86 + 30) / 116][Stage 53:=============================================>       (100 + 16) / 116][Stage 53:==================================================>   (109 + 7) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.90239171 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.551822197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:=============================>                        (61 + 52) / 113][Stage 54:===================================>                  (74 + 39) / 113][Stage 54:===========================================>          (91 + 22) / 113][Stage 54:===================================================>  (108 + 5) / 113]                                                                                [Stage 55:============================>                         (60 + 54) / 114][Stage 55:=============================>                        (62 + 52) / 114][Stage 55:=====================================>                (80 + 34) / 114][Stage 55:===============================================>     (103 + 11) / 114]                                                                                Time elapsed: 2.92877004 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444767911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:====================================>                 (76 + 37) / 113][Stage 56:==========================================>           (88 + 25) / 113][Stage 56:==============================================>      (100 + 13) / 113][Stage 56:====================================================> (109 + 4) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:=====================================>                (80 + 34) / 114][Stage 57:=========================================>            (87 + 27) / 114][Stage 57:==============================================>       (99 + 15) / 114][Stage 57:===================================================>  (109 + 5) / 114][Stage 57:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.078576845 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490016967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 59) / 120][Stage 58:================================>                     (73 + 47) / 120][Stage 58:==========================================>           (94 + 26) / 120][Stage 58:==================================================>   (112 + 8) / 120][Stage 58:=====================================================>(119 + 1) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:===============================>                      (70 + 51) / 121][Stage 59:====================================>                 (82 + 39) / 121][Stage 59:==============================================>      (107 + 14) / 121][Stage 59:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.102310657 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443269154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:===============================>                      (66 + 47) / 113][Stage 60:====================================>                 (77 + 36) / 113][Stage 60:=================================================>    (104 + 9) / 113][Stage 60:====================================================> (109 + 4) / 113]                                                                                [Stage 61:==============================>                       (64 + 50) / 114][Stage 61:===================================>                  (75 + 39) / 114][Stage 61:============================================>         (94 + 20) / 114][Stage 61:==================================================>   (107 + 7) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.433607792 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.534261926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=================================>                    (72 + 43) / 115][Stage 62:=======================================>              (85 + 30) / 115][Stage 62:==============================================>       (99 + 16) / 115][Stage 62:=================================================>    (106 + 9) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:=================================>                    (73 + 43) / 116][Stage 63:======================================>               (83 + 33) / 116][Stage 63:==============================================>      (102 + 14) / 116][Stage 63:===================================================>  (111 + 5) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.268309446 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=174", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=174,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426645465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===============================>                      (67 + 48) / 115][Stage 64:========================================>             (86 + 29) / 115][Stage 64:===============================================>     (103 + 12) / 115][Stage 64:====================================================> (111 + 4) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:=================================>                    (72 + 44) / 116][Stage 65:=========================================>            (90 + 26) / 116][Stage 65:==============================================>      (101 + 15) / 116][Stage 65:==================================================>   (109 + 7) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.066356618 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==============================>                       (66 + 49) / 115][Stage 66:=========================================>            (89 + 26) / 115][Stage 66:==============================================>       (99 + 16) / 115][Stage 66:===================================================>  (109 + 6) / 115][Stage 66:====================================================> (111 + 4) / 115][Stage 66:=====================================================>(114 + 1) / 115]                                                                                [Stage 67:==================================>                   (74 + 42) / 116][Stage 67:=======================================>              (85 + 31) / 116][Stage 67:==============================================>      (101 + 15) / 116][Stage 67:==================================================>   (109 + 7) / 116][Stage 67:====================================================> (112 + 4) / 116][Stage 67:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.484021946 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=132", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=132,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444035556 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (61 + 59) / 120][Stage 68:=================================>                    (74 + 46) / 120][Stage 68:===========================================>          (96 + 24) / 120][Stage 68:================================================>    (109 + 11) / 120][Stage 68:=====================================================>(119 + 1) / 120]                                                                                [Stage 69:============================>                         (64 + 57) / 121][Stage 69:================================>                     (72 + 49) / 121][Stage 69:============================================>        (102 + 19) / 121][Stage 69:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.148604788 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=167", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=167,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37153134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (81 + 34) / 115][Stage 70:=======================================>              (85 + 30) / 115][Stage 70:==============================================>      (100 + 15) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:=====================================>                (80 + 36) / 116][Stage 71:============================================>         (95 + 21) / 116][Stage 71:===============================================>     (105 + 11) / 116]                                                                                Time elapsed: 2.523030195 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37398053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=======================================>              (84 + 31) / 115][Stage 72:=============================================>        (97 + 18) / 115][Stage 72:====================================================> (112 + 3) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:======================================>               (82 + 34) / 116][Stage 73:==========================================>           (92 + 24) / 116][Stage 73:==============================================>      (101 + 15) / 116][Stage 73:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.088941969 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=66", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=66,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455876986 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:=============================>                        (61 + 52) / 113][Stage 74:=====================================>                (78 + 35) / 113][Stage 74:==============================================>      (100 + 13) / 113][Stage 74:=====================================================>(111 + 2) / 113]                                                                                [Stage 75:===========================>                          (59 + 55) / 114][Stage 75:===============================>                      (66 + 48) / 114][Stage 75:=======================================>              (83 + 31) / 114][Stage 75:==============================================>      (101 + 13) / 114][Stage 75:===================================================>  (108 + 6) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.251965488 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428862943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=============================>                        (61 + 52) / 113][Stage 76:==================================>                   (73 + 40) / 113][Stage 76:=============================================>        (96 + 17) / 113][Stage 76:====================================================> (110 + 3) / 113]                                                                                [Stage 77:===========================>                          (59 + 55) / 114][Stage 77:==============================>                       (65 + 49) / 114][Stage 77:=====================================>                (80 + 34) / 114][Stage 77:==============================================>       (99 + 15) / 114][Stage 77:===================================================>  (108 + 6) / 114][Stage 77:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.260850346 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=197", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=197,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431576595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:============================>                         (60 + 53) / 113][Stage 78:===================================>                  (74 + 39) / 113][Stage 78:==========================================>           (89 + 24) / 113][Stage 78:==================================================>   (106 + 7) / 113]                                                                                [Stage 79:============================>                         (60 + 54) / 114][Stage 79:================================>                     (68 + 46) / 114][Stage 79:============================================>         (94 + 20) / 114][Stage 79:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.950535814 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49363624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:======================================>               (82 + 33) / 115][Stage 80:===========================================>          (93 + 22) / 115][Stage 80:==================================================>   (108 + 7) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:======================================>               (82 + 34) / 116][Stage 81:============================================>         (95 + 21) / 116][Stage 81:===================================================>  (110 + 6) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.694110643 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379218818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (72 + 41) / 113][Stage 82:=========================================>            (86 + 27) / 113][Stage 82:=============================================>        (95 + 18) / 113][Stage 82:==================================================>   (106 + 7) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:=====================================>                (79 + 35) / 114][Stage 83:===========================================>          (92 + 22) / 114][Stage 83:=================================================>    (105 + 9) / 114][Stage 83:====================================================> (111 + 3) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.17788594 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=68", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=68,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433266474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:==============================>                       (67 + 53) / 120][Stage 84:====================================>                 (82 + 38) / 120][Stage 84:================================================>    (109 + 11) / 120]                                                                                [Stage 85:===========================>                          (62 + 59) / 121][Stage 85:=================================>                    (74 + 47) / 121][Stage 85:==========================================>           (95 + 26) / 121][Stage 85:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 2.956224988 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357585945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (81 + 34) / 115][Stage 86:========================================>             (86 + 29) / 115][Stage 86:==============================================>      (101 + 14) / 115][Stage 86:====================================================> (111 + 4) / 115]                                                                                [Stage 87:========================================>             (87 + 29) / 116][Stage 87:=============================================>        (98 + 18) / 116][Stage 87:================================================>    (106 + 10) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.732401328 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (83 + 32) / 115][Stage 88:============================================>         (95 + 20) / 115][Stage 88:====================================================> (112 + 3) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=======================================>              (85 + 31) / 116][Stage 89:=============================================>        (97 + 19) / 116][Stage 89:===================================================>  (111 + 5) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.886745636 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=54", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=54,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479588178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=====================================>                (80 + 35) / 115][Stage 90:=========================================>            (88 + 27) / 115][Stage 90:===============================================>     (102 + 13) / 115][Stage 90:====================================================> (112 + 3) / 115]                                                                                [Stage 91:========================================>             (88 + 28) / 116][Stage 91:=============================================>       (100 + 16) / 116][Stage 91:===================================================>  (111 + 5) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.099728189 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352798902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (82 + 33) / 115][Stage 92:=========================================>            (89 + 26) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:======================================>               (82 + 34) / 116][Stage 93:==========================================>           (92 + 24) / 116][Stage 93:=================================================>    (107 + 9) / 116][Stage 93:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.768058167 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=====================================>                (80 + 35) / 115][Stage 94:=======================================>              (85 + 30) / 115][Stage 94:=============================================>        (96 + 19) / 115][Stage 94:===================================================>  (110 + 5) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:=======================================>              (84 + 32) / 116][Stage 95:==============================================>       (99 + 17) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.926787715 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=57", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=57,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350024042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:=============================================>        (97 + 18) / 115][Stage 96:===================================================>  (109 + 6) / 115][Stage 96:===================================================>  (110 + 5) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:========================================>             (86 + 30) / 116][Stage 97:==============================================>       (99 + 17) / 116][Stage 97:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.036169133 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378792636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=================================>                    (73 + 45) / 118][Stage 98:====================================>                 (79 + 39) / 118][Stage 98:==========================================>           (92 + 26) / 118][Stage 98:=============================================>       (102 + 16) / 118][Stage 98:==================================================>   (111 + 7) / 118][Stage 98:=====================================================>(116 + 2) / 118]                                                                                [Stage 99:=================================>                    (73 + 46) / 119][Stage 99:==================================>                   (77 + 42) / 119][Stage 99:=========================================>            (92 + 27) / 119][Stage 99:==============================================>      (105 + 14) / 119][Stage 99:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.235969461 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421069252 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 59) / 120][Stage 100:=============================>                       (67 + 53) / 120][Stage 100:=====================================>               (86 + 34) / 120][Stage 100:=================================================>   (112 + 8) / 120][Stage 100:====================================================>(119 + 1) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:===============================>                     (72 + 49) / 121][Stage 101:======================================>              (88 + 33) / 121][Stage 101:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.01020409 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383263742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=================================>                   (74 + 44) / 118][Stage 102:=======================================>             (87 + 31) / 118][Stage 102:============================================>        (98 + 20) / 118][Stage 102:===============================================>    (108 + 10) / 118]                                                                                [Stage 103:=================================>                   (75 + 44) / 119][Stage 103:====================================>                (82 + 37) / 119][Stage 103:==========================================>          (96 + 23) / 119][Stage 103:===============================================>    (109 + 10) / 119][Stage 103:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.273496915 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433841356 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (58 + 55) / 113][Stage 104:==============================>                      (64 + 49) / 113][Stage 104:======================================>              (82 + 31) / 113][Stage 104:==============================================>     (100 + 13) / 113]                                                                                [Stage 105:===========================>                         (59 + 55) / 114][Stage 105:================================>                    (69 + 45) / 114][Stage 105:===========================================>         (93 + 21) / 114][Stage 105:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 2.89512112 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=227", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=227,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365546197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:====================================>                (77 + 36) / 113][Stage 106:========================================>            (87 + 26) / 113][Stage 106:=============================================>       (98 + 15) / 113][Stage 106:===================================================> (110 + 3) / 113]                                                                                [Stage 107:====================================>                (79 + 35) / 114][Stage 107:========================================>            (88 + 26) / 114][Stage 107:==============================================>      (99 + 15) / 114][Stage 107:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.928221538 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=126", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=126,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427146121 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:============================>                        (64 + 56) / 120][Stage 108:===================================>                 (81 + 39) / 120][Stage 108:============================================>       (102 + 18) / 120]                                                                                [Stage 109:==========================>                          (61 + 60) / 121][Stage 109:=================================>                   (77 + 44) / 121][Stage 109:==========================================>          (97 + 24) / 121][Stage 109:===============================================>    (111 + 10) / 121]                                                                                Time elapsed: 2.861246063 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=96", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=96,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418771685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:==============================>                      (69 + 51) / 120][Stage 110:======================================>              (87 + 33) / 120][Stage 110:=============================================>      (105 + 15) / 120][Stage 110:====================================================>(118 + 2) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:================================>                    (74 + 47) / 121][Stage 111:======================================>              (87 + 34) / 121][Stage 111:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 2.889629689 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=13", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=13,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377927037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:==================================>                  (76 + 42) / 118][Stage 112:========================================>            (91 + 27) / 118][Stage 112:============================================>       (101 + 17) / 118][Stage 112:==================================================>  (112 + 6) / 118][Stage 112:====================================================>(117 + 1) / 118]                                                                                [Stage 113:================================>                    (73 + 46) / 119][Stage 113:===================================>                 (80 + 39) / 119][Stage 113:======================================>              (87 + 32) / 119][Stage 113:===========================================>        (100 + 19) / 119][Stage 113:=================================================>   (111 + 8) / 119][Stage 113:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.408314428 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=104", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=104,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:==================================>                  (77 + 41) / 118][Stage 114:=====================================>               (83 + 35) / 118][Stage 114:===============================================>    (107 + 11) / 118][Stage 114:====================================================>(117 + 1) / 118]                                                                                [Stage 115:================================>                    (73 + 46) / 119][Stage 115:=================================>                   (76 + 43) / 119][Stage 115:=========================================>           (94 + 25) / 119][Stage 115:=============================================>      (103 + 16) / 119][Stage 115:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.082973719 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=24", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=24,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525103044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:======================================>              (86 + 32) / 118][Stage 116:=============================================>      (103 + 15) / 118][Stage 116:====================================================>(116 + 2) / 118]                                                                                [Stage 117:=================================>                   (75 + 44) / 119][Stage 117:=====================================>               (85 + 34) / 119][Stage 117:============================================>       (101 + 18) / 119][Stage 117:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.01329943 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=106", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=106,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388187181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:==================================>                  (77 + 41) / 118][Stage 118:===========================================>         (96 + 22) / 118][Stage 118:==================================================>  (112 + 6) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:====================================>                (83 + 36) / 119][Stage 119:=============================================>      (104 + 15) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.798060927 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=223", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=223,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410171078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (59 + 54) / 113][Stage 120:=================================>                   (71 + 42) / 113][Stage 120:=======================================>             (84 + 29) / 113][Stage 120:=================================================>   (106 + 7) / 113][Stage 120:===================================================> (109 + 4) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:===============================>                     (67 + 47) / 114][Stage 121:======================================>              (83 + 31) / 114][Stage 121:==============================================>     (102 + 12) / 114]                                                                                Time elapsed: 3.027083152 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432443112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (63 + 57) / 120][Stage 122:================================>                    (74 + 46) / 120][Stage 122:=========================================>           (95 + 25) / 120][Stage 122:===================================================> (116 + 4) / 120]                                                                                [Stage 123:============================>                        (65 + 56) / 121][Stage 123:================================>                    (75 + 46) / 121][Stage 123:===========================================>        (102 + 19) / 121][Stage 123:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 2.925998219 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=47", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=47,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388665483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:=====================================>               (83 + 35) / 118][Stage 124:============================================>       (100 + 18) / 118][Stage 124:==================================================>  (113 + 5) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:====================================>                (82 + 37) / 119][Stage 125:===========================================>         (98 + 21) / 119][Stage 125:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 2.985609844 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=51", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=51,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346843432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=====================================>               (81 + 34) / 115][Stage 126:=======================================>             (86 + 29) / 115][Stage 126:==============================================>     (102 + 13) / 115][Stage 126:==================================================>  (109 + 6) / 115]                                                                                [Stage 127:======================================>              (85 + 31) / 116][Stage 127:===========================================>         (96 + 20) / 116][Stage 127:==================================================>  (110 + 6) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.950928566 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341831373 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (79 + 36) / 115][Stage 128:=======================================>             (86 + 29) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:================================================>    (106 + 9) / 115]                                                                                [Stage 129:======================================>              (85 + 31) / 116][Stage 129:============================================>        (98 + 18) / 116][Stage 129:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.556562231 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=99", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=99,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368690344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (73 + 45) / 118][Stage 130:=====================================>               (83 + 35) / 118][Stage 130:============================================>       (102 + 16) / 118][Stage 130:=================================================>   (110 + 8) / 118]                                                                                [Stage 131:================================>                    (74 + 45) / 119][Stage 131:=======================================>             (88 + 31) / 119][Stage 131:==============================================>     (106 + 13) / 119][Stage 131:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.026406887 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=82", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=82,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355183211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (80 + 35) / 115][Stage 132:=========================================>           (90 + 25) / 115][Stage 132:===============================================>    (104 + 11) / 115][Stage 132:===================================================> (112 + 3) / 115]                                                                                [Stage 133:=====================================>               (82 + 34) / 116][Stage 133:==========================================>          (94 + 22) / 116][Stage 133:=================================================>   (109 + 7) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.574113751 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=247", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=247,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34202685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (81 + 34) / 115][Stage 134:=========================================>           (90 + 25) / 115][Stage 134:===============================================>    (104 + 11) / 115]                                                                                [Stage 135:=====================================>               (83 + 33) / 116][Stage 135:==========================================>          (92 + 24) / 116][Stage 135:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.447992845 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364668942 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (72 + 46) / 118][Stage 136:=================================>                   (74 + 44) / 118][Stage 136:======================================>              (85 + 33) / 118][Stage 136:============================================>        (98 + 20) / 118][Stage 136:===================================================> (114 + 4) / 118][Stage 136:====================================================>(117 + 1) / 118]                                                                                [Stage 137:================================>                    (73 + 46) / 119][Stage 137:====================================>                (81 + 38) / 119][Stage 137:========================================>            (92 + 27) / 119][Stage 137:==============================================>     (106 + 13) / 119][Stage 137:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.225462371 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386016032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (59 + 54) / 113][Stage 138:==================================>                  (73 + 40) / 113][Stage 138:===========================================>         (93 + 20) / 113][Stage 138:==================================================>  (108 + 5) / 113][Stage 138:====================================================>(111 + 2) / 113]                                                                                [Stage 139:=============================>                       (64 + 50) / 114][Stage 139:======================================>              (83 + 31) / 114][Stage 139:================================================>    (105 + 9) / 114][Stage 139:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.206514883 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380946456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (67 + 48) / 115][Stage 140:===================================>                 (78 + 37) / 115][Stage 140:===========================================>         (94 + 21) / 115][Stage 140:===================================================> (112 + 3) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:===========================================>         (96 + 20) / 116][Stage 141:=================================================>   (108 + 8) / 116][Stage 141:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.79168545 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=25", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=25,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381590223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:============================>                        (61 + 52) / 113][Stage 142:================================>                    (70 + 43) / 113][Stage 142:==========================================>          (90 + 23) / 113][Stage 142:==================================================>  (108 + 5) / 113]                                                                                [Stage 143:===========================>                         (60 + 54) / 114][Stage 143:=================================>                   (72 + 42) / 114][Stage 143:==========================================>          (91 + 23) / 114][Stage 143:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.903896759 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394110397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=============================>                       (62 + 51) / 113][Stage 144:===================================>                 (75 + 38) / 113][Stage 144:============================================>        (94 + 19) / 113]                                                                                [Stage 145:============================>                        (61 + 53) / 114][Stage 145:=================================>                   (71 + 43) / 114][Stage 145:==========================================>          (92 + 22) / 114][Stage 145:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 2.878064833 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345209698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:====================================>                (79 + 36) / 115][Stage 146:=========================================>           (91 + 24) / 115][Stage 146:===============================================>    (105 + 10) / 115][Stage 146:===================================================> (111 + 4) / 115]                                                                                [Stage 147:=======================================>             (87 + 29) / 116][Stage 147:=============================================>      (101 + 15) / 116][Stage 147:===================================================> (113 + 3) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.839503263 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398885701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (59 + 54) / 113][Stage 148:===============================>                     (68 + 45) / 113][Stage 148:==========================================>          (90 + 23) / 113][Stage 148:================================================>    (104 + 9) / 113][Stage 148:====================================================>(111 + 2) / 113]                                                                                [Stage 149:==============================>                      (65 + 49) / 114][Stage 149:==================================>                  (74 + 40) / 114][Stage 149:==========================================>          (91 + 23) / 114][Stage 149:==============================================>     (102 + 12) / 114][Stage 149:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.368332373 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=74", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=74,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38267841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (59 + 54) / 113][Stage 150:=============================>                       (63 + 50) / 113][Stage 150:======================================>              (82 + 31) / 113][Stage 150:==============================================>     (101 + 12) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:===========================>                         (60 + 54) / 114][Stage 151:=============================>                       (64 + 50) / 114][Stage 151:=====================================>               (81 + 33) / 114][Stage 151:==============================================>     (103 + 11) / 114][Stage 151:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.009447643 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366333319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=====================================>               (83 + 35) / 118][Stage 152:============================================>       (101 + 17) / 118][Stage 152:=================================================>   (111 + 7) / 118]                                                                                [Stage 153:=================================>                   (75 + 44) / 119][Stage 153:=======================================>             (89 + 30) / 119][Stage 153:=============================================>      (105 + 14) / 119][Stage 153:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.939943725 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=253", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=253,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (72 + 46) / 118][Stage 154:=================================>                   (75 + 43) / 118][Stage 154:=====================================>               (83 + 35) / 118][Stage 154:=============================================>      (104 + 14) / 118][Stage 154:====================================================>(116 + 2) / 118]                                                                                [Stage 155:================================>                    (73 + 46) / 119][Stage 155:==================================>                  (77 + 42) / 119][Stage 155:========================================>            (92 + 27) / 119][Stage 155:==============================================>     (107 + 12) / 119]                                                                                Time elapsed: 2.907009658 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=229", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=229,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335703329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=====================================>               (82 + 33) / 115][Stage 156:========================================>            (88 + 27) / 115][Stage 156:===============================================>    (105 + 10) / 115][Stage 156:====================================================>(114 + 1) / 115]                                                                                [Stage 157:=====================================>               (82 + 34) / 116][Stage 157:=============================================>       (99 + 17) / 116][Stage 157:===============================================>    (105 + 11) / 116][Stage 157:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.571929318 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=237", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=237,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380359607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==============================>                      (66 + 49) / 115][Stage 158:==================================>                  (75 + 40) / 115][Stage 158:=========================================>           (90 + 25) / 115][Stage 158:==================================================>  (110 + 5) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:===============================>                     (69 + 47) / 116][Stage 159:=====================================>               (81 + 35) / 116][Stage 159:============================================>       (100 + 16) / 116][Stage 159:==================================================>  (110 + 6) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.012073406 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=11", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=11,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381045455 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==============================>                      (67 + 48) / 115][Stage 160:====================================>                (79 + 36) / 115][Stage 160:=============================================>       (98 + 17) / 115][Stage 160:===================================================> (112 + 3) / 115]                                                                                [Stage 161:===================================>                 (77 + 39) / 116][Stage 161:===========================================>         (95 + 21) / 116][Stage 161:===============================================>    (105 + 11) / 116][Stage 161:===================================================> (112 + 4) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.219824941 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392635302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:===========================>                         (63 + 57) / 120][Stage 162:=============================>                       (67 + 53) / 120][Stage 162:============================================>       (102 + 18) / 120][Stage 162:====================================================>(119 + 1) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:==============================>                      (70 + 51) / 121][Stage 163:=========================================>           (94 + 27) / 121][Stage 163:=================================================>   (114 + 7) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.987958953 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=183", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=183,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336229294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:======================================>              (83 + 32) / 115][Stage 164:=========================================>           (91 + 24) / 115][Stage 164:==============================================>     (103 + 12) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:========================================>            (89 + 27) / 116][Stage 165:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.506178034 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=50", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=50,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386371306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===============================>                     (69 + 46) / 115][Stage 166:=========================================>           (90 + 25) / 115][Stage 166:=============================================>      (100 + 15) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:====================================>                (79 + 37) / 116][Stage 167:============================================>        (98 + 18) / 116][Stage 167:==================================================>  (110 + 6) / 116][Stage 167:==================================================>  (111 + 5) / 116][Stage 167:====================================================>(114 + 2) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.694247581 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336453198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:======================================>              (83 + 32) / 115][Stage 168:==========================================>          (92 + 23) / 115][Stage 168:==============================================>     (103 + 12) / 115][Stage 168:==================================================>  (109 + 6) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=====================================>               (83 + 33) / 116][Stage 169:=========================================>           (91 + 25) / 116][Stage 169:==============================================>     (103 + 13) / 116][Stage 169:===================================================> (113 + 3) / 116][Stage 169:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.076711931 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398695726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:==============================>                      (70 + 50) / 120][Stage 170:======================================>              (87 + 33) / 120][Stage 170:==============================================>     (107 + 13) / 120][Stage 170:====================================================>(119 + 1) / 120]                                                                                [Stage 171:==========================>                          (61 + 60) / 121][Stage 171:=============================>                       (67 + 54) / 121][Stage 171:===================================>                 (82 + 39) / 121][Stage 171:==============================================>     (109 + 12) / 121][Stage 171:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.049177171 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=181", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=181,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390652992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (59 + 54) / 113][Stage 172:===============================>                     (68 + 45) / 113][Stage 172:=======================================>             (84 + 29) / 113][Stage 172:================================================>    (104 + 9) / 113]                                                                                [Stage 173:============================>                        (62 + 52) / 114][Stage 173:=================================>                   (72 + 42) / 114][Stage 173:========================================>            (87 + 27) / 114][Stage 173:=============================================>      (100 + 14) / 114][Stage 173:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.087026199 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=251", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=251,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352933606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:====================================>                (77 + 36) / 113][Stage 174:=========================================>           (89 + 24) / 113][Stage 174:==============================================>     (101 + 12) / 113][Stage 174:===================================================> (110 + 3) / 113]                                                                                [Stage 175:====================================>                (78 + 36) / 114][Stage 175:=========================================>           (90 + 24) / 114][Stage 175:=============================================>       (98 + 16) / 114][Stage 175:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.94779332 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=114", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=114,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413332477 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (75 + 40) / 115][Stage 176:=========================================>           (91 + 24) / 115][Stage 176:==================================================>  (109 + 6) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:================================>                    (72 + 44) / 116][Stage 177:======================================>              (84 + 32) / 116][Stage 177:==============================================>     (104 + 12) / 116][Stage 177:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.787582435 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (70 + 45) / 115][Stage 178:========================================>            (87 + 28) / 115][Stage 178:==============================================>     (102 + 13) / 115][Stage 178:===================================================> (112 + 3) / 115]                                                                                [Stage 179:====================================>                (79 + 37) / 116][Stage 179:=============================================>      (101 + 15) / 116][Stage 179:===================================================> (113 + 3) / 116][Stage 179:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.905755217 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=109", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=109,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331970669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (82 + 33) / 115][Stage 180:===========================================>         (94 + 21) / 115][Stage 180:=================================================>   (108 + 7) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:=====================================>               (82 + 34) / 116][Stage 181:==========================================>          (93 + 23) / 116][Stage 181:==============================================>     (104 + 12) / 116][Stage 181:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.690883159 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37136579 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==================================>                  (76 + 42) / 118][Stage 182:======================================>              (86 + 32) / 118][Stage 182:===============================================>    (108 + 10) / 118]                                                                                [Stage 183:================================>                    (74 + 45) / 119][Stage 183:====================================>                (83 + 36) / 119][Stage 183:===========================================>        (100 + 19) / 119][Stage 183:=================================================>   (112 + 7) / 119][Stage 183:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.880543432 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:=================================>                   (75 + 43) / 118][Stage 184:========================================>            (91 + 27) / 118][Stage 184:============================================>       (102 + 16) / 118][Stage 184:===================================================> (114 + 4) / 118]                                                                                [Stage 185:================================>                    (74 + 45) / 119][Stage 185:====================================>                (83 + 36) / 119][Stage 185:============================================>       (102 + 17) / 119][Stage 185:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.95546075 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471175399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (73 + 45) / 118][Stage 186:====================================>                (82 + 36) / 118][Stage 186:=========================================>           (92 + 26) / 118][Stage 186:===============================================>    (107 + 11) / 118][Stage 186:===================================================> (115 + 3) / 118]                                                                                [Stage 187:================================>                    (73 + 46) / 119][Stage 187:===================================>                 (80 + 39) / 119][Stage 187:=========================================>           (94 + 25) / 119][Stage 187:=================================================>   (112 + 7) / 119][Stage 187:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.174315673 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368550433 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==================================>                  (75 + 40) / 115][Stage 188:========================================>            (88 + 27) / 115][Stage 188:==============================================>     (102 + 13) / 115][Stage 188:================================================>    (106 + 9) / 115][Stage 188:==================================================>  (110 + 5) / 115][Stage 188:====================================================>(113 + 2) / 115]                                                                                [Stage 189:================================>                    (71 + 45) / 116][Stage 189:=======================================>             (86 + 30) / 116][Stage 189:============================================>       (100 + 16) / 116][Stage 189:=================================================>   (109 + 7) / 116][Stage 189:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.343823484 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337772515 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:====================================>                (79 + 36) / 115][Stage 190:=======================================>             (85 + 30) / 115][Stage 190:============================================>        (97 + 18) / 115][Stage 190:==================================================>  (110 + 5) / 115]                                                                                [Stage 191:========================================>            (88 + 28) / 116][Stage 191:=============================================>      (102 + 14) / 116][Stage 191:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.527363781 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=206", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=206,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:======================================>              (83 + 32) / 115][Stage 192:===========================================>         (95 + 20) / 115][Stage 192:=================================================>   (107 + 8) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:========================================>            (89 + 27) / 116][Stage 193:=============================================>      (101 + 15) / 116][Stage 193:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.56621842 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396378088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (58 + 55) / 113][Stage 194:=============================>                       (62 + 51) / 113][Stage 194:====================================>                (78 + 35) / 113][Stage 194:============================================>        (95 + 18) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:============================>                        (62 + 52) / 114][Stage 195:================================>                    (69 + 45) / 114][Stage 195:=========================================>           (89 + 25) / 114][Stage 195:=================================================>   (106 + 8) / 114][Stage 195:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.244450964 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=239", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=239,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351645287 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (72 + 46) / 118][Stage 196:==================================>                  (77 + 41) / 118][Stage 196:============================================>        (98 + 20) / 118][Stage 196:===================================================> (114 + 4) / 118]                                                                                [Stage 197:================================>                    (74 + 45) / 119][Stage 197:=====================================>               (85 + 34) / 119][Stage 197:===========================================>        (100 + 19) / 119][Stage 197:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 2.954123093 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552289396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 60) / 120][Stage 198:================================>                    (73 + 47) / 120][Stage 198:=========================================>           (94 + 26) / 120][Stage 198:==============================================>     (108 + 12) / 120]                                                                                [Stage 199:===========================>                         (62 + 59) / 121][Stage 199:===============================>                     (73 + 48) / 121][Stage 199:=========================================>           (94 + 27) / 121][Stage 199:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.992855102 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=249", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=249,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341500358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (80 + 35) / 115][Stage 200:===========================================>         (95 + 20) / 115][Stage 200:=================================================>   (108 + 7) / 115][Stage 200:====================================================>(113 + 2) / 115][Stage 200:====================================================>(114 + 1) / 115]                                                                                [Stage 201:=====================================>               (83 + 33) / 116][Stage 201:==========================================>          (92 + 24) / 116][Stage 201:===============================================>    (105 + 11) / 116][Stage 201:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.792532367 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m44.932s
user	11m40.016s
sys	0m28.460s
