Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 02:54:28 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:54:43 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:54:43 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:54:44 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 02:54:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:54:56 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601025445-0745).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.406414555 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======>                                              (15 + 100) / 115][Stage 0:========================>                              (51 + 64) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:=========================>                             (54 + 62) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.50798638 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=216", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=216,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.800121335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (38 + 75) / 113][Stage 2:=====================>                                 (45 + 68) / 113][Stage 2:=========================>                             (52 + 61) / 113][Stage 2:=============================>                         (60 + 53) / 113][Stage 2:==============================>                        (63 + 50) / 113][Stage 2:===================================>                   (73 + 40) / 113][Stage 2:========================================>              (83 + 30) / 113][Stage 2:===============================================>       (97 + 16) / 113][Stage 2:=====================================================> (110 + 3) / 113]                                                                                [Stage 3:============================>                          (59 + 55) / 114][Stage 3:=============================>                         (62 + 52) / 114][Stage 3:==================================>                    (71 + 43) / 114][Stage 3:========================================>              (83 + 31) / 114][Stage 3:=============================================>         (94 + 20) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.782920305 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=132,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.66165892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:============================>                          (60 + 55) / 115][Stage 4:================================>                      (67 + 48) / 115][Stage 4:=================================>                     (71 + 44) / 115][Stage 4:=====================================>                 (79 + 36) / 115][Stage 4:==========================================>            (89 + 26) / 115][Stage 4:===============================================>       (99 + 16) / 115][Stage 4:==================================================>    (106 + 9) / 115][Stage 4:======================================================>(113 + 2) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:===============================>                       (66 + 50) / 116][Stage 5:===================================>                   (74 + 42) / 116][Stage 5:====================================>                  (77 + 39) / 116][Stage 5:=======================================>               (84 + 32) / 116][Stage 5:============================================>          (93 + 23) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.577743398 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.58234412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (70 + 48) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:===================================>                   (77 + 41) / 118][Stage 6:====================================>                  (78 + 40) / 118][Stage 6:====================================>                  (79 + 39) / 118][Stage 6:========================================>              (86 + 32) / 118][Stage 6:===========================================>           (94 + 24) / 118][Stage 6:====================================================>  (112 + 6) / 118]                                                                                [Stage 7:=================================>                     (72 + 47) / 119][Stage 7:====================================>                  (78 + 41) / 119][Stage 7:====================================>                  (80 + 39) / 119][Stage 7:======================================>                (84 + 35) / 119][Stage 7:========================================>              (88 + 31) / 119][Stage 7:============================================>          (96 + 23) / 119][Stage 7:=================================================>    (108 + 11) / 119]                                                                                Time elapsed: 4.712529391 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=211", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=211,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571089621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=============================>                         (62 + 53) / 115][Stage 8:==================================>                    (72 + 43) / 115][Stage 8:======================================>                (80 + 35) / 115][Stage 8:============================================>          (93 + 22) / 115][Stage 8:=================================================>    (105 + 10) / 115][Stage 8:====================================================>  (109 + 6) / 115][Stage 8:======================================================>(113 + 2) / 115]                                                                                [Stage 9:===============================>                       (66 + 50) / 116][Stage 9:==================================>                    (73 + 43) / 116][Stage 9:=====================================>                 (79 + 37) / 116][Stage 9:==========================================>            (89 + 27) / 116][Stage 9:==================================================>    (107 + 9) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.837816415 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.582411388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (58 + 55) / 113][Stage 10:============================>                         (59 + 54) / 113][Stage 10:================================>                     (69 + 44) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:================================================>    (103 + 10) / 113][Stage 10:==================================================>   (106 + 7) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:============================>                         (60 + 54) / 114][Stage 11:=============================>                        (63 + 51) / 114][Stage 11:======================================>               (82 + 32) / 114][Stage 11:==========================================>           (89 + 25) / 114][Stage 11:==============================================>      (101 + 13) / 114][Stage 11:===================================================>  (108 + 6) / 114][Stage 11:=====================================================>(112 + 2) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.065239668 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=238", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=238,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.617669552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:============================>                         (63 + 57) / 120][Stage 12:==================================>                   (77 + 43) / 120][Stage 12:==========================================>           (95 + 25) / 120][Stage 12:================================================>    (110 + 10) / 120][Stage 12:====================================================> (116 + 4) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:==============================>                       (68 + 53) / 121][Stage 13:===================================>                  (79 + 42) / 121][Stage 13:========================================>             (90 + 31) / 121][Stage 13:==================================================>   (113 + 8) / 121][Stage 13:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.112297586 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=209,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511375349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=============================>                        (63 + 52) / 115][Stage 14:=================================>                    (72 + 43) / 115][Stage 14:=========================================>            (88 + 27) / 115][Stage 14:==============================================>      (101 + 14) / 115][Stage 14:===================================================>  (110 + 5) / 115][Stage 14:====================================================> (112 + 3) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:================================>                     (69 + 47) / 116][Stage 15:=====================================>                (80 + 36) / 116][Stage 15:========================================>             (87 + 29) / 116][Stage 15:===========================================>          (94 + 22) / 116][Stage 15:=============================================>       (100 + 16) / 116][Stage 15:===============================================>     (103 + 13) / 116][Stage 15:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.252701003 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=82", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=82,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.62762388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (59 + 61) / 120][Stage 16:==============================>                       (67 + 53) / 120][Stage 16:===================================>                  (78 + 42) / 120][Stage 16:==============================================>      (106 + 14) / 120][Stage 16:====================================================> (116 + 4) / 120]                                                                                [Stage 17:===========================>                          (62 + 59) / 121][Stage 17:=================================>                    (74 + 47) / 121][Stage 17:======================================>               (87 + 34) / 121][Stage 17:============================================>        (101 + 20) / 121][Stage 17:=================================================>    (112 + 9) / 121][Stage 17:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.644870043 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=157", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=157,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:==============================>                       (68 + 52) / 120][Stage 18:=======================================>              (87 + 33) / 120][Stage 18:=============================================>       (104 + 16) / 120][Stage 18:====================================================> (117 + 3) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:==================================>                   (77 + 44) / 121][Stage 19:=========================================>            (94 + 27) / 121][Stage 19:================================================>    (110 + 11) / 121][Stage 19:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.747233327 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=57", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=57,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.565515133 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (59 + 61) / 120][Stage 20:============================>                         (64 + 56) / 120][Stage 20:==================================>                   (76 + 44) / 120][Stage 20:========================================>             (91 + 29) / 120][Stage 20:===============================================>     (108 + 12) / 120][Stage 20:===================================================>  (115 + 5) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:==============================>                       (68 + 53) / 121][Stage 21:========================================>             (90 + 31) / 121][Stage 21:===============================================>     (108 + 13) / 121][Stage 21:=================================================>    (112 + 9) / 121][Stage 21:====================================================> (117 + 4) / 121][Stage 21:=====================================================>(119 + 2) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.387751485 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445977421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=======================================>              (84 + 31) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:==================================================>   (107 + 8) / 115][Stage 22:=====================================================>(114 + 1) / 115]                                                                                [Stage 23:=======================================>              (85 + 31) / 116][Stage 23:==============================================>       (99 + 17) / 116][Stage 23:===================================================>  (110 + 6) / 116][Stage 23:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.954766905 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=16", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=16,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521419346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (58 + 55) / 113][Stage 24:==============================>                       (63 + 50) / 113][Stage 24:==================================>                   (72 + 41) / 113][Stage 24:============================================>         (93 + 20) / 113][Stage 24:==================================================>   (105 + 8) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===========================>                          (58 + 56) / 114][Stage 25:============================>                         (61 + 53) / 114][Stage 25:====================================>                 (77 + 37) / 114][Stage 25:==============================================>       (98 + 16) / 114][Stage 25:=================================================>    (105 + 9) / 114][Stage 25:====================================================> (111 + 3) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.664030005 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=93,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:============================>                         (59 + 54) / 113][Stage 26:=================================>                    (71 + 42) / 113][Stage 26:===========================================>          (92 + 21) / 113][Stage 26:===================================================>  (107 + 6) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:============================>                         (61 + 53) / 114][Stage 27:==================================>                   (72 + 42) / 114][Stage 27:=============================================>        (96 + 18) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.376887764 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=110,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.514021402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==============================>                       (64 + 51) / 115][Stage 28:==================================>                   (74 + 41) / 115][Stage 28:==========================================>           (90 + 25) / 115][Stage 28:===================================================>  (109 + 6) / 115][Stage 28:=====================================================>(113 + 2) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:====================================>                 (79 + 37) / 116][Stage 29:===========================================>          (94 + 22) / 116][Stage 29:===================================================>  (111 + 5) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.316264338 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=79", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=79,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476841531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:=====================================>                (83 + 35) / 118][Stage 30:==============================================>      (103 + 15) / 118][Stage 30:=====================================================>(116 + 2) / 118]                                                                                [Stage 31:==================================>                   (75 + 44) / 119][Stage 31:=======================================>              (87 + 32) / 119][Stage 31:==============================================>      (104 + 15) / 119][Stage 31:====================================================> (115 + 4) / 119][Stage 31:====================================================> (116 + 3) / 119][Stage 31:=====================================================>(117 + 2) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.080161354 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=129", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=129,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57941038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (60 + 60) / 120][Stage 32:============================>                         (64 + 56) / 120][Stage 32:=========================================>            (93 + 27) / 120][Stage 32:==============================================>      (106 + 14) / 120][Stage 32:===================================================>  (115 + 5) / 120]                                                                                [Stage 33:===========================>                          (61 + 60) / 121][Stage 33:===============================>                      (70 + 51) / 121][Stage 33:=========================================>            (92 + 29) / 121][Stage 33:================================================>    (110 + 11) / 121][Stage 33:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.426243847 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=24", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=24,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503543487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:===========================>                          (62 + 58) / 120][Stage 34:==================================>                   (76 + 44) / 120][Stage 34:============================================>        (101 + 19) / 120][Stage 34:====================================================> (116 + 4) / 120]                                                                                [Stage 35:============================>                         (63 + 58) / 121][Stage 35:===============================>                      (71 + 50) / 121][Stage 35:=========================================>            (93 + 28) / 121][Stage 35:==================================================>   (113 + 8) / 121][Stage 35:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.40903825 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=22,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479795369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (73 + 45) / 118][Stage 36:====================================>                 (79 + 39) / 118][Stage 36:===========================================>          (94 + 24) / 118][Stage 36:==================================================>   (111 + 7) / 118][Stage 36:=====================================================>(117 + 1) / 118]                                                                                [Stage 37:=================================>                    (73 + 46) / 119][Stage 37:==================================>                   (76 + 43) / 119][Stage 37:=======================================>              (87 + 32) / 119][Stage 37:=============================================>       (102 + 17) / 119][Stage 37:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.410047473 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443221545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:====================================>                 (77 + 36) / 113][Stage 38:=============================================>        (95 + 18) / 113][Stage 38:===============================================>     (101 + 12) / 113][Stage 38:====================================================> (110 + 3) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:===================================>                  (75 + 39) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:==============================================>      (100 + 14) / 114][Stage 39:===================================================>  (109 + 5) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.532095188 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=85,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480721371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===============================>                      (68 + 47) / 115][Stage 40:======================================>               (82 + 33) / 115][Stage 40:===============================================>     (103 + 12) / 115][Stage 40:===================================================>  (109 + 6) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:===============================>                      (68 + 48) / 116][Stage 41:==========================================>           (92 + 24) / 116][Stage 41:===============================================>     (104 + 12) / 116][Stage 41:===================================================>  (111 + 5) / 116][Stage 41:====================================================> (113 + 3) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.171753997 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521859171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (60 + 60) / 120][Stage 42:============================>                         (63 + 57) / 120][Stage 42:===================================>                  (79 + 41) / 120][Stage 42:================================================>    (109 + 11) / 120][Stage 42:=====================================================>(118 + 2) / 120]                                                                                [Stage 43:===========================>                          (61 + 60) / 121][Stage 43:=============================>                        (66 + 55) / 121][Stage 43:===================================>                  (79 + 42) / 121][Stage 43:============================================>        (101 + 20) / 121][Stage 43:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.332131509 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.532068687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:=============================>                        (65 + 55) / 120][Stage 44:===========================================>          (96 + 24) / 120][Stage 44:==================================================>   (112 + 8) / 120][Stage 44:=====================================================>(119 + 1) / 120]                                                                                [Stage 45:===========================>                          (61 + 60) / 121][Stage 45:===============================>                      (70 + 51) / 121][Stage 45:======================================>               (86 + 35) / 121][Stage 45:================================================>    (111 + 10) / 121][Stage 45:=====================================================>(119 + 2) / 121][Stage 45:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.418699593 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458714643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:============================>                         (59 + 54) / 113][Stage 46:=================================>                    (71 + 42) / 113][Stage 46:===========================================>          (90 + 23) / 113][Stage 46:===================================================>  (107 + 6) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:===========================>                          (59 + 55) / 114][Stage 47:=============================>                        (63 + 51) / 114][Stage 47:=======================================>              (84 + 30) / 114][Stage 47:==============================================>      (101 + 13) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.447791173 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=234", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=234,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461747329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==============================>                       (64 + 51) / 115][Stage 48:==================================>                   (74 + 41) / 115][Stage 48:==========================================>           (90 + 25) / 115][Stage 48:==================================================>   (107 + 8) / 115][Stage 48:====================================================> (112 + 3) / 115]                                                                                [Stage 49:=====================================>                (81 + 35) / 116][Stage 49:=============================================>        (98 + 18) / 116][Stage 49:==================================================>   (109 + 7) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.97599518 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=126", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=126,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460199231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:====================================>                 (78 + 37) / 115][Stage 50:===========================================>          (93 + 22) / 115][Stage 50:===============================================>     (104 + 11) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:================================>                     (70 + 46) / 116][Stage 51:=======================================>              (85 + 31) / 116][Stage 51:==============================================>       (99 + 17) / 116][Stage 51:===================================================>  (110 + 6) / 116][Stage 51:====================================================> (113 + 3) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.134579193 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=34", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=34,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482392425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:============================>                         (59 + 54) / 113][Stage 52:====================================>                 (76 + 37) / 113][Stage 52:==========================================>           (89 + 24) / 113][Stage 52:===================================================>  (107 + 6) / 113][Stage 52:====================================================> (110 + 3) / 113]                                                                                [Stage 53:=============================>                        (63 + 51) / 114][Stage 53:==================================>                   (72 + 42) / 114][Stage 53:=============================================>        (97 + 17) / 114][Stage 53:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.388455195 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=128,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461957301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (60 + 60) / 120][Stage 54:===========================>                          (61 + 59) / 120][Stage 54:===============================>                      (71 + 49) / 120][Stage 54:============================================>        (101 + 19) / 120][Stage 54:=====================================================>(118 + 2) / 120]                                                                                [Stage 55:===========================>                          (61 + 60) / 121][Stage 55:==============================>                       (69 + 52) / 121][Stage 55:=====================================>                (85 + 36) / 121][Stage 55:============================================>        (102 + 19) / 121][Stage 55:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.075322987 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.578265855 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (58 + 55) / 113][Stage 56:==============================>                       (64 + 49) / 113][Stage 56:=======================================>              (82 + 31) / 113][Stage 56:===============================================>     (101 + 12) / 113][Stage 56:===================================================>  (107 + 6) / 113]                                                                                [Stage 57:============================>                         (61 + 53) / 114][Stage 57:====================================>                 (76 + 38) / 114][Stage 57:===========================================>          (91 + 23) / 114][Stage 57:==================================================>   (106 + 8) / 114][Stage 57:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.481938579 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=147", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=147,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454802205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:===========================>                          (62 + 58) / 120][Stage 58:==================================>                   (76 + 44) / 120][Stage 58:============================================>         (99 + 21) / 120][Stage 58:====================================================> (116 + 4) / 120]                                                                                [Stage 59:============================>                         (64 + 57) / 121][Stage 59:================================>                     (72 + 49) / 121][Stage 59:===========================================>          (98 + 23) / 121][Stage 59:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.45510903 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436087658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==================================>                   (74 + 41) / 115][Stage 60:=======================================>              (84 + 31) / 115][Stage 60:===============================================>     (103 + 12) / 115][Stage 60:====================================================> (111 + 4) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:==================================>                   (75 + 41) / 116][Stage 61:=========================================>            (89 + 27) / 116][Stage 61:=============================================>       (100 + 16) / 116][Stage 61:==================================================>   (109 + 7) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.299689467 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504359681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===================================>                  (74 + 39) / 113][Stage 62:===========================================>          (92 + 21) / 113][Stage 62:==============================================>      (100 + 13) / 113][Stage 62:===================================================>  (107 + 6) / 113][Stage 62:====================================================> (110 + 3) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:===================================>                  (74 + 40) / 114][Stage 63:=========================================>            (87 + 27) / 114][Stage 63:==============================================>       (99 + 15) / 114][Stage 63:=================================================>    (105 + 9) / 114][Stage 63:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.470800191 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=187,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474162122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:================================>                     (73 + 47) / 120][Stage 64:=======================================>              (87 + 33) / 120][Stage 64:==================================================>   (113 + 7) / 120][Stage 64:======================================================(120 + 0) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:==============================>                       (69 + 52) / 121][Stage 65:====================================>                 (82 + 39) / 121][Stage 65:=============================================>       (103 + 18) / 121][Stage 65:====================================================> (118 + 3) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.434981415 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=44,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438654053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:================================>                     (67 + 46) / 113][Stage 66:=======================================>              (83 + 30) / 113][Stage 66:===============================================>     (101 + 12) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:===========================>                          (59 + 55) / 114][Stage 67:=================================>                    (71 + 43) / 114][Stage 67:===========================================>          (92 + 22) / 114][Stage 67:=================================================>    (105 + 9) / 114][Stage 67:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.612141494 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=88,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431007935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==============================>                       (64 + 51) / 115][Stage 68:==================================>                   (73 + 42) / 115][Stage 68:========================================>             (87 + 28) / 115][Stage 68:==============================================>       (99 + 16) / 115][Stage 68:===================================================>  (109 + 6) / 115][Stage 68:=====================================================>(113 + 2) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:=================================>                    (71 + 45) / 116][Stage 69:======================================>               (83 + 33) / 116][Stage 69:==============================================>      (101 + 15) / 116][Stage 69:===================================================>  (110 + 6) / 116][Stage 69:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.522232252 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443796276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (58 + 55) / 113][Stage 70:=============================>                        (62 + 51) / 113][Stage 70:===================================>                  (74 + 39) / 113][Stage 70:===========================================>          (90 + 23) / 113][Stage 70:===============================================>     (102 + 11) / 113][Stage 70:=====================================================>(111 + 2) / 113]                                                                                [Stage 71:============================>                         (61 + 53) / 114][Stage 71:====================================>                 (78 + 36) / 114][Stage 71:============================================>         (94 + 20) / 114][Stage 71:==============================================>      (100 + 14) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.832174998 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=105,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403028656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=================================>                    (71 + 42) / 113][Stage 72:=======================================>              (83 + 30) / 113][Stage 72:==============================================>       (97 + 16) / 113][Stage 72:===============================================>     (102 + 11) / 113][Stage 72:====================================================> (110 + 3) / 113]                                                                                [Stage 73:========================================>             (85 + 29) / 114][Stage 73:=============================================>        (95 + 19) / 114][Stage 73:================================================>    (104 + 10) / 114][Stage 73:=====================================================>(112 + 2) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.099656392 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=99", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=99,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43355773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:===============================>                      (65 + 48) / 113][Stage 74:==========================================>           (88 + 25) / 113][Stage 74:=================================================>    (104 + 9) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:============================>                         (61 + 53) / 114][Stage 75:==============================>                       (65 + 49) / 114][Stage 75:=====================================>                (80 + 34) / 114][Stage 75:==============================================>      (100 + 14) / 114][Stage 75:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.267846764 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=199", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=199,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391784242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:==================================>                   (75 + 43) / 118][Stage 76:========================================>             (88 + 30) / 118][Stage 76:==================================================>   (111 + 7) / 118]                                                                                [Stage 77:==================================>                   (76 + 43) / 119][Stage 77:======================================>               (84 + 35) / 119][Stage 77:==============================================>      (104 + 15) / 119][Stage 77:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.116796575 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=38", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=38,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40425138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:====================================>                 (78 + 37) / 115][Stage 78:==============================================>       (98 + 17) / 115][Stage 78:=================================================>    (106 + 9) / 115]                                                                                [Stage 79:=================================>                    (72 + 44) / 116][Stage 79:========================================>             (87 + 29) / 116][Stage 79:===============================================>     (103 + 13) / 116][Stage 79:===================================================>  (111 + 5) / 116][Stage 79:====================================================> (112 + 4) / 116][Stage 79:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.452166924 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=18", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=18,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:==================================>                   (74 + 41) / 115][Stage 80:========================================>             (86 + 29) / 115][Stage 80:===============================================>     (104 + 11) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:================================>                     (70 + 46) / 116][Stage 81:=====================================>                (81 + 35) / 116][Stage 81:==============================================>       (99 + 17) / 116][Stage 81:===================================================>  (111 + 5) / 116][Stage 81:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.921882056 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (74 + 41) / 115][Stage 82:========================================>             (87 + 28) / 115][Stage 82:===============================================>     (104 + 11) / 115][Stage 82:=====================================================>(113 + 2) / 115]                                                                                [Stage 83:================================>                     (69 + 47) / 116][Stage 83:======================================>               (82 + 34) / 116][Stage 83:=============================================>        (98 + 18) / 116][Stage 83:====================================================> (112 + 4) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.218837744 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=102", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=102,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===============================>                      (68 + 47) / 115][Stage 84:=========================================>            (89 + 26) / 115][Stage 84:==============================================>       (99 + 16) / 115][Stage 84:====================================================> (112 + 3) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:=================================>                    (71 + 45) / 116][Stage 85:=======================================>              (85 + 31) / 116][Stage 85:=================================================>    (107 + 9) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.850871204 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=186,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38799847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==================================>                   (73 + 40) / 113][Stage 86:======================================>               (81 + 32) / 113][Stage 86:===========================================>          (91 + 22) / 113][Stage 86:================================================>    (103 + 10) / 113][Stage 86:====================================================> (109 + 4) / 113]                                                                                [Stage 87:=======================================>              (83 + 31) / 114][Stage 87:==========================================>           (90 + 24) / 114][Stage 87:==============================================>      (100 + 14) / 114][Stage 87:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.052423233 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420555002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:=============================>                        (62 + 51) / 113][Stage 88:==================================>                   (73 + 40) / 113][Stage 88:===========================================>          (91 + 22) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:==============================>                       (64 + 50) / 114][Stage 89:=======================================>              (84 + 30) / 114][Stage 89:===============================================>     (103 + 11) / 114][Stage 89:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.372289181 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=208", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=208,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (58 + 55) / 113][Stage 90:================================>                     (68 + 45) / 113][Stage 90:=========================================>            (86 + 27) / 113][Stage 90:==============================================>      (100 + 13) / 113]                                                                                [Stage 91:============================>                         (60 + 54) / 114][Stage 91:===============================>                      (67 + 47) / 114][Stage 91:========================================>             (86 + 28) / 114][Stage 91:==================================================>   (106 + 8) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.308294379 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386639549 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (73 + 45) / 118][Stage 92:==================================>                   (76 + 42) / 118][Stage 92:====================================>                 (80 + 38) / 118][Stage 92:==========================================>           (93 + 25) / 118][Stage 92:===============================================>     (106 + 12) / 118][Stage 92:====================================================> (115 + 3) / 118]                                                                                [Stage 93:================================>                     (72 + 47) / 119][Stage 93:==================================>                   (75 + 44) / 119][Stage 93:=======================================>              (86 + 33) / 119][Stage 93:=============================================>       (102 + 17) / 119][Stage 93:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.362192295 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=5", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=5,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436036782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (60 + 60) / 120][Stage 94:============================>                         (64 + 56) / 120][Stage 94:===================================>                  (79 + 41) / 120][Stage 94:==========================================>           (94 + 26) / 120][Stage 94:================================================>    (110 + 10) / 120]                                                                                [Stage 95:============================>                         (63 + 58) / 121][Stage 95:===============================>                      (70 + 51) / 121][Stage 95:==========================================>           (95 + 26) / 121][Stage 95:====================================================> (117 + 4) / 121][Stage 95:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.097042929 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396599719 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==================================>                   (73 + 42) / 115][Stage 96:=======================================>              (85 + 30) / 115][Stage 96:=============================================>        (97 + 18) / 115][Stage 96:===================================================>  (109 + 6) / 115][Stage 96:====================================================> (111 + 4) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:===============================>                      (67 + 49) / 116][Stage 97:===================================>                  (77 + 39) / 116][Stage 97:=============================================>        (97 + 19) / 116][Stage 97:==================================================>   (108 + 8) / 116][Stage 97:===================================================>  (110 + 6) / 116][Stage 97:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.53638898 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=255", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=255,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398267512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==============================>                       (66 + 49) / 115][Stage 98:====================================>                 (78 + 37) / 115][Stage 98:=============================================>        (97 + 18) / 115][Stage 98:===================================================>  (110 + 5) / 115]                                                                                [Stage 99:===================================>                  (77 + 39) / 116][Stage 99:=========================================>            (89 + 27) / 116][Stage 99:===============================================>     (105 + 11) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.726327284 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487166504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (73 + 45) / 118][Stage 100:===================================>                 (78 + 40) / 118][Stage 100:==========================================>          (94 + 24) / 118][Stage 100:===============================================>    (107 + 11) / 118][Stage 100:===================================================> (115 + 3) / 118]                                                                                [Stage 101:=================================>                   (75 + 44) / 119][Stage 101:===================================>                 (80 + 39) / 119][Stage 101:======================================>              (87 + 32) / 119][Stage 101:============================================>        (99 + 20) / 119][Stage 101:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.498948512 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=96", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=96,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367633172 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=====================================>               (82 + 33) / 115][Stage 102:=========================================>           (91 + 24) / 115][Stage 102:===============================================>    (105 + 10) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:======================================>              (85 + 31) / 116][Stage 103:=============================================>       (99 + 17) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.667317741 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=87", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=87,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388085526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:===================================>                 (79 + 39) / 118][Stage 104:===========================================>         (97 + 21) / 118][Stage 104:================================================>    (109 + 9) / 118][Stage 104:====================================================>(117 + 1) / 118]                                                                                [Stage 105:================================>                    (73 + 46) / 119][Stage 105:=======================================>             (88 + 31) / 119][Stage 105:================================================>    (110 + 9) / 119][Stage 105:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.377427799 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=59", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=59,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389370817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:=================================>                   (74 + 44) / 118][Stage 106:========================================>            (90 + 28) / 118][Stage 106:==============================================>     (106 + 12) / 118]                                                                                [Stage 107:================================>                    (73 + 46) / 119][Stage 107:===================================>                 (79 + 40) / 119][Stage 107:===========================================>         (97 + 22) / 119][Stage 107:==================================================>  (113 + 6) / 119][Stage 107:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.199350828 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=190", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=190,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371930366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==================================>                  (73 + 40) / 113][Stage 108:======================================>              (83 + 30) / 113][Stage 108:=============================================>       (98 + 15) / 113][Stage 108:==================================================>  (108 + 5) / 113][Stage 108:====================================================>(112 + 1) / 113]                                                                                [Stage 109:==================================>                  (75 + 39) / 114][Stage 109:=======================================>             (85 + 29) / 114][Stage 109:=============================================>      (100 + 14) / 114][Stage 109:=================================================>   (107 + 7) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.908441598 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408776817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (58 + 55) / 113][Stage 110:============================>                        (60 + 53) / 113][Stage 110:====================================>                (77 + 36) / 113][Stage 110:============================================>        (95 + 18) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:===========================>                         (59 + 55) / 114][Stage 111:==============================>                      (66 + 48) / 114][Stage 111:======================================>              (82 + 32) / 114][Stage 111:===============================================>    (104 + 10) / 114][Stage 111:===================================================> (110 + 4) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.406894073 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=121", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=121,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423952919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:==================================>                  (76 + 42) / 118][Stage 112:=======================================>             (87 + 31) / 118][Stage 112:============================================>        (99 + 19) / 118][Stage 112:=================================================>   (111 + 7) / 118]                                                                                [Stage 113:=================================>                   (75 + 44) / 119][Stage 113:====================================>                (81 + 38) / 119][Stage 113:=========================================>           (93 + 26) / 119][Stage 113:================================================>    (110 + 9) / 119][Stage 113:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.380770699 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:==================================>                  (77 + 41) / 118][Stage 114:=======================================>             (87 + 31) / 118][Stage 114:============================================>        (99 + 19) / 118][Stage 114:==================================================>  (112 + 6) / 118][Stage 114:====================================================>(116 + 2) / 118]                                                                                [Stage 115:================================>                    (73 + 46) / 119][Stage 115:==================================>                  (78 + 41) / 119][Stage 115:========================================>            (92 + 27) / 119][Stage 115:===============================================>    (109 + 10) / 119][Stage 115:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.352363083 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=252", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=252,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:===================================>                 (79 + 39) / 118][Stage 116:======================================>              (86 + 32) / 118][Stage 116:==========================================>          (95 + 23) / 118][Stage 116:===================================================> (115 + 3) / 118]                                                                                [Stage 117:================================>                    (74 + 45) / 119][Stage 117:=====================================>               (85 + 34) / 119][Stage 117:============================================>        (99 + 20) / 119][Stage 117:=================================================>   (112 + 7) / 119][Stage 117:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.42234749 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=183,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350076085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:====================================>                (80 + 35) / 115][Stage 118:=======================================>             (85 + 30) / 115][Stage 118:==========================================>          (92 + 23) / 115][Stage 118:=============================================>      (101 + 14) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:======================================>              (85 + 31) / 116][Stage 119:===========================================>         (95 + 21) / 116][Stage 119:=================================================>   (109 + 7) / 116][Stage 119:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.949279969 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=106,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430883275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (58 + 55) / 113][Stage 120:================================>                    (69 + 44) / 113][Stage 120:========================================>            (86 + 27) / 113][Stage 120:==============================================>     (101 + 12) / 113]                                                                                [Stage 121:===========================>                         (59 + 55) / 114][Stage 121:================================>                    (70 + 44) / 114][Stage 121:=========================================>           (90 + 24) / 114][Stage 121:==================================================>  (109 + 5) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.245344335 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:============================>                        (61 + 52) / 113][Stage 122:=====================================>               (81 + 32) / 113][Stage 122:==============================================>     (102 + 11) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:===========================>                         (60 + 54) / 114][Stage 123:=============================>                       (63 + 51) / 114][Stage 123:=======================================>             (84 + 30) / 114][Stage 123:==============================================>      (99 + 15) / 114][Stage 123:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.119354632 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=69", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=69,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36182015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=======================================>             (85 + 30) / 115][Stage 124:============================================>        (96 + 19) / 115][Stage 124:===================================================> (111 + 4) / 115]                                                                                [Stage 125:======================================>              (84 + 32) / 116][Stage 125:==========================================>          (94 + 22) / 116][Stage 125:===============================================>    (105 + 11) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.728076343 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=156", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=156,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=====================================>               (81 + 34) / 115][Stage 126:======================================>              (84 + 31) / 115][Stage 126:============================================>        (97 + 18) / 115][Stage 126:==================================================>  (109 + 6) / 115][Stage 126:====================================================>(113 + 2) / 115]                                                                                [Stage 127:=======================================>             (86 + 30) / 116][Stage 127:============================================>        (97 + 19) / 116][Stage 127:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.809966127 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406665113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==================================>                  (74 + 39) / 113][Stage 128:=========================================>           (88 + 25) / 113][Stage 128:=============================================>       (97 + 16) / 113][Stage 128:=================================================>   (105 + 8) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:=======================================>             (84 + 30) / 114][Stage 129:===========================================>         (94 + 20) / 114][Stage 129:==============================================>     (103 + 11) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.128711022 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=146", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=146,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388089533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===============================>                     (68 + 47) / 115][Stage 130:===================================>                 (78 + 37) / 115][Stage 130:=============================================>       (99 + 16) / 115][Stage 130:==================================================>  (109 + 6) / 115][Stage 130:====================================================>(113 + 2) / 115]                                                                                [Stage 131:================================>                    (72 + 44) / 116][Stage 131:=========================================>           (90 + 26) / 116][Stage 131:==============================================>     (103 + 13) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.76367619 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==============================>                      (66 + 49) / 115][Stage 132:=====================================>               (81 + 34) / 115][Stage 132:============================================>        (97 + 18) / 115][Stage 132:===================================================> (111 + 4) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:================================>                    (71 + 45) / 116][Stage 133:======================================>              (85 + 31) / 116][Stage 133:==============================================>     (103 + 13) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.747388458 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=188,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362107202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (80 + 33) / 113][Stage 134:=========================================>           (89 + 24) / 113][Stage 134:=============================================>       (98 + 15) / 113][Stage 134:===================================================> (110 + 3) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:===================================>                 (76 + 38) / 114][Stage 135:=======================================>             (84 + 30) / 114][Stage 135:===========================================>         (94 + 20) / 114][Stage 135:=================================================>   (106 + 8) / 114][Stage 135:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.182645715 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=63", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=63,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382200469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (72 + 43) / 115][Stage 136:=====================================>               (82 + 33) / 115][Stage 136:============================================>        (97 + 18) / 115][Stage 136:==================================================>  (109 + 6) / 115]                                                                                [Stage 137:====================================>                (80 + 36) / 116][Stage 137:==========================================>          (94 + 22) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:===================================================> (112 + 4) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.748672706 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=174", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=174,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===================================>                 (76 + 39) / 115][Stage 138:========================================>            (87 + 28) / 115][Stage 138:==============================================>     (102 + 13) / 115][Stage 138:==================================================>  (110 + 5) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:===============================>                     (70 + 46) / 116][Stage 139:=======================================>             (87 + 29) / 116][Stage 139:=============================================>      (102 + 14) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.880185576 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=14", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=14,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392287159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (58 + 55) / 113][Stage 140:===========================>                         (59 + 54) / 113][Stage 140:=====================================>               (80 + 33) / 113][Stage 140:============================================>        (94 + 19) / 113][Stage 140:===================================================> (109 + 4) / 113]                                                                                [Stage 141:===========================>                         (59 + 55) / 114][Stage 141:===============================>                     (67 + 47) / 114][Stage 141:=====================================>               (81 + 33) / 114][Stage 141:============================================>        (96 + 18) / 114][Stage 141:=================================================>   (106 + 8) / 114][Stage 141:===================================================> (111 + 3) / 114][Stage 141:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.9279576 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391616569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===================================>                 (76 + 39) / 115][Stage 142:========================================>            (87 + 28) / 115][Stage 142:==============================================>     (102 + 13) / 115][Stage 142:===================================================> (111 + 4) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:====================================>                (79 + 37) / 116][Stage 143:==========================================>          (92 + 24) / 116][Stage 143:==================================================>  (111 + 5) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.142902339 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381333729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (70 + 45) / 115][Stage 144:========================================>            (88 + 27) / 115][Stage 144:===============================================>    (104 + 11) / 115][Stage 144:====================================================>(113 + 2) / 115]                                                                                [Stage 145:=======================================>             (86 + 30) / 116][Stage 145:===========================================>         (95 + 21) / 116][Stage 145:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.735718366 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364344207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===================================>                 (75 + 38) / 113][Stage 146:=======================================>             (84 + 29) / 113][Stage 146:==============================================>      (99 + 14) / 113][Stage 146:==================================================>  (108 + 5) / 113][Stage 146:====================================================>(111 + 2) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:===================================>                 (76 + 38) / 114][Stage 147:=========================================>           (89 + 25) / 114][Stage 147:=============================================>       (98 + 16) / 114][Stage 147:=================================================>   (106 + 8) / 114][Stage 147:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.212603399 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=56", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=56,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392551011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (58 + 55) / 113][Stage 148:============================>                        (61 + 52) / 113][Stage 148:==================================>                  (74 + 39) / 113][Stage 148:==========================================>          (91 + 22) / 113][Stage 148:================================================>    (104 + 9) / 113][Stage 148:===================================================> (109 + 4) / 113]                                                                                [Stage 149:=============================>                       (63 + 51) / 114][Stage 149:===================================>                 (76 + 38) / 114][Stage 149:===========================================>         (94 + 20) / 114][Stage 149:===================================================> (110 + 4) / 114][Stage 149:===================================================> (111 + 3) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.00262636 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=127", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=127,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (59 + 54) / 113][Stage 150:================================>                    (70 + 43) / 113][Stage 150:======================================>              (83 + 30) / 113][Stage 150:==============================================>     (100 + 13) / 113][Stage 150:==================================================>  (107 + 6) / 113]                                                                                [Stage 151:=============================>                       (63 + 51) / 114][Stage 151:===================================>                 (77 + 37) / 114][Stage 151:==========================================>          (92 + 22) / 114][Stage 151:==============================================>     (101 + 13) / 114][Stage 151:==================================================>  (108 + 6) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.618947008 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=189,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412078949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===========================>                         (58 + 55) / 113][Stage 152:================================>                    (69 + 44) / 113][Stage 152:========================================>            (86 + 27) / 113][Stage 152:================================================>    (104 + 9) / 113]                                                                                [Stage 153:===========================>                         (59 + 55) / 114][Stage 153:================================>                    (70 + 44) / 114][Stage 153:=======================================>             (86 + 28) / 114][Stage 153:==============================================>     (102 + 12) / 114][Stage 153:====================================================>(112 + 2) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.389566579 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371264881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (72 + 46) / 118][Stage 154:===================================>                 (79 + 39) / 118][Stage 154:=======================================>             (88 + 30) / 118][Stage 154:============================================>       (101 + 17) / 118][Stage 154:==================================================>  (112 + 6) / 118]                                                                                [Stage 155:==================================>                  (78 + 41) / 119][Stage 155:====================================>                (82 + 37) / 119][Stage 155:============================================>       (101 + 18) / 119][Stage 155:=================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.198096471 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380788509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (73 + 45) / 118][Stage 156:===================================>                 (80 + 38) / 118][Stage 156:===========================================>         (96 + 22) / 118][Stage 156:=================================================>   (111 + 7) / 118]                                                                                [Stage 157:=================================>                   (75 + 44) / 119][Stage 157:====================================>                (82 + 37) / 119][Stage 157:============================================>       (101 + 18) / 119][Stage 157:===================================================> (115 + 4) / 119][Stage 157:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.171160696 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=74,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38322381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (71 + 44) / 115][Stage 158:=======================================>             (85 + 30) / 115][Stage 158:===============================================>    (105 + 10) / 115][Stage 158:====================================================>(113 + 2) / 115]                                                                                [Stage 159:================================>                    (72 + 44) / 116][Stage 159:======================================>              (84 + 32) / 116][Stage 159:============================================>       (100 + 16) / 116][Stage 159:==================================================>  (111 + 5) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.799289715 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=61,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388123993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:=============================>                       (65 + 50) / 115][Stage 160:==================================>                  (74 + 41) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:===============================================>    (105 + 10) / 115][Stage 160:=================================================>   (108 + 7) / 115][Stage 160:===================================================> (111 + 4) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:===============================>                     (70 + 46) / 116][Stage 161:====================================>                (80 + 36) / 116][Stage 161:=============================================>       (99 + 17) / 116][Stage 161:===============================================>    (106 + 10) / 116][Stage 161:=================================================>   (109 + 7) / 116][Stage 161:===================================================> (113 + 3) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.290203367 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409611452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:===========================>                         (62 + 58) / 120][Stage 162:==================================>                  (77 + 43) / 120][Stage 162:=============================================>      (104 + 16) / 120][Stage 162:====================================================>(118 + 2) / 120]                                                                                [Stage 163:============================>                        (65 + 56) / 121][Stage 163:==================================>                  (79 + 42) / 121][Stage 163:==========================================>          (98 + 23) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.727984519 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388741892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (72 + 43) / 115][Stage 164:=========================================>           (89 + 26) / 115][Stage 164:===============================================>    (104 + 11) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:===============================>                     (70 + 46) / 116][Stage 165:======================================>              (85 + 31) / 116][Stage 165:============================================>        (97 + 19) / 116][Stage 165:===============================================>    (105 + 11) / 116][Stage 165:===============================================>    (106 + 10) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.033452387 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410657774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:================================>                    (74 + 46) / 120][Stage 166:=======================================>             (89 + 31) / 120][Stage 166:===============================================>    (110 + 10) / 120][Stage 166:====================================================>(119 + 1) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:==============================>                      (70 + 51) / 121][Stage 167:======================================>              (87 + 34) / 121][Stage 167:=============================================>      (106 + 15) / 121][Stage 167:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.964447096 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=203", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=203,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368390435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (73 + 45) / 118][Stage 168:====================================>                (81 + 37) / 118][Stage 168:=========================================>           (92 + 26) / 118][Stage 168:=============================================>      (103 + 15) / 118]                                                                                [Stage 169:================================>                    (73 + 46) / 119][Stage 169:==================================>                  (78 + 41) / 119][Stage 169:=========================================>           (94 + 25) / 119][Stage 169:==============================================>     (106 + 13) / 119][Stage 169:===================================================> (116 + 3) / 119][Stage 169:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.445144678 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=113", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=113,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364276914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (72 + 41) / 113][Stage 170:======================================>              (83 + 30) / 113][Stage 170:===========================================>         (92 + 21) / 113][Stage 170:=================================================>   (106 + 7) / 113][Stage 170:===================================================> (110 + 3) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:===================================>                 (77 + 37) / 114][Stage 171:=====================================>               (81 + 33) / 114][Stage 171:==========================================>          (92 + 22) / 114][Stage 171:==============================================>     (103 + 11) / 114][Stage 171:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.211314286 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389921572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:============================>                        (60 + 53) / 113][Stage 172:================================>                    (69 + 44) / 113][Stage 172:========================================>            (87 + 26) / 113][Stage 172:=================================================>   (106 + 7) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:================================>                    (70 + 44) / 114][Stage 173:=========================================>           (90 + 24) / 114][Stage 173:==============================================>     (101 + 13) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.261240952 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=179", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=179,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369206815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===================================>                 (75 + 38) / 113][Stage 174:======================================>              (82 + 31) / 113][Stage 174:===========================================>         (93 + 20) / 113][Stage 174:==================================================>  (108 + 5) / 113][Stage 174:====================================================>(111 + 2) / 113]                                                                                [Stage 175:==================================>                  (74 + 40) / 114][Stage 175:=======================================>             (84 + 30) / 114][Stage 175:==========================================>          (91 + 23) / 114][Stage 175:==============================================>     (102 + 12) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.150774517 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401581976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:==============================>                      (64 + 49) / 113][Stage 176:=====================================>               (80 + 33) / 113][Stage 176:=============================================>       (97 + 16) / 113][Stage 176:===================================================> (109 + 4) / 113]                                                                                [Stage 177:===========================>                         (60 + 54) / 114][Stage 177:===================================>                 (76 + 38) / 114][Stage 177:============================================>        (95 + 19) / 114][Stage 177:==================================================>  (109 + 5) / 114][Stage 177:====================================================>(112 + 2) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.687123349 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=212", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=212,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372786484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:====================================>                (77 + 36) / 113][Stage 178:=========================================>           (88 + 25) / 113][Stage 178:==============================================>     (100 + 13) / 113][Stage 178:==================================================>  (107 + 6) / 113]                                                                                [Stage 179:====================================>                (78 + 36) / 114][Stage 179:===========================================>         (94 + 20) / 114][Stage 179:=================================================>   (106 + 8) / 114][Stage 179:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.885061332 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397986837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (62 + 58) / 120][Stage 180:==================================>                  (77 + 43) / 120][Stage 180:==========================================>          (97 + 23) / 120][Stage 180:==================================================>  (114 + 6) / 120][Stage 180:===================================================> (116 + 4) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:===========================>                         (63 + 58) / 121][Stage 181:===================================>                 (81 + 40) / 121][Stage 181:=================================================>   (113 + 8) / 121][Stage 181:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.483143498 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=71", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=71,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373665227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (73 + 45) / 118][Stage 182:===================================>                 (79 + 39) / 118][Stage 182:========================================>            (90 + 28) / 118][Stage 182:=============================================>      (103 + 15) / 118][Stage 182:====================================================>(117 + 1) / 118]                                                                                [Stage 183:================================>                    (73 + 46) / 119][Stage 183:=================================>                   (76 + 43) / 119][Stage 183:======================================>              (87 + 32) / 119][Stage 183:============================================>       (101 + 18) / 119][Stage 183:==================================================>  (114 + 5) / 119][Stage 183:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.524773262 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=118", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=118,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347648522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:======================================>              (83 + 32) / 115][Stage 184:=============================================>      (100 + 15) / 115][Stage 184:==================================================>  (109 + 6) / 115]                                                                                [Stage 185:=====================================>               (83 + 33) / 116][Stage 185:==========================================>          (93 + 23) / 116][Stage 185:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.534767051 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=192", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=192,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (84 + 31) / 115][Stage 186:============================================>        (96 + 19) / 115][Stage 186:==================================================>  (109 + 6) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:=====================================>               (83 + 33) / 116][Stage 187:=========================================>           (91 + 25) / 116][Stage 187:=================================================>   (108 + 8) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.581004947 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=107", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=107,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (83 + 32) / 115][Stage 188:============================================>        (97 + 18) / 115][Stage 188:==================================================>  (110 + 5) / 115]                                                                                [Stage 189:=====================================>               (83 + 33) / 116][Stage 189:===========================================>         (95 + 21) / 116][Stage 189:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.582693409 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=11", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=11,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38998373 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (59 + 54) / 113][Stage 190:===============================>                     (67 + 46) / 113][Stage 190:=========================================>           (89 + 24) / 113][Stage 190:====================================================>(111 + 2) / 113]                                                                                [Stage 191:===========================>                         (60 + 54) / 114][Stage 191:==============================>                      (66 + 48) / 114][Stage 191:====================================>                (78 + 36) / 114][Stage 191:=============================================>       (98 + 16) / 114][Stage 191:===================================================> (110 + 4) / 114][Stage 191:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.160789776 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=219,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372658467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:==================================>                  (76 + 42) / 118][Stage 192:=======================================>             (88 + 30) / 118][Stage 192:=============================================>      (104 + 14) / 118][Stage 192:===================================================> (115 + 3) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:===================================>                 (80 + 39) / 119][Stage 193:=======================================>             (89 + 30) / 119][Stage 193:===========================================>         (98 + 21) / 119][Stage 193:===============================================>    (109 + 10) / 119][Stage 193:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.389400774 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=101,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:=================================>                   (74 + 44) / 118][Stage 194:====================================>                (81 + 37) / 118][Stage 194:===========================================>         (97 + 21) / 118][Stage 194:==============================================>     (105 + 13) / 118][Stage 194:====================================================>(116 + 2) / 118]                                                                                [Stage 195:================================>                    (74 + 45) / 119][Stage 195:==================================>                  (77 + 42) / 119][Stage 195:======================================>              (86 + 33) / 119][Stage 195:============================================>        (99 + 20) / 119][Stage 195:==================================================>  (113 + 6) / 119][Stage 195:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.764650098 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401949053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:============================>                        (65 + 55) / 120][Stage 196:===================================>                 (80 + 40) / 120][Stage 196:===========================================>        (100 + 20) / 120][Stage 196:====================================================>(118 + 2) / 120]                                                                                [Stage 197:===========================>                         (63 + 58) / 121][Stage 197:===============================>                     (73 + 48) / 121][Stage 197:========================================>            (92 + 29) / 121][Stage 197:==============================================>     (108 + 13) / 121][Stage 197:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.363687389 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=40", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=40,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 60) / 120][Stage 198:=============================>                       (67 + 53) / 120][Stage 198:=====================================>               (84 + 36) / 120][Stage 198:============================================>       (103 + 17) / 120][Stage 198:====================================================>(118 + 2) / 120]                                                                                [Stage 199:===========================>                         (62 + 59) / 121][Stage 199:================================>                    (75 + 46) / 121][Stage 199:==========================================>         (100 + 21) / 121][Stage 199:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.267415955 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37736654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===================================>                 (75 + 38) / 113][Stage 200:========================================>            (87 + 26) / 113][Stage 200:=============================================>       (96 + 17) / 113][Stage 200:==============================================>     (101 + 12) / 113][Stage 200:===================================================> (110 + 3) / 113]                                                                                [Stage 201:=====================================>               (80 + 34) / 114][Stage 201:=========================================>           (90 + 24) / 114][Stage 201:============================================>        (96 + 18) / 114][Stage 201:==============================================>     (102 + 12) / 114][Stage 201:==================================================>  (108 + 6) / 114][Stage 201:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.17772729 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m29.103s
user	11m54.036s
sys	0m51.048s
