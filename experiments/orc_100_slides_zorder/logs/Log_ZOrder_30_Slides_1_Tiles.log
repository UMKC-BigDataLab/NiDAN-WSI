Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 23:46:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:47:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:47:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:47:05 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 23:47:07 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:47:18 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531234707-0727).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@158cb50a

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.448563413 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=====>                                                (11 + 104) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.995833916 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.777171953 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (48 + 72) / 120][Stage 2:======================>                                (50 + 70) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:==================================>                    (76 + 44) / 120][Stage 2:==========================================>            (93 + 27) / 120][Stage 2:==============================================>       (103 + 17) / 120][Stage 2:====================================================>  (114 + 6) / 120]                                                                                [Stage 3:=========================>                             (57 + 64) / 121][Stage 3:===========================>                           (60 + 61) / 121][Stage 3:==============================>                        (66 + 55) / 121][Stage 3:===============================>                       (69 + 52) / 121][Stage 3:==================================>                    (75 + 46) / 121][Stage 3:==========================================>            (94 + 27) / 121][Stage 3:=================================================>    (111 + 10) / 121][Stage 3:=====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.876621027 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=91", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=91,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.614532387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:======================================>                (80 + 35) / 115][Stage 4:=======================================>               (83 + 32) / 115][Stage 4:===========================================>           (90 + 25) / 115][Stage 4:============================================>          (94 + 21) / 115][Stage 4:==============================================>       (100 + 15) / 115][Stage 4:===================================================>   (108 + 7) / 115][Stage 4:=====================================================> (112 + 3) / 115]                                                                                [Stage 5:=======================================>               (83 + 33) / 116][Stage 5:==========================================>            (90 + 26) / 116][Stage 5:=============================================>         (95 + 21) / 116][Stage 5:===============================================>      (102 + 14) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.120935525 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=203", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=203,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.711559305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (55 + 65) / 120][Stage 6:===========================>                           (60 + 60) / 120][Stage 6:=============================>                         (64 + 56) / 120][Stage 6:=================================>                     (72 + 48) / 120][Stage 6:======================================>                (85 + 35) / 120][Stage 6:================================================>     (108 + 12) / 120][Stage 6:=====================================================> (116 + 4) / 120][Stage 6:======================================================>(118 + 2) / 120]                                                                                [Stage 7:===========================>                           (61 + 60) / 121][Stage 7:============================>                          (62 + 59) / 121][Stage 7:===============================>                       (70 + 51) / 121][Stage 7:===================================>                   (77 + 44) / 121][Stage 7:=========================================>             (91 + 30) / 121][Stage 7:===============================================>      (106 + 15) / 121][Stage 7:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.146249971 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=215", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=215,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539205091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==================================>                    (70 + 43) / 113][Stage 8:====================================>                  (75 + 38) / 113][Stage 8:=======================================>               (81 + 32) / 113][Stage 8:=========================================>             (85 + 28) / 113][Stage 8:=============================================>         (93 + 20) / 113][Stage 8:================================================>      (99 + 14) / 113][Stage 8:====================================================>  (108 + 5) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:===================================>                   (74 + 40) / 114][Stage 9:=========================================>             (86 + 28) / 114][Stage 9:============================================>          (93 + 21) / 114][Stage 9:===============================================>       (98 + 16) / 114][Stage 9:==================================================>    (105 + 9) / 114][Stage 9:====================================================>  (109 + 5) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.251642434 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=55", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=55,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.594438521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (59 + 61) / 120][Stage 10:===========================>                          (61 + 59) / 120][Stage 10:==============================>                       (67 + 53) / 120][Stage 10:===================================>                  (78 + 42) / 120][Stage 10:========================================>             (89 + 31) / 120][Stage 10:=============================================>       (102 + 18) / 120][Stage 10:====================================================> (116 + 4) / 120]                                                                                [Stage 11:============================>                         (63 + 58) / 121][Stage 11:==================================>                   (78 + 43) / 121][Stage 11:=========================================>            (94 + 27) / 121][Stage 11:===============================================>     (109 + 12) / 121][Stage 11:==================================================>   (114 + 7) / 121][Stage 11:===================================================>  (116 + 5) / 121][Stage 11:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.110902616 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=235", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=235,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.576463043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=============================>                        (63 + 52) / 115][Stage 12:===============================>                      (67 + 48) / 115][Stage 12:======================================>               (81 + 34) / 115][Stage 12:==========================================>           (90 + 25) / 115][Stage 12:================================================>    (105 + 10) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:================================>                     (70 + 46) / 116][Stage 13:======================================>               (83 + 33) / 116][Stage 13:==============================================>       (99 + 17) / 116][Stage 13:===============================================>     (104 + 12) / 116][Stage 13:==================================================>   (109 + 7) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.613419308 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44735755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:======================================>               (81 + 34) / 115][Stage 14:=========================================>            (88 + 27) / 115][Stage 14:==============================================>      (101 + 14) / 115][Stage 14:===================================================>  (109 + 6) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:=======================================>              (84 + 32) / 116][Stage 15:============================================>         (96 + 20) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:===================================================>  (111 + 5) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.534533578 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.698128653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:============================>                         (63 + 57) / 120][Stage 16:================================>                     (72 + 48) / 120][Stage 16:======================================>               (85 + 35) / 120][Stage 16:===========================================>          (96 + 24) / 120][Stage 16:================================================>    (109 + 11) / 120][Stage 16:=====================================================>(118 + 2) / 120][Stage 16:=====================================================>(119 + 1) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:=============================>                        (67 + 54) / 121][Stage 17:==================================>                   (78 + 43) / 121][Stage 17:============================================>        (101 + 20) / 121][Stage 17:=================================================>    (112 + 9) / 121][Stage 17:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.953863542 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500341727 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (71 + 42) / 113][Stage 18:======================================>               (81 + 32) / 113][Stage 18:==========================================>           (89 + 24) / 113][Stage 18:==============================================>       (98 + 15) / 113][Stage 18:==================================================>   (106 + 7) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:=================================>                    (70 + 44) / 114][Stage 19:======================================>               (81 + 33) / 114][Stage 19:==========================================>           (90 + 24) / 114][Stage 19:==============================================>       (99 + 15) / 114][Stage 19:==================================================>   (106 + 8) / 114][Stage 19:===================================================>  (109 + 5) / 114][Stage 19:====================================================> (110 + 4) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.852088697 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.577514872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (58 + 55) / 113][Stage 20:===============================>                      (66 + 47) / 113][Stage 20:=======================================>              (83 + 30) / 113][Stage 20:==================================================>   (106 + 7) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:============================>                         (60 + 54) / 114][Stage 21:===============================>                      (66 + 48) / 114][Stage 21:=====================================>                (80 + 34) / 114][Stage 21:=========================================>            (88 + 26) / 114][Stage 21:=============================================>        (95 + 19) / 114][Stage 21:=================================================>    (105 + 9) / 114][Stage 21:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.680011543 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468521408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=================================>                    (71 + 42) / 113][Stage 22:=========================================>            (86 + 27) / 113][Stage 22:=============================================>        (95 + 18) / 113][Stage 22:===============================================>     (102 + 11) / 113][Stage 22:=====================================================>(112 + 1) / 113]                                                                                [Stage 23:======================================>               (82 + 32) / 114][Stage 23:=============================================>        (95 + 19) / 114][Stage 23:=================================================>    (105 + 9) / 114][Stage 23:====================================================> (110 + 4) / 114][Stage 23:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.326866608 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456597459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===================================>                  (75 + 38) / 113][Stage 24:==========================================>           (88 + 25) / 113][Stage 24:==============================================>       (97 + 16) / 113][Stage 24:==================================================>   (105 + 8) / 113][Stage 24:====================================================> (109 + 4) / 113][Stage 24:====================================================> (110 + 3) / 113]                                                                                [Stage 25:=======================================>              (83 + 31) / 114][Stage 25:==============================================>      (100 + 14) / 114][Stage 25:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.041989249 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481718698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==================================>                   (74 + 41) / 115][Stage 26:========================================>             (87 + 28) / 115][Stage 26:==============================================>       (99 + 16) / 115][Stage 26:====================================================> (111 + 4) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:=================================>                    (71 + 45) / 116][Stage 27:=======================================>              (84 + 32) / 116][Stage 27:=============================================>        (97 + 19) / 116][Stage 27:==============================================>      (101 + 15) / 116][Stage 27:=================================================>    (107 + 9) / 116][Stage 27:===================================================>  (111 + 5) / 116][Stage 27:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.56161116 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=253", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=253,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515157623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=========================>                            (57 + 63) / 120][Stage 28:=============================>                        (65 + 55) / 120][Stage 28:====================================>                 (81 + 39) / 120][Stage 28:=============================================>       (102 + 18) / 120][Stage 28:===============================================>     (108 + 12) / 120][Stage 28:====================================================> (117 + 3) / 120]                                                                                [Stage 29:===========================>                          (62 + 59) / 121][Stage 29:=============================>                        (66 + 55) / 121][Stage 29:=========================================>            (94 + 27) / 121][Stage 29:================================================>    (110 + 11) / 121][Stage 29:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.50216828 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=157", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=157,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502145522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:================================>                     (67 + 46) / 113][Stage 30:========================================>             (84 + 29) / 113][Stage 30:===============================================>     (101 + 12) / 113]                                                                                [Stage 31:===========================>                          (59 + 55) / 114][Stage 31:===============================>                      (67 + 47) / 114][Stage 31:=====================================>                (79 + 35) / 114][Stage 31:=============================================>        (96 + 18) / 114][Stage 31:==================================================>   (107 + 7) / 114][Stage 31:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.360350447 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=18,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447789798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:==================================>                   (76 + 42) / 118][Stage 32:=========================================>            (90 + 28) / 118][Stage 32:==================================================>   (111 + 7) / 118][Stage 32:=====================================================>(116 + 2) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:=======================================>              (87 + 32) / 119][Stage 33:==============================================>      (104 + 15) / 119][Stage 33:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.120604403 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=125", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=125,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501411708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:============================>                         (64 + 56) / 120][Stage 34:====================================>                 (80 + 40) / 120][Stage 34:===========================================>          (96 + 24) / 120][Stage 34:===================================================>  (114 + 6) / 120][Stage 34:=====================================================>(118 + 2) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:==============================>                       (68 + 53) / 121][Stage 35:========================================>             (91 + 30) / 121][Stage 35:=============================================>       (104 + 17) / 121][Stage 35:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.175225182 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:================================>                     (73 + 47) / 120][Stage 36:=====================================>                (83 + 37) / 120][Stage 36:==============================================>      (106 + 14) / 120][Stage 36:=====================================================>(118 + 2) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:=============================>                        (67 + 54) / 121][Stage 37:=====================================>                (83 + 38) / 121][Stage 37:============================================>        (102 + 19) / 121][Stage 37:====================================================> (117 + 4) / 121][Stage 37:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.503540023 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 59) / 120][Stage 38:=================================>                    (74 + 46) / 120][Stage 38:=======================================>              (87 + 33) / 120][Stage 38:==============================================>      (105 + 15) / 120][Stage 38:====================================================> (117 + 3) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:=============================>                        (67 + 54) / 121][Stage 39:====================================>                 (82 + 39) / 121][Stage 39:===========================================>         (100 + 21) / 121][Stage 39:==================================================>   (114 + 7) / 121][Stage 39:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.399939801 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459317878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:==================================>                   (76 + 42) / 118][Stage 40:=======================================>              (87 + 31) / 118][Stage 40:================================================>    (107 + 11) / 118][Stage 40:===================================================>  (112 + 6) / 118]                                                                                [Stage 41:==================================>                   (75 + 44) / 119][Stage 41:=======================================>              (87 + 32) / 119][Stage 41:============================================>        (101 + 18) / 119][Stage 41:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.084926674 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=112", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=112,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470128095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (66 + 49) / 115][Stage 42:=====================================>                (80 + 35) / 115][Stage 42:============================================>         (94 + 21) / 115][Stage 42:=================================================>    (106 + 9) / 115][Stage 42:====================================================> (111 + 4) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:=================================>                    (72 + 44) / 116][Stage 43:=========================================>            (89 + 27) / 116][Stage 43:===============================================>     (104 + 12) / 116][Stage 43:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.956695059 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=213", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=213,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===============================>                      (67 + 48) / 115][Stage 44:=====================================>                (80 + 35) / 115][Stage 44:===========================================>          (93 + 22) / 115][Stage 44:===================================================>  (110 + 5) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:================================>                     (69 + 47) / 116][Stage 45:=======================================>              (84 + 32) / 116][Stage 45:==============================================>       (99 + 17) / 116][Stage 45:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.88384423 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485285692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (66 + 49) / 115][Stage 46:======================================>               (81 + 34) / 115][Stage 46:=============================================>        (97 + 18) / 115][Stage 46:===============================================>     (104 + 11) / 115][Stage 46:====================================================> (111 + 4) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:=====================================>                (80 + 36) / 116][Stage 47:==============================================>       (99 + 17) / 116][Stage 47:===============================================>     (104 + 12) / 116][Stage 47:===================================================>  (111 + 5) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.624574969 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472420306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==================================>                   (74 + 41) / 115][Stage 48:=========================================>            (88 + 27) / 115][Stage 48:===============================================>     (103 + 12) / 115][Stage 48:===================================================>  (109 + 6) / 115][Stage 48:====================================================> (112 + 3) / 115]                                                                                [Stage 49:===============================>                      (68 + 48) / 116][Stage 49:====================================>                 (79 + 37) / 116][Stage 49:============================================>         (96 + 20) / 116][Stage 49:==================================================>   (108 + 8) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.118279891 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428452063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=================================>                    (74 + 44) / 118][Stage 50:=====================================>                (81 + 37) / 118][Stage 50:========================================>             (89 + 29) / 118][Stage 50:============================================>        (100 + 18) / 118][Stage 50:====================================================> (115 + 3) / 118]                                                                                [Stage 51:==================================>                   (77 + 42) / 119][Stage 51:=====================================>                (83 + 36) / 119][Stage 51:===========================================>          (95 + 24) / 119][Stage 51:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.231072794 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443138956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:=============================>                        (62 + 51) / 113][Stage 52:===================================>                  (74 + 39) / 113][Stage 52:===============================================>     (102 + 11) / 113][Stage 52:====================================================> (109 + 4) / 113]                                                                                [Stage 53:============================>                         (61 + 53) / 114][Stage 53:=================================>                    (71 + 43) / 114][Stage 53:============================================>         (94 + 20) / 114][Stage 53:==================================================>   (106 + 8) / 114][Stage 53:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.321045671 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=100", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=100,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==========================>                           (56 + 57) / 113][Stage 54:=============================>                        (62 + 51) / 113][Stage 54:=====================================>                (78 + 35) / 113][Stage 54:==============================================>       (98 + 15) / 113][Stage 54:===================================================>  (107 + 6) / 113][Stage 54:=====================================================>(112 + 1) / 113]                                                                                [Stage 55:===========================>                          (59 + 55) / 114][Stage 55:===============================>                      (67 + 47) / 114][Stage 55:=====================================>                (80 + 34) / 114][Stage 55:==============================================>      (101 + 13) / 114][Stage 55:===================================================>  (108 + 6) / 114][Stage 55:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.505345481 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=179", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=179,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380896475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (82 + 33) / 115][Stage 56:===========================================>          (93 + 22) / 115][Stage 56:==================================================>   (107 + 8) / 115]                                                                                [Stage 57:========================================>             (86 + 30) / 116][Stage 57:============================================>         (95 + 21) / 116][Stage 57:=================================================>    (107 + 9) / 116][Stage 57:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.673296402 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=237", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=237,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427481741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=================================>                    (71 + 42) / 113][Stage 58:=====================================>                (78 + 35) / 113][Stage 58:=========================================>            (87 + 26) / 113][Stage 58:===============================================>      (99 + 14) / 113][Stage 58:====================================================> (110 + 3) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:===================================>                  (74 + 40) / 114][Stage 59:======================================>               (82 + 32) / 114][Stage 59:============================================>         (94 + 20) / 114][Stage 59:==================================================>   (107 + 7) / 114][Stage 59:====================================================> (110 + 4) / 114][Stage 59:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.356264206 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=3", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=3,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431180226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:====================================>                 (76 + 37) / 113][Stage 60:========================================>             (84 + 29) / 113][Stage 60:============================================>         (94 + 19) / 113][Stage 60:====================================================> (109 + 4) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:==================================>                   (72 + 42) / 114][Stage 61:=========================================>            (87 + 27) / 114][Stage 61:============================================>         (94 + 20) / 114][Stage 61:===============================================>     (103 + 11) / 114][Stage 61:==================================================>   (107 + 7) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.92499214 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=102", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=102,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465931291 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:=============================>                        (62 + 51) / 113][Stage 62:==================================>                   (72 + 41) / 113][Stage 62:===========================================>          (91 + 22) / 113][Stage 62:===================================================>  (108 + 5) / 113]                                                                                [Stage 63:===========================>                          (59 + 55) / 114][Stage 63:==================================>                   (73 + 41) / 114][Stage 63:==============================================>       (98 + 16) / 114][Stage 63:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.111669286 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462976198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:=============================>                        (66 + 54) / 120][Stage 64:=================================>                    (74 + 46) / 120][Stage 64:==============================================>      (105 + 15) / 120][Stage 64:=====================================================>(118 + 2) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:===============================>                      (71 + 50) / 121][Stage 65:=======================================>              (89 + 32) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.134353458 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=160", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=160,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:=============================>                        (66 + 54) / 120][Stage 66:=====================================>                (83 + 37) / 120][Stage 66:=============================================>       (102 + 18) / 120][Stage 66:====================================================> (117 + 3) / 120]                                                                                [Stage 67:============================>                         (64 + 57) / 121][Stage 67:==================================>                   (77 + 44) / 121][Stage 67:===========================================>          (97 + 24) / 121][Stage 67:================================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.059819546 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=117", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=117,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429477808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=============================>                        (61 + 52) / 113][Stage 68:================================>                     (69 + 44) / 113][Stage 68:==========================================>           (88 + 25) / 113][Stage 68:===================================================>  (107 + 6) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:===============================>                      (66 + 48) / 114][Stage 69:===================================>                  (75 + 39) / 114][Stage 69:===========================================>          (92 + 22) / 114][Stage 69:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.226760239 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367844386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (82 + 33) / 115][Stage 70:========================================>             (87 + 28) / 115][Stage 70:===============================================>     (103 + 12) / 115][Stage 70:====================================================> (112 + 3) / 115]                                                                                [Stage 71:=========================================>            (89 + 27) / 116][Stage 71:===============================================>     (103 + 13) / 116][Stage 71:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.581563141 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=22", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=22,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555378865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:============================>                         (59 + 54) / 113][Stage 72:===============================>                      (66 + 47) / 113][Stage 72:==========================================>           (89 + 24) / 113][Stage 72:================================================>    (103 + 10) / 113][Stage 72:====================================================> (109 + 4) / 113]                                                                                [Stage 73:=============================>                        (63 + 51) / 114][Stage 73:====================================>                 (76 + 38) / 114][Stage 73:==========================================>           (90 + 24) / 114][Stage 73:==============================================>      (101 + 13) / 114][Stage 73:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.320021358 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=183", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=183,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429267191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:==============================>                       (63 + 50) / 113][Stage 74:===================================>                  (75 + 38) / 113][Stage 74:============================================>         (94 + 19) / 113][Stage 74:================================================>    (103 + 10) / 113]                                                                                [Stage 75:===========================>                          (59 + 55) / 114][Stage 75:==============================>                       (65 + 49) / 114][Stage 75:=====================================>                (80 + 34) / 114][Stage 75:==============================================>      (100 + 14) / 114]                                                                                Time elapsed: 3.110984713 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=122", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=122,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:============================>                         (59 + 54) / 113][Stage 76:===============================>                      (65 + 48) / 113][Stage 76:====================================>                 (77 + 36) / 113][Stage 76:==============================================>       (98 + 15) / 113][Stage 76:===================================================>  (107 + 6) / 113][Stage 76:=====================================================>(112 + 1) / 113]                                                                                [Stage 77:=============================>                        (62 + 52) / 114][Stage 77:================================>                     (69 + 45) / 114][Stage 77:=========================================>            (87 + 27) / 114][Stage 77:==============================================>      (100 + 14) / 114][Stage 77:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.441142052 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40953379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (72 + 43) / 115][Stage 78:======================================>               (83 + 32) / 115][Stage 78:================================================>    (105 + 10) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:===============================>                      (67 + 49) / 116][Stage 79:======================================>               (82 + 34) / 116][Stage 79:==============================================>      (101 + 15) / 116][Stage 79:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.764724411 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=211", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=211,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390062198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===================================>                  (75 + 38) / 113][Stage 80:===========================================>          (91 + 22) / 113][Stage 80:===============================================>     (102 + 11) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:======================================>               (82 + 32) / 114][Stage 81:==============================================>       (98 + 16) / 114][Stage 81:=================================================>    (105 + 9) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.934347215 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=85", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=85,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410962394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (72 + 41) / 113][Stage 82:=======================================>              (83 + 30) / 113][Stage 82:===============================================>      (99 + 14) / 113][Stage 82:====================================================> (110 + 3) / 113]                                                                                [Stage 83:=======================================>              (83 + 31) / 114][Stage 83:============================================>         (93 + 21) / 114][Stage 83:================================================>    (104 + 10) / 114][Stage 83:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.830896846 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=241", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=241,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399417432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==================================>                   (72 + 41) / 113][Stage 84:======================================>               (80 + 33) / 113][Stage 84:============================================>         (94 + 19) / 113][Stage 84:==================================================>   (105 + 8) / 113][Stage 84:=====================================================>(111 + 2) / 113]                                                                                [Stage 85:====================================>                 (78 + 36) / 114][Stage 85:=============================================>        (97 + 17) / 114][Stage 85:===================================================>  (109 + 5) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.92441601 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=90", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=90,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460821197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==============================>                       (64 + 51) / 115][Stage 86:=================================>                    (71 + 44) / 115][Stage 86:=======================================>              (85 + 30) / 115][Stage 86:==============================================>       (99 + 16) / 115][Stage 86:===================================================>  (109 + 6) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:================================>                     (69 + 47) / 116][Stage 87:=====================================>                (81 + 35) / 116][Stage 87:============================================>         (95 + 21) / 116][Stage 87:===============================================>     (104 + 12) / 116][Stage 87:====================================================> (112 + 4) / 116][Stage 87:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.314792977 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390976478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==================================>                   (76 + 42) / 118][Stage 88:=====================================>                (82 + 36) / 118][Stage 88:============================================>        (100 + 18) / 118][Stage 88:=================================================>    (109 + 9) / 118][Stage 88:====================================================> (115 + 3) / 118]                                                                                [Stage 89:=================================>                    (73 + 46) / 119][Stage 89:==================================>                   (75 + 44) / 119][Stage 89:======================================>               (84 + 35) / 119][Stage 89:===========================================>          (96 + 23) / 119][Stage 89:================================================>    (109 + 10) / 119][Stage 89:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.477548548 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410701583 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:====================================>                 (77 + 38) / 115][Stage 90:=========================================>            (89 + 26) / 115][Stage 90:===============================================>     (102 + 13) / 115][Stage 90:====================================================> (112 + 3) / 115][Stage 90:=====================================================>(114 + 1) / 115]                                                                                [Stage 91:=================================>                    (71 + 45) / 116][Stage 91:========================================>             (88 + 28) / 116][Stage 91:==============================================>       (99 + 17) / 116][Stage 91:==================================================>   (109 + 7) / 116][Stage 91:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.378727118 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=68", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=68,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424927402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (60 + 60) / 120][Stage 92:===============================>                      (70 + 50) / 120][Stage 92:========================================>             (89 + 31) / 120][Stage 92:====================================================> (116 + 4) / 120]                                                                                [Stage 93:===========================>                          (61 + 60) / 121][Stage 93:==============================>                       (68 + 53) / 121][Stage 93:======================================>               (86 + 35) / 121][Stage 93:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 2.751263674 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=46", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=46,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422203405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:==============================>                       (63 + 50) / 113][Stage 94:===================================>                  (75 + 38) / 113][Stage 94:===========================================>          (92 + 21) / 113][Stage 94:=====================================================>(112 + 1) / 113]                                                                                [Stage 95:===========================>                          (59 + 55) / 114][Stage 95:==============================>                       (64 + 50) / 114][Stage 95:====================================>                 (78 + 36) / 114][Stage 95:=========================================>            (87 + 27) / 114][Stage 95:===============================================>     (102 + 12) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.21032788 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=193", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=193,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355258243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=======================================>              (84 + 31) / 115][Stage 96:============================================>         (95 + 20) / 115][Stage 96:====================================================> (112 + 3) / 115]                                                                                [Stage 97:=======================================>              (85 + 31) / 116][Stage 97:=============================================>        (97 + 19) / 116][Stage 97:==================================================>   (109 + 7) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.603749323 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=6", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=6,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391297088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (72 + 46) / 118][Stage 98:==================================>                   (75 + 43) / 118][Stage 98:=====================================>                (83 + 35) / 118][Stage 98:============================================>         (97 + 21) / 118][Stage 98:===================================================>  (112 + 6) / 118]                                                                                [Stage 99:=================================>                    (73 + 46) / 119][Stage 99:=======================================>              (86 + 33) / 119][Stage 99:===========================================>          (95 + 24) / 119][Stage 99:=================================================>    (110 + 9) / 119][Stage 99:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.295875656 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360569402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:====================================>                (80 + 35) / 115][Stage 100:======================================>              (84 + 31) / 115][Stage 100:===========================================>         (94 + 21) / 115][Stage 100:================================================>    (106 + 9) / 115]                                                                                [Stage 101:=====================================>               (83 + 33) / 116][Stage 101:==========================================>          (94 + 22) / 116][Stage 101:===============================================>    (106 + 10) / 116][Stage 101:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.983036014 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=====================================>               (82 + 33) / 115][Stage 102:=========================================>           (89 + 26) / 115][Stage 102:=============================================>       (99 + 16) / 115][Stage 102:=================================================>   (108 + 7) / 115][Stage 102:===================================================> (112 + 3) / 115]                                                                                [Stage 103:========================================>            (88 + 28) / 116][Stage 103:============================================>       (100 + 16) / 116][Stage 103:==================================================>  (111 + 5) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.016163382 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=36", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=36,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397279971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:=====================================>               (82 + 33) / 115][Stage 104:=============================================>       (98 + 17) / 115][Stage 104:===================================================> (112 + 3) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:================================>                    (72 + 44) / 116][Stage 105:=====================================>               (83 + 33) / 116][Stage 105:=============================================>      (102 + 14) / 116][Stage 105:=================================================>   (109 + 7) / 116][Stage 105:====================================================>(114 + 2) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.785638512 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404900411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (70 + 45) / 115][Stage 106:=====================================>               (82 + 33) / 115][Stage 106:=============================================>      (101 + 14) / 115][Stage 106:==================================================>  (110 + 5) / 115]                                                                                [Stage 107:==================================>                  (75 + 41) / 116][Stage 107:==========================================>          (93 + 23) / 116][Stage 107:=================================================>   (109 + 7) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.822618031 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=40", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=40,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==============================>                      (66 + 49) / 115][Stage 108:=====================================>               (81 + 34) / 115][Stage 108:============================================>        (96 + 19) / 115][Stage 108:===================================================> (111 + 4) / 115]                                                                                [Stage 109:====================================>                (80 + 36) / 116][Stage 109:=========================================>           (91 + 25) / 116][Stage 109:================================================>    (107 + 9) / 116][Stage 109:===================================================> (112 + 4) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.017645416 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412830836 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===============================>                     (68 + 47) / 115][Stage 110:=====================================>               (81 + 34) / 115][Stage 110:==========================================>          (93 + 22) / 115][Stage 110:=================================================>   (107 + 8) / 115]                                                                                [Stage 111:================================>                    (71 + 45) / 116][Stage 111:=======================================>             (86 + 30) / 116][Stage 111:===============================================>    (106 + 10) / 116][Stage 111:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.765873735 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=119", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=119,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (82 + 33) / 115][Stage 112:=============================================>       (99 + 16) / 115][Stage 112:===================================================> (112 + 3) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:===============================>                     (68 + 48) / 116][Stage 113:====================================>                (79 + 37) / 116][Stage 113:=============================================>      (101 + 15) / 116][Stage 113:==================================================>  (110 + 6) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.920801826 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405952328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:============================>                        (60 + 53) / 113][Stage 114:=================================>                   (71 + 42) / 113][Stage 114:========================================>            (87 + 26) / 113][Stage 114:===============================================>    (103 + 10) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:===========================>                         (60 + 54) / 114][Stage 115:===============================>                     (68 + 46) / 114][Stage 115:=====================================>               (81 + 33) / 114][Stage 115:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.021226768 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=149", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=149,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (57 + 56) / 113][Stage 116:=============================>                       (62 + 51) / 113][Stage 116:======================================>              (82 + 31) / 113][Stage 116:=============================================>       (98 + 15) / 113]                                                                                [Stage 117:============================>                        (62 + 52) / 114][Stage 117:=================================>                   (72 + 42) / 114][Stage 117:=============================================>       (97 + 17) / 114]                                                                                Time elapsed: 2.694586341 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419918478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 60) / 120][Stage 118:===========================>                         (62 + 58) / 120][Stage 118:===================================>                 (80 + 40) / 120][Stage 118:==========================================>          (97 + 23) / 120][Stage 118:==================================================>  (115 + 5) / 120]                                                                                [Stage 119:===========================>                         (62 + 59) / 121][Stage 119:===============================>                     (72 + 49) / 121][Stage 119:======================================>              (89 + 32) / 121][Stage 119:==============================================>     (109 + 12) / 121][Stage 119:===================================================> (118 + 3) / 121][Stage 119:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.419007809 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395200511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=================================>                   (72 + 43) / 115][Stage 120:=========================================>           (91 + 24) / 115][Stage 120:==============================================>     (103 + 12) / 115][Stage 120:==================================================>  (110 + 5) / 115]                                                                                [Stage 121:=====================================>               (83 + 33) / 116][Stage 121:=============================================>       (99 + 17) / 116][Stage 121:==================================================>  (110 + 6) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.281921021 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=229", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=229,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373949391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:====================================>                (78 + 35) / 113][Stage 122:========================================>            (87 + 26) / 113][Stage 122:==============================================>     (101 + 12) / 113][Stage 122:====================================================>(111 + 2) / 113]                                                                                [Stage 123:===================================>                 (76 + 38) / 114][Stage 123:=========================================>           (89 + 25) / 114][Stage 123:=============================================>       (98 + 16) / 114][Stage 123:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.779948226 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393107905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:=================================>                   (75 + 43) / 118][Stage 124:=========================================>           (93 + 25) / 118][Stage 124:=================================================>   (110 + 8) / 118][Stage 124:====================================================>(117 + 1) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:====================================>                (82 + 37) / 119][Stage 125:===========================================>         (97 + 22) / 119][Stage 125:==================================================>  (114 + 5) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.050191801 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357472817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=====================================>               (81 + 34) / 115][Stage 126:=========================================>           (90 + 25) / 115][Stage 126:==================================================>  (109 + 6) / 115]                                                                                [Stage 127:=======================================>             (87 + 29) / 116][Stage 127:=============================================>       (99 + 17) / 116][Stage 127:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.538297226 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=78", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=78,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430835226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (59 + 54) / 113][Stage 128:==============================>                      (65 + 48) / 113][Stage 128:====================================>                (78 + 35) / 113][Stage 128:============================================>        (95 + 18) / 113][Stage 128:===================================================> (110 + 3) / 113]                                                                                [Stage 129:=============================>                       (63 + 51) / 114][Stage 129:===================================>                 (77 + 37) / 114][Stage 129:==========================================>          (92 + 22) / 114][Stage 129:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.114083965 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390010062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==================================>                  (73 + 40) / 113][Stage 130:======================================>              (82 + 31) / 113][Stage 130:==========================================>          (91 + 22) / 113][Stage 130:=============================================>       (97 + 16) / 113][Stage 130:===================================================> (110 + 3) / 113]                                                                                [Stage 131:====================================>                (79 + 35) / 114][Stage 131:===========================================>         (93 + 21) / 114][Stage 131:================================================>    (105 + 9) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.035411124 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=97", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=97,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383784031 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:==================================>                  (77 + 41) / 118][Stage 132:==========================================>          (94 + 24) / 118][Stage 132:=================================================>   (111 + 7) / 118][Stage 132:====================================================>(117 + 1) / 118]                                                                                [Stage 133:================================>                    (74 + 45) / 119][Stage 133:=====================================>               (85 + 34) / 119][Stage 133:===========================================>         (98 + 21) / 119][Stage 133:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.068942845 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384138101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (72 + 46) / 118][Stage 134:=================================>                   (74 + 44) / 118][Stage 134:=======================================>             (89 + 29) / 118][Stage 134:============================================>        (99 + 19) / 118][Stage 134:===================================================> (114 + 4) / 118]                                                                                [Stage 135:================================>                    (73 + 46) / 119][Stage 135:==================================>                  (77 + 42) / 119][Stage 135:========================================>            (92 + 27) / 119][Stage 135:==============================================>     (107 + 12) / 119][Stage 135:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.346796734 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (72 + 46) / 118][Stage 136:====================================>                (81 + 37) / 118][Stage 136:==========================================>          (94 + 24) / 118][Stage 136:================================================>    (109 + 9) / 118][Stage 136:====================================================>(117 + 1) / 118]                                                                                [Stage 137:================================>                    (73 + 46) / 119][Stage 137:===================================>                 (80 + 39) / 119][Stage 137:=======================================>             (88 + 31) / 119][Stage 137:=============================================>      (103 + 16) / 119][Stage 137:===================================================> (115 + 4) / 119][Stage 137:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.270240556 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3909703 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (59 + 54) / 113][Stage 138:==============================>                      (64 + 49) / 113][Stage 138:====================================>                (78 + 35) / 113][Stage 138:==============================================>     (101 + 12) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:===========================>                         (59 + 55) / 114][Stage 139:================================>                    (69 + 45) / 114][Stage 139:=====================================>               (81 + 33) / 114][Stage 139:=============================================>      (100 + 14) / 114][Stage 139:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.084423264 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=35", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=35,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357758666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (70 + 43) / 113][Stage 140:===================================>                 (75 + 38) / 113][Stage 140:=========================================>           (89 + 24) / 113][Stage 140:==============================================>     (100 + 13) / 113][Stage 140:==================================================>  (108 + 5) / 113][Stage 140:====================================================>(111 + 2) / 113]                                                                                [Stage 141:======================================>              (82 + 32) / 114][Stage 141:===========================================>         (94 + 20) / 114][Stage 141:===============================================>    (104 + 10) / 114][Stage 141:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.496074001 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385739402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (72 + 43) / 115][Stage 142:=======================================>             (85 + 30) / 115][Stage 142:===============================================>    (104 + 11) / 115][Stage 142:=================================================>   (107 + 8) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:===================================>                 (78 + 38) / 116][Stage 143:===========================================>         (96 + 20) / 116][Stage 143:=================================================>   (109 + 7) / 116][Stage 143:====================================================>(114 + 2) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.258734713 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=214", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=214,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==============================>                      (66 + 49) / 115][Stage 144:====================================>                (79 + 36) / 115][Stage 144:==========================================>          (92 + 23) / 115][Stage 144:================================================>    (106 + 9) / 115][Stage 144:===================================================> (111 + 4) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:================================>                    (71 + 45) / 116][Stage 145:====================================>                (79 + 37) / 116][Stage 145:===========================================>         (95 + 21) / 116][Stage 145:==================================================>  (110 + 6) / 116][Stage 145:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.288158708 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=109", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=109,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370705833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (72 + 46) / 118][Stage 146:===================================>                 (79 + 39) / 118][Stage 146:=======================================>             (89 + 29) / 118][Stage 146:=============================================>      (103 + 15) / 118][Stage 146:==================================================>  (113 + 5) / 118][Stage 146:====================================================>(117 + 1) / 118]                                                                                [Stage 147:==================================>                  (77 + 42) / 119][Stage 147:======================================>              (86 + 33) / 119][Stage 147:============================================>       (101 + 18) / 119][Stage 147:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.321980033 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=217", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=217,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353765552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (84 + 31) / 115][Stage 148:=============================================>      (100 + 15) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:=========================================>           (90 + 26) / 116][Stage 149:==============================================>     (103 + 13) / 116][Stage 149:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.449541499 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344393656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (82 + 33) / 115][Stage 150:=========================================>           (89 + 26) / 115][Stage 150:===============================================>    (105 + 10) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:=====================================>               (81 + 35) / 116][Stage 151:==========================================>          (94 + 22) / 116][Stage 151:================================================>    (107 + 9) / 116][Stage 151:===================================================> (113 + 3) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.740776895 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=17", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=17,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367395695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=================================>                   (75 + 43) / 118][Stage 152:=======================================>             (87 + 31) / 118][Stage 152:============================================>       (101 + 17) / 118][Stage 152:==================================================>  (112 + 6) / 118][Stage 152:====================================================>(117 + 1) / 118]                                                                                [Stage 153:================================>                    (74 + 45) / 119][Stage 153:==================================>                  (78 + 41) / 119][Stage 153:==========================================>          (96 + 23) / 119][Stage 153:=============================================>      (105 + 14) / 119][Stage 153:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.41373808 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=120", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=120,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381523666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (70 + 45) / 115][Stage 154:==========================================>          (93 + 22) / 115][Stage 154:=============================================>      (101 + 14) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:==============================>                      (66 + 50) / 116][Stage 155:=====================================>               (82 + 34) / 116][Stage 155:==============================================>     (104 + 12) / 116][Stage 155:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.640096696 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401869373 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:============================>                        (60 + 53) / 113][Stage 156:===============================>                     (67 + 46) / 113][Stage 156:==========================================>          (90 + 23) / 113][Stage 156:================================================>    (104 + 9) / 113]                                                                                [Stage 157:============================>                        (61 + 53) / 114][Stage 157:==================================>                  (74 + 40) / 114][Stage 157:===========================================>         (93 + 21) / 114][Stage 157:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.060164548 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=186", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=186,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410789048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=============================>                       (62 + 51) / 113][Stage 158:==================================>                  (73 + 40) / 113][Stage 158:=============================================>       (98 + 15) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:===========================>                         (59 + 55) / 114][Stage 159:==============================>                      (66 + 48) / 114][Stage 159:======================================>              (82 + 32) / 114][Stage 159:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.834710229 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408617011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:============================>                        (65 + 55) / 120][Stage 160:==================================>                  (77 + 43) / 120][Stage 160:============================================>       (102 + 18) / 120][Stage 160:===================================================> (117 + 3) / 120]                                                                                [Stage 161:===========================>                         (62 + 59) / 121][Stage 161:==============================>                      (69 + 52) / 121][Stage 161:======================================>              (89 + 32) / 121][Stage 161:===============================================>    (111 + 10) / 121][Stage 161:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.949953799 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=233", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=233,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378572657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=====================================>               (81 + 32) / 113][Stage 162:=========================================>           (89 + 24) / 113][Stage 162:==============================================>     (102 + 11) / 113][Stage 162:=================================================>   (105 + 8) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:=================================>                   (73 + 41) / 114][Stage 163:=========================================>           (89 + 25) / 114][Stage 163:=============================================>       (97 + 17) / 114][Stage 163:=================================================>   (106 + 8) / 114][Stage 163:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.150621258 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=24", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=24,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358722351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (70 + 43) / 113][Stage 164:=======================================>             (84 + 29) / 113][Stage 164:==============================================>     (102 + 11) / 113][Stage 164:===================================================> (109 + 4) / 113]                                                                                [Stage 165:===================================>                 (77 + 37) / 114][Stage 165:========================================>            (87 + 27) / 114][Stage 165:=============================================>       (98 + 16) / 114][Stage 165:==================================================>  (109 + 5) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.221431568 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413559732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:=============================>                       (66 + 54) / 120][Stage 166:=====================================>               (84 + 36) / 120][Stage 166:=============================================>      (106 + 14) / 120][Stage 166:===================================================> (117 + 3) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:=============================>                       (67 + 54) / 121][Stage 167:==========================================>          (97 + 24) / 121][Stage 167:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.076526506 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=198", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=198,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389372756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:============================>                        (60 + 53) / 113][Stage 168:===================================>                 (75 + 38) / 113][Stage 168:=============================================>       (96 + 17) / 113][Stage 168:==================================================>  (107 + 6) / 113]                                                                                [Stage 169:============================>                        (62 + 52) / 114][Stage 169:===============================>                     (67 + 47) / 114][Stage 169:=========================================>           (89 + 25) / 114][Stage 169:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.088300257 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397667107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:============================>                        (61 + 52) / 113][Stage 170:===================================>                 (76 + 37) / 113][Stage 170:============================================>        (94 + 19) / 113][Stage 170:===================================================> (109 + 4) / 113]                                                                                [Stage 171:===========================>                         (59 + 55) / 114][Stage 171:==============================>                      (66 + 48) / 114][Stage 171:======================================>              (83 + 31) / 114][Stage 171:==============================================>     (101 + 13) / 114][Stage 171:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.959920412 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (59 + 54) / 113][Stage 172:============================>                        (61 + 52) / 113][Stage 172:=====================================>               (81 + 32) / 113][Stage 172:==============================================>     (100 + 13) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:===============================>                     (67 + 47) / 114][Stage 173:======================================>              (83 + 31) / 114][Stage 173:=================================================>   (107 + 7) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.930537818 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343006023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:====================================>                (80 + 35) / 115][Stage 174:=========================================>           (90 + 25) / 115][Stage 174:==============================================>     (102 + 13) / 115][Stage 174:===================================================> (111 + 4) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:======================================>              (84 + 32) / 116][Stage 175:===========================================>         (96 + 20) / 116][Stage 175:==================================================>  (110 + 6) / 116][Stage 175:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.962605666 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406856301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:============================>                        (65 + 55) / 120][Stage 176:==================================>                  (79 + 41) / 120][Stage 176:=========================================>           (94 + 26) / 120][Stage 176:=================================================>   (111 + 9) / 120][Stage 176:====================================================>(119 + 1) / 120]                                                                                [Stage 177:==========================>                          (61 + 60) / 121][Stage 177:==============================>                      (70 + 51) / 121][Stage 177:======================================>              (87 + 34) / 121][Stage 177:==============================================>     (109 + 12) / 121][Stage 177:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.086012571 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=145", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=145,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (61 + 59) / 120][Stage 178:===============================>                     (72 + 48) / 120][Stage 178:========================================>            (92 + 28) / 120][Stage 178:=================================================>   (113 + 7) / 120]                                                                                [Stage 179:===========================>                         (62 + 59) / 121][Stage 179:=============================>                       (68 + 53) / 121][Stage 179:=========================================>           (94 + 27) / 121][Stage 179:=================================================>   (114 + 7) / 121][Stage 179:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.085147569 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41495028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:===================================>                 (80 + 40) / 120][Stage 180:===========================================>         (99 + 21) / 120][Stage 180:==================================================>  (114 + 6) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:===============================>                     (71 + 50) / 121][Stage 181:======================================>              (87 + 34) / 121][Stage 181:=============================================>      (105 + 16) / 121][Stage 181:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.982428847 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382273066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (73 + 42) / 115][Stage 182:=========================================>           (91 + 24) / 115][Stage 182:=============================================>      (101 + 14) / 115][Stage 182:==================================================>  (109 + 6) / 115][Stage 182:==================================================>  (110 + 5) / 115][Stage 182:===================================================> (112 + 3) / 115]                                                                                [Stage 183:==================================>                  (75 + 41) / 116][Stage 183:=======================================>             (87 + 29) / 116][Stage 183:=============================================>      (102 + 14) / 116][Stage 183:==================================================>  (111 + 5) / 116][Stage 183:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.667809529 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=174", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=174,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366694178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:=================================>                   (75 + 43) / 118][Stage 184:=====================================>               (84 + 34) / 118][Stage 184:===========================================>         (96 + 22) / 118][Stage 184:===============================================>    (107 + 11) / 118][Stage 184:===================================================> (115 + 3) / 118]                                                                                [Stage 185:=================================>                   (76 + 43) / 119][Stage 185:======================================>              (86 + 33) / 119][Stage 185:============================================>       (102 + 17) / 119][Stage 185:==================================================>  (113 + 6) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.386415989 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365265684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (72 + 46) / 118][Stage 186:=================================>                   (75 + 43) / 118][Stage 186:=====================================>               (83 + 35) / 118][Stage 186:=============================================>      (103 + 15) / 118][Stage 186:===================================================> (115 + 3) / 118][Stage 186:====================================================>(117 + 1) / 118]                                                                                [Stage 187:=================================>                   (76 + 43) / 119][Stage 187:=======================================>             (88 + 31) / 119][Stage 187:=============================================>      (104 + 15) / 119][Stage 187:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.262190015 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=106", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=106,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371501989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (73 + 45) / 118][Stage 188:===================================>                 (79 + 39) / 118][Stage 188:=======================================>             (89 + 29) / 118][Stage 188:=========================================>           (93 + 25) / 118][Stage 188:================================================>    (109 + 9) / 118][Stage 188:====================================================>(116 + 2) / 118]                                                                                [Stage 189:================================>                    (74 + 45) / 119][Stage 189:=====================================>               (84 + 35) / 119][Stage 189:=========================================>           (94 + 25) / 119][Stage 189:==============================================>     (107 + 12) / 119][Stage 189:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.516471448 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399614908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:=============================>                       (66 + 54) / 120][Stage 190:=======================================>             (89 + 31) / 120][Stage 190:=============================================>      (106 + 14) / 120]                                                                                [Stage 191:==========================>                          (61 + 60) / 121][Stage 191:===============================>                     (72 + 49) / 121][Stage 191:======================================>              (88 + 33) / 121][Stage 191:==================================================>  (115 + 6) / 121][Stage 191:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.036688781 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=26", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=26,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368880084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:=================================>                   (74 + 44) / 118][Stage 192:=====================================>               (83 + 35) / 118][Stage 192:============================================>        (98 + 20) / 118][Stage 192:=================================================>   (110 + 8) / 118][Stage 192:====================================================>(117 + 1) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:==================================>                  (78 + 41) / 119][Stage 193:========================================>            (91 + 28) / 119][Stage 193:=============================================>      (105 + 14) / 119][Stage 193:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.104683109 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376693294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (71 + 44) / 115][Stage 194:=======================================>             (85 + 30) / 115][Stage 194:=============================================>       (99 + 16) / 115][Stage 194:===================================================> (111 + 4) / 115][Stage 194:====================================================>(113 + 2) / 115]                                                                                [Stage 195:================================>                    (72 + 44) / 116][Stage 195:==========================================>          (92 + 24) / 116][Stage 195:==============================================>     (103 + 13) / 116][Stage 195:=================================================>   (108 + 8) / 116][Stage 195:===================================================> (112 + 4) / 116][Stage 195:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.642804797 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=41", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=41,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356714197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==================================>                  (73 + 40) / 113][Stage 196:=========================================>           (89 + 24) / 113][Stage 196:=============================================>       (97 + 16) / 113][Stage 196:=================================================>   (105 + 8) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:=======================================>             (85 + 29) / 114][Stage 197:===========================================>         (93 + 21) / 114][Stage 197:==================================================>  (108 + 6) / 114][Stage 197:===================================================> (111 + 3) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.401872719 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429599436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (72 + 46) / 118][Stage 198:===================================>                 (80 + 38) / 118][Stage 198:========================================>            (91 + 27) / 118][Stage 198:===================================================> (115 + 3) / 118]                                                                                [Stage 199:================================>                    (74 + 45) / 119][Stage 199:======================================>              (87 + 32) / 119][Stage 199:==============================================>     (106 + 13) / 119][Stage 199:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.88076135 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376827865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===============================>                     (68 + 47) / 115][Stage 200:======================================>              (83 + 32) / 115][Stage 200:==============================================>     (102 + 13) / 115][Stage 200:=================================================>   (107 + 8) / 115][Stage 200:===================================================> (111 + 4) / 115][Stage 200:====================================================>(113 + 2) / 115]                                                                                [Stage 201:===================================>                 (77 + 39) / 116][Stage 201:=========================================>           (91 + 25) / 116][Stage 201:===============================================>    (106 + 10) / 116][Stage 201:==================================================>  (111 + 5) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.559022888 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/31 23:56:43 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:46408) dropped. RpcEnv already stopped.
17/05/31 23:56:43 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:46408) dropped. RpcEnv already stopped.

real	9m56.669s
user	11m17.428s
sys	0m27.376s
