Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 01:20:06 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:20:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:20:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:20:21 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 01:20:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:20:34 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601012023-0736).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.363624331 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:=================>                                     (36 + 80) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 13.178015613 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.896321264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (39 + 74) / 113][Stage 2:=======================>                               (48 + 65) / 113][Stage 2:=========================>                             (53 + 60) / 113][Stage 2:=============================>                         (60 + 53) / 113][Stage 2:==================================>                    (70 + 43) / 113][Stage 2:=====================================>                 (77 + 36) / 113][Stage 2:===========================================>           (89 + 24) / 113][Stage 2:================================================>      (99 + 14) / 113][Stage 2:====================================================>  (107 + 6) / 113]                                                                                [Stage 3:===========================>                           (56 + 58) / 114][Stage 3:=============================>                         (61 + 53) / 114][Stage 3:================================>                      (67 + 47) / 114][Stage 3:===================================>                   (73 + 41) / 114][Stage 3:========================================>              (84 + 30) / 114][Stage 3:=============================================>         (95 + 19) / 114][Stage 3:=====================================================> (110 + 4) / 114][Stage 3:======================================================>(112 + 2) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.347774798 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=100", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=100,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.668944913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=================================>                     (71 + 47) / 118][Stage 4:==================================>                    (73 + 45) / 118][Stage 4:======================================>                (83 + 35) / 118][Stage 4:============================================>          (96 + 22) / 118][Stage 4:===============================================>      (104 + 14) / 118][Stage 4:====================================================>  (113 + 5) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:====================================>                  (79 + 40) / 119][Stage 5:=========================================>             (90 + 29) / 119][Stage 5:=============================================>        (100 + 19) / 119][Stage 5:==================================================>    (110 + 9) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.017597302 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.644819668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (70 + 48) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:===================================>                   (77 + 41) / 118][Stage 6:=========================================>             (89 + 29) / 118][Stage 6:=============================================>         (98 + 20) / 118][Stage 6:===================================================>   (111 + 7) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:==================================>                    (74 + 45) / 119][Stage 7:======================================>                (84 + 35) / 119][Stage 7:============================================>          (97 + 22) / 119][Stage 7:===============================================>      (104 + 15) / 119][Stage 7:===================================================>   (111 + 8) / 119][Stage 7:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.045736952 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=152", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=152,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.579223502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (56 + 57) / 113][Stage 8:===========================>                           (57 + 56) / 113][Stage 8:=================================>                     (68 + 45) / 113][Stage 8:========================================>              (83 + 30) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:=============================================>         (94 + 19) / 113][Stage 8:===================================================>   (105 + 8) / 113][Stage 8:======================================================>(111 + 2) / 113]                                                                                [Stage 9:============================>                          (59 + 55) / 114][Stage 9:==============================>                        (63 + 51) / 114][Stage 9:=====================================>                 (78 + 36) / 114][Stage 9:=========================================>             (87 + 27) / 114][Stage 9:=============================================>         (94 + 20) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:=====================================================> (111 + 3) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.464730807 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.566468924 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (58 + 55) / 113][Stage 10:============================>                         (59 + 54) / 113][Stage 10:=================================>                    (70 + 43) / 113][Stage 10:=======================================>              (83 + 30) / 113][Stage 10:==============================================>       (98 + 15) / 113][Stage 10:=================================================>    (104 + 9) / 113][Stage 10:====================================================> (110 + 3) / 113]                                                                                [Stage 11:===========================>                          (59 + 55) / 114][Stage 11:=============================>                        (63 + 51) / 114][Stage 11:===================================>                  (75 + 39) / 114][Stage 11:========================================>             (85 + 29) / 114][Stage 11:=============================================>        (97 + 17) / 114][Stage 11:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 4.093238339 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.545270114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (71 + 47) / 118][Stage 12:================================>                     (72 + 46) / 118][Stage 12:==================================>                   (75 + 43) / 118][Stage 12:=======================================>              (86 + 32) / 118][Stage 12:=========================================>            (91 + 27) / 118][Stage 12:============================================>         (97 + 21) / 118][Stage 12:===============================================>     (105 + 13) / 118][Stage 12:====================================================> (114 + 4) / 118]                                                                                [Stage 13:=================================>                    (74 + 45) / 119][Stage 13:===================================>                  (78 + 41) / 119][Stage 13:=======================================>              (86 + 33) / 119][Stage 13:============================================>         (98 + 21) / 119][Stage 13:================================================>    (108 + 11) / 119][Stage 13:=====================================================>(117 + 2) / 119][Stage 13:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.495287919 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=30,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493171245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:=================================>                    (74 + 44) / 118][Stage 14:====================================>                 (80 + 38) / 118][Stage 14:=======================================>              (86 + 32) / 118][Stage 14:============================================>         (98 + 20) / 118][Stage 14:==================================================>   (110 + 8) / 118][Stage 14:====================================================> (114 + 4) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:==================================>                   (75 + 44) / 119][Stage 15:=====================================>                (83 + 36) / 119][Stage 15:============================================>         (98 + 21) / 119][Stage 15:==================================================>   (111 + 8) / 119][Stage 15:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.163702319 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502017192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==================================>                   (73 + 40) / 113][Stage 16:=========================================>            (86 + 27) / 113][Stage 16:=============================================>        (95 + 18) / 113][Stage 16:=================================================>    (104 + 9) / 113][Stage 16:====================================================> (109 + 4) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:====================================>                 (78 + 36) / 114][Stage 17:===========================================>          (91 + 23) / 114][Stage 17:=============================================>        (96 + 18) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.792201977 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=194", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=194,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491782767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (71 + 47) / 118][Stage 18:=================================>                    (73 + 45) / 118][Stage 18:====================================>                 (80 + 38) / 118][Stage 18:=======================================>              (87 + 31) / 118][Stage 18:=============================================>       (102 + 16) / 118][Stage 18:=====================================================>(117 + 1) / 118]                                                                                [Stage 19:================================>                     (72 + 47) / 119][Stage 19:===================================>                  (79 + 40) / 119][Stage 19:==========================================>           (94 + 25) / 119][Stage 19:============================================>         (99 + 20) / 119][Stage 19:==============================================>      (105 + 14) / 119][Stage 19:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.867202218 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525100108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (72 + 46) / 118][Stage 20:=================================>                    (74 + 44) / 118][Stage 20:=====================================>                (81 + 37) / 118][Stage 20:=========================================>            (90 + 28) / 118][Stage 20:=============================================>       (102 + 16) / 118][Stage 20:==================================================>   (111 + 7) / 118][Stage 20:====================================================> (115 + 3) / 118]                                                                                [Stage 21:=================================>                    (73 + 46) / 119][Stage 21:=================================>                    (74 + 45) / 119][Stage 21:====================================>                 (80 + 39) / 119][Stage 21:============================================>         (97 + 22) / 119][Stage 21:===============================================>     (106 + 13) / 119][Stage 21:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.942752998 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=226", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=226,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479626469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:==================================>                   (75 + 43) / 118][Stage 22:======================================>               (85 + 33) / 118][Stage 22:===========================================>          (95 + 23) / 118][Stage 22:================================================>    (108 + 10) / 118][Stage 22:===================================================>  (113 + 5) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:====================================>                 (80 + 39) / 119][Stage 23:=========================================>            (92 + 27) / 119][Stage 23:===============================================>     (107 + 12) / 119][Stage 23:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.599589045 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428051267 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:======================================>               (81 + 34) / 115][Stage 24:============================================>         (95 + 20) / 115][Stage 24:=================================================>    (106 + 9) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:======================================>               (82 + 34) / 116][Stage 25:========================================>             (88 + 28) / 116][Stage 25:===============================================>     (104 + 12) / 116][Stage 25:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.862099966 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=====================================>                (80 + 35) / 115][Stage 26:=======================================>              (85 + 30) / 115][Stage 26:============================================>         (95 + 20) / 115][Stage 26:==================================================>   (107 + 8) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:======================================>               (83 + 33) / 116][Stage 27:===========================================>          (93 + 23) / 116][Stage 27:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.903609594 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504788208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:==============================>                       (67 + 53) / 120][Stage 28:====================================>                 (80 + 40) / 120][Stage 28:================================================>    (110 + 10) / 120][Stage 28:===================================================>  (115 + 5) / 120]                                                                                [Stage 29:============================>                         (63 + 58) / 121][Stage 29:===============================>                      (70 + 51) / 121][Stage 29:========================================>             (90 + 31) / 121][Stage 29:===============================================>     (109 + 12) / 121][Stage 29:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.314290413 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=249 AND partitionZIndex<=250,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:===========================>                          (62 + 58) / 120][Stage 30:=====================================>                (83 + 37) / 120][Stage 30:=============================================>       (102 + 18) / 120][Stage 30:===================================================>  (115 + 5) / 120]                                                                                [Stage 31:===========================>                          (62 + 59) / 121][Stage 31:==============================>                       (69 + 52) / 121][Stage 31:========================================>             (90 + 31) / 121][Stage 31:================================================>    (111 + 10) / 121][Stage 31:==================================================>   (114 + 7) / 121][Stage 31:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.457617277 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539797009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (66 + 49) / 115][Stage 32:=====================================>                (80 + 35) / 115][Stage 32:============================================>         (94 + 21) / 115][Stage 32:=================================================>    (106 + 9) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:================================>                     (70 + 46) / 116][Stage 33:========================================>             (88 + 28) / 116][Stage 33:===============================================>     (104 + 12) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.198968128 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427453062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==================================>                   (73 + 40) / 113][Stage 34:=========================================>            (86 + 27) / 113][Stage 34:============================================>         (94 + 19) / 113][Stage 34:==============================================>      (100 + 13) / 113][Stage 34:==================================================>   (106 + 7) / 113][Stage 34:===================================================>  (108 + 5) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===================================>                  (75 + 39) / 114][Stage 35:==========================================>           (89 + 25) / 114][Stage 35:==============================================>      (100 + 14) / 114][Stage 35:===================================================>  (108 + 6) / 114][Stage 35:====================================================> (110 + 4) / 114][Stage 35:====================================================> (111 + 3) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.419395078 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509511303 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:===============================>                      (69 + 51) / 120][Stage 36:=====================================>                (83 + 37) / 120][Stage 36:================================================>    (109 + 11) / 120][Stage 36:=====================================================>(118 + 2) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:===========================>                          (62 + 59) / 121][Stage 37:====================================>                 (81 + 40) / 121][Stage 37:============================================>        (102 + 19) / 121][Stage 37:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.169321242 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441412784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (72 + 46) / 118][Stage 38:=================================>                    (74 + 44) / 118][Stage 38:======================================>               (84 + 34) / 118][Stage 38:===============================================>     (105 + 13) / 118][Stage 38:===================================================>  (113 + 5) / 118][Stage 38:=====================================================>(116 + 2) / 118]                                                                                [Stage 39:=================================>                    (73 + 46) / 119][Stage 39:======================================>               (84 + 35) / 119][Stage 39:============================================>         (98 + 21) / 119][Stage 39:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.022824945 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437792327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:>                                                       (0 + 0) / 115][Stage 40:=====================================>                (80 + 35) / 115][Stage 40:==========================================>           (90 + 25) / 115][Stage 40:==============================================>      (101 + 14) / 115][Stage 40:===================================================>  (110 + 5) / 115][Stage 40:====================================================> (111 + 4) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:========================================>             (86 + 30) / 116][Stage 41:=============================================>        (98 + 18) / 116][Stage 41:==================================================>   (108 + 8) / 116][Stage 41:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.640551364 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=209", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=209,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421822202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (80 + 35) / 115][Stage 42:========================================>             (87 + 28) / 115][Stage 42:=============================================>        (96 + 19) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=======================================>              (84 + 32) / 116][Stage 43:==============================================>       (99 + 17) / 116][Stage 43:==================================================>   (109 + 7) / 116][Stage 43:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.984684861 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=216,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433896423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:==================================>                   (76 + 42) / 118][Stage 44:=======================================>              (86 + 32) / 118][Stage 44:==============================================>      (103 + 15) / 118][Stage 44:====================================================> (115 + 3) / 118]                                                                                [Stage 45:=================================>                    (73 + 46) / 119][Stage 45:===================================>                  (78 + 41) / 119][Stage 45:==========================================>           (93 + 26) / 119][Stage 45:=============================================>       (102 + 17) / 119][Stage 45:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.44562547 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=254", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=253 AND partitionZIndex<=254,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.605893912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:==============================>                       (68 + 52) / 120][Stage 46:=================================>                    (75 + 45) / 120][Stage 46:=============================================>       (104 + 16) / 120][Stage 46:=====================================================>(118 + 2) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:==============================>                       (69 + 52) / 121][Stage 47:======================================>               (86 + 35) / 121][Stage 47:==============================================>      (106 + 15) / 121][Stage 47:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.204919009 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=253,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485415463 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (58 + 55) / 113][Stage 48:============================>                         (60 + 53) / 113][Stage 48:=====================================>                (78 + 35) / 113][Stage 48:===============================================>      (99 + 14) / 113][Stage 48:====================================================> (109 + 4) / 113]                                                                                [Stage 49:===========================>                          (59 + 55) / 114][Stage 49:=================================>                    (71 + 43) / 114][Stage 49:=========================================>            (88 + 26) / 114][Stage 49:==================================================>   (106 + 8) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.272632744 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467204691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:============================>                         (63 + 57) / 120][Stage 50:=================================>                    (75 + 45) / 120][Stage 50:============================================>         (98 + 22) / 120][Stage 50:=====================================================>(118 + 2) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:================================>                     (73 + 48) / 121][Stage 51:==========================================>           (95 + 26) / 121][Stage 51:==============================================>      (107 + 14) / 121][Stage 51:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.021084491 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4162252 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:==============================>                       (66 + 49) / 115][Stage 52:===================================>                  (76 + 39) / 115][Stage 52:==========================================>           (91 + 24) / 115][Stage 52:================================================>    (105 + 10) / 115][Stage 52:====================================================> (111 + 4) / 115]                                                                                [Stage 53:=======================================>              (85 + 31) / 116][Stage 53:===============================================>     (103 + 13) / 116][Stage 53:===================================================>  (110 + 6) / 116][Stage 53:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.995335288 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==============================>                       (65 + 50) / 115][Stage 54:====================================>                 (77 + 38) / 115][Stage 54:==========================================>           (90 + 25) / 115][Stage 54:================================================>    (105 + 10) / 115][Stage 54:====================================================> (112 + 3) / 115]                                                                                [Stage 55:================================>                     (70 + 46) / 116][Stage 55:=====================================>                (80 + 36) / 116][Stage 55:============================================>         (95 + 21) / 116][Stage 55:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.787465744 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433260635 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (69 + 46) / 115][Stage 56:=========================================>            (89 + 26) / 115][Stage 56:==============================================>      (101 + 14) / 115][Stage 56:===================================================>  (110 + 5) / 115]                                                                                [Stage 57:=================================>                    (72 + 44) / 116][Stage 57:=============================================>       (100 + 16) / 116][Stage 57:==================================================>   (109 + 7) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.854513502 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485893562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (58 + 55) / 113][Stage 58:=================================>                    (70 + 43) / 113][Stage 58:=======================================>              (82 + 31) / 113][Stage 58:=================================================>    (104 + 9) / 113]                                                                                [Stage 59:============================>                         (60 + 54) / 114][Stage 59:=================================>                    (71 + 43) / 114][Stage 59:==========================================>           (90 + 24) / 114][Stage 59:==================================================>   (106 + 8) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.219106934 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41759143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:=================================>                    (74 + 44) / 118][Stage 60:=======================================>              (87 + 31) / 118][Stage 60:=================================================>    (109 + 9) / 118][Stage 60:=====================================================>(116 + 2) / 118]                                                                                [Stage 61:=================================>                    (73 + 46) / 119][Stage 61:=================================>                    (74 + 45) / 119][Stage 61:===================================>                  (78 + 41) / 119][Stage 61:===============================================>     (107 + 12) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.100806595 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414031892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (70 + 45) / 115][Stage 62:==========================================>           (91 + 24) / 115][Stage 62:================================================>    (105 + 10) / 115][Stage 62:====================================================> (112 + 3) / 115]                                                                                [Stage 63:==================================>                   (74 + 42) / 116][Stage 63:=========================================>            (89 + 27) / 116][Stage 63:================================================>    (106 + 10) / 116][Stage 63:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.984379327 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=138", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=138,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432008974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=============================>                        (61 + 52) / 113][Stage 64:================================>                     (69 + 44) / 113][Stage 64:========================================>             (84 + 29) / 113][Stage 64:=============================================>        (95 + 18) / 113]                                                                                [Stage 65:============================>                         (61 + 53) / 114][Stage 65:=================================>                    (70 + 44) / 114][Stage 65:=========================================>            (87 + 27) / 114][Stage 65:==============================================>      (100 + 14) / 114][Stage 65:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.159981189 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442943849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (62 + 58) / 120][Stage 66:===================================>                  (78 + 42) / 120][Stage 66:===========================================>          (96 + 24) / 120][Stage 66:==================================================>   (112 + 8) / 120]                                                                                [Stage 67:===========================>                          (62 + 59) / 121][Stage 67:===============================>                      (70 + 51) / 121][Stage 67:=======================================>              (88 + 33) / 121][Stage 67:==============================================>      (107 + 14) / 121][Stage 67:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.194383822 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=221", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=221,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496661336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (81 + 34) / 115][Stage 68:========================================>             (87 + 28) / 115][Stage 68:==============================================>       (99 + 16) / 115]                                                                                [Stage 69:========================================>             (86 + 30) / 116][Stage 69:============================================>         (95 + 21) / 116][Stage 69:================================================>    (106 + 10) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.475465644 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=241", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=241,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414432699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=================================>                    (73 + 45) / 118][Stage 70:===================================>                  (78 + 40) / 118][Stage 70:========================================>             (88 + 30) / 118][Stage 70:===============================================>     (106 + 12) / 118][Stage 70:=====================================================>(116 + 2) / 118]                                                                                [Stage 71:=================================>                    (74 + 45) / 119][Stage 71:=====================================>                (83 + 36) / 119][Stage 71:=========================================>            (91 + 28) / 119][Stage 71:===============================================>     (106 + 13) / 119][Stage 71:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.408233966 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41871713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==============================>                       (66 + 49) / 115][Stage 72:=====================================>                (79 + 36) / 115][Stage 72:============================================>         (94 + 21) / 115][Stage 72:==================================================>   (107 + 8) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:================================>                     (70 + 46) / 116][Stage 73:=======================================>              (84 + 32) / 116][Stage 73:===============================================>     (103 + 13) / 116][Stage 73:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.782501529 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389602122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (71 + 42) / 113][Stage 74:=========================================>            (86 + 27) / 113][Stage 74:===============================================>     (101 + 12) / 113][Stage 74:===================================================>  (108 + 5) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:====================================>                 (77 + 37) / 114][Stage 75:=========================================>            (88 + 26) / 114][Stage 75:==============================================>       (99 + 15) / 114][Stage 75:=================================================>    (105 + 9) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.941427988 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404776153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (71 + 44) / 115][Stage 76:=======================================>              (84 + 31) / 115][Stage 76:==============================================>       (99 + 16) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:===============================>                      (67 + 49) / 116][Stage 77:=====================================>                (80 + 36) / 116][Stage 77:========================================>             (88 + 28) / 116][Stage 77:================================================>    (106 + 10) / 116][Stage 77:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.957475359 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=120", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=120,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430146459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:============================>                         (60 + 53) / 113][Stage 78:===================================>                  (74 + 39) / 113][Stage 78:===========================================>          (92 + 21) / 113][Stage 78:===============================================>     (101 + 12) / 113][Stage 78:====================================================> (110 + 3) / 113]                                                                                [Stage 79:=============================>                        (62 + 52) / 114][Stage 79:=================================>                    (70 + 44) / 114][Stage 79:========================================>             (85 + 29) / 114][Stage 79:==============================================>      (100 + 14) / 114][Stage 79:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.409309043 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368976519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=====================================>                (79 + 36) / 115][Stage 80:==========================================>           (90 + 25) / 115][Stage 80:===============================================>     (102 + 13) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:======================================>               (83 + 33) / 116][Stage 81:========================================>             (88 + 28) / 116][Stage 81:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.501597521 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=151", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=151,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382098182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=====================================>                (80 + 35) / 115][Stage 82:========================================>             (86 + 29) / 115][Stage 82:=============================================>        (97 + 18) / 115][Stage 82:===================================================>  (110 + 5) / 115]                                                                                [Stage 83:========================================>             (86 + 30) / 116][Stage 83:============================================>         (96 + 20) / 116][Stage 83:===============================================>     (105 + 11) / 116][Stage 83:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.851349087 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:======================================>               (81 + 34) / 115][Stage 84:===========================================>          (92 + 23) / 115][Stage 84:===============================================>     (103 + 12) / 115]                                                                                [Stage 85:========================================>             (86 + 30) / 116][Stage 85:============================================>         (96 + 20) / 116][Stage 85:===================================================>  (110 + 6) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.627434899 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411124855 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (58 + 55) / 113][Stage 86:=============================>                        (61 + 52) / 113][Stage 86:====================================>                 (76 + 37) / 113][Stage 86:===========================================>          (91 + 22) / 113][Stage 86:===============================================>      (99 + 14) / 113]                                                                                [Stage 87:============================>                         (60 + 54) / 114][Stage 87:=================================>                    (70 + 44) / 114][Stage 87:=====================================>                (80 + 34) / 114][Stage 87:=============================================>        (95 + 19) / 114][Stage 87:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.303586543 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426751517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:===============================>                      (71 + 49) / 120][Stage 88:==========================================>           (94 + 26) / 120][Stage 88:===================================================>  (115 + 5) / 120]                                                                                [Stage 89:============================>                         (63 + 58) / 121][Stage 89:==================================>                   (77 + 44) / 121][Stage 89:=========================================>            (92 + 29) / 121][Stage 89:==================================================>   (114 + 7) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.177086673 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=248,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395116775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:===================================>                  (78 + 40) / 118][Stage 90:========================================>             (88 + 30) / 118][Stage 90:=============================================>       (102 + 16) / 118][Stage 90:====================================================> (114 + 4) / 118][Stage 90:=====================================================>(116 + 2) / 118]                                                                                [Stage 91:====================================>                 (81 + 38) / 119][Stage 91:========================================>             (90 + 29) / 119][Stage 91:============================================>         (98 + 21) / 119][Stage 91:=================================================>    (110 + 9) / 119][Stage 91:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.417602461 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=121", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=121,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40630035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===================================>                  (75 + 40) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:==============================================>      (101 + 14) / 115][Stage 92:===================================================>  (110 + 5) / 115]                                                                                [Stage 93:=================================>                    (72 + 44) / 116][Stage 93:===========================================>          (94 + 22) / 116][Stage 93:==============================================>      (101 + 15) / 116][Stage 93:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.055602568 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391313202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (72 + 46) / 118][Stage 94:====================================>                 (80 + 38) / 118][Stage 94:============================================>         (98 + 20) / 118][Stage 94:==================================================>   (111 + 7) / 118][Stage 94:=====================================================>(116 + 2) / 118]                                                                                [Stage 95:=================================>                    (73 + 46) / 119][Stage 95:===================================>                  (79 + 40) / 119][Stage 95:========================================>             (89 + 30) / 119][Stage 95:==================================================>   (111 + 8) / 119][Stage 95:=====================================================>(117 + 2) / 119][Stage 95:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.338372226 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360728908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:>                                                       (0 + 0) / 115][Stage 96:=======================================>              (84 + 31) / 115][Stage 96:==========================================>           (91 + 24) / 115][Stage 96:==============================================>      (101 + 14) / 115][Stage 96:===================================================>  (109 + 6) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:=====================================>                (81 + 35) / 116][Stage 97:=======================================>              (85 + 31) / 116][Stage 97:==============================================>      (101 + 15) / 116][Stage 97:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.87146025 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=32", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=32,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397696567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===============================>                      (67 + 48) / 115][Stage 98:=========================================>            (88 + 27) / 115][Stage 98:==============================================>       (98 + 17) / 115][Stage 98:===================================================>  (109 + 6) / 115][Stage 98:=====================================================>(113 + 2) / 115]                                                                                [Stage 99:=================================>                    (71 + 45) / 116][Stage 99:========================================>             (86 + 30) / 116][Stage 99:==============================================>      (101 + 15) / 116][Stage 99:==================================================>   (109 + 7) / 116][Stage 99:====================================================> (113 + 3) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.640599252 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372784324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==================================>                  (73 + 40) / 113][Stage 100:========================================>            (86 + 27) / 113][Stage 100:============================================>        (95 + 18) / 113][Stage 100:================================================>    (104 + 9) / 113][Stage 100:===================================================> (110 + 3) / 113]                                                                                [Stage 101:=====================================>               (81 + 33) / 114][Stage 101:===========================================>         (93 + 21) / 114][Stage 101:==============================================>      (99 + 15) / 114][Stage 101:=================================================>   (107 + 7) / 114][Stage 101:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.190362209 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390721857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:==================================>                  (77 + 41) / 118][Stage 102:=======================================>             (89 + 29) / 118][Stage 102:============================================>        (99 + 19) / 118][Stage 102:====================================================>(116 + 2) / 118]                                                                                [Stage 103:================================>                    (74 + 45) / 119][Stage 103:======================================>              (86 + 33) / 119][Stage 103:========================================>            (91 + 28) / 119][Stage 103:===========================================>        (100 + 19) / 119][Stage 103:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.298927677 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40325856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===================================>                 (75 + 38) / 113][Stage 104:=======================================>             (84 + 29) / 113][Stage 104:=============================================>       (96 + 17) / 113][Stage 104:===================================================> (109 + 4) / 113]                                                                                [Stage 105:=====================================>               (80 + 34) / 114][Stage 105:=========================================>           (89 + 25) / 114][Stage 105:==============================================>     (102 + 12) / 114][Stage 105:===================================================> (111 + 3) / 114][Stage 105:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.952305883 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373750733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===============================>                     (71 + 47) / 118][Stage 106:================================>                    (72 + 46) / 118][Stage 106:======================================>              (85 + 33) / 118][Stage 106:============================================>       (101 + 17) / 118][Stage 106:====================================================>(117 + 1) / 118]                                                                                [Stage 107:================================>                    (74 + 45) / 119][Stage 107:======================================>              (87 + 32) / 119][Stage 107:=============================================>      (103 + 16) / 119][Stage 107:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.300720776 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=126,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386408617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (70 + 45) / 115][Stage 108:======================================>              (84 + 31) / 115][Stage 108:==============================================>     (103 + 12) / 115][Stage 108:==================================================>  (110 + 5) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:================================>                    (71 + 45) / 116][Stage 109:=====================================>               (81 + 35) / 116][Stage 109:============================================>       (100 + 16) / 116][Stage 109:=================================================>   (109 + 7) / 116][Stage 109:==================================================>  (110 + 6) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.469945406 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==============================>                      (67 + 48) / 115][Stage 110:==================================>                  (75 + 40) / 115][Stage 110:==========================================>          (92 + 23) / 115][Stage 110:===============================================>    (104 + 11) / 115][Stage 110:=================================================>   (107 + 8) / 115][Stage 110:==================================================>  (110 + 5) / 115]                                                                                [Stage 111:=================================>                   (73 + 43) / 116][Stage 111:=======================================>             (87 + 29) / 116][Stage 111:=============================================>       (99 + 17) / 116][Stage 111:=================================================>   (109 + 7) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.400397039 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361905773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:======================================>              (83 + 30) / 113][Stage 112:============================================>        (94 + 19) / 113][Stage 112:==============================================>      (99 + 14) / 113][Stage 112:=================================================>   (105 + 8) / 113]                                                                                [Stage 113:=====================================>               (80 + 34) / 114][Stage 113:==========================================>          (91 + 23) / 114][Stage 113:==============================================>      (99 + 15) / 114][Stage 113:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.966564815 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=183", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=183,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409049783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:=============================>                       (66 + 54) / 120][Stage 114:=====================================>               (84 + 36) / 120][Stage 114:=============================================>      (106 + 14) / 120]                                                                                [Stage 115:===========================>                         (62 + 59) / 121][Stage 115:================================>                    (74 + 47) / 121][Stage 115:======================================>              (87 + 34) / 121][Stage 115:===============================================>    (110 + 11) / 121][Stage 115:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.135963326 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385727992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (72 + 41) / 113][Stage 116:=======================================>             (85 + 28) / 113][Stage 116:=============================================>       (96 + 17) / 113][Stage 116:================================================>    (104 + 9) / 113][Stage 116:==================================================>  (107 + 6) / 113]                                                                                [Stage 117:=======================================>             (86 + 28) / 114][Stage 117:===========================================>         (93 + 21) / 114][Stage 117:==============================================>     (101 + 13) / 114][Stage 117:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.013817828 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493295123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:================================>                    (73 + 45) / 118][Stage 118:====================================>                (82 + 36) / 118][Stage 118:==========================================>          (94 + 24) / 118][Stage 118:============================================>       (102 + 16) / 118][Stage 118:===================================================> (114 + 4) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:================================>                    (74 + 45) / 119][Stage 119:=====================================>               (84 + 35) / 119][Stage 119:==========================================>          (95 + 24) / 119][Stage 119:==============================================>     (106 + 13) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.468337558 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359464601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (82 + 33) / 115][Stage 120:=========================================>           (91 + 24) / 115][Stage 120:=================================================>   (107 + 8) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:======================================>              (84 + 32) / 116][Stage 121:==========================================>          (92 + 24) / 116][Stage 121:===============================================>    (106 + 10) / 116][Stage 121:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.61160726 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=56", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=56,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396787835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===================================>                 (78 + 37) / 115][Stage 122:==========================================>          (92 + 23) / 115][Stage 122:=================================================>   (107 + 8) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:===============================>                     (70 + 46) / 116][Stage 123:=======================================>             (86 + 30) / 116][Stage 123:=============================================>       (99 + 17) / 116][Stage 123:=================================================>   (109 + 7) / 116][Stage 123:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.274264355 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472614993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (69 + 46) / 115][Stage 124:=======================================>             (85 + 30) / 115][Stage 124:============================================>        (97 + 18) / 115][Stage 124:=================================================>   (108 + 7) / 115][Stage 124:====================================================>(113 + 2) / 115]                                                                                [Stage 125:==============================>                      (67 + 49) / 116][Stage 125:======================================>              (84 + 32) / 116][Stage 125:=============================================>      (102 + 14) / 116][Stage 125:===============================================>    (106 + 10) / 116][Stage 125:==================================================>  (111 + 5) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.884275145 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39989566 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 60) / 120][Stage 126:============================>                        (65 + 55) / 120][Stage 126:===================================>                 (81 + 39) / 120][Stage 126:==============================================>     (107 + 13) / 120][Stage 126:====================================================>(119 + 1) / 120]                                                                                [Stage 127:==========================>                          (61 + 60) / 121][Stage 127:=============================>                       (68 + 53) / 121][Stage 127:=====================================>               (86 + 35) / 121][Stage 127:============================================>       (103 + 18) / 121][Stage 127:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.151262867 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352103622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==================================>                  (73 + 40) / 113][Stage 128:======================================>              (83 + 30) / 113][Stage 128:=========================================>           (89 + 24) / 113][Stage 128:==================================================>  (108 + 5) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:==================================>                  (74 + 40) / 114][Stage 129:======================================>              (83 + 31) / 114][Stage 129:============================================>        (95 + 19) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.06690364 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466956003 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (59 + 54) / 113][Stage 130:===============================>                     (67 + 46) / 113][Stage 130:=====================================>               (81 + 32) / 113][Stage 130:=============================================>       (98 + 15) / 113][Stage 130:=================================================>   (106 + 7) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:============================>                        (61 + 53) / 114][Stage 131:===================================>                 (77 + 37) / 114][Stage 131:===========================================>         (94 + 20) / 114][Stage 131:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.409109801 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37634128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=============================>                       (65 + 50) / 115][Stage 132:=================================>                   (73 + 42) / 115][Stage 132:=========================================>           (90 + 25) / 115][Stage 132:===============================================>    (105 + 10) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:==================================>                  (75 + 41) / 116][Stage 133:======================================>              (84 + 32) / 116][Stage 133:==============================================>     (104 + 12) / 116][Stage 133:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.996751808 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385340102 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (58 + 55) / 113][Stage 134:================================>                    (70 + 43) / 113][Stage 134:=======================================>             (84 + 29) / 113][Stage 134:==============================================>     (101 + 12) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:===========================>                         (60 + 54) / 114][Stage 135:=============================>                       (63 + 51) / 114][Stage 135:=====================================>               (80 + 34) / 114][Stage 135:==============================================>      (99 + 15) / 114][Stage 135:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.215996138 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399576632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:============================>                        (65 + 55) / 120][Stage 136:==================================>                  (79 + 41) / 120][Stage 136:===========================================>         (99 + 21) / 120][Stage 136:====================================================>(119 + 1) / 120]                                                                                [Stage 137:===========================>                         (62 + 59) / 121][Stage 137:===============================>                     (72 + 49) / 121][Stage 137:====================================>                (84 + 37) / 121][Stage 137:============================================>       (103 + 18) / 121]                                                                                Time elapsed: 2.913766937 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=107", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=107,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (62 + 58) / 120][Stage 138:=============================>                       (67 + 53) / 120][Stage 138:========================================>            (91 + 29) / 120][Stage 138:==============================================>     (108 + 12) / 120]                                                                                [Stage 139:===========================>                         (63 + 58) / 121][Stage 139:================================>                    (74 + 47) / 121][Stage 139:=========================================>           (95 + 26) / 121][Stage 139:===============================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.056981347 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344466754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:====================================>                (80 + 35) / 115][Stage 140:=======================================>             (86 + 29) / 115][Stage 140:============================================>        (97 + 18) / 115][Stage 140:==================================================>  (109 + 6) / 115]                                                                                [Stage 141:=====================================>               (83 + 33) / 116][Stage 141:==========================================>          (94 + 22) / 116][Stage 141:=================================================>   (109 + 7) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.788617473 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36745773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (73 + 45) / 118][Stage 142:===================================>                 (79 + 39) / 118][Stage 142:===========================================>         (97 + 21) / 118][Stage 142:=================================================>   (111 + 7) / 118]                                                                                [Stage 143:==================================>                  (78 + 41) / 119][Stage 143:=====================================>               (84 + 35) / 119][Stage 143:=========================================>           (93 + 26) / 119][Stage 143:===============================================>    (109 + 10) / 119][Stage 143:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.238162851 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=40", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=40,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372625372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (72 + 41) / 113][Stage 144:=====================================>               (81 + 32) / 113][Stage 144:==============================================>     (100 + 13) / 113][Stage 144:=================================================>   (105 + 8) / 113]                                                                                [Stage 145:===================================>                 (76 + 38) / 114][Stage 145:==========================================>          (91 + 23) / 114][Stage 145:===============================================>    (104 + 10) / 114][Stage 145:===================================================> (110 + 4) / 114][Stage 145:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.107485371 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355358937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==================================>                  (74 + 39) / 113][Stage 146:======================================>              (83 + 30) / 113][Stage 146:==========================================>          (90 + 23) / 113][Stage 146:===============================================>    (103 + 10) / 113][Stage 146:====================================================>(111 + 2) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:=======================================>             (84 + 30) / 114][Stage 147:===========================================>         (94 + 20) / 114][Stage 147:===============================================>    (104 + 10) / 114][Stage 147:===================================================> (111 + 3) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.906824277 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4073525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 60) / 120][Stage 148:==============================>                      (68 + 52) / 120][Stage 148:======================================>              (87 + 33) / 120][Stage 148:===============================================>    (110 + 10) / 120][Stage 148:====================================================>(119 + 1) / 120]                                                                                [Stage 149:==========================>                          (61 + 60) / 121][Stage 149:===============================>                     (72 + 49) / 121][Stage 149:========================================>            (92 + 29) / 121][Stage 149:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 2.887971115 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381478922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==================================>                  (74 + 41) / 115][Stage 150:=========================================>           (89 + 26) / 115][Stage 150:===============================================>    (104 + 11) / 115][Stage 150:===================================================> (111 + 4) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:===============================>                     (69 + 47) / 116][Stage 151:====================================>                (79 + 37) / 116][Stage 151:===========================================>         (95 + 21) / 116][Stage 151:=================================================>   (108 + 8) / 116][Stage 151:====================================================>(114 + 2) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.636709524 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369812997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===============================>                     (71 + 47) / 118][Stage 152:=================================>                   (74 + 44) / 118][Stage 152:=====================================>               (83 + 35) / 118][Stage 152:==========================================>          (94 + 24) / 118][Stage 152:===================================================> (115 + 3) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:=====================================>               (84 + 35) / 119][Stage 153:========================================>            (92 + 27) / 119][Stage 153:===============================================>    (109 + 10) / 119][Stage 153:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.327055046 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393683094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:===========================>                         (63 + 57) / 120][Stage 154:=====================================>               (84 + 36) / 120][Stage 154:============================================>       (103 + 17) / 120][Stage 154:====================================================>(119 + 1) / 120]                                                                                [Stage 155:==========================>                          (61 + 60) / 121][Stage 155:============================>                        (64 + 57) / 121][Stage 155:===================================>                 (82 + 39) / 121][Stage 155:===============================================>    (111 + 10) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.031428772 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=255", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=255,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431976445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=================================>                   (71 + 42) / 113][Stage 156:========================================>            (86 + 27) / 113][Stage 156:=============================================>       (97 + 16) / 113][Stage 156:==============================================>     (102 + 11) / 113][Stage 156:===================================================> (110 + 3) / 113]                                                                                [Stage 157:=======================================>             (84 + 30) / 114][Stage 157:============================================>        (95 + 19) / 114][Stage 157:================================================>    (105 + 9) / 114][Stage 157:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.919015818 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388097616 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:============================>                        (60 + 53) / 113][Stage 158:=================================>                   (72 + 41) / 113][Stage 158:===========================================>         (92 + 21) / 113][Stage 158:===================================================> (110 + 3) / 113]                                                                                [Stage 159:============================>                        (62 + 52) / 114][Stage 159:==================================>                  (74 + 40) / 114][Stage 159:===========================================>         (94 + 20) / 114][Stage 159:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.008385236 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:============================>                        (61 + 52) / 113][Stage 160:================================>                    (70 + 43) / 113][Stage 160:========================================>            (86 + 27) / 113][Stage 160:====================================================>(112 + 1) / 113]                                                                                [Stage 161:===========================>                         (60 + 54) / 114][Stage 161:================================>                    (70 + 44) / 114][Stage 161:========================================>            (87 + 27) / 114][Stage 161:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.889191815 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=217", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=217,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373920314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==============================>                      (66 + 49) / 115][Stage 162:====================================>                (79 + 36) / 115][Stage 162:=========================================>           (89 + 26) / 115][Stage 162:=============================================>      (100 + 15) / 115][Stage 162:==================================================>  (109 + 6) / 115][Stage 162:===================================================> (112 + 3) / 115]                                                                                [Stage 163:===============================>                     (70 + 46) / 116][Stage 163:=======================================>             (86 + 30) / 116][Stage 163:==============================================>     (103 + 13) / 116][Stage 163:==================================================>  (111 + 5) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.412946227 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386870614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (59 + 54) / 113][Stage 164:===============================>                     (67 + 46) / 113][Stage 164:====================================>                (77 + 36) / 113][Stage 164:===========================================>         (93 + 20) / 113][Stage 164:================================================>    (104 + 9) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:===========================>                         (59 + 55) / 114][Stage 165:===============================>                     (67 + 47) / 114][Stage 165:=====================================>               (80 + 34) / 114][Stage 165:=============================================>       (98 + 16) / 114][Stage 165:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.36108144 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387204371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=============================>                       (63 + 50) / 113][Stage 166:=================================>                   (72 + 41) / 113][Stage 166:=====================================>               (81 + 32) / 113][Stage 166:==============================================>     (102 + 11) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:=============================>                       (64 + 50) / 114][Stage 167:=====================================>               (80 + 34) / 114][Stage 167:============================================>        (96 + 18) / 114][Stage 167:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.286145797 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:============================>                        (60 + 53) / 113][Stage 168:==============================>                      (66 + 47) / 113][Stage 168:====================================>                (77 + 36) / 113][Stage 168:===========================================>         (93 + 20) / 113][Stage 168:===============================================>    (103 + 10) / 113]                                                                                [Stage 169:===========================>                         (60 + 54) / 114][Stage 169:=================================>                   (71 + 43) / 114][Stage 169:==========================================>          (92 + 22) / 114][Stage 169:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.129222228 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38510639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==============================>                      (67 + 48) / 115][Stage 170:===================================>                 (76 + 39) / 115][Stage 170:========================================>            (88 + 27) / 115][Stage 170:================================================>    (106 + 9) / 115][Stage 170:===================================================> (112 + 3) / 115]                                                                                [Stage 171:===============================>                     (68 + 48) / 116][Stage 171:===================================>                 (78 + 38) / 116][Stage 171:==========================================>          (93 + 23) / 116][Stage 171:===============================================>    (106 + 10) / 116][Stage 171:===================================================> (112 + 4) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.496896088 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=================================>                   (72 + 43) / 115][Stage 172:========================================>            (87 + 28) / 115][Stage 172:=============================================>      (101 + 14) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:===============================>                     (70 + 46) / 116][Stage 173:======================================>              (84 + 32) / 116][Stage 173:=============================================>      (102 + 14) / 116][Stage 173:===================================================> (112 + 4) / 116][Stage 173:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.104175342 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360792099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (73 + 45) / 118][Stage 174:====================================>                (81 + 37) / 118][Stage 174:=======================================>             (88 + 30) / 118][Stage 174:============================================>       (102 + 16) / 118][Stage 174:===================================================> (115 + 3) / 118]                                                                                [Stage 175:================================>                    (73 + 46) / 119][Stage 175:======================================>              (87 + 32) / 119][Stage 175:==========================================>          (96 + 23) / 119][Stage 175:===============================================>    (109 + 10) / 119][Stage 175:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.527127609 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:=================================>                   (75 + 43) / 118][Stage 176:===================================>                 (80 + 38) / 118][Stage 176:=========================================>           (93 + 25) / 118][Stage 176:=================================================>   (110 + 8) / 118]                                                                                [Stage 177:================================>                    (74 + 45) / 119][Stage 177:======================================>              (86 + 33) / 119][Stage 177:=========================================>           (94 + 25) / 119][Stage 177:=============================================>      (105 + 14) / 119][Stage 177:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.243198272 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396141705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (61 + 59) / 120][Stage 178:==============================>                      (70 + 50) / 120][Stage 178:=====================================>               (84 + 36) / 120][Stage 178:=============================================>      (104 + 16) / 120][Stage 178:====================================================>(119 + 1) / 120]                                                                                [Stage 179:===========================>                         (62 + 59) / 121][Stage 179:===============================>                     (73 + 48) / 121][Stage 179:=======================================>             (91 + 30) / 121][Stage 179:===============================================>    (111 + 10) / 121][Stage 179:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.300870516 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=146,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356940086 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===================================>                 (76 + 37) / 113][Stage 180:=========================================>           (88 + 25) / 113][Stage 180:===============================================>    (103 + 10) / 113][Stage 180:===================================================> (109 + 4) / 113]                                                                                [Stage 181:=======================================>             (84 + 30) / 114][Stage 181:===========================================>         (93 + 21) / 114][Stage 181:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 2.690984622 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=8,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==================================>                  (73 + 40) / 113][Stage 182:======================================>              (83 + 30) / 113][Stage 182:===========================================>         (92 + 21) / 113][Stage 182:==================================================>  (108 + 5) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:====================================>                (78 + 36) / 114][Stage 183:===========================================>         (94 + 20) / 114][Stage 183:================================================>    (105 + 9) / 114][Stage 183:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.294131483 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===================================>                 (75 + 38) / 113][Stage 184:=======================================>             (85 + 28) / 113][Stage 184:==============================================>     (100 + 13) / 113][Stage 184:==================================================>  (108 + 5) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:==================================>                  (74 + 40) / 114][Stage 185:=======================================>             (86 + 28) / 114][Stage 185:=============================================>       (98 + 16) / 114][Stage 185:===================================================> (110 + 4) / 114][Stage 185:====================================================>(112 + 2) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.14820924 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393229031 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:==============================>                      (70 + 50) / 120][Stage 186:=====================================>               (84 + 36) / 120][Stage 186:===========================================>         (98 + 22) / 120][Stage 186:===================================================> (117 + 3) / 120]                                                                                [Stage 187:============================>                        (64 + 57) / 121][Stage 187:=================================>                   (77 + 44) / 121][Stage 187:===========================================>        (101 + 20) / 121][Stage 187:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.157550008 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372187723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (70 + 45) / 115][Stage 188:===================================>                 (77 + 38) / 115][Stage 188:===========================================>         (94 + 21) / 115][Stage 188:=================================================>   (108 + 7) / 115]                                                                                [Stage 189:==================================>                  (75 + 41) / 116][Stage 189:========================================>            (89 + 27) / 116][Stage 189:============================================>        (98 + 18) / 116][Stage 189:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.823895098 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=192,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349565728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=======================================>             (84 + 29) / 113][Stage 190:===========================================>         (93 + 20) / 113][Stage 190:==============================================>     (101 + 12) / 113][Stage 190:==================================================>  (108 + 5) / 113]                                                                                [Stage 191:======================================>              (82 + 32) / 114][Stage 191:==========================================>          (92 + 22) / 114][Stage 191:===============================================>    (104 + 10) / 114][Stage 191:===================================================> (111 + 3) / 114][Stage 191:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.22661747 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=249,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379766191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:=============================>                       (63 + 50) / 113][Stage 192:===================================>                 (76 + 37) / 113][Stage 192:==============================================>     (102 + 11) / 113]                                                                                [Stage 193:============================>                        (62 + 52) / 114][Stage 193:==================================>                  (74 + 40) / 114][Stage 193:=============================================>       (97 + 17) / 114][Stage 193:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.947756212 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=92", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=92,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361084076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (73 + 45) / 118][Stage 194:==================================>                  (76 + 42) / 118][Stage 194:======================================>              (85 + 33) / 118][Stage 194:============================================>       (102 + 16) / 118][Stage 194:===================================================> (115 + 3) / 118]                                                                                [Stage 195:================================>                    (73 + 46) / 119][Stage 195:=================================>                   (76 + 43) / 119][Stage 195:====================================>                (83 + 36) / 119][Stage 195:============================================>       (102 + 17) / 119][Stage 195:=================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.158829202 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=103,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354303098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:====================================>                (77 + 36) / 113][Stage 196:========================================>            (87 + 26) / 113][Stage 196:==============================================>      (99 + 14) / 113][Stage 196:===================================================> (110 + 3) / 113]                                                                                [Stage 197:====================================>                (79 + 35) / 114][Stage 197:=========================================>           (89 + 25) / 114][Stage 197:=============================================>       (97 + 17) / 114][Stage 197:===============================================>    (104 + 10) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.955983342 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=15", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=15,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (80 + 33) / 113][Stage 198:==========================================>          (91 + 22) / 113][Stage 198:==============================================>     (102 + 11) / 113][Stage 198:===================================================> (110 + 3) / 113]                                                                                [Stage 199:==================================>                  (74 + 40) / 114][Stage 199:======================================>              (83 + 31) / 114][Stage 199:==========================================>          (91 + 23) / 114][Stage 199:==============================================>     (102 + 12) / 114][Stage 199:===================================================> (111 + 3) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.928895367 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359850376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (72 + 46) / 118][Stage 200:==================================>                  (76 + 42) / 118][Stage 200:=======================================>             (89 + 29) / 118][Stage 200:============================================>        (98 + 20) / 118][Stage 200:==================================================>  (112 + 6) / 118]                                                                                [Stage 201:================================>                    (74 + 45) / 119][Stage 201:==================================>                  (77 + 42) / 119][Stage 201:========================================>            (90 + 29) / 119][Stage 201:===========================================>        (100 + 19) / 119][Stage 201:==================================================>  (113 + 6) / 119][Stage 201:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.556350935 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 01:30:04 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:54266) dropped. RpcEnv already stopped.
17/06/01 01:30:04 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:48114) dropped. RpcEnv already stopped.
17/06/01 01:30:04 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:54266) dropped. RpcEnv already stopped.
17/06/01 01:30:04 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:48114) dropped. RpcEnv already stopped.

real	10m1.199s
user	11m25.556s
sys	0m35.624s
