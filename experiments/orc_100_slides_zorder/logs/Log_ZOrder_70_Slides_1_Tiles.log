Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 02:34:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:34:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:34:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:34:49 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 02:34:52 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 02:35:03 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601023451-0743).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.474146039 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (52 + 63) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:========================>                              (51 + 65) / 116][Stage 1:============================>                          (60 + 56) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(114 + 2) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.890378093 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=96", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=96,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.619993111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==============================>                        (63 + 52) / 115][Stage 2:==================================>                    (73 + 42) / 115][Stage 2:=======================================>               (83 + 32) / 115][Stage 2:==========================================>            (88 + 27) / 115][Stage 2:=============================================>         (95 + 20) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:=====================================================> (111 + 4) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:=====================================>                 (79 + 37) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:=======================================>               (83 + 33) / 116][Stage 3:===========================================>           (92 + 24) / 116][Stage 3:===============================================>      (103 + 13) / 116][Stage 3:====================================================>  (110 + 6) / 116][Stage 3:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.484217195 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=248", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=248,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.703786324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (70 + 48) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:==================================>                    (74 + 44) / 118][Stage 4:===================================>                   (76 + 42) / 118][Stage 4:====================================>                  (79 + 39) / 118][Stage 4:======================================>                (83 + 35) / 118][Stage 4:=========================================>             (89 + 29) / 118][Stage 4:=============================================>        (100 + 18) / 118][Stage 4:================================================>     (105 + 13) / 118][Stage 4:=====================================================> (114 + 4) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:====================================>                  (80 + 39) / 119][Stage 5:=====================================>                 (82 + 37) / 119][Stage 5:=======================================>               (85 + 34) / 119][Stage 5:==========================================>            (92 + 27) / 119][Stage 5:===============================================>      (104 + 15) / 119][Stage 5:===================================================>   (112 + 7) / 119]                                                                                Time elapsed: 5.095030687 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.72072378 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (57 + 56) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:=============================>                         (61 + 52) / 113][Stage 6:==================================>                    (70 + 43) / 113][Stage 6:========================================>              (84 + 29) / 113][Stage 6:=============================================>         (94 + 19) / 113][Stage 6:===================================================>   (106 + 7) / 113][Stage 6:=====================================================> (110 + 3) / 113]                                                                                [Stage 7:============================>                          (59 + 55) / 114][Stage 7:================================>                      (68 + 46) / 114][Stage 7:======================================>                (79 + 35) / 114][Stage 7:==========================================>            (89 + 25) / 114][Stage 7:================================================>     (103 + 11) / 114][Stage 7:====================================================>  (109 + 5) / 114][Stage 7:=====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.360528771 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (59 + 54) / 113][Stage 8:==============================>                        (62 + 51) / 113][Stage 8:====================================>                  (75 + 38) / 113][Stage 8:===============================================>       (97 + 16) / 113][Stage 8:===================================================>   (106 + 7) / 113][Stage 8:=====================================================> (110 + 3) / 113]                                                                                [Stage 9:===========================>                           (57 + 57) / 114][Stage 9:=============================>                         (61 + 53) / 114][Stage 9:=====================================>                 (77 + 37) / 114][Stage 9:=============================================>         (95 + 19) / 114][Stage 9:================================================>     (102 + 12) / 114]                                                                                Time elapsed: 3.722016074 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496824188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:>                                                       (0 + 0) / 115][Stage 10:=====================================>                (80 + 35) / 115][Stage 10:=======================================>              (85 + 30) / 115][Stage 10:============================================>         (94 + 21) / 115][Stage 10:================================================>    (105 + 10) / 115][Stage 10:=====================================================>(113 + 2) / 115]                                                                                [Stage 11:======================================>               (82 + 34) / 116][Stage 11:==========================================>           (91 + 25) / 116][Stage 11:==============================================>      (102 + 14) / 116][Stage 11:==================================================>   (108 + 8) / 116][Stage 11:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.363703908 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.578225654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===============================>                      (67 + 48) / 115][Stage 12:=====================================>                (79 + 36) / 115][Stage 12:==========================================>           (91 + 24) / 115][Stage 12:==============================================>      (100 + 15) / 115][Stage 12:===================================================>  (109 + 6) / 115][Stage 12:====================================================> (111 + 4) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:================================>                     (69 + 47) / 116][Stage 13:======================================>               (83 + 33) / 116][Stage 13:===========================================>          (94 + 22) / 116][Stage 13:==============================================>      (101 + 15) / 116][Stage 13:================================================>    (106 + 10) / 116][Stage 13:=================================================>    (107 + 9) / 116][Stage 13:===================================================>  (111 + 5) / 116][Stage 13:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.232135759 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483924776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:=======================================>              (85 + 30) / 115][Stage 14:=============================================>        (96 + 19) / 115][Stage 14:================================================>    (105 + 10) / 115][Stage 14:===================================================>  (109 + 6) / 115][Stage 14:====================================================> (112 + 3) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:=======================================>              (85 + 31) / 116][Stage 15:===========================================>          (93 + 23) / 116][Stage 15:===============================================>     (105 + 11) / 116][Stage 15:===================================================>  (110 + 6) / 116][Stage 15:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.761703347 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=164", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=164,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479922307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:======================================>               (81 + 34) / 115][Stage 16:========================================>             (87 + 28) / 115][Stage 16:=============================================>        (96 + 19) / 115][Stage 16:=================================================>    (106 + 9) / 115]                                                                                [Stage 17:=====================================>                (81 + 35) / 116][Stage 17:===========================================>          (93 + 23) / 116][Stage 17:==============================================>       (99 + 17) / 116][Stage 17:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.052978024 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=255 AND partitionZIndex<=255", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=255 AND partitionZIndex<=255,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.532757459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:============================>                         (59 + 54) / 113][Stage 18:=============================>                        (61 + 52) / 113][Stage 18:======================================>               (80 + 33) / 113][Stage 18:==============================================>       (97 + 16) / 113][Stage 18:===============================================>     (102 + 11) / 113][Stage 18:==================================================>   (105 + 8) / 113][Stage 18:====================================================> (109 + 4) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:==============================>                       (64 + 50) / 114][Stage 19:=================================>                    (71 + 43) / 114][Stage 19:==========================================>           (89 + 25) / 114][Stage 19:===============================================>     (103 + 11) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.901150954 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.624709997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:==================================>                   (77 + 43) / 120][Stage 20:============================================>         (98 + 22) / 120][Stage 20:==================================================>   (113 + 7) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:=============================>                        (67 + 54) / 121][Stage 21:=====================================>                (85 + 36) / 121][Stage 21:=============================================>       (103 + 18) / 121][Stage 21:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.479681916 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473468342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:>                                                       (0 + 0) / 113][Stage 22:===================================>                  (74 + 39) / 113][Stage 22:=========================================>            (87 + 26) / 113][Stage 22:=============================================>        (96 + 17) / 113][Stage 22:=================================================>    (104 + 9) / 113][Stage 22:====================================================> (110 + 3) / 113]                                                                                [Stage 23:=======================================>              (84 + 30) / 114][Stage 23:===========================================>          (92 + 22) / 114][Stage 23:=================================================>    (105 + 9) / 114][Stage 23:====================================================> (111 + 3) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.198826981 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=192", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=192,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (70 + 43) / 113][Stage 24:========================================>             (85 + 28) / 113][Stage 24:============================================>         (94 + 19) / 113][Stage 24:==============================================>      (100 + 13) / 113][Stage 24:===================================================>  (107 + 6) / 113][Stage 24:====================================================> (110 + 3) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:==================================>                   (73 + 41) / 114][Stage 25:========================================>             (86 + 28) / 114][Stage 25:==============================================>       (98 + 16) / 114][Stage 25:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.325849415 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=115,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57061837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:================================>                     (68 + 45) / 113][Stage 26:=========================================>            (87 + 26) / 113][Stage 26:==============================================>       (98 + 15) / 113][Stage 26:====================================================> (110 + 3) / 113]                                                                                [Stage 27:===========================>                          (59 + 55) / 114][Stage 27:=============================>                        (63 + 51) / 114][Stage 27:=====================================>                (80 + 34) / 114][Stage 27:=============================================>        (96 + 18) / 114][Stage 27:==================================================>   (106 + 8) / 114][Stage 27:====================================================> (110 + 4) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.628425795 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=27", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=27,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440432169 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=====================================>                (80 + 35) / 115][Stage 28:=======================================>              (85 + 30) / 115][Stage 28:=============================================>        (96 + 19) / 115][Stage 28:====================================================> (111 + 4) / 115]                                                                                [Stage 29:=======================================>              (84 + 32) / 116][Stage 29:=============================================>        (97 + 19) / 116][Stage 29:================================================>    (106 + 10) / 116][Stage 29:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.01749352 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489217116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==============================>                       (66 + 49) / 115][Stage 30:======================================>               (81 + 34) / 115][Stage 30:============================================>         (94 + 21) / 115][Stage 30:================================================>    (105 + 10) / 115][Stage 30:====================================================> (111 + 4) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:=================================>                    (73 + 43) / 116][Stage 31:==========================================>           (92 + 24) / 116][Stage 31:=================================================>    (107 + 9) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.261055979 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47538622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=====================================>                (80 + 35) / 115][Stage 32:=======================================>              (84 + 31) / 115][Stage 32:============================================>         (95 + 20) / 115][Stage 32:================================================>    (105 + 10) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:======================================>               (83 + 33) / 116][Stage 33:===========================================>          (93 + 23) / 116][Stage 33:===============================================>     (105 + 11) / 116][Stage 33:===================================================>  (111 + 5) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.958342665 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.537650652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:===============================>                      (69 + 51) / 120][Stage 34:======================================>               (85 + 35) / 120][Stage 34:=============================================>       (104 + 16) / 120][Stage 34:====================================================> (116 + 4) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:================================>                     (72 + 49) / 121][Stage 35:==========================================>           (96 + 25) / 121][Stage 35:================================================>    (110 + 11) / 121][Stage 35:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.415430914 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470289738 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (73 + 42) / 115][Stage 36:========================================>             (87 + 28) / 115][Stage 36:=============================================>        (96 + 19) / 115][Stage 36:===============================================>     (102 + 13) / 115][Stage 36:====================================================> (111 + 4) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:===============================>                      (68 + 48) / 116][Stage 37:=====================================>                (80 + 36) / 116][Stage 37:============================================>         (95 + 21) / 116][Stage 37:=================================================>    (107 + 9) / 116][Stage 37:==================================================>   (109 + 7) / 116][Stage 37:===================================================>  (110 + 6) / 116][Stage 37:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.691183648 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496585837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:==============================>                       (67 + 53) / 120][Stage 38:========================================>             (90 + 30) / 120][Stage 38:==================================================>   (113 + 7) / 120][Stage 38:=====================================================>(118 + 2) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:=============================>                        (67 + 54) / 121][Stage 39:=======================================>              (88 + 33) / 121][Stage 39:==============================================>      (106 + 15) / 121][Stage 39:====================================================> (118 + 3) / 121][Stage 39:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.500954394 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=180", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=180,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512554625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===============================>                      (69 + 51) / 120][Stage 40:====================================>                 (80 + 40) / 120][Stage 40:===================================================>  (114 + 6) / 120][Stage 40:=====================================================>(119 + 1) / 120]                                                                                [Stage 41:===========================>                          (61 + 60) / 121][Stage 41:==============================>                       (69 + 52) / 121][Stage 41:========================================>             (91 + 30) / 121][Stage 41:===============================================>     (108 + 13) / 121]                                                                                Time elapsed: 3.127762846 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=97", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=97,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (60 + 60) / 120][Stage 42:===========================>                          (61 + 59) / 120][Stage 42:==================================>                   (77 + 43) / 120][Stage 42:=============================================>       (104 + 16) / 120][Stage 42:==================================================>   (113 + 7) / 120]                                                                                [Stage 43:===========================>                          (62 + 59) / 121][Stage 43:================================>                     (73 + 48) / 121][Stage 43:=========================================>            (93 + 28) / 121][Stage 43:================================================>    (111 + 10) / 121][Stage 43:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.213755267 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525067572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 59) / 120][Stage 44:================================>                     (72 + 48) / 120][Stage 44:======================================>               (86 + 34) / 120][Stage 44:================================================>    (110 + 10) / 120][Stage 44:===================================================>  (114 + 6) / 120]                                                                                [Stage 45:===========================>                          (62 + 59) / 121][Stage 45:===============================>                      (70 + 51) / 121][Stage 45:======================================>               (86 + 35) / 121][Stage 45:===============================================>     (109 + 12) / 121][Stage 45:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.322673415 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=13", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=13,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (62 + 58) / 120][Stage 46:===============================>                      (71 + 49) / 120][Stage 46:===========================================>          (96 + 24) / 120][Stage 46:==================================================>   (113 + 7) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:===============================>                      (70 + 51) / 121][Stage 47:======================================>               (87 + 34) / 121][Stage 47:===============================================>     (108 + 13) / 121][Stage 47:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.289374706 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=199", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=199,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513192594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:==============================>                       (64 + 49) / 113][Stage 48:=========================================>            (86 + 27) / 113][Stage 48:==============================================>       (97 + 16) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:============================>                         (60 + 54) / 114][Stage 49:=============================>                        (63 + 51) / 114][Stage 49:=====================================>                (79 + 35) / 114][Stage 49:==============================================>       (98 + 16) / 114][Stage 49:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.102673584 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=154,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429134604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:====================================>                 (77 + 36) / 113][Stage 50:===========================================>          (90 + 23) / 113][Stage 50:==============================================>       (98 + 15) / 113][Stage 50:===================================================>  (107 + 6) / 113][Stage 50:====================================================> (109 + 4) / 113][Stage 50:====================================================> (110 + 3) / 113]                                                                                [Stage 51:====================================>                 (78 + 36) / 114][Stage 51:==========================================>           (90 + 24) / 114][Stage 51:==============================================>       (98 + 16) / 114][Stage 51:==================================================>   (106 + 8) / 114][Stage 51:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.586967753 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440853866 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:==================================>                   (72 + 41) / 113][Stage 52:======================================>               (80 + 33) / 113][Stage 52:============================================>         (93 + 20) / 113][Stage 52:==================================================>   (105 + 8) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:==================================>                   (72 + 42) / 114][Stage 53:=======================================>              (84 + 30) / 114][Stage 53:=============================================>        (96 + 18) / 114][Stage 53:==================================================>   (106 + 8) / 114][Stage 53:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.100991871 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408727817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (81 + 32) / 113][Stage 54:===========================================>          (90 + 23) / 113][Stage 54:===============================================>     (102 + 11) / 113][Stage 54:==================================================>   (105 + 8) / 113][Stage 54:===================================================>  (108 + 5) / 113][Stage 54:=====================================================>(112 + 1) / 113]                                                                                [Stage 55:====================================>                 (78 + 36) / 114][Stage 55:=========================================>            (88 + 26) / 114][Stage 55:==============================================>       (99 + 15) / 114][Stage 55:===================================================>  (108 + 6) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.53499707 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392891523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (81 + 34) / 115][Stage 56:=======================================>              (85 + 30) / 115][Stage 56:=============================================>        (96 + 19) / 115][Stage 56:================================================>    (105 + 10) / 115][Stage 56:===================================================>  (109 + 6) / 115][Stage 56:====================================================> (111 + 4) / 115][Stage 56:====================================================> (112 + 3) / 115]                                                                                [Stage 57:======================================>               (82 + 34) / 116][Stage 57:========================================>             (88 + 28) / 116][Stage 57:==============================================>      (102 + 14) / 116][Stage 57:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.24666558 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479870493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (72 + 46) / 118][Stage 58:==================================>                   (76 + 42) / 118][Stage 58:=======================================>              (86 + 32) / 118][Stage 58:===============================================>     (105 + 13) / 118][Stage 58:==================================================>   (111 + 7) / 118][Stage 58:=====================================================>(117 + 1) / 118]                                                                                [Stage 59:=================================>                    (73 + 46) / 119][Stage 59:===================================>                  (78 + 41) / 119][Stage 59:==========================================>           (94 + 25) / 119][Stage 59:===============================================>     (107 + 12) / 119][Stage 59:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.198660757 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41843639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=================================>                    (71 + 42) / 113][Stage 60:=====================================>                (78 + 35) / 113][Stage 60:==========================================>           (88 + 25) / 113][Stage 60:===============================================>     (102 + 11) / 113][Stage 60:===================================================>  (108 + 5) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:====================================>                 (76 + 38) / 114][Stage 61:===========================================>          (92 + 22) / 114][Stage 61:==============================================>      (101 + 13) / 114][Stage 61:=================================================>    (105 + 9) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.116908953 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=165", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=165,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48211827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==============================>                       (66 + 49) / 115][Stage 62:==================================>                   (74 + 41) / 115][Stage 62:=========================================>            (88 + 27) / 115][Stage 62:===============================================>     (102 + 13) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:===============================>                      (68 + 48) / 116][Stage 63:=====================================>                (80 + 36) / 116][Stage 63:===========================================>          (94 + 22) / 116][Stage 63:=================================================>    (107 + 9) / 116][Stage 63:====================================================> (112 + 4) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.294842753 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411373987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:====================================>                 (77 + 36) / 113][Stage 64:========================================>             (85 + 28) / 113][Stage 64:===============================================>     (101 + 12) / 113][Stage 64:====================================================> (109 + 4) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:===================================>                  (75 + 39) / 114][Stage 65:===========================================>          (91 + 23) / 114][Stage 65:==============================================>      (100 + 14) / 114][Stage 65:===================================================>  (108 + 6) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.621826106 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424863848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:===================================>                  (77 + 41) / 118][Stage 66:=======================================>              (86 + 32) / 118][Stage 66:=============================================>       (102 + 16) / 118][Stage 66:===================================================>  (112 + 6) / 118]                                                                                [Stage 67:==================================>                   (75 + 44) / 119][Stage 67:====================================>                 (81 + 38) / 119][Stage 67:=========================================>            (92 + 27) / 119][Stage 67:=============================================>       (103 + 16) / 119][Stage 67:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.400238021 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571791176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:============================>                         (59 + 54) / 113][Stage 68:===============================>                      (66 + 47) / 113][Stage 68:======================================>               (80 + 33) / 113][Stage 68:==============================================>      (100 + 13) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:===========================>                          (59 + 55) / 114][Stage 69:===============================>                      (67 + 47) / 114][Stage 69:=======================================>              (83 + 31) / 114][Stage 69:=============================================>        (97 + 17) / 114][Stage 69:====================================================> (110 + 4) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.247196675 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479011859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:===========================>                          (61 + 59) / 120][Stage 70:=====================================>                (84 + 36) / 120][Stage 70:===============================================>     (107 + 13) / 120]                                                                                [Stage 71:===========================>                          (61 + 60) / 121][Stage 71:===============================>                      (71 + 50) / 121][Stage 71:=======================================>              (89 + 32) / 121][Stage 71:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 2.947380666 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=202", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=202,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367658026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=====================================>                (80 + 35) / 115][Stage 72:=========================================>            (89 + 26) / 115][Stage 72:=============================================>        (97 + 18) / 115][Stage 72:===================================================>  (110 + 5) / 115]                                                                                [Stage 73:======================================>               (82 + 34) / 116][Stage 73:=========================================>            (89 + 27) / 116][Stage 73:==============================================>      (101 + 15) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.73444857 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415970539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:====================================>                 (77 + 36) / 113][Stage 74:=========================================>            (87 + 26) / 113][Stage 74:==============================================>      (100 + 13) / 113][Stage 74:===================================================>  (107 + 6) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:==================================>                   (73 + 41) / 114][Stage 75:========================================>             (85 + 29) / 114][Stage 75:============================================>         (94 + 20) / 114][Stage 75:=================================================>    (105 + 9) / 114][Stage 75:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.098599633 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=219", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=219,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413801292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:========================================>             (88 + 30) / 118][Stage 76:===============================================>     (106 + 12) / 118]                                                                                [Stage 77:=================================>                    (74 + 45) / 119][Stage 77:=======================================>              (88 + 31) / 119][Stage 77:===============================================>     (106 + 13) / 119][Stage 77:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.749277985 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=196", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=196,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (74 + 44) / 118][Stage 78:=======================================>              (86 + 32) / 118][Stage 78:===========================================>          (95 + 23) / 118][Stage 78:====================================================> (115 + 3) / 118]                                                                                [Stage 79:==================================>                   (76 + 43) / 119][Stage 79:==========================================>           (93 + 26) / 119][Stage 79:================================================>    (108 + 11) / 119][Stage 79:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.96583353 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=132", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=132,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391268846 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===================================>                  (74 + 39) / 113][Stage 80:=========================================>            (86 + 27) / 113][Stage 80:==============================================>      (100 + 13) / 113][Stage 80:===================================================>  (108 + 5) / 113][Stage 80:====================================================> (109 + 4) / 113][Stage 80:====================================================> (110 + 3) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:======================================>               (82 + 32) / 114][Stage 81:===========================================>          (92 + 22) / 114][Stage 81:==============================================>      (101 + 13) / 114][Stage 81:==================================================>   (107 + 7) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.618823935 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413159395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:==================================>                   (76 + 42) / 118][Stage 82:===========================================>          (96 + 22) / 118][Stage 82:===================================================>  (113 + 5) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:=================================>                    (73 + 46) / 119][Stage 83:=====================================>                (82 + 37) / 119][Stage 83:=============================================>       (103 + 16) / 119][Stage 83:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.892897225 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=38", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=38,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (72 + 46) / 118][Stage 84:====================================>                 (79 + 39) / 118][Stage 84:==========================================>           (93 + 25) / 118][Stage 84:===================================================>  (112 + 6) / 118][Stage 84:=====================================================>(117 + 1) / 118]                                                                                [Stage 85:==================================>                   (77 + 42) / 119][Stage 85:=======================================>              (86 + 33) / 119][Stage 85:================================================>    (108 + 11) / 119][Stage 85:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.026819845 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474169157 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=============================>                        (61 + 52) / 113][Stage 86:=================================>                    (71 + 42) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:====================================================> (110 + 3) / 113]                                                                                [Stage 87:===========================>                          (59 + 55) / 114][Stage 87:==============================>                       (64 + 50) / 114][Stage 87:====================================>                 (76 + 38) / 114][Stage 87:==============================================>      (100 + 14) / 114][Stage 87:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.902058436 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412732641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:================================>                     (72 + 46) / 118][Stage 88:==================================>                   (76 + 42) / 118][Stage 88:========================================>             (88 + 30) / 118][Stage 88:===============================================>     (105 + 13) / 118][Stage 88:====================================================> (114 + 4) / 118][Stage 88:=====================================================>(117 + 1) / 118]                                                                                [Stage 89:=================================>                    (73 + 46) / 119][Stage 89:===================================>                  (79 + 40) / 119][Stage 89:=========================================>            (91 + 28) / 119][Stage 89:============================================>        (101 + 18) / 119][Stage 89:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.238969508 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:===================================>                  (77 + 41) / 118][Stage 90:======================================>               (84 + 34) / 118][Stage 90:=============================================>        (99 + 19) / 118][Stage 90:==================================================>   (111 + 7) / 118]                                                                                [Stage 91:=================================>                    (74 + 45) / 119][Stage 91:======================================>               (84 + 35) / 119][Stage 91:==========================================>           (93 + 26) / 119][Stage 91:================================================>    (109 + 10) / 119][Stage 91:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.182669045 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426166156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:============================>                         (59 + 54) / 113][Stage 92:===============================>                      (65 + 48) / 113][Stage 92:======================================>               (80 + 33) / 113][Stage 92:===============================================>      (99 + 14) / 113][Stage 92:=====================================================>(111 + 2) / 113]                                                                                [Stage 93:============================>                         (61 + 53) / 114][Stage 93:==================================>                   (72 + 42) / 114][Stage 93:========================================>             (85 + 29) / 114][Stage 93:=================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.063452496 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38620875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (72 + 46) / 118][Stage 94:==================================>                   (75 + 43) / 118][Stage 94:=====================================>                (82 + 36) / 118][Stage 94:=========================================>            (90 + 28) / 118][Stage 94:============================================>        (100 + 18) / 118][Stage 94:=====================================================>(117 + 1) / 118]                                                                                [Stage 95:=================================>                    (74 + 45) / 119][Stage 95:==================================>                   (77 + 42) / 119][Stage 95:========================================>             (89 + 30) / 119][Stage 95:=============================================>       (102 + 17) / 119][Stage 95:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.396264373 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=172", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=172,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395328904 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=================================>                    (72 + 43) / 115][Stage 96:=========================================>            (88 + 27) / 115][Stage 96:==============================================>      (100 + 15) / 115][Stage 96:=================================================>    (106 + 9) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:================================>                     (69 + 47) / 116][Stage 97:======================================>               (82 + 34) / 116][Stage 97:=============================================>        (98 + 18) / 116][Stage 97:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.995354985 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=75", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=75,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364399034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=====================================>                (80 + 35) / 115][Stage 98:=======================================>              (84 + 31) / 115][Stage 98:============================================>         (94 + 21) / 115][Stage 98:===================================================>  (109 + 6) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=====================================>                (80 + 36) / 116][Stage 99:=========================================>            (89 + 27) / 116][Stage 99:===================================================>  (110 + 6) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.881958583 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358326406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:======================================>              (83 + 32) / 115][Stage 100:=========================================>           (91 + 24) / 115][Stage 100:=================================================>   (108 + 7) / 115]                                                                                [Stage 101:======================================>              (85 + 31) / 116][Stage 101:===========================================>         (96 + 20) / 116][Stage 101:=================================================>   (108 + 8) / 116][Stage 101:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.754687778 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=229", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=229,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392019659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:==================================>                  (77 + 41) / 118][Stage 102:=======================================>             (87 + 31) / 118][Stage 102:==============================================>     (105 + 13) / 118][Stage 102:==================================================>  (112 + 6) / 118]                                                                                [Stage 103:================================>                    (73 + 46) / 119][Stage 103:====================================>                (81 + 38) / 119][Stage 103:========================================>            (91 + 28) / 119][Stage 103:=============================================>      (103 + 16) / 119][Stage 103:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.260034729 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41421795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (58 + 55) / 113][Stage 104:==============================>                      (65 + 48) / 113][Stage 104:========================================>            (87 + 26) / 113][Stage 104:=================================================>   (106 + 7) / 113][Stage 104:===================================================> (110 + 3) / 113]                                                                                [Stage 105:============================>                        (62 + 52) / 114][Stage 105:====================================>                (78 + 36) / 114][Stage 105:==============================================>      (99 + 15) / 114][Stage 105:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.141027007 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=252", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=252,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424774178 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (62 + 58) / 120][Stage 106:==================================>                  (78 + 42) / 120][Stage 106:===========================================>         (98 + 22) / 120][Stage 106:==================================================>  (114 + 6) / 120]                                                                                [Stage 107:===========================>                         (62 + 59) / 121][Stage 107:===============================>                     (72 + 49) / 121][Stage 107:========================================>            (92 + 29) / 121][Stage 107:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.07532485 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423689384 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (61 + 59) / 120][Stage 108:=================================>                   (76 + 44) / 120][Stage 108:===========================================>         (98 + 22) / 120][Stage 108:===================================================> (116 + 4) / 120][Stage 108:====================================================>(119 + 1) / 120]                                                                                [Stage 109:==========================>                          (61 + 60) / 121][Stage 109:=============================>                       (68 + 53) / 121][Stage 109:====================================>                (83 + 38) / 121][Stage 109:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.090934731 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=87", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=87,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388662012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (79 + 34) / 113][Stage 110:==========================================>          (91 + 22) / 113][Stage 110:==============================================>     (102 + 11) / 113][Stage 110:===================================================> (110 + 3) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:===================================>                 (76 + 38) / 114][Stage 111:========================================>            (87 + 27) / 114][Stage 111:===========================================>         (94 + 20) / 114][Stage 111:=================================================>   (107 + 7) / 114][Stage 111:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.081139483 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===================================>                 (75 + 38) / 113][Stage 112:======================================>              (83 + 30) / 113][Stage 112:============================================>        (94 + 19) / 113][Stage 112:================================================>    (104 + 9) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:===================================>                 (77 + 37) / 114][Stage 113:=======================================>             (86 + 28) / 114][Stage 113:============================================>        (96 + 18) / 114][Stage 113:===============================================>    (104 + 10) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.455205432 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=110", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=110,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387972658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=====================================>               (79 + 34) / 113][Stage 114:==========================================>          (90 + 23) / 113][Stage 114:==============================================>     (100 + 13) / 113][Stage 114:===================================================> (109 + 4) / 113][Stage 114:=====================================================(113 + 0) / 113]                                                                                [Stage 115:====================================>                (78 + 36) / 114][Stage 115:=========================================>           (90 + 24) / 114][Stage 115:==============================================>     (103 + 11) / 114][Stage 115:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.933373518 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=191,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (71 + 42) / 113][Stage 116:======================================>              (83 + 30) / 113][Stage 116:=============================================>       (96 + 17) / 113][Stage 116:================================================>    (104 + 9) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:========================================>            (87 + 27) / 114][Stage 117:=============================================>       (97 + 17) / 114][Stage 117:==================================================>  (108 + 6) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.891683599 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=232", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=232,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385604087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:=================================>                   (75 + 43) / 118][Stage 118:========================================>            (91 + 27) / 118][Stage 118:================================================>    (109 + 9) / 118][Stage 118:===================================================> (115 + 3) / 118]                                                                                [Stage 119:=================================>                   (76 + 43) / 119][Stage 119:====================================>                (82 + 37) / 119][Stage 119:============================================>       (101 + 18) / 119][Stage 119:===================================================> (115 + 4) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.212208399 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=37", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=37,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351444606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (82 + 33) / 115][Stage 120:=========================================>           (90 + 25) / 115][Stage 120:==============================================>     (102 + 13) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:========================================>            (88 + 28) / 116][Stage 121:=============================================>      (101 + 15) / 116][Stage 121:=================================================>   (109 + 7) / 116][Stage 121:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.903798201 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37122391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=====================================>               (79 + 34) / 113][Stage 122:===========================================>         (92 + 21) / 113][Stage 122:=============================================>       (98 + 15) / 113][Stage 122:==================================================>  (108 + 5) / 113][Stage 122:====================================================>(111 + 2) / 113]                                                                                [Stage 123:=====================================>               (80 + 34) / 114][Stage 123:=======================================>             (86 + 28) / 114][Stage 123:===========================================>         (94 + 20) / 114][Stage 123:================================================>    (105 + 9) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.094389555 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=46", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=46,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403372984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:============================>                        (61 + 52) / 113][Stage 124:=================================>                   (71 + 42) / 113][Stage 124:===========================================>         (92 + 21) / 113][Stage 124:===================================================> (109 + 4) / 113]                                                                                [Stage 125:===========================>                         (59 + 55) / 114][Stage 125:==============================>                      (66 + 48) / 114][Stage 125:======================================>              (83 + 31) / 114][Stage 125:===============================================>    (104 + 10) / 114][Stage 125:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.986537522 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=120", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=120,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430570166 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 60) / 120][Stage 126:============================>                        (64 + 56) / 120][Stage 126:=================================>                   (75 + 45) / 120][Stage 126:==============================================>     (107 + 13) / 120]                                                                                [Stage 127:===========================>                         (62 + 59) / 121][Stage 127:==============================>                      (70 + 51) / 121][Stage 127:=====================================>               (86 + 35) / 121][Stage 127:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 2.862652323 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356486868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=====================================>               (81 + 34) / 115][Stage 128:==========================================>          (92 + 23) / 115][Stage 128:===================================================> (111 + 4) / 115][Stage 128:====================================================>(113 + 2) / 115]                                                                                [Stage 129:======================================>              (84 + 32) / 116][Stage 129:=========================================>           (91 + 25) / 116][Stage 129:================================================>    (107 + 9) / 116][Stage 129:====================================================>(114 + 2) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.764880341 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=238", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=238,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404074582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=============================>                       (65 + 50) / 115][Stage 130:=====================================>               (81 + 34) / 115][Stage 130:===========================================>         (95 + 20) / 115][Stage 130:==================================================>  (110 + 5) / 115]                                                                                [Stage 131:=================================>                   (73 + 43) / 116][Stage 131:=========================================>           (90 + 26) / 116][Stage 131:==============================================>     (103 + 13) / 116][Stage 131:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.947097863 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365927241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=====================================>               (81 + 34) / 115][Stage 132:==========================================>          (92 + 23) / 115][Stage 132:=============================================>      (100 + 15) / 115][Stage 132:===================================================> (111 + 4) / 115]                                                                                [Stage 133:========================================>            (88 + 28) / 116][Stage 133:==============================================>     (103 + 13) / 116][Stage 133:==================================================>  (111 + 5) / 116][Stage 133:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.904668478 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407583272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (70 + 45) / 115][Stage 134:======================================>              (84 + 31) / 115][Stage 134:============================================>        (97 + 18) / 115][Stage 134:===============================================>    (105 + 10) / 115][Stage 134:==================================================>  (110 + 5) / 115]                                                                                [Stage 135:====================================>                (80 + 36) / 116][Stage 135:=========================================>           (91 + 25) / 116][Stage 135:===============================================>    (106 + 10) / 116][Stage 135:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.133548503 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=119", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=119,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (72 + 43) / 115][Stage 136:========================================>            (87 + 28) / 115][Stage 136:==============================================>     (102 + 13) / 115][Stage 136:===================================================> (112 + 3) / 115]                                                                                [Stage 137:=================================>                   (74 + 42) / 116][Stage 137:=======================================>             (86 + 30) / 116][Stage 137:===========================================>         (96 + 20) / 116][Stage 137:=================================================>   (108 + 8) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.107009542 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=159", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=159,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371761693 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=================================>                   (75 + 43) / 118][Stage 138:====================================>                (82 + 36) / 118][Stage 138:============================================>        (99 + 19) / 118][Stage 138:===============================================>    (107 + 11) / 118][Stage 138:====================================================>(116 + 2) / 118]                                                                                [Stage 139:================================>                    (74 + 45) / 119][Stage 139:====================================>                (83 + 36) / 119][Stage 139:=========================================>           (93 + 26) / 119][Stage 139:==============================================>     (107 + 12) / 119][Stage 139:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.371350391 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=125", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=125,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347224255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:======================================>              (84 + 31) / 115][Stage 140:===========================================>         (94 + 21) / 115][Stage 140:==================================================>  (110 + 5) / 115]                                                                                [Stage 141:========================================>            (88 + 28) / 116][Stage 141:============================================>       (100 + 16) / 116][Stage 141:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.595603892 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340681704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:======================================>              (83 + 32) / 115][Stage 142:===========================================>         (95 + 20) / 115][Stage 142:==============================================>     (102 + 13) / 115][Stage 142:===================================================> (111 + 4) / 115]                                                                                [Stage 143:=========================================>           (90 + 26) / 116][Stage 143:=============================================>      (101 + 15) / 116][Stage 143:==================================================>  (110 + 6) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.768998218 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=31,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358673029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==================================>                  (74 + 39) / 113][Stage 144:=========================================>           (88 + 25) / 113][Stage 144:==============================================>     (100 + 13) / 113][Stage 144:==================================================>  (108 + 5) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:=================================>                   (73 + 41) / 114][Stage 145:=======================================>             (84 + 30) / 114][Stage 145:============================================>        (95 + 19) / 114][Stage 145:==============================================>     (103 + 11) / 114][Stage 145:===================================================> (110 + 4) / 114][Stage 145:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.394526476 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=83", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=83,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368297165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (72 + 41) / 113][Stage 146:====================================>                (78 + 35) / 113][Stage 146:===========================================>         (92 + 21) / 113][Stage 146:==============================================>     (101 + 12) / 113][Stage 146:===================================================> (109 + 4) / 113]                                                                                [Stage 147:=================================>                   (73 + 41) / 114][Stage 147:=======================================>             (86 + 28) / 114][Stage 147:==============================================>      (99 + 15) / 114][Stage 147:===================================================> (110 + 4) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.855978297 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=50", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=50,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382568671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (72 + 41) / 113][Stage 148:======================================>              (82 + 31) / 113][Stage 148:===========================================>         (93 + 20) / 113][Stage 148:==============================================>     (101 + 12) / 113][Stage 148:===================================================> (110 + 3) / 113]                                                                                [Stage 149:======================================>              (83 + 31) / 114][Stage 149:============================================>        (95 + 19) / 114][Stage 149:==============================================>     (102 + 12) / 114][Stage 149:==================================================>  (108 + 6) / 114][Stage 149:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.332280718 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361104245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=================================>                   (72 + 41) / 113][Stage 150:=======================================>             (84 + 29) / 113][Stage 150:=============================================>       (96 + 17) / 113][Stage 150:==============================================>     (102 + 11) / 113][Stage 150:====================================================>(112 + 1) / 113]                                                                                [Stage 151:=====================================>               (81 + 33) / 114][Stage 151:==========================================>          (92 + 22) / 114][Stage 151:==============================================>      (99 + 15) / 114][Stage 151:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.122214854 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=17", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=17,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371888394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=================================>                   (75 + 43) / 118][Stage 152:===================================>                 (80 + 38) / 118][Stage 152:==========================================>          (94 + 24) / 118][Stage 152:=================================================>   (111 + 7) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:=================================>                   (75 + 44) / 119][Stage 153:====================================>                (82 + 37) / 119][Stage 153:==========================================>          (95 + 24) / 119][Stage 153:=================================================>   (111 + 8) / 119][Stage 153:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.129865349 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=111", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=111,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369084782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (72 + 46) / 118][Stage 154:=================================>                   (75 + 43) / 118][Stage 154:==========================================>          (94 + 24) / 118][Stage 154:=================================================>   (110 + 8) / 118][Stage 154:====================================================>(117 + 1) / 118]                                                                                [Stage 155:================================>                    (73 + 46) / 119][Stage 155:====================================>                (82 + 37) / 119][Stage 155:=========================================>           (93 + 26) / 119][Stage 155:=================================================>   (111 + 8) / 119][Stage 155:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.98928221 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=69", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=69,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403084571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:===================================>                 (76 + 37) / 113][Stage 156:==========================================>          (91 + 22) / 113][Stage 156:==================================================>  (108 + 5) / 113]                                                                                [Stage 157:===========================>                         (59 + 55) / 114][Stage 157:===============================>                     (67 + 47) / 114][Stage 157:======================================>              (83 + 31) / 114][Stage 157:===============================================>    (104 + 10) / 114][Stage 157:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.058376481 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=32", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=32,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403124809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:==============================>                      (68 + 52) / 120][Stage 158:======================================>              (87 + 33) / 120][Stage 158:============================================>       (103 + 17) / 120][Stage 158:====================================================>(118 + 2) / 120]                                                                                [Stage 159:==========================>                          (61 + 60) / 121][Stage 159:============================>                        (66 + 55) / 121][Stage 159:===================================>                 (82 + 39) / 121][Stage 159:===========================================>        (101 + 20) / 121][Stage 159:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.122330839 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:===========================>                         (63 + 57) / 120][Stage 160:==================================>                  (79 + 41) / 120][Stage 160:===========================================>         (98 + 22) / 120][Stage 160:==================================================>  (115 + 5) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:================================>                    (75 + 46) / 121][Stage 161:=========================================>           (95 + 26) / 121][Stage 161:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.994655756 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=187,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367434094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:====================================>                (77 + 36) / 113][Stage 162:=========================================>           (89 + 24) / 113][Stage 162:=============================================>       (96 + 17) / 113][Stage 162:==================================================>  (107 + 6) / 113][Stage 162:====================================================>(111 + 2) / 113]                                                                                [Stage 163:===================================>                 (77 + 37) / 114][Stage 163:==========================================>          (91 + 23) / 114][Stage 163:==============================================>     (101 + 13) / 114][Stage 163:=================================================>   (107 + 7) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.250278872 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=127", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=127,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394813034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (72 + 43) / 115][Stage 164:======================================>              (84 + 31) / 115][Stage 164:============================================>        (96 + 19) / 115][Stage 164:==================================================>  (109 + 6) / 115]                                                                                [Stage 165:================================>                    (71 + 45) / 116][Stage 165:=======================================>             (86 + 30) / 116][Stage 165:============================================>       (100 + 16) / 116][Stage 165:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.903423649 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.579254893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:============================>                        (64 + 56) / 120][Stage 166:================================>                    (74 + 46) / 120][Stage 166:===========================================>         (99 + 21) / 120][Stage 166:==================================================>  (114 + 6) / 120]                                                                                [Stage 167:===========================>                         (62 + 59) / 121][Stage 167:==============================>                      (70 + 51) / 121][Stage 167:======================================>              (87 + 34) / 121][Stage 167:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.072435029 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=136", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=136,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380831024 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==============================>                      (67 + 48) / 115][Stage 168:==================================>                  (75 + 40) / 115][Stage 168:========================================>            (88 + 27) / 115][Stage 168:=============================================>      (101 + 14) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:==================================>                  (75 + 41) / 116][Stage 169:=======================================>             (86 + 30) / 116][Stage 169:============================================>       (100 + 16) / 116][Stage 169:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.971021521 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=98", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=98,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342674948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=====================================>               (82 + 33) / 115][Stage 170:===========================================>         (94 + 21) / 115][Stage 170:==============================================>     (103 + 12) / 115][Stage 170:===================================================> (111 + 4) / 115]                                                                                [Stage 171:=========================================>           (90 + 26) / 116][Stage 171:==============================================>     (103 + 13) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.555654046 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344416744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:>                                                      (0 + 0) / 115][Stage 172:====================================>                (80 + 35) / 115][Stage 172:========================================>            (87 + 28) / 115][Stage 172:==============================================>     (103 + 12) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:=======================================>             (86 + 30) / 116][Stage 173:============================================>       (100 + 16) / 116][Stage 173:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.632319256 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=254", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=254 AND partitionZIndex<=254,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40948439 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===========================>                         (59 + 54) / 113][Stage 174:=============================>                       (63 + 50) / 113][Stage 174:=======================================>             (85 + 28) / 113][Stage 174:================================================>    (104 + 9) / 113][Stage 174:====================================================>(111 + 2) / 113]                                                                                [Stage 175:===========================>                         (60 + 54) / 114][Stage 175:===============================>                     (68 + 46) / 114][Stage 175:====================================>                (78 + 36) / 114][Stage 175:=============================================>       (97 + 17) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.130783902 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=62,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410943682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:==============================>                      (66 + 47) / 113][Stage 176:======================================>              (82 + 31) / 113][Stage 176:================================================>    (104 + 9) / 113][Stage 176:===================================================> (109 + 4) / 113]                                                                                [Stage 177:==============================>                      (65 + 49) / 114][Stage 177:=====================================>               (81 + 33) / 114][Stage 177:==============================================>      (99 + 15) / 114][Stage 177:==================================================>  (109 + 5) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.347625144 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=70", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=70,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373564695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (72 + 46) / 118][Stage 178:=================================>                   (74 + 44) / 118][Stage 178:======================================>              (86 + 32) / 118][Stage 178:==========================================>          (95 + 23) / 118][Stage 178:===============================================>    (108 + 10) / 118][Stage 178:=====================================================(118 + 0) / 118]                                                                                [Stage 179:================================>                    (73 + 46) / 119][Stage 179:==================================>                  (77 + 42) / 119][Stage 179:========================================>            (90 + 29) / 119][Stage 179:==============================================>     (106 + 13) / 119]                                                                                Time elapsed: 3.147777386 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (73 + 45) / 118][Stage 180:====================================>                (81 + 37) / 118][Stage 180:=======================================>             (89 + 29) / 118][Stage 180:===========================================>         (97 + 21) / 118][Stage 180:====================================================>(116 + 2) / 118]                                                                                [Stage 181:================================>                    (72 + 47) / 119][Stage 181:===================================>                 (80 + 39) / 119][Stage 181:=========================================>           (93 + 26) / 119][Stage 181:=============================================>      (103 + 16) / 119][Stage 181:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.300348287 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=10", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=10,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388543643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (58 + 55) / 113][Stage 182:=============================>                       (63 + 50) / 113][Stage 182:======================================>              (82 + 31) / 113][Stage 182:==============================================>     (101 + 12) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:================================>                    (69 + 45) / 114][Stage 183:=========================================>           (89 + 25) / 114][Stage 183:==============================================>      (99 + 15) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.098743216 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.54466002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (59 + 54) / 113][Stage 184:==============================>                      (64 + 49) / 113][Stage 184:=======================================>             (84 + 29) / 113][Stage 184:================================================>    (104 + 9) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:============================>                        (61 + 53) / 114][Stage 185:===============================>                     (68 + 46) / 114][Stage 185:======================================>              (83 + 31) / 114][Stage 185:============================================>        (96 + 18) / 114][Stage 185:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.091592278 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3438305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:======================================>              (84 + 31) / 115][Stage 186:=============================================>       (98 + 17) / 115][Stage 186:===================================================> (111 + 4) / 115]                                                                                [Stage 187:=======================================>             (87 + 29) / 116][Stage 187:============================================>        (97 + 19) / 116][Stage 187:===================================================> (113 + 3) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.02850979 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (83 + 32) / 115][Stage 188:=========================================>           (90 + 25) / 115][Stage 188:=============================================>      (100 + 15) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:======================================>              (84 + 32) / 116][Stage 189:==========================================>          (92 + 24) / 116][Stage 189:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.476173421 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341196508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=======================================>             (85 + 30) / 115][Stage 190:============================================>        (97 + 18) / 115][Stage 190:=================================================>   (107 + 8) / 115]                                                                                [Stage 191:======================================>              (85 + 31) / 116][Stage 191:==========================================>          (92 + 24) / 116][Stage 191:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.540766426 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40035123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (63 + 57) / 120][Stage 192:===============================>                     (71 + 49) / 120][Stage 192:=======================================>             (89 + 31) / 120][Stage 192:===============================================>    (109 + 11) / 120][Stage 192:====================================================>(119 + 1) / 120]                                                                                [Stage 193:===========================>                         (63 + 58) / 121][Stage 193:=================================>                   (76 + 45) / 121][Stage 193:=========================================>           (94 + 27) / 121][Stage 193:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.125421438 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=64", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=64,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345448207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:====================================>                (80 + 35) / 115][Stage 194:========================================>            (88 + 27) / 115][Stage 194:==============================================>     (103 + 12) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:=======================================>             (86 + 30) / 116][Stage 195:============================================>        (97 + 19) / 116][Stage 195:=================================================>   (108 + 8) / 116][Stage 195:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.790045113 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=169", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=169,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404389246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=================================>                   (72 + 43) / 115][Stage 196:===========================================>         (94 + 21) / 115][Stage 196:==================================================>  (109 + 6) / 115]                                                                                [Stage 197:===============================>                     (68 + 48) / 116][Stage 197:=======================================>             (86 + 30) / 116][Stage 197:==============================================>     (104 + 12) / 116][Stage 197:====================================================>(114 + 2) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.844013024 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=157", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=157,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405020329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===============================>                     (69 + 46) / 115][Stage 198:======================================>              (84 + 31) / 115][Stage 198:===========================================>         (94 + 21) / 115][Stage 198:===============================================>    (105 + 10) / 115]                                                                                [Stage 199:=================================>                   (73 + 43) / 116][Stage 199:==========================================>          (92 + 24) / 116][Stage 199:=============================================>      (101 + 15) / 116][Stage 199:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.869430883 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=99", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=99,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373635126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==============================>                      (67 + 48) / 115][Stage 200:=====================================>               (82 + 33) / 115][Stage 200:============================================>        (97 + 18) / 115][Stage 200:===============================================>    (104 + 11) / 115][Stage 200:====================================================>(113 + 2) / 115]                                                                                [Stage 201:==================================>                  (76 + 40) / 116][Stage 201:========================================>            (89 + 27) / 116][Stage 201:==============================================>     (104 + 12) / 116][Stage 201:==================================================>  (111 + 5) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.174473827 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 02:44:22 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:33802) dropped. RpcEnv already stopped.
17/06/01 02:44:22 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:33802) dropped. RpcEnv already stopped.

real	9m50.178s
user	11m20.388s
sys	0m27.512s
