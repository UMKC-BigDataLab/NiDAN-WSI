Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 01:40:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:40:44 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:40:44 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:40:45 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 01:40:47 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 01:40:58 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601014047-0738).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.359095304 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:==>                                                    (5 + 110) / 115][Stage 0:=========================>                             (53 + 62) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:=======================================>               (82 + 33) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:====================>                                  (43 + 73) / 116][Stage 1:===========================>                           (58 + 58) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.123507578 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=251", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=251,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.764118842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===================>                                   (40 + 73) / 113][Stage 2:=======================>                               (49 + 64) / 113][Stage 2:===========================>                           (57 + 56) / 113][Stage 2:============================>                          (59 + 54) / 113][Stage 2:================================>                      (67 + 46) / 113][Stage 2:====================================>                  (74 + 39) / 113][Stage 2:=========================================>             (85 + 28) / 113][Stage 2:===============================================>       (98 + 15) / 113][Stage 2:===================================================>   (105 + 8) / 113][Stage 2:====================================================>  (108 + 5) / 113][Stage 2:=====================================================> (110 + 3) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:===========================>                           (57 + 57) / 114][Stage 3:============================>                          (59 + 55) / 114][Stage 3:=============================>                         (62 + 52) / 114][Stage 3:================================>                      (67 + 47) / 114][Stage 3:=====================================>                 (78 + 36) / 114][Stage 3:==========================================>            (89 + 25) / 114][Stage 3:==============================================>        (97 + 17) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.34920884 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.617877153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=============================>                         (64 + 54) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:==================================>                    (74 + 44) / 118][Stage 4:======================================>                (82 + 36) / 118][Stage 4:=========================================>             (90 + 28) / 118][Stage 4:==============================================>       (101 + 17) / 118][Stage 4:=====================================================> (114 + 4) / 118]                                                                                [Stage 5:==================================>                    (74 + 45) / 119][Stage 5:====================================>                  (78 + 41) / 119][Stage 5:=======================================>               (86 + 33) / 119][Stage 5:============================================>          (97 + 22) / 119][Stage 5:===================================================>   (112 + 7) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.344606143 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57545514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===============================>                       (68 + 50) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:=====================================>                 (80 + 38) / 118][Stage 6:===========================================>           (93 + 25) / 118][Stage 6:================================================>     (105 + 13) / 118][Stage 6:======================================================>(116 + 2) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:===================================>                   (76 + 43) / 119][Stage 7:==========================================>            (91 + 28) / 119][Stage 7:==============================================>       (102 + 17) / 119][Stage 7:==================================================>    (110 + 9) / 119][Stage 7:=====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.352313303 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.580311728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (72 + 46) / 118][Stage 8:===================================>                   (76 + 42) / 118][Stage 8:==========================================>            (91 + 27) / 118][Stage 8:================================================>     (105 + 13) / 118][Stage 8:====================================================>  (113 + 5) / 118][Stage 8:======================================================>(117 + 1) / 118]                                                                                [Stage 9:=================================>                     (73 + 46) / 119][Stage 9:==================================>                    (75 + 44) / 119][Stage 9:=======================================>               (85 + 34) / 119][Stage 9:=============================================>         (98 + 21) / 119][Stage 9:================================================>     (106 + 13) / 119][Stage 9:===================================================>   (112 + 7) / 119][Stage 9:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.383990594 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (72 + 46) / 118][Stage 10:===================================>                  (77 + 41) / 118][Stage 10:==========================================>           (92 + 26) / 118][Stage 10:===============================================>     (106 + 12) / 118][Stage 10:===================================================>  (112 + 6) / 118][Stage 10:=====================================================>(116 + 2) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:=================================>                    (74 + 45) / 119][Stage 11:=======================================>              (88 + 31) / 119][Stage 11:============================================>        (101 + 18) / 119][Stage 11:================================================>    (109 + 10) / 119][Stage 11:===================================================>  (114 + 5) / 119][Stage 11:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.203873079 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=120", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=120,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (72 + 46) / 118][Stage 12:==================================>                   (76 + 42) / 118][Stage 12:==========================================>           (92 + 26) / 118][Stage 12:=============================================>       (102 + 16) / 118][Stage 12:===================================================>  (112 + 6) / 118][Stage 12:=====================================================>(116 + 2) / 118]                                                                                [Stage 13:=================================>                    (73 + 46) / 119][Stage 13:====================================>                 (80 + 39) / 119][Stage 13:============================================>        (101 + 18) / 119][Stage 13:================================================>    (109 + 10) / 119][Stage 13:====================================================> (115 + 4) / 119][Stage 13:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.294250051 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555825666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==============================>                       (64 + 51) / 115][Stage 14:=================================>                    (72 + 43) / 115][Stage 14:======================================>               (82 + 33) / 115][Stage 14:==============================================>       (98 + 17) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:==================================================>   (108 + 7) / 115][Stage 14:===================================================>  (110 + 5) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:===================================>                  (77 + 39) / 116][Stage 15:========================================>             (88 + 28) / 116][Stage 15:==============================================>       (99 + 17) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:===================================================>  (111 + 5) / 116][Stage 15:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.70426652 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.558424049 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==============================>                       (64 + 51) / 115][Stage 16:===============================>                      (68 + 47) / 115][Stage 16:====================================>                 (78 + 37) / 115][Stage 16:========================================>             (87 + 28) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:=================================================>    (106 + 9) / 115][Stage 16:====================================================> (112 + 3) / 115]                                                                                [Stage 17:===============================>                      (68 + 48) / 116][Stage 17:===================================>                  (77 + 39) / 116][Stage 17:========================================>             (87 + 29) / 116][Stage 17:=============================================>        (98 + 18) / 116][Stage 17:===============================================>     (104 + 12) / 116][Stage 17:==================================================>   (108 + 8) / 116][Stage 17:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 7.935139656 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=254", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=254,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459058251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (80 + 35) / 115][Stage 18:=======================================>              (85 + 30) / 115][Stage 18:===============================================>     (102 + 13) / 115][Stage 18:==================================================>   (107 + 8) / 115][Stage 18:====================================================> (111 + 4) / 115][Stage 18:====================================================> (112 + 3) / 115]                                                                                [Stage 19:======================================>               (82 + 34) / 116][Stage 19:=========================================>            (89 + 27) / 116][Stage 19:===============================================>     (103 + 13) / 116][Stage 19:===================================================>  (111 + 5) / 116][Stage 19:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.335706407 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=163", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=163,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562975808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (62 + 58) / 120][Stage 20:=================================>                    (74 + 46) / 120][Stage 20:=======================================>              (88 + 32) / 120][Stage 20:=============================================>       (102 + 18) / 120][Stage 20:================================================>    (110 + 10) / 120][Stage 20:====================================================> (116 + 4) / 120]                                                                                [Stage 21:===========================>                          (62 + 59) / 121][Stage 21:================================>                     (72 + 49) / 121][Stage 21:========================================>             (90 + 31) / 121][Stage 21:================================================>    (111 + 10) / 121][Stage 21:====================================================> (117 + 4) / 121][Stage 21:=====================================================>(119 + 2) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.864940161 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=151", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=151,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490931165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==============================>                       (65 + 50) / 115][Stage 22:====================================>                 (78 + 37) / 115][Stage 22:==========================================>           (90 + 25) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:================================================>    (105 + 10) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:=================================>                    (71 + 45) / 116][Stage 23:=========================================>            (89 + 27) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:===============================================>     (105 + 11) / 116][Stage 23:==================================================>   (108 + 8) / 116][Stage 23:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.894952958 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473718525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===================================>                  (74 + 39) / 113][Stage 24:=========================================>            (86 + 27) / 113][Stage 24:============================================>         (94 + 19) / 113][Stage 24:==============================================>       (97 + 16) / 113][Stage 24:===============================================>     (101 + 12) / 113][Stage 24:===================================================>  (108 + 5) / 113][Stage 24:=====================================================>(111 + 2) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:=======================================>              (84 + 30) / 114][Stage 25:===========================================>          (91 + 23) / 114][Stage 25:==============================================>       (98 + 16) / 114][Stage 25:===================================================>  (108 + 6) / 114][Stage 25:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.921200564 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=124", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=124,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515051234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:>                                                       (0 + 0) / 113][Stage 26:============================>                         (59 + 54) / 113][Stage 26:==============================>                       (63 + 50) / 113][Stage 26:======================================>               (81 + 32) / 113][Stage 26:================================================>    (103 + 10) / 113][Stage 26:==================================================>   (106 + 7) / 113][Stage 26:=====================================================>(111 + 2) / 113]                                                                                [Stage 27:===========================>                          (59 + 55) / 114][Stage 27:=============================>                        (62 + 52) / 114][Stage 27:==================================>                   (73 + 41) / 114][Stage 27:===========================================>          (91 + 23) / 114][Stage 27:==================================================>   (106 + 8) / 114][Stage 27:===================================================>  (108 + 6) / 114][Stage 27:====================================================> (111 + 3) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.600628966 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=221", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=221,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473306133 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=================================>                    (70 + 43) / 113][Stage 28:===================================>                  (75 + 38) / 113][Stage 28:===========================================>          (92 + 21) / 113][Stage 28:===============================================>     (101 + 12) / 113][Stage 28:===================================================>  (108 + 5) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:=======================================>              (83 + 31) / 114][Stage 29:============================================>         (94 + 20) / 114][Stage 29:==================================================>   (106 + 8) / 114][Stage 29:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.367821652 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48927668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (58 + 55) / 113][Stage 30:============================>                         (59 + 54) / 113][Stage 30:==================================>                   (73 + 40) / 113][Stage 30:=========================================>            (87 + 26) / 113][Stage 30:==============================================>       (98 + 15) / 113][Stage 30:==================================================>   (106 + 7) / 113]                                                                                [Stage 31:============================>                         (60 + 54) / 114][Stage 31:===============================>                      (67 + 47) / 114][Stage 31:=====================================>                (80 + 34) / 114][Stage 31:============================================>         (94 + 20) / 114][Stage 31:==================================================>   (107 + 7) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.350249745 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488937553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===================================>                  (74 + 39) / 113][Stage 32:========================================>             (84 + 29) / 113][Stage 32:============================================>         (94 + 19) / 113][Stage 32:==============================================>       (98 + 15) / 113][Stage 32:================================================>    (103 + 10) / 113][Stage 32:=====================================================>(111 + 2) / 113]                                                                                [Stage 33:====================================>                 (76 + 38) / 114][Stage 33:========================================>             (85 + 29) / 114][Stage 33:==============================================>       (99 + 15) / 114][Stage 33:==================================================>   (107 + 7) / 114][Stage 33:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.55179544 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=178", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=178,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441292574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=================================>                    (70 + 43) / 113][Stage 34:=====================================>                (79 + 34) / 113][Stage 34:===========================================>          (91 + 22) / 113][Stage 34:==============================================>       (98 + 15) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:=====================================>                (80 + 34) / 114][Stage 35:=========================================>            (88 + 26) / 114][Stage 35:==============================================>      (100 + 14) / 114][Stage 35:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.065988217 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449413277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (72 + 41) / 113][Stage 36:=====================================>                (78 + 35) / 113][Stage 36:===========================================>          (90 + 23) / 113][Stage 36:===============================================>     (102 + 11) / 113][Stage 36:====================================================> (109 + 4) / 113][Stage 36:=====================================================>(111 + 2) / 113]                                                                                [Stage 37:===================================>                  (74 + 40) / 114][Stage 37:======================================>               (82 + 32) / 114][Stage 37:==========================================>           (89 + 25) / 114][Stage 37:=============================================>        (97 + 17) / 114][Stage 37:===============================================>     (102 + 12) / 114][Stage 37:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 8.299666328 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428058761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=====================================>                (79 + 36) / 115][Stage 38:=======================================>              (85 + 30) / 115][Stage 38:==============================================>      (101 + 14) / 115][Stage 38:=====================================================>(113 + 2) / 115]                                                                                [Stage 39:=======================================>              (84 + 32) / 116][Stage 39:=========================================>            (90 + 26) / 116][Stage 39:==============================================>       (99 + 17) / 116][Stage 39:===================================================>  (110 + 6) / 116][Stage 39:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.88380114 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=131", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=131,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466047458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===================================>                  (76 + 39) / 115][Stage 40:========================================>             (87 + 28) / 115][Stage 40:==================================================>   (107 + 8) / 115][Stage 40:===================================================>  (110 + 5) / 115][Stage 40:====================================================> (112 + 3) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:================================>                     (69 + 47) / 116][Stage 41:======================================>               (83 + 33) / 116][Stage 41:================================================>    (106 + 10) / 116][Stage 41:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.250640357 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506971783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (58 + 55) / 113][Stage 42:=================================>                    (70 + 43) / 113][Stage 42:======================================>               (81 + 32) / 113][Stage 42:=============================================>        (96 + 17) / 113][Stage 42:==================================================>   (106 + 7) / 113][Stage 42:====================================================> (109 + 4) / 113][Stage 42:=====================================================>(111 + 2) / 113]                                                                                [Stage 43:============================>                         (61 + 53) / 114][Stage 43:===================================>                  (74 + 40) / 114][Stage 43:============================================>         (94 + 20) / 114][Stage 43:===================================================>  (109 + 5) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.517191145 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405374398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (81 + 34) / 115][Stage 44:==========================================>           (91 + 24) / 115][Stage 44:================================================>    (105 + 10) / 115][Stage 44:====================================================> (111 + 4) / 115]                                                                                [Stage 45:=======================================>              (84 + 32) / 116][Stage 45:============================================>         (95 + 21) / 116][Stage 45:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.704312136 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415031185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:======================================>               (81 + 34) / 115][Stage 46:=========================================>            (88 + 27) / 115][Stage 46:================================================>    (105 + 10) / 115][Stage 46:====================================================> (111 + 4) / 115]                                                                                [Stage 47:======================================>               (82 + 34) / 116][Stage 47:========================================>             (87 + 29) / 116][Stage 47:==============================================>      (102 + 14) / 116][Stage 47:===================================================>  (111 + 5) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.020266666 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469021211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===============================>                      (67 + 48) / 115][Stage 48:======================================>               (82 + 33) / 115][Stage 48:===============================================>     (102 + 13) / 115][Stage 48:=====================================================>(113 + 2) / 115]                                                                                [Stage 49:===================================>                  (76 + 40) / 116][Stage 49:========================================>             (88 + 28) / 116][Stage 49:==============================================>       (99 + 17) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:==================================================>   (109 + 7) / 116][Stage 49:=====================================================>(114 + 2) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.034026717 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503766911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:==============================>                       (67 + 53) / 120][Stage 50:=======================================>              (87 + 33) / 120][Stage 50:==============================================>      (105 + 15) / 120][Stage 50:===================================================>  (114 + 6) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:=============================>                        (67 + 54) / 121][Stage 51:=====================================>                (84 + 37) / 121][Stage 51:==============================================>      (106 + 15) / 121][Stage 51:====================================================> (117 + 4) / 121][Stage 51:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.549036804 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471983367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:============================>                         (64 + 56) / 120][Stage 52:==================================>                   (76 + 44) / 120][Stage 52:============================================>         (98 + 22) / 120][Stage 52:====================================================> (117 + 3) / 120]                                                                                [Stage 53:=============================>                        (65 + 56) / 121][Stage 53:=====================================>                (83 + 38) / 121][Stage 53:==============================================>      (106 + 15) / 121][Stage 53:===================================================>  (116 + 5) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.758464024 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=116", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=116,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410302911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (72 + 46) / 118][Stage 54:=================================>                    (73 + 45) / 118][Stage 54:=====================================>                (83 + 35) / 118][Stage 54:============================================>         (97 + 21) / 118][Stage 54:==================================================>   (111 + 7) / 118]                                                                                [Stage 55:=================================>                    (74 + 45) / 119][Stage 55:=====================================>                (83 + 36) / 119][Stage 55:==========================================>           (93 + 26) / 119][Stage 55:===================================================>  (113 + 6) / 119][Stage 55:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.914976793 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440628081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=================================>                    (73 + 45) / 118][Stage 56:=====================================>                (81 + 37) / 118][Stage 56:==========================================>           (92 + 26) / 118][Stage 56:===============================================>     (106 + 12) / 118][Stage 56:=====================================================>(116 + 2) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:===================================>                  (78 + 41) / 119][Stage 57:=======================================>              (87 + 32) / 119][Stage 57:============================================>        (100 + 19) / 119][Stage 57:================================================>    (109 + 10) / 119][Stage 57:=====================================================>(117 + 2) / 119][Stage 57:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.160533753 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (72 + 46) / 118][Stage 58:=================================>                    (73 + 45) / 118][Stage 58:=====================================>                (83 + 35) / 118][Stage 58:============================================>         (98 + 20) / 118][Stage 58:===================================================>  (113 + 5) / 118][Stage 58:=====================================================>(116 + 2) / 118]                                                                                [Stage 59:===================================>                  (78 + 41) / 119][Stage 59:======================================>               (84 + 35) / 119][Stage 59:========================================>             (89 + 30) / 119][Stage 59:==============================================>      (105 + 14) / 119][Stage 59:===================================================>  (114 + 5) / 119][Stage 59:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.372586764 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:=====================================>                (81 + 37) / 118][Stage 60:===========================================>          (95 + 23) / 118][Stage 60:===============================================>     (105 + 13) / 118][Stage 60:=====================================================>(116 + 2) / 118]                                                                                [Stage 61:==================================>                   (75 + 44) / 119][Stage 61:======================================>               (84 + 35) / 119][Stage 61:===========================================>          (95 + 24) / 119][Stage 61:================================================>    (108 + 11) / 119][Stage 61:==================================================>   (112 + 7) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.551726986 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480174188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===============================>                      (68 + 47) / 115][Stage 62:======================================>               (83 + 32) / 115][Stage 62:===========================================>          (92 + 23) / 115][Stage 62:===============================================>     (104 + 11) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:====================================>                 (79 + 37) / 116][Stage 63:============================================>         (95 + 21) / 116][Stage 63:===============================================>     (103 + 13) / 116][Stage 63:================================================>    (106 + 10) / 116][Stage 63:==================================================>   (109 + 7) / 116][Stage 63:===================================================>  (110 + 6) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 8.163717684 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432833737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (70 + 45) / 115][Stage 64:=======================================>              (85 + 30) / 115][Stage 64:============================================>         (95 + 20) / 115][Stage 64:================================================>    (105 + 10) / 115][Stage 64:====================================================> (111 + 4) / 115]                                                                                [Stage 65:===================================>                  (77 + 39) / 116][Stage 65:============================================>         (96 + 20) / 116][Stage 65:================================================>    (106 + 10) / 116][Stage 65:====================================================> (112 + 4) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.253522186 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410743567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:=================================>                    (74 + 44) / 118][Stage 66:======================================>               (84 + 34) / 118][Stage 66:===========================================>          (96 + 22) / 118][Stage 66:===================================================>  (113 + 5) / 118]                                                                                [Stage 67:=================================>                    (73 + 46) / 119][Stage 67:==================================>                   (76 + 43) / 119][Stage 67:======================================>               (85 + 34) / 119][Stage 67:=============================================>       (102 + 17) / 119][Stage 67:====================================================> (115 + 4) / 119][Stage 67:====================================================> (116 + 3) / 119][Stage 67:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.958482734 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41649712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==============================>                       (66 + 49) / 115][Stage 68:===================================>                  (76 + 39) / 115][Stage 68:==========================================>           (90 + 25) / 115][Stage 68:===============================================>     (104 + 11) / 115][Stage 68:====================================================> (111 + 4) / 115]                                                                                [Stage 69:=================================>                    (72 + 44) / 116][Stage 69:=====================================>                (80 + 36) / 116][Stage 69:============================================>         (95 + 21) / 116][Stage 69:==================================================>   (108 + 8) / 116][Stage 69:===================================================>  (111 + 5) / 116][Stage 69:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 7.983646292 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406902505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:===================================>                  (78 + 40) / 118][Stage 70:==========================================>           (93 + 25) / 118][Stage 70:==================================================>   (110 + 8) / 118][Stage 70:=====================================================>(117 + 1) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:===================================>                  (78 + 41) / 119][Stage 71:========================================>             (89 + 30) / 119][Stage 71:=============================================>       (102 + 17) / 119][Stage 71:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.618600577 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405885098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===============================>                      (67 + 48) / 115][Stage 72:=====================================>                (79 + 36) / 115][Stage 72:============================================>         (94 + 21) / 115][Stage 72:=================================================>    (106 + 9) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=================================>                    (73 + 43) / 116][Stage 73:===================================>                  (77 + 39) / 116][Stage 73:==========================================>           (92 + 24) / 116][Stage 73:==================================================>   (108 + 8) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.97661 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434829318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (71 + 42) / 113][Stage 74:========================================>             (85 + 28) / 113][Stage 74:=============================================>        (95 + 18) / 113][Stage 74:==================================================>   (106 + 7) / 113][Stage 74:=====================================================>(111 + 2) / 113]                                                                                [Stage 75:======================================>               (81 + 33) / 114][Stage 75:============================================>         (93 + 21) / 114][Stage 75:================================================>    (104 + 10) / 114][Stage 75:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.978406702 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=164", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=164,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418598247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (58 + 55) / 113][Stage 76:=============================>                        (62 + 51) / 113][Stage 76:=====================================>                (78 + 35) / 113][Stage 76:===============================================>     (102 + 11) / 113][Stage 76:=====================================================>(112 + 1) / 113]                                                                                [Stage 77:===========================>                          (59 + 55) / 114][Stage 77:===============================>                      (66 + 48) / 114][Stage 77:========================================>             (86 + 28) / 114][Stage 77:===============================================>     (102 + 12) / 114][Stage 77:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.737608277 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=184", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=184,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409380656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (69 + 46) / 115][Stage 78:=======================================>              (85 + 30) / 115][Stage 78:==============================================>      (101 + 14) / 115][Stage 78:==================================================>   (108 + 7) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:================================>                     (70 + 46) / 116][Stage 79:======================================>               (83 + 33) / 116][Stage 79:===========================================>          (93 + 23) / 116][Stage 79:==================================================>   (109 + 7) / 116][Stage 79:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.173054151 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=32", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=32,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===============================>                      (68 + 47) / 115][Stage 80:=======================================>              (84 + 31) / 115][Stage 80:============================================>         (94 + 21) / 115][Stage 80:=================================================>    (106 + 9) / 115][Stage 80:====================================================> (112 + 3) / 115]                                                                                [Stage 81:=================================>                    (73 + 43) / 116][Stage 81:=========================================>            (90 + 26) / 116][Stage 81:============================================>         (96 + 20) / 116][Stage 81:===============================================>     (103 + 13) / 116][Stage 81:================================================>    (106 + 10) / 116][Stage 81:==================================================>   (109 + 7) / 116][Stage 81:====================================================> (113 + 3) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.306839283 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43115153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (72 + 41) / 113][Stage 82:=======================================>              (83 + 30) / 113][Stage 82:=============================================>        (95 + 18) / 113][Stage 82:=================================================>    (104 + 9) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:===================================>                  (74 + 40) / 114][Stage 83:=========================================>            (88 + 26) / 114][Stage 83:==============================================>      (100 + 14) / 114][Stage 83:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.805907197 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=180", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=180,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355916626 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:====================================>                 (78 + 37) / 115][Stage 84:========================================>             (87 + 28) / 115][Stage 84:==============================================>      (101 + 14) / 115][Stage 84:===================================================>  (110 + 5) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:=======================================>              (84 + 32) / 116][Stage 85:===============================================>     (103 + 13) / 116][Stage 85:=====================================================>(114 + 2) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.958176084 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406464092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:=================================>                    (74 + 44) / 118][Stage 86:======================================>               (85 + 33) / 118][Stage 86:================================================>    (108 + 10) / 118]                                                                                [Stage 87:=================================>                    (73 + 46) / 119][Stage 87:===================================>                  (79 + 40) / 119][Stage 87:========================================>             (90 + 29) / 119][Stage 87:===============================================>     (107 + 12) / 119][Stage 87:===================================================>  (114 + 5) / 119][Stage 87:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.466609134 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402451136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===============================>                      (67 + 48) / 115][Stage 88:======================================>               (81 + 34) / 115][Stage 88:============================================>         (95 + 20) / 115][Stage 88:===================================================>  (110 + 5) / 115]                                                                                [Stage 89:==================================>                   (75 + 41) / 116][Stage 89:========================================>             (88 + 28) / 116][Stage 89:=================================================>    (107 + 9) / 116][Stage 89:====================================================> (112 + 4) / 116][Stage 89:====================================================> (113 + 3) / 116][Stage 89:=====================================================>(114 + 2) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.825747663 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381075129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===================================>                  (74 + 39) / 113][Stage 90:===========================================>          (91 + 22) / 113][Stage 90:===============================================>     (101 + 12) / 113][Stage 90:=====================================================>(111 + 2) / 113]                                                                                [Stage 91:====================================>                 (78 + 36) / 114][Stage 91:==========================================>           (89 + 25) / 114][Stage 91:=============================================>        (95 + 19) / 114][Stage 91:===================================================>  (108 + 6) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.115597152 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423365988 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (60 + 60) / 120][Stage 92:============================>                         (64 + 56) / 120][Stage 92:====================================>                 (81 + 39) / 120][Stage 92:==============================================>      (106 + 14) / 120][Stage 92:=====================================================>(118 + 2) / 120]                                                                                [Stage 93:=============================>                        (65 + 56) / 121][Stage 93:====================================>                 (82 + 39) / 121][Stage 93:============================================>        (102 + 19) / 121][Stage 93:==================================================>   (114 + 7) / 121][Stage 93:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.76090637 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459472609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:==============================>                       (64 + 51) / 115][Stage 94:====================================>                 (77 + 38) / 115][Stage 94:==========================================>           (91 + 24) / 115][Stage 94:===============================================>     (103 + 12) / 115][Stage 94:=====================================================>(113 + 2) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:===============================>                      (67 + 49) / 116][Stage 95:====================================>                 (79 + 37) / 116][Stage 95:=========================================>            (90 + 26) / 116][Stage 95:===============================================>     (105 + 11) / 116][Stage 95:=================================================>    (107 + 9) / 116][Stage 95:====================================================> (113 + 3) / 116][Stage 95:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.438592598 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=57", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=57,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406592809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:============================>                         (59 + 54) / 113][Stage 96:==============================>                       (64 + 49) / 113][Stage 96:=======================================>              (82 + 31) / 113][Stage 96:==============================================>       (98 + 15) / 113][Stage 96:===================================================>  (108 + 5) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:=============================>                        (62 + 52) / 114][Stage 97:================================>                     (69 + 45) / 114][Stage 97:=========================================>            (87 + 27) / 114][Stage 97:==============================================>      (101 + 13) / 114][Stage 97:====================================================> (111 + 3) / 114][Stage 97:=====================================================>(112 + 2) / 114][Stage 97:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.771852168 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376364079 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=====================================>                (79 + 34) / 113][Stage 98:=========================================>            (86 + 27) / 113][Stage 98:===============================================>     (102 + 11) / 113][Stage 98:===================================================>  (108 + 5) / 113]                                                                                [Stage 99:=====================================>                (79 + 35) / 114][Stage 99:=======================================>              (83 + 31) / 114][Stage 99:=============================================>        (95 + 19) / 114][Stage 99:===================================================>  (108 + 6) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.998406828 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428620106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:============================>                        (65 + 55) / 120][Stage 100:===================================>                 (80 + 40) / 120][Stage 100:==========================================>          (97 + 23) / 120][Stage 100:==================================================>  (114 + 6) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:============================>                        (64 + 57) / 121][Stage 101:===================================>                 (80 + 41) / 121][Stage 101:===========================================>        (101 + 20) / 121][Stage 101:==================================================>  (116 + 5) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.907170101 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=9", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=9,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400968083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:============================>                        (60 + 53) / 113][Stage 102:===============================>                     (67 + 46) / 113][Stage 102:=========================================>           (89 + 24) / 113][Stage 102:=================================================>   (105 + 8) / 113][Stage 102:===================================================> (109 + 4) / 113]                                                                                [Stage 103:===========================>                         (60 + 54) / 114][Stage 103:================================>                    (69 + 45) / 114][Stage 103:=========================================>           (90 + 24) / 114][Stage 103:==============================================>     (101 + 13) / 114][Stage 103:===================================================> (110 + 4) / 114][Stage 103:===================================================> (111 + 3) / 114][Stage 103:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 6.626379478 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395716323 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:===================================>                 (78 + 40) / 118][Stage 104:============================================>        (98 + 20) / 118][Stage 104:================================================>    (109 + 9) / 118][Stage 104:====================================================>(117 + 1) / 118]                                                                                [Stage 105:================================>                    (73 + 46) / 119][Stage 105:=================================>                   (76 + 43) / 119][Stage 105:=========================================>           (93 + 26) / 119][Stage 105:===============================================>    (108 + 11) / 119][Stage 105:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.4768699 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=31", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=31,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410879043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===================================>                 (75 + 38) / 113][Stage 106:=========================================>           (88 + 25) / 113][Stage 106:=============================================>       (97 + 16) / 113][Stage 106:==============================================>     (101 + 12) / 113][Stage 106:=================================================>   (106 + 7) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:=====================================>               (80 + 34) / 114][Stage 107:========================================>            (88 + 26) / 114][Stage 107:==============================================>      (99 + 15) / 114][Stage 107:================================================>    (105 + 9) / 114][Stage 107:==================================================>  (108 + 6) / 114][Stage 107:===================================================> (110 + 4) / 114][Stage 107:===================================================> (111 + 3) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.375834075 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382450897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (72 + 46) / 118][Stage 108:==================================>                  (77 + 41) / 118][Stage 108:======================================>              (85 + 33) / 118][Stage 108:===========================================>         (97 + 21) / 118][Stage 108:==================================================>  (112 + 6) / 118]                                                                                [Stage 109:================================>                    (74 + 45) / 119][Stage 109:=====================================>               (84 + 35) / 119][Stage 109:===========================================>         (98 + 21) / 119][Stage 109:==================================================>  (113 + 6) / 119][Stage 109:====================================================>(117 + 2) / 119][Stage 109:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.06471515 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348085537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:======================================>              (84 + 31) / 115][Stage 110:============================================>        (97 + 18) / 115][Stage 110:=================================================>   (107 + 8) / 115][Stage 110:====================================================>(114 + 1) / 115]                                                                                [Stage 111:=====================================>               (82 + 34) / 116][Stage 111:========================================>            (89 + 27) / 116][Stage 111:==============================================>     (104 + 12) / 116][Stage 111:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.755310268 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362689636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (79 + 34) / 113][Stage 112:========================================>            (87 + 26) / 113][Stage 112:==============================================>     (101 + 12) / 113][Stage 112:=================================================>   (105 + 8) / 113][Stage 112:===================================================> (110 + 3) / 113]                                                                                [Stage 113:=====================================>               (81 + 33) / 114][Stage 113:============================================>        (95 + 19) / 114][Stage 113:===============================================>    (104 + 10) / 114][Stage 113:==================================================>  (109 + 5) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.342456131 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377353994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:==================================>                  (76 + 42) / 118][Stage 114:========================================>            (91 + 27) / 118][Stage 114:=================================================>   (110 + 8) / 118]                                                                                [Stage 115:================================>                    (74 + 45) / 119][Stage 115:====================================>                (81 + 38) / 119][Stage 115:=========================================>           (93 + 26) / 119][Stage 115:===============================================>    (108 + 11) / 119][Stage 115:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.274107355 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:===================================>                 (80 + 38) / 118][Stage 116:============================================>       (101 + 17) / 118][Stage 116:====================================================>(116 + 2) / 118]                                                                                [Stage 117:=================================>                   (76 + 43) / 119][Stage 117:====================================>                (83 + 36) / 119][Stage 117:==========================================>          (96 + 23) / 119][Stage 117:=================================================>   (111 + 8) / 119][Stage 117:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.5218264 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372464915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 32) / 113][Stage 118:=======================================>             (85 + 28) / 113][Stage 118:=============================================>       (98 + 15) / 113][Stage 118:===================================================> (109 + 4) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:==================================>                  (75 + 39) / 114][Stage 119:========================================>            (88 + 26) / 114][Stage 119:============================================>        (96 + 18) / 114][Stage 119:==================================================>  (109 + 5) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.01247166 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39682054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==============================>                      (66 + 49) / 115][Stage 120:======================================>              (83 + 32) / 115][Stage 120:===========================================>         (94 + 21) / 115][Stage 120:==================================================>  (109 + 6) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:===================================>                 (77 + 39) / 116][Stage 121:===========================================>         (95 + 21) / 116][Stage 121:===============================================>    (106 + 10) / 116][Stage 121:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.997697737 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425030675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 60) / 120][Stage 122:===============================>                     (71 + 49) / 120][Stage 122:=====================================>               (86 + 34) / 120][Stage 122:=============================================>      (105 + 15) / 120][Stage 122:===================================================> (117 + 3) / 120]                                                                                [Stage 123:==========================>                          (61 + 60) / 121][Stage 123:===============================>                     (72 + 49) / 121][Stage 123:===========================================>        (101 + 20) / 121][Stage 123:==================================================>  (115 + 6) / 121][Stage 123:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.383616898 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386076503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:================================>                    (73 + 45) / 118][Stage 124:======================================>              (86 + 32) / 118][Stage 124:============================================>        (99 + 19) / 118][Stage 124:===================================================> (115 + 3) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:==================================>                  (78 + 41) / 119][Stage 125:===================================>                 (80 + 39) / 119][Stage 125:==========================================>          (96 + 23) / 119][Stage 125:=================================================>   (111 + 8) / 119][Stage 125:===================================================> (116 + 3) / 119][Stage 125:====================================================>(117 + 2) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.443119763 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380574665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=================================>                   (72 + 41) / 113][Stage 126:=======================================>             (84 + 29) / 113][Stage 126:============================================>        (95 + 18) / 113][Stage 126:=================================================>   (105 + 8) / 113]                                                                                [Stage 127:===================================>                 (76 + 38) / 114][Stage 127:=========================================>           (90 + 24) / 114][Stage 127:==============================================>     (102 + 12) / 114][Stage 127:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.821473198 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36160589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===================================>                 (75 + 38) / 113][Stage 128:========================================>            (86 + 27) / 113][Stage 128:=================================================>   (105 + 8) / 113][Stage 128:==================================================>  (108 + 5) / 113]                                                                                [Stage 129:====================================>                (79 + 35) / 114][Stage 129:=========================================>           (89 + 25) / 114][Stage 129:=============================================>      (100 + 14) / 114][Stage 129:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.958502674 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=80", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=80,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496489436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===================================>                 (77 + 38) / 115][Stage 130:========================================>            (88 + 27) / 115][Stage 130:===============================================>    (104 + 11) / 115][Stage 130:==================================================>  (110 + 5) / 115]                                                                                [Stage 131:==================================>                  (76 + 40) / 116][Stage 131:==========================================>          (94 + 22) / 116][Stage 131:================================================>    (107 + 9) / 116][Stage 131:===================================================> (112 + 4) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.050155063 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400508192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===========================>                         (62 + 58) / 120][Stage 132:================================>                    (73 + 47) / 120][Stage 132:========================================>            (92 + 28) / 120][Stage 132:=================================================>   (111 + 9) / 120]                                                                                [Stage 133:===========================>                         (62 + 59) / 121][Stage 133:================================>                    (75 + 46) / 121][Stage 133:===========================================>         (99 + 22) / 121][Stage 133:=================================================>   (114 + 7) / 121][Stage 133:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.469749901 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335926033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (81 + 34) / 115][Stage 134:=======================================>             (86 + 29) / 115][Stage 134:=============================================>       (99 + 16) / 115][Stage 134:=================================================>   (108 + 7) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:======================================>              (85 + 31) / 116][Stage 135:===========================================>         (96 + 20) / 116][Stage 135:===============================================>    (105 + 11) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.732560554 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=202", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=202,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353461538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==================================>                  (73 + 40) / 113][Stage 136:======================================>              (82 + 31) / 113][Stage 136:=========================================>           (88 + 25) / 113][Stage 136:=============================================>       (97 + 16) / 113][Stage 136:================================================>    (104 + 9) / 113]                                                                                [Stage 137:===================================>                 (76 + 38) / 114][Stage 137:==========================================>          (91 + 23) / 114][Stage 137:===============================================>    (104 + 10) / 114][Stage 137:===================================================> (111 + 3) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.080186737 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:====================================>                (77 + 36) / 113][Stage 138:=========================================>           (88 + 25) / 113][Stage 138:=============================================>       (97 + 16) / 113][Stage 138:==================================================>  (108 + 5) / 113]                                                                                [Stage 139:=====================================>               (80 + 34) / 114][Stage 139:=========================================>           (90 + 24) / 114][Stage 139:==============================================>     (102 + 12) / 114][Stage 139:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.85567171 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=================================>                   (71 + 42) / 113][Stage 140:======================================>              (82 + 31) / 113][Stage 140:===========================================>         (93 + 20) / 113][Stage 140:==============================================>     (100 + 13) / 113][Stage 140:=================================================>   (106 + 7) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:===================================>                 (76 + 38) / 114][Stage 141:=======================================>             (84 + 30) / 114][Stage 141:===========================================>         (93 + 21) / 114][Stage 141:==============================================>      (99 + 15) / 114][Stage 141:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.227327192 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37187134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:=================================>                   (74 + 44) / 118][Stage 142:======================================>              (86 + 32) / 118][Stage 142:===========================================>         (96 + 22) / 118][Stage 142:===============================================>    (108 + 10) / 118][Stage 142:====================================================>(116 + 2) / 118]                                                                                [Stage 143:=================================>                   (75 + 44) / 119][Stage 143:====================================>                (82 + 37) / 119][Stage 143:========================================>            (91 + 28) / 119][Stage 143:============================================>       (101 + 18) / 119][Stage 143:=================================================>   (112 + 7) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.31948326 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=64", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=64,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:====================================>                (82 + 36) / 118][Stage 144:==========================================>          (94 + 24) / 118][Stage 144:=================================================>   (110 + 8) / 118][Stage 144:====================================================>(116 + 2) / 118]                                                                                [Stage 145:=================================>                   (75 + 44) / 119][Stage 145:==================================>                  (78 + 41) / 119][Stage 145:=====================================>               (85 + 34) / 119][Stage 145:=========================================>           (93 + 26) / 119][Stage 145:==============================================>     (106 + 13) / 119][Stage 145:===================================================> (115 + 4) / 119][Stage 145:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.705017094 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357125334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (70 + 43) / 113][Stage 146:=======================================>             (85 + 28) / 113][Stage 146:==============================================>     (100 + 13) / 113][Stage 146:===================================================> (109 + 4) / 113]                                                                                [Stage 147:===================================>                 (76 + 38) / 114][Stage 147:=======================================>             (85 + 29) / 114][Stage 147:=============================================>       (98 + 16) / 114][Stage 147:===================================================> (110 + 4) / 114][Stage 147:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.936477437 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386077909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (59 + 54) / 113][Stage 148:=============================>                       (63 + 50) / 113][Stage 148:=====================================>               (79 + 34) / 113][Stage 148:===========================================>         (92 + 21) / 113][Stage 148:==============================================>     (102 + 11) / 113]                                                                                [Stage 149:===========================>                         (60 + 54) / 114][Stage 149:=================================>                   (72 + 42) / 114][Stage 149:=====================================>               (81 + 33) / 114][Stage 149:=============================================>       (98 + 16) / 114][Stage 149:==================================================>  (108 + 6) / 114][Stage 149:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.849763286 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (58 + 55) / 113][Stage 150:============================>                        (61 + 52) / 113][Stage 150:=================================>                   (71 + 42) / 113][Stage 150:============================================>        (94 + 19) / 113][Stage 150:=================================================>   (105 + 8) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:===========================>                         (59 + 55) / 114][Stage 151:==============================>                      (65 + 49) / 114][Stage 151:====================================>                (79 + 35) / 114][Stage 151:==========================================>          (92 + 22) / 114][Stage 151:==================================================>  (108 + 6) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.698442495 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39229816 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=================================>                   (72 + 43) / 115][Stage 152:=========================================>           (90 + 25) / 115][Stage 152:=============================================>       (98 + 17) / 115][Stage 152:=================================================>   (108 + 7) / 115][Stage 152:====================================================>(113 + 2) / 115]                                                                                [Stage 153:================================>                    (72 + 44) / 116][Stage 153:========================================>            (88 + 28) / 116][Stage 153:============================================>       (100 + 16) / 116][Stage 153:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.88680882 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394512503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (59 + 54) / 113][Stage 154:============================>                        (61 + 52) / 113][Stage 154:=======================================>             (84 + 29) / 113][Stage 154:==================================================>  (107 + 6) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:=============================>                       (63 + 51) / 114][Stage 155:================================>                    (69 + 45) / 114][Stage 155:=========================================>           (90 + 24) / 114][Stage 155:==================================================>  (108 + 6) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.880219902 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:==============================>                      (65 + 48) / 113][Stage 156:=====================================>               (79 + 34) / 113][Stage 156:==============================================>     (100 + 13) / 113][Stage 156:==================================================>  (108 + 5) / 113]                                                                                [Stage 157:==============================>                      (66 + 48) / 114][Stage 157:======================================>              (82 + 32) / 114][Stage 157:=============================================>       (98 + 16) / 114][Stage 157:===================================================> (111 + 3) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.660295213 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:=================================>                   (71 + 42) / 113][Stage 158:========================================>            (87 + 26) / 113][Stage 158:==================================================>  (108 + 5) / 113]                                                                                [Stage 159:============================>                        (62 + 52) / 114][Stage 159:==================================>                  (74 + 40) / 114][Stage 159:========================================>            (87 + 27) / 114][Stage 159:==============================================>     (103 + 11) / 114][Stage 159:===================================================> (111 + 3) / 114][Stage 159:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.190807697 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (58 + 55) / 113][Stage 160:=============================>                       (63 + 50) / 113][Stage 160:==================================>                  (74 + 39) / 113][Stage 160:============================================>        (94 + 19) / 113][Stage 160:===================================================> (110 + 3) / 113]                                                                                [Stage 161:============================>                        (62 + 52) / 114][Stage 161:==================================>                  (75 + 39) / 114][Stage 161:=============================================>       (97 + 17) / 114][Stage 161:=================================================>   (106 + 8) / 114][Stage 161:===================================================> (111 + 3) / 114][Stage 161:====================================================>(112 + 2) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.42724196 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373632515 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (73 + 45) / 118][Stage 162:===================================>                 (79 + 39) / 118][Stage 162:=======================================>             (89 + 29) / 118][Stage 162:=============================================>      (104 + 14) / 118][Stage 162:====================================================>(116 + 2) / 118][Stage 162:====================================================>(117 + 1) / 118]                                                                                [Stage 163:================================>                    (73 + 46) / 119][Stage 163:=================================>                   (76 + 43) / 119][Stage 163:===================================>                 (80 + 39) / 119][Stage 163:=========================================>           (93 + 26) / 119][Stage 163:==============================================>     (106 + 13) / 119][Stage 163:===================================================> (115 + 4) / 119][Stage 163:====================================================>(117 + 2) / 119][Stage 163:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.837789727 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347543524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:======================================>              (84 + 31) / 115][Stage 164:============================================>        (96 + 19) / 115][Stage 164:===============================================>    (105 + 10) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:=====================================>               (81 + 35) / 116][Stage 165:==========================================>          (93 + 23) / 116][Stage 165:===============================================>    (105 + 11) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.706397232 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363357023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===================================>                 (76 + 37) / 113][Stage 166:==========================================>          (90 + 23) / 113][Stage 166:===============================================>    (103 + 10) / 113][Stage 166:==================================================>  (108 + 5) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:==================================>                  (75 + 39) / 114][Stage 167:======================================>              (83 + 31) / 114][Stage 167:===========================================>         (93 + 21) / 114][Stage 167:=============================================>      (100 + 14) / 114][Stage 167:==================================================>  (109 + 5) / 114][Stage 167:===================================================> (111 + 3) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.546887475 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358971827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (72 + 46) / 118][Stage 168:===================================>                 (78 + 40) / 118][Stage 168:========================================>            (90 + 28) / 118][Stage 168:=================================================>   (110 + 8) / 118][Stage 168:===================================================> (115 + 3) / 118][Stage 168:====================================================>(117 + 1) / 118]                                                                                [Stage 169:================================>                    (73 + 46) / 119][Stage 169:==================================>                  (77 + 42) / 119][Stage 169:=====================================>               (85 + 34) / 119][Stage 169:===========================================>         (97 + 22) / 119][Stage 169:===============================================>    (109 + 10) / 119][Stage 169:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.143282487 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368466429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (72 + 46) / 118][Stage 170:==================================>                  (76 + 42) / 118][Stage 170:====================================>                (82 + 36) / 118][Stage 170:============================================>       (100 + 18) / 118][Stage 170:================================================>    (109 + 9) / 118][Stage 170:====================================================>(116 + 2) / 118]                                                                                [Stage 171:================================>                    (73 + 46) / 119][Stage 171:=================================>                   (76 + 43) / 119][Stage 171:======================================>              (87 + 32) / 119][Stage 171:===========================================>         (98 + 21) / 119][Stage 171:==================================================>  (114 + 5) / 119][Stage 171:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.815039632 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386587173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (58 + 55) / 113][Stage 172:==============================>                      (65 + 48) / 113][Stage 172:======================================>              (83 + 30) / 113][Stage 172:==============================================>      (99 + 14) / 113][Stage 172:===================================================> (110 + 3) / 113]                                                                                [Stage 173:============================>                        (61 + 53) / 114][Stage 173:=================================>                   (71 + 43) / 114][Stage 173:==========================================>          (91 + 23) / 114][Stage 173:==================================================>  (109 + 5) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.931989162 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388195153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:>                                                      (0 + 0) / 113][Stage 174:===========================>                         (58 + 55) / 113][Stage 174:=============================>                       (62 + 51) / 113][Stage 174:====================================>                (77 + 36) / 113][Stage 174:==============================================>     (102 + 11) / 113]                                                                                [Stage 175:============================>                        (62 + 52) / 114][Stage 175:==================================>                  (75 + 39) / 114][Stage 175:===========================================>         (93 + 21) / 114][Stage 175:==================================================>  (109 + 5) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.329497952 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406820098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (61 + 59) / 120][Stage 176:==============================>                      (70 + 50) / 120][Stage 176:=====================================>               (84 + 36) / 120][Stage 176:===========================================>         (99 + 21) / 120][Stage 176:===================================================> (117 + 3) / 120]                                                                                [Stage 177:===========================>                         (62 + 59) / 121][Stage 177:================================>                    (75 + 46) / 121][Stage 177:========================================>            (93 + 28) / 121][Stage 177:=================================================>   (114 + 7) / 121][Stage 177:===================================================> (118 + 3) / 121][Stage 177:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.676162253 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39666307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (70 + 45) / 115][Stage 178:=====================================>               (82 + 33) / 115][Stage 178:==============================================>     (103 + 12) / 115][Stage 178:===================================================> (112 + 3) / 115]                                                                                [Stage 179:=====================================>               (82 + 34) / 116][Stage 179:===========================================>         (95 + 21) / 116][Stage 179:===============================================>    (106 + 10) / 116][Stage 179:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.875017791 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359136173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (73 + 45) / 118][Stage 180:====================================>                (81 + 37) / 118][Stage 180:=========================================>           (93 + 25) / 118][Stage 180:==============================================>     (106 + 12) / 118][Stage 180:====================================================>(116 + 2) / 118]                                                                                [Stage 181:================================>                    (74 + 45) / 119][Stage 181:======================================>              (86 + 33) / 119][Stage 181:===========================================>        (100 + 19) / 119][Stage 181:================================================>    (110 + 9) / 119][Stage 181:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.803538327 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=11", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=11,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (73 + 45) / 118][Stage 182:====================================>                (81 + 37) / 118][Stage 182:========================================>            (90 + 28) / 118][Stage 182:==============================================>     (106 + 12) / 118][Stage 182:===================================================> (115 + 3) / 118]                                                                                [Stage 183:=================================>                   (76 + 43) / 119][Stage 183:====================================>                (81 + 38) / 119][Stage 183:===========================================>         (97 + 22) / 119][Stage 183:================================================>    (110 + 9) / 119][Stage 183:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.111622216 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355272657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (82 + 33) / 115][Stage 184:=======================================>             (86 + 29) / 115][Stage 184:==============================================>     (102 + 13) / 115][Stage 184:====================================================>(113 + 2) / 115]                                                                                [Stage 185:=======================================>             (87 + 29) / 116][Stage 185:=============================================>       (99 + 17) / 116][Stage 185:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.713971804 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378664334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==================================>                  (74 + 41) / 115][Stage 186:====================================>                (80 + 35) / 115][Stage 186:==========================================>          (93 + 22) / 115][Stage 186:===============================================>    (105 + 10) / 115]                                                                                [Stage 187:==============================>                      (67 + 49) / 116][Stage 187:===================================>                 (78 + 38) / 116][Stage 187:==========================================>          (92 + 24) / 116][Stage 187:===============================================>    (105 + 11) / 116][Stage 187:===================================================> (112 + 4) / 116][Stage 187:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 7.688283058 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=160", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=160,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342330098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (83 + 32) / 115][Stage 188:==========================================>          (92 + 23) / 115][Stage 188:===============================================>    (104 + 11) / 115][Stage 188:===================================================> (111 + 4) / 115]                                                                                [Stage 189:=====================================>               (83 + 33) / 116][Stage 189:==========================================>          (92 + 24) / 116][Stage 189:=============================================>       (99 + 17) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.901803584 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381973215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (58 + 55) / 113][Stage 190:=================================>                   (72 + 41) / 113][Stage 190:=========================================>           (89 + 24) / 113][Stage 190:================================================>    (104 + 9) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:===========================>                         (60 + 54) / 114][Stage 191:=============================>                       (64 + 50) / 114][Stage 191:=====================================>               (80 + 34) / 114][Stage 191:==============================================>     (101 + 13) / 114][Stage 191:===================================================> (110 + 4) / 114][Stage 191:====================================================>(112 + 2) / 114][Stage 191:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.108615517 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380247708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:============================>                        (61 + 52) / 113][Stage 192:===================================>                 (76 + 37) / 113][Stage 192:==========================================>          (90 + 23) / 113][Stage 192:===============================================>    (103 + 10) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:============================>                        (61 + 53) / 114][Stage 193:==================================>                  (74 + 40) / 114][Stage 193:=======================================>             (85 + 29) / 114][Stage 193:==============================================>     (103 + 11) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.756111849 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=============================>                       (62 + 51) / 113][Stage 194:=================================>                   (71 + 42) / 113][Stage 194:=====================================>               (79 + 34) / 113][Stage 194:==============================================>     (100 + 13) / 113][Stage 194:===================================================> (110 + 3) / 113]                                                                                [Stage 195:=============================>                       (64 + 50) / 114][Stage 195:====================================>                (79 + 35) / 114][Stage 195:=============================================>      (100 + 14) / 114][Stage 195:==================================================>  (108 + 6) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.630886212 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380511513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (59 + 54) / 113][Stage 196:==============================>                      (65 + 48) / 113][Stage 196:====================================>                (78 + 35) / 113][Stage 196:==========================================>          (91 + 22) / 113][Stage 196:=================================================>   (106 + 7) / 113]                                                                                [Stage 197:============================>                        (62 + 52) / 114][Stage 197:=================================>                   (71 + 43) / 114][Stage 197:=======================================>             (85 + 29) / 114][Stage 197:=============================================>      (100 + 14) / 114][Stage 197:==================================================>  (108 + 6) / 114][Stage 197:====================================================>(112 + 2) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.193818911 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394622067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (80 + 33) / 113][Stage 198:=========================================>           (89 + 24) / 113][Stage 198:===============================================>    (103 + 10) / 113][Stage 198:==================================================>  (107 + 6) / 113][Stage 198:===================================================> (109 + 4) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:==================================>                  (75 + 39) / 114][Stage 199:========================================>            (87 + 27) / 114][Stage 199:===========================================>         (94 + 20) / 114][Stage 199:=============================================>       (98 + 16) / 114][Stage 199:================================================>    (105 + 9) / 114][Stage 199:===================================================> (110 + 4) / 114][Stage 199:===================================================> (111 + 3) / 114][Stage 199:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.461268329 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360480457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (81 + 32) / 113][Stage 200:==========================================>          (91 + 22) / 113][Stage 200:==============================================>      (99 + 14) / 113][Stage 200:=================================================>   (106 + 7) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:==================================>                  (74 + 40) / 114][Stage 201:=========================================>           (89 + 25) / 114][Stage 201:============================================>        (96 + 18) / 114][Stage 201:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.914858433 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m49.504s
user	12m4.492s
sys	1m31.276s
