Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 04:28:43 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:28:57 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:28:57 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:28:58 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 04:29:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 04:29:11 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601042900-0754).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.406162678 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.95167582 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.731190269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==============================>                        (63 + 52) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:========================================>              (84 + 31) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:===============================================>      (101 + 14) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:======================================================>(113 + 2) / 115]                                                                                [Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:==========================================>            (89 + 27) / 116][Stage 3:==============================================>        (99 + 17) / 116][Stage 3:================================================>     (105 + 11) / 116][Stage 3:====================================================>  (110 + 6) / 116][Stage 3:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.459339731 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.629926385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:====================================>                  (77 + 38) / 115][Stage 4:======================================>                (80 + 35) / 115][Stage 4:========================================>              (84 + 31) / 115][Stage 4:===========================================>           (90 + 25) / 115][Stage 4:============================================>          (93 + 22) / 115][Stage 4:==============================================>        (97 + 18) / 115][Stage 4:===================================================>   (107 + 8) / 115][Stage 4:====================================================>  (109 + 6) / 115][Stage 4:====================================================>  (110 + 5) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:====================================>                  (77 + 39) / 116][Stage 5:======================================>                (82 + 34) / 116][Stage 5:========================================>              (86 + 30) / 116][Stage 5:============================================>          (94 + 22) / 116][Stage 5:===============================================>      (103 + 13) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.951471669 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=184", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=184,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.660178905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=============================>                         (61 + 54) / 115][Stage 6:=================================>                     (69 + 46) / 115][Stage 6:====================================>                  (77 + 38) / 115][Stage 6:========================================>              (85 + 30) / 115][Stage 6:=============================================>         (96 + 19) / 115][Stage 6:===================================================>   (108 + 7) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:================================>                      (68 + 48) / 116][Stage 7:=================================>                     (71 + 45) / 116][Stage 7:====================================>                  (78 + 38) / 116][Stage 7:=======================================>               (84 + 32) / 116][Stage 7:=============================================>         (95 + 21) / 116][Stage 7:================================================>     (104 + 12) / 116][Stage 7:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.052721449 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530453929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:======================================>                (81 + 34) / 115][Stage 8:=========================================>             (86 + 29) / 115][Stage 8:===========================================>           (91 + 24) / 115][Stage 8:==============================================>        (97 + 18) / 115][Stage 8:=================================================>    (105 + 10) / 115][Stage 8:=====================================================> (111 + 4) / 115]                                                                                [Stage 9:======================================>                (82 + 34) / 116][Stage 9:=========================================>             (87 + 29) / 116][Stage 9:============================================>          (93 + 23) / 116][Stage 9:==============================================>        (98 + 18) / 116][Stage 9:================================================>     (105 + 11) / 116][Stage 9:==================================================>    (107 + 9) / 116][Stage 9:===================================================>   (108 + 8) / 116][Stage 9:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.344815381 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=251", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=251,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.699379075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=========================>                            (56 + 64) / 120][Stage 10:==========================>                           (58 + 62) / 120][Stage 10:==============================>                       (67 + 53) / 120][Stage 10:====================================>                 (80 + 40) / 120][Stage 10:=========================================>            (93 + 27) / 120][Stage 10:=================================================>    (111 + 9) / 120][Stage 10:=====================================================>(118 + 2) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:=============================>                        (65 + 56) / 121][Stage 11:================================>                     (73 + 48) / 121][Stage 11:===========================================>          (98 + 23) / 121][Stage 11:================================================>    (110 + 11) / 121][Stage 11:====================================================> (118 + 3) / 121][Stage 11:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.775399843 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.622558249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (58 + 55) / 113][Stage 12:================================>                     (69 + 44) / 113][Stage 12:===========================================>          (90 + 23) / 113][Stage 12:===============================================>     (101 + 12) / 113][Stage 12:===================================================>  (108 + 5) / 113]                                                                                [Stage 13:============================>                         (60 + 54) / 114][Stage 13:================================>                     (69 + 45) / 114][Stage 13:=======================================>              (84 + 30) / 114][Stage 13:===============================================>     (102 + 12) / 114][Stage 13:===================================================>  (108 + 6) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.472159176 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=15", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=15,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (58 + 55) / 113][Stage 14:============================>                         (59 + 54) / 113][Stage 14:==================================>                   (73 + 40) / 113][Stage 14:==========================================>           (88 + 25) / 113][Stage 14:=================================================>    (104 + 9) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:============================>                         (61 + 53) / 114][Stage 15:=================================>                    (71 + 43) / 114][Stage 15:========================================>             (85 + 29) / 114][Stage 15:==============================================>       (98 + 16) / 114][Stage 15:===============================================>     (103 + 11) / 114][Stage 15:====================================================> (111 + 3) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.56557458 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495438542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (72 + 46) / 118][Stage 16:=================================>                    (74 + 44) / 118][Stage 16:====================================>                 (79 + 39) / 118][Stage 16:======================================>               (84 + 34) / 118][Stage 16:===========================================>          (94 + 24) / 118][Stage 16:===================================================>  (112 + 6) / 118]                                                                                [Stage 17:=================================>                    (73 + 46) / 119][Stage 17:==================================>                   (75 + 44) / 119][Stage 17:===================================>                  (79 + 40) / 119][Stage 17:========================================>             (90 + 29) / 119][Stage 17:==============================================>      (105 + 14) / 119][Stage 17:====================================================> (116 + 3) / 119][Stage 17:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.313737654 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (73 + 45) / 118][Stage 18:==================================>                   (76 + 42) / 118][Stage 18:=====================================>                (82 + 36) / 118][Stage 18:=========================================>            (91 + 27) / 118][Stage 18:============================================>        (100 + 18) / 118]                                                                                [Stage 19:=================================>                    (74 + 45) / 119][Stage 19:==================================>                   (76 + 43) / 119][Stage 19:=====================================>                (82 + 37) / 119][Stage 19:========================================>             (89 + 30) / 119][Stage 19:=============================================>       (102 + 17) / 119][Stage 19:=================================================>    (110 + 9) / 119][Stage 19:====================================================> (115 + 4) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.555510228 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538150162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (58 + 55) / 113][Stage 20:=============================>                        (62 + 51) / 113][Stage 20:==================================>                   (73 + 40) / 113][Stage 20:==============================================>       (97 + 16) / 113][Stage 20:===================================================>  (107 + 6) / 113]                                                                                [Stage 21:============================>                         (61 + 53) / 114][Stage 21:================================>                     (68 + 46) / 114][Stage 21:====================================>                 (78 + 36) / 114][Stage 21:===========================================>          (92 + 22) / 114][Stage 21:================================================>    (104 + 10) / 114][Stage 21:===================================================>  (108 + 6) / 114][Stage 21:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.1300756 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521144869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (58 + 55) / 113][Stage 22:============================>                         (60 + 53) / 113][Stage 22:=================================>                    (71 + 42) / 113][Stage 22:==========================================>           (88 + 25) / 113][Stage 22:===============================================>     (102 + 11) / 113][Stage 22:====================================================> (109 + 4) / 113]                                                                                [Stage 23:============================>                         (60 + 54) / 114][Stage 23:================================>                     (69 + 45) / 114][Stage 23:=======================================>              (84 + 30) / 114][Stage 23:================================================>    (104 + 10) / 114][Stage 23:=====================================================>(112 + 2) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.221199425 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552643472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:===========================>                          (62 + 58) / 120][Stage 24:================================>                     (73 + 47) / 120][Stage 24:==========================================>           (95 + 25) / 120][Stage 24:=================================================>    (111 + 9) / 120][Stage 24:====================================================> (116 + 4) / 120]                                                                                [Stage 25:===========================>                          (61 + 60) / 121][Stage 25:==============================>                       (68 + 53) / 121][Stage 25:========================================>             (90 + 31) / 121][Stage 25:=============================================>       (104 + 17) / 121][Stage 25:===================================================>  (116 + 5) / 121][Stage 25:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.95562664 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:==============================>                       (68 + 52) / 120][Stage 26:=======================================>              (87 + 33) / 120][Stage 26:=============================================>       (103 + 17) / 120][Stage 26:===================================================>  (114 + 6) / 120]                                                                                [Stage 27:============================>                         (63 + 58) / 121][Stage 27:=================================>                    (75 + 46) / 121][Stage 27:=====================================>                (85 + 36) / 121][Stage 27:================================================>    (110 + 11) / 121][Stage 27:====================================================> (118 + 3) / 121][Stage 27:=====================================================>(119 + 2) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.885722326 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505138661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (57 + 56) / 113][Stage 28:=============================>                        (61 + 52) / 113][Stage 28:================================>                     (68 + 45) / 113][Stage 28:=========================================>            (87 + 26) / 113][Stage 28:=================================================>    (104 + 9) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:===========================>                          (59 + 55) / 114][Stage 29:=============================>                        (62 + 52) / 114][Stage 29:======================================>               (81 + 33) / 114][Stage 29:==============================================>       (98 + 16) / 114][Stage 29:====================================================> (110 + 4) / 114][Stage 29:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.250061393 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455653241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==================================>                   (72 + 41) / 113][Stage 30:=========================================>            (87 + 26) / 113][Stage 30:==============================================>       (97 + 16) / 113][Stage 30:===================================================>  (107 + 6) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:====================================>                 (78 + 36) / 114][Stage 31:==========================================>           (89 + 25) / 114][Stage 31:=============================================>        (97 + 17) / 114][Stage 31:=================================================>    (105 + 9) / 114][Stage 31:===================================================>  (109 + 5) / 114][Stage 31:====================================================> (111 + 3) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.485039334 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476739372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:>                                                       (0 + 0) / 113][Stage 32:===================================>                  (75 + 38) / 113][Stage 32:=========================================>            (87 + 26) / 113][Stage 32:=============================================>        (96 + 17) / 113][Stage 32:====================================================> (110 + 3) / 113]                                                                                [Stage 33:=======================================>              (84 + 30) / 114][Stage 33:===========================================>          (92 + 22) / 114][Stage 33:===============================================>     (103 + 11) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.83238502 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=232", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=232,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409952335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:>                                                       (0 + 0) / 115][Stage 34:======================================>               (81 + 34) / 115][Stage 34:========================================>             (86 + 29) / 115][Stage 34:=============================================>        (96 + 19) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:========================================>             (86 + 30) / 116][Stage 35:=============================================>       (100 + 16) / 116][Stage 35:==================================================>   (108 + 8) / 116][Stage 35:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.864826091 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=91", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=91,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471025755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==============================>                       (66 + 49) / 115][Stage 36:==================================>                   (74 + 41) / 115][Stage 36:=========================================>            (88 + 27) / 115][Stage 36:================================================>    (105 + 10) / 115][Stage 36:====================================================> (111 + 4) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:===================================>                  (76 + 40) / 116][Stage 37:============================================>         (95 + 21) / 116][Stage 37:==================================================>   (108 + 8) / 116][Stage 37:===================================================>  (111 + 5) / 116][Stage 37:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.343186276 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526582436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:=============================>                        (66 + 54) / 120][Stage 38:=====================================>                (84 + 36) / 120][Stage 38:===============================================>     (107 + 13) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:=============================>                        (67 + 54) / 121][Stage 39:========================================>             (90 + 31) / 121][Stage 39:==============================================>      (106 + 15) / 121][Stage 39:====================================================> (118 + 3) / 121][Stage 39:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.420755377 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=224", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=224,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.5086787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===============================>                      (70 + 50) / 120][Stage 40:============================================>         (99 + 21) / 120][Stage 40:===================================================>  (115 + 5) / 120]                                                                                [Stage 41:===========================>                          (62 + 59) / 121][Stage 41:================================>                     (73 + 48) / 121][Stage 41:===========================================>          (97 + 24) / 121][Stage 41:================================================>    (111 + 10) / 121][Stage 41:====================================================> (118 + 3) / 121][Stage 41:=====================================================>(119 + 2) / 121][Stage 41:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.291683187 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=97", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=97,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451542355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=================================>                    (73 + 45) / 118][Stage 42:===================================>                  (78 + 40) / 118][Stage 42:===========================================>          (94 + 24) / 118][Stage 42:=============================================>       (102 + 16) / 118][Stage 42:====================================================> (115 + 3) / 118]                                                                                [Stage 43:=================================>                    (73 + 46) / 119][Stage 43:=================================>                    (74 + 45) / 119][Stage 43:=====================================>                (82 + 37) / 119][Stage 43:==========================================>           (93 + 26) / 119][Stage 43:==============================================>      (104 + 15) / 119][Stage 43:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 4.806014697 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48662619 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:===========================>                          (62 + 58) / 120][Stage 44:===================================>                  (79 + 41) / 120][Stage 44:==============================================>      (105 + 15) / 120][Stage 44:=====================================================>(118 + 2) / 120]                                                                                [Stage 45:===========================>                          (61 + 60) / 121][Stage 45:=============================>                        (67 + 54) / 121][Stage 45:===================================>                  (80 + 41) / 121][Stage 45:===========================================>          (97 + 24) / 121][Stage 45:=====================================================>(119 + 2) / 121][Stage 45:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.771259726 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437942332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:======================================>               (83 + 32) / 115][Stage 46:=============================================>        (97 + 18) / 115][Stage 46:===================================================>  (110 + 5) / 115]                                                                                [Stage 47:========================================>             (86 + 30) / 116][Stage 47:=============================================>        (98 + 18) / 116][Stage 47:===================================================>  (110 + 6) / 116][Stage 47:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.795861983 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424708509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (71 + 42) / 113][Stage 48:=======================================>              (82 + 31) / 113][Stage 48:==========================================>           (89 + 24) / 113][Stage 48:=================================================>    (104 + 9) / 113][Stage 48:====================================================> (109 + 4) / 113]                                                                                [Stage 49:======================================>               (82 + 32) / 114][Stage 49:=============================================>        (95 + 19) / 114][Stage 49:==============================================>      (100 + 14) / 114][Stage 49:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.053284971 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398846166 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:======================================>               (82 + 33) / 115][Stage 50:========================================>             (87 + 28) / 115][Stage 50:==============================================>      (100 + 15) / 115][Stage 50:===================================================>  (110 + 5) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:========================================>             (87 + 29) / 116][Stage 51:===============================================>     (103 + 13) / 116][Stage 51:====================================================> (112 + 4) / 116][Stage 51:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.997488874 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=120", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=120,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390753379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (80 + 35) / 115][Stage 52:========================================>             (87 + 28) / 115][Stage 52:==============================================>      (101 + 14) / 115][Stage 52:==================================================>   (108 + 7) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:======================================>               (82 + 34) / 116][Stage 53:==========================================>           (91 + 25) / 116][Stage 53:===============================================>     (103 + 13) / 116][Stage 53:===================================================>  (110 + 6) / 116][Stage 53:=====================================================>(114 + 2) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.097647548 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435644108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:==============================>                       (63 + 50) / 113][Stage 54:========================================>             (84 + 29) / 113][Stage 54:==================================================>   (105 + 8) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:===========================>                          (59 + 55) / 114][Stage 55:================================>                     (69 + 45) / 114][Stage 55:======================================>               (82 + 32) / 114][Stage 55:================================================>    (104 + 10) / 114][Stage 55:===================================================>  (109 + 5) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.629289176 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=143", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=143,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383271677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (81 + 34) / 115][Stage 56:=========================================>            (88 + 27) / 115][Stage 56:==============================================>      (101 + 14) / 115][Stage 56:===================================================>  (110 + 5) / 115][Stage 56:=====================================================>(113 + 2) / 115]                                                                                [Stage 57:=========================================>            (89 + 27) / 116][Stage 57:==============================================>      (101 + 15) / 116][Stage 57:===============================================>     (105 + 11) / 116][Stage 57:===================================================>  (111 + 5) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.142644467 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=64", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=64,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (81 + 34) / 115][Stage 58:===========================================>          (92 + 23) / 115][Stage 58:==================================================>   (108 + 7) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:=======================================>              (85 + 31) / 116][Stage 59:=============================================>        (98 + 18) / 116][Stage 59:===============================================>     (104 + 12) / 116][Stage 59:====================================================> (113 + 3) / 116][Stage 59:=====================================================>(114 + 2) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.097292028 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (82 + 33) / 115][Stage 60:===========================================>          (92 + 23) / 115][Stage 60:===============================================>     (103 + 12) / 115][Stage 60:====================================================> (112 + 3) / 115][Stage 60:=====================================================>(114 + 1) / 115]                                                                                [Stage 61:=======================================>              (84 + 32) / 116][Stage 61:==========================================>           (91 + 25) / 116][Stage 61:===============================================>     (105 + 11) / 116][Stage 61:====================================================> (112 + 4) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.077691028 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=136", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=136,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (83 + 32) / 115][Stage 62:============================================>         (95 + 20) / 115][Stage 62:================================================>    (105 + 10) / 115][Stage 62:===================================================>  (110 + 5) / 115]                                                                                [Stage 63:=======================================>              (85 + 31) / 116][Stage 63:=============================================>        (98 + 18) / 116][Stage 63:=================================================>    (107 + 9) / 116][Stage 63:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.922257222 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505313721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:============================>                         (63 + 57) / 120][Stage 64:===================================>                  (79 + 41) / 120][Stage 64:===========================================>          (96 + 24) / 120][Stage 64:====================================================> (116 + 4) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:=============================>                        (67 + 54) / 121][Stage 65:=====================================>                (85 + 36) / 121][Stage 65:===============================================>     (109 + 12) / 121][Stage 65:====================================================> (118 + 3) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.096511568 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447062191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=================================>                    (72 + 43) / 115][Stage 66:=========================================>            (89 + 26) / 115][Stage 66:===============================================>     (104 + 11) / 115][Stage 66:=====================================================>(113 + 2) / 115]                                                                                [Stage 67:======================================>               (82 + 34) / 116][Stage 67:============================================>         (95 + 21) / 116][Stage 67:================================================>    (106 + 10) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.880624516 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==================================>                   (74 + 41) / 115][Stage 68:=====================================>                (80 + 35) / 115][Stage 68:==============================================>      (101 + 14) / 115][Stage 68:====================================================> (111 + 4) / 115]                                                                                [Stage 69:=================================>                    (73 + 43) / 116][Stage 69:==========================================>           (91 + 25) / 116][Stage 69:================================================>    (106 + 10) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.825066759 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==============================>                       (64 + 51) / 115][Stage 70:==================================>                   (74 + 41) / 115][Stage 70:=========================================>            (89 + 26) / 115][Stage 70:==================================================>   (108 + 7) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:=================================>                    (72 + 44) / 116][Stage 71:=====================================>                (81 + 35) / 116][Stage 71:========================================>             (88 + 28) / 116][Stage 71:===========================================>          (94 + 22) / 116][Stage 71:=====================================================>(114 + 2) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.582165735 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41875014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===================================>                  (74 + 39) / 113][Stage 72:=======================================>              (82 + 31) / 113][Stage 72:============================================>         (94 + 19) / 113][Stage 72:================================================>    (103 + 10) / 113][Stage 72:====================================================> (110 + 3) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:===================================>                  (74 + 40) / 114][Stage 73:========================================>             (86 + 28) / 114][Stage 73:=============================================>        (96 + 18) / 114][Stage 73:===============================================>     (103 + 11) / 114][Stage 73:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.205751508 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=80", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=80,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406735401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:===================================>                  (77 + 41) / 118][Stage 74:=========================================>            (91 + 27) / 118][Stage 74:===============================================>     (106 + 12) / 118][Stage 74:====================================================> (115 + 3) / 118]                                                                                [Stage 75:==================================>                   (75 + 44) / 119][Stage 75:======================================>               (85 + 34) / 119][Stage 75:============================================>         (98 + 21) / 119][Stage 75:==================================================>   (111 + 8) / 119][Stage 75:=====================================================>(117 + 2) / 119][Stage 75:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.672722133 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=198", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=198,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492590766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:======================================>               (82 + 33) / 115][Stage 76:=========================================>            (88 + 27) / 115][Stage 76:===============================================>     (103 + 12) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:=======================================>              (84 + 32) / 116][Stage 77:=========================================>            (90 + 26) / 116][Stage 77:==================================================>   (109 + 7) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.560022849 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388141581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:====================================>                 (76 + 37) / 113][Stage 78:===========================================>          (92 + 21) / 113][Stage 78:================================================>    (103 + 10) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:===================================>                  (75 + 39) / 114][Stage 79:========================================>             (85 + 29) / 114][Stage 79:=============================================>        (96 + 18) / 114][Stage 79:===================================================>  (108 + 6) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.827381237 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416682296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=============================>                        (62 + 51) / 113][Stage 80:==================================>                   (72 + 41) / 113][Stage 80:=======================================>              (82 + 31) / 113][Stage 80:==============================================>      (100 + 13) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:============================>                         (61 + 53) / 114][Stage 81:==================================>                   (73 + 41) / 114][Stage 81:=======================================>              (84 + 30) / 114][Stage 81:==============================================>      (101 + 13) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.156271413 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=213", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=213,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434616616 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:============================>                         (59 + 54) / 113][Stage 82:===============================>                      (66 + 47) / 113][Stage 82:======================================>               (81 + 32) / 113][Stage 82:================================================>    (103 + 10) / 113][Stage 82:=====================================================>(112 + 1) / 113]                                                                                [Stage 83:============================>                         (61 + 53) / 114][Stage 83:===================================>                  (75 + 39) / 114][Stage 83:==========================================>           (90 + 24) / 114][Stage 83:===============================================>     (102 + 12) / 114][Stage 83:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.812988527 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=125", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=125,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389522828 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=======================================>              (85 + 30) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:===================================================>  (109 + 6) / 115]                                                                                [Stage 85:=======================================>              (84 + 32) / 116][Stage 85:===========================================>          (94 + 22) / 116][Stage 85:==================================================>   (108 + 8) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.872364842 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396165251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (71 + 42) / 113][Stage 86:====================================>                 (76 + 37) / 113][Stage 86:==========================================>           (88 + 25) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:==================================================>   (106 + 7) / 113][Stage 86:=====================================================>(111 + 2) / 113]                                                                                [Stage 87:==================================>                   (72 + 42) / 114][Stage 87:======================================>               (81 + 33) / 114][Stage 87:============================================>         (93 + 21) / 114][Stage 87:==============================================>      (100 + 14) / 114][Stage 87:==================================================>   (107 + 7) / 114][Stage 87:====================================================> (110 + 4) / 114][Stage 87:=====================================================>(112 + 2) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.658026812 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382021525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===================================>                  (74 + 39) / 113][Stage 88:=========================================>            (87 + 26) / 113][Stage 88:=============================================>        (95 + 18) / 113][Stage 88:==============================================>      (100 + 13) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:=================================>                    (71 + 43) / 114][Stage 89:=======================================>              (83 + 31) / 114][Stage 89:============================================>         (94 + 20) / 114][Stage 89:=================================================>    (105 + 9) / 114][Stage 89:===================================================>  (109 + 5) / 114][Stage 89:=====================================================>(112 + 2) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.108508793 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide84;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===================================>                  (74 + 39) / 113][Stage 90:=======================================>              (83 + 30) / 113][Stage 90:=============================================>        (95 + 18) / 113][Stage 90:===================================================>  (107 + 6) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:======================================>               (81 + 33) / 114][Stage 91:===========================================>          (92 + 22) / 114][Stage 91:===============================================>     (103 + 11) / 114][Stage 91:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.005998466 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439300437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (58 + 55) / 113][Stage 92:===============================>                      (66 + 47) / 113][Stage 92:======================================>               (81 + 32) / 113][Stage 92:==================================================>   (105 + 8) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:============================>                         (60 + 54) / 114][Stage 93:==============================>                       (65 + 49) / 114][Stage 93:========================================>             (86 + 28) / 114][Stage 93:==============================================>      (101 + 13) / 114][Stage 93:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.596160068 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423436325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=============================>                        (61 + 52) / 113][Stage 94:===================================>                  (74 + 39) / 113][Stage 94:=======================================>              (82 + 31) / 113][Stage 94:=============================================>        (96 + 17) / 113][Stage 94:====================================================> (109 + 4) / 113]                                                                                [Stage 95:===========================>                          (59 + 55) / 114][Stage 95:==============================>                       (64 + 50) / 114][Stage 95:======================================>               (82 + 32) / 114][Stage 95:============================================>         (94 + 20) / 114][Stage 95:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.690341329 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465366725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:=========================================>            (88 + 27) / 115][Stage 96:==============================================>      (100 + 15) / 115][Stage 96:==================================================>   (108 + 7) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:==========================================>           (91 + 25) / 116][Stage 97:=============================================>       (100 + 16) / 116][Stage 97:===================================================>  (111 + 5) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.971413089 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370612531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=====================================>                (78 + 35) / 113][Stage 98:==========================================>           (88 + 25) / 113][Stage 98:===============================================>      (99 + 14) / 113][Stage 98:===================================================>  (108 + 5) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:=======================================>              (83 + 31) / 114][Stage 99:=============================================>        (95 + 19) / 114][Stage 99:===============================================>     (102 + 12) / 114][Stage 99:=====================================================>(112 + 2) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.237236578 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420119497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 59) / 120][Stage 100:==============================>                      (69 + 51) / 120][Stage 100:======================================>              (87 + 33) / 120][Stage 100:===================================================> (117 + 3) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:=============================>                       (68 + 53) / 121][Stage 101:==========================================>          (97 + 24) / 121][Stage 101:==================================================>  (116 + 5) / 121][Stage 101:====================================================>(119 + 2) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.260442766 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358177051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (80 + 35) / 115][Stage 102:======================================>              (83 + 32) / 115][Stage 102:===============================================>    (104 + 11) / 115][Stage 102:===================================================> (112 + 3) / 115]                                                                                [Stage 103:======================================>              (85 + 31) / 116][Stage 103:==========================================>          (93 + 23) / 116][Stage 103:=============================================>      (102 + 14) / 116][Stage 103:==================================================>  (110 + 6) / 116][Stage 103:====================================================>(114 + 2) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.067336917 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=====================================>               (81 + 34) / 115][Stage 104:========================================>            (88 + 27) / 115][Stage 104:=============================================>       (99 + 16) / 115][Stage 104:===================================================> (111 + 4) / 115]                                                                                [Stage 105:=====================================>               (81 + 35) / 116][Stage 105:==========================================>          (94 + 22) / 116][Stage 105:==============================================>     (104 + 12) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.513442929 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393892272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=================================>                   (72 + 43) / 115][Stage 106:========================================>            (87 + 28) / 115][Stage 106:================================================>    (106 + 9) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:===============================>                     (69 + 47) / 116][Stage 107:===================================>                 (77 + 39) / 116][Stage 107:==========================================>          (93 + 23) / 116][Stage 107:================================================>    (107 + 9) / 116][Stage 107:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.052023127 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=85", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=85,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42319853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===========================>                         (59 + 54) / 113][Stage 108:================================>                    (69 + 44) / 113][Stage 108:=====================================>               (81 + 32) / 113][Stage 108:==============================================>     (102 + 11) / 113]                                                                                [Stage 109:===========================>                         (59 + 55) / 114][Stage 109:================================>                    (70 + 44) / 114][Stage 109:=======================================>             (84 + 30) / 114][Stage 109:==============================================>     (103 + 11) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.443994639 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37203646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:====================================>                (77 + 36) / 113][Stage 110:==========================================>          (90 + 23) / 113][Stage 110:============================================>        (95 + 18) / 113][Stage 110:==================================================>  (107 + 6) / 113][Stage 110:===================================================> (110 + 3) / 113]                                                                                [Stage 111:=================================>                   (73 + 41) / 114][Stage 111:========================================>            (87 + 27) / 114][Stage 111:==============================================>      (99 + 15) / 114][Stage 111:==================================================>  (108 + 6) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.122263913 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408524822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:============================>                        (60 + 53) / 113][Stage 112:==================================>                  (74 + 39) / 113][Stage 112:==============================================>     (100 + 13) / 113]                                                                                [Stage 113:===========================>                         (60 + 54) / 114][Stage 113:================================>                    (70 + 44) / 114][Stage 113:=======================================>             (85 + 29) / 114][Stage 113:================================================>    (105 + 9) / 114][Stage 113:====================================================>(112 + 2) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.968696483 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=165", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=165,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363302493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=====================================>               (82 + 33) / 115][Stage 114:=========================================>           (90 + 25) / 115][Stage 114:=============================================>      (101 + 14) / 115][Stage 114:===================================================> (111 + 4) / 115]                                                                                [Stage 115:=======================================>             (86 + 30) / 116][Stage 115:===========================================>         (96 + 20) / 116][Stage 115:=============================================>      (102 + 14) / 116][Stage 115:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.805972208 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369699014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=================================>                   (71 + 42) / 113][Stage 116:=====================================>               (80 + 33) / 113][Stage 116:===========================================>         (92 + 21) / 113][Stage 116:===============================================>    (103 + 10) / 113][Stage 116:===================================================> (110 + 3) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:======================================>              (83 + 31) / 114][Stage 117:==========================================>          (91 + 23) / 114][Stage 117:==============================================>     (103 + 11) / 114][Stage 117:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.179629421 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397510348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==============================>                      (67 + 48) / 115][Stage 118:===================================>                 (77 + 38) / 115][Stage 118:==========================================>          (93 + 22) / 115][Stage 118:==================================================>  (109 + 6) / 115]                                                                                [Stage 119:==================================>                  (76 + 40) / 116][Stage 119:=======================================>             (87 + 29) / 116][Stage 119:=============================================>       (99 + 17) / 116][Stage 119:==================================================>  (111 + 5) / 116][Stage 119:===================================================> (112 + 4) / 116][Stage 119:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 9.012576009 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=31", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=31,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403188569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:============================>                        (60 + 53) / 113][Stage 120:================================>                    (69 + 44) / 113][Stage 120:=========================================>           (89 + 24) / 113][Stage 120:================================================>    (104 + 9) / 113][Stage 120:====================================================>(111 + 2) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:===============================>                     (68 + 46) / 114][Stage 121:====================================>                (78 + 36) / 114][Stage 121:============================================>        (95 + 19) / 114][Stage 121:===================================================> (110 + 4) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.306089148 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404271073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:==============================>                      (64 + 49) / 113][Stage 122:===================================>                 (75 + 38) / 113][Stage 122:==========================================>          (90 + 23) / 113][Stage 122:=================================================>   (106 + 7) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:===========================>                         (60 + 54) / 114][Stage 123:================================>                    (70 + 44) / 114][Stage 123:=========================================>           (89 + 25) / 114][Stage 123:==============================================>      (99 + 15) / 114][Stage 123:================================================>    (105 + 9) / 114][Stage 123:===================================================> (111 + 3) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.959873398 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344212232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:======================================>              (83 + 32) / 115][Stage 124:=========================================>           (91 + 24) / 115][Stage 124:=============================================>      (100 + 15) / 115][Stage 124:===================================================> (111 + 4) / 115]                                                                                [Stage 125:=======================================>             (86 + 30) / 116][Stage 125:============================================>        (97 + 19) / 116][Stage 125:================================================>    (107 + 9) / 116][Stage 125:==================================================>  (110 + 6) / 116][Stage 125:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.614107668 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394729943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===============================>                     (68 + 47) / 115][Stage 126:====================================>                (80 + 35) / 115][Stage 126:=============================================>       (99 + 16) / 115][Stage 126:=================================================>   (108 + 7) / 115][Stage 126:====================================================>(113 + 2) / 115]                                                                                [Stage 127:================================>                    (71 + 45) / 116][Stage 127:=======================================>             (86 + 30) / 116][Stage 127:=============================================>       (99 + 17) / 116][Stage 127:=============================================>      (102 + 14) / 116][Stage 127:=================================================>   (109 + 7) / 116][Stage 127:===================================================> (112 + 4) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.527359635 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36035275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (80 + 35) / 115][Stage 128:========================================>            (88 + 27) / 115][Stage 128:==============================================>     (103 + 12) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:=====================================>               (83 + 33) / 116][Stage 129:========================================>            (88 + 28) / 116][Stage 129:==============================================>     (104 + 12) / 116][Stage 129:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.638818095 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370711084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==================================>                  (73 + 40) / 113][Stage 130:===========================================>         (93 + 20) / 113][Stage 130:==============================================>     (101 + 12) / 113][Stage 130:==================================================>  (108 + 5) / 113]                                                                                [Stage 131:====================================>                (78 + 36) / 114][Stage 131:===========================================>         (94 + 20) / 114][Stage 131:================================================>    (105 + 9) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.836077302 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=204", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=204,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35733016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (79 + 36) / 115][Stage 132:=======================================>             (86 + 29) / 115][Stage 132:==============================================>     (103 + 12) / 115][Stage 132:===================================================> (111 + 4) / 115]                                                                                [Stage 133:=====================================>               (81 + 35) / 116][Stage 133:========================================>            (89 + 27) / 116][Stage 133:==============================================>     (103 + 13) / 116][Stage 133:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.592104786 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404215618 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:============================>                        (65 + 55) / 120][Stage 134:===================================>                 (80 + 40) / 120][Stage 134:===============================================>    (109 + 11) / 120]                                                                                [Stage 135:===========================>                         (63 + 58) / 121][Stage 135:===============================>                     (71 + 50) / 121][Stage 135:=======================================>             (90 + 31) / 121][Stage 135:==============================================>     (108 + 13) / 121][Stage 135:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 5.13241955 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36569355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (72 + 46) / 118][Stage 136:==================================>                  (77 + 41) / 118][Stage 136:==========================================>          (94 + 24) / 118][Stage 136:=================================================>   (110 + 8) / 118]                                                                                [Stage 137:================================>                    (73 + 46) / 119][Stage 137:===================================>                 (80 + 39) / 119][Stage 137:===========================================>        (100 + 19) / 119][Stage 137:===================================================> (115 + 4) / 119][Stage 137:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.584382074 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (72 + 46) / 118][Stage 138:=================================>                   (74 + 44) / 118][Stage 138:=======================================>             (87 + 31) / 118][Stage 138:==============================================>     (106 + 12) / 118][Stage 138:====================================================>(117 + 1) / 118]                                                                                [Stage 139:=================================>                   (75 + 44) / 119][Stage 139:=====================================>               (85 + 34) / 119][Stage 139:=============================================>      (104 + 15) / 119][Stage 139:===================================================> (116 + 3) / 119][Stage 139:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.180556326 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382893209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=================================>                   (74 + 44) / 118][Stage 140:=====================================>               (84 + 34) / 118][Stage 140:===========================================>         (97 + 21) / 118][Stage 140:===================================================> (115 + 3) / 118]                                                                                [Stage 141:================================>                    (73 + 46) / 119][Stage 141:================================>                    (74 + 45) / 119][Stage 141:==========================================>          (95 + 24) / 119][Stage 141:================================================>    (110 + 9) / 119][Stage 141:====================================================>(117 + 2) / 119][Stage 141:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.936459454 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=153", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=153,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396100054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (61 + 59) / 120][Stage 142:==============================>                      (68 + 52) / 120][Stage 142:=======================================>             (89 + 31) / 120][Stage 142:==================================================>  (115 + 5) / 120]                                                                                [Stage 143:===========================>                         (63 + 58) / 121][Stage 143:=================================>                   (76 + 45) / 121][Stage 143:======================================>              (89 + 32) / 121][Stage 143:==============================================>     (108 + 13) / 121][Stage 143:===================================================> (118 + 3) / 121][Stage 143:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.803309982 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354007153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==================================>                  (73 + 40) / 113][Stage 144:=======================================>             (84 + 29) / 113][Stage 144:============================================>        (95 + 18) / 113][Stage 144:=================================================>   (105 + 8) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:=================================>                   (72 + 42) / 114][Stage 145:=========================================>           (90 + 24) / 114][Stage 145:===========================================>         (94 + 20) / 114][Stage 145:==============================================>     (103 + 11) / 114][Stage 145:===================================================> (110 + 4) / 114][Stage 145:===================================================> (111 + 3) / 114][Stage 145:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 6.025109613 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=104", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=104,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409715782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 60) / 120][Stage 146:===============================>                     (72 + 48) / 120][Stage 146:==========================================>          (97 + 23) / 120][Stage 146:==================================================>  (114 + 6) / 120]                                                                                [Stage 147:===========================>                         (62 + 59) / 121][Stage 147:==============================>                      (70 + 51) / 121][Stage 147:=====================================>               (86 + 35) / 121][Stage 147:=============================================>      (107 + 14) / 121][Stage 147:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 4.112384614 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341546833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (84 + 31) / 115][Stage 148:===========================================>         (94 + 21) / 115][Stage 148:==================================================>  (109 + 6) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:======================================>              (84 + 32) / 116][Stage 149:==========================================>          (93 + 23) / 116][Stage 149:=================================================>   (108 + 8) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.660953642 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35559438 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (77 + 36) / 113][Stage 150:==========================================>          (90 + 23) / 113][Stage 150:================================================>    (104 + 9) / 113][Stage 150:===================================================> (109 + 4) / 113]                                                                                [Stage 151:=======================================>             (84 + 30) / 114][Stage 151:=============================================>       (97 + 17) / 114][Stage 151:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.802661944 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352702612 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===================================>                 (75 + 38) / 113][Stage 152:=======================================>             (84 + 29) / 113][Stage 152:============================================>        (95 + 18) / 113][Stage 152:=================================================>   (106 + 7) / 113][Stage 152:====================================================>(111 + 2) / 113]                                                                                [Stage 153:=====================================>               (80 + 34) / 114][Stage 153:=========================================>           (89 + 25) / 114][Stage 153:=============================================>      (100 + 14) / 114][Stage 153:===================================================> (110 + 4) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.133134905 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393911571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (62 + 58) / 120][Stage 154:==============================>                      (70 + 50) / 120][Stage 154:============================================>       (102 + 18) / 120]                                                                                [Stage 155:===========================>                         (62 + 59) / 121][Stage 155:=============================>                       (67 + 54) / 121][Stage 155:=====================================>               (86 + 35) / 121][Stage 155:==============================================>     (109 + 12) / 121][Stage 155:===================================================> (117 + 4) / 121][Stage 155:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.148770004 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:===========================>                         (62 + 58) / 120][Stage 156:==================================>                  (78 + 42) / 120][Stage 156:=================================================>   (111 + 9) / 120]                                                                                [Stage 157:==========================>                          (61 + 60) / 121][Stage 157:===============================>                     (72 + 49) / 121][Stage 157:===================================>                 (82 + 39) / 121][Stage 157:===============================================>    (111 + 10) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.311538881 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=225", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=225,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337348261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:====================================>                (79 + 36) / 115][Stage 158:========================================>            (88 + 27) / 115][Stage 158:===========================================>         (95 + 20) / 115][Stage 158:==============================================>     (102 + 13) / 115][Stage 158:==================================================>  (110 + 5) / 115]                                                                                [Stage 159:======================================>              (84 + 32) / 116][Stage 159:=============================================>       (99 + 17) / 116][Stage 159:=================================================>   (108 + 8) / 116][Stage 159:==================================================>  (111 + 5) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.164382128 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=78", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=78,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414100541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:==============================>                      (70 + 50) / 120][Stage 160:====================================>                (82 + 38) / 120][Stage 160:===============================================>    (109 + 11) / 120][Stage 160:====================================================>(119 + 1) / 120]                                                                                [Stage 161:===========================>                         (62 + 59) / 121][Stage 161:=============================>                       (67 + 54) / 121][Stage 161:======================================>              (88 + 33) / 121][Stage 161:===============================================>    (110 + 11) / 121][Stage 161:====================================================>(119 + 2) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.781681204 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414804945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (63 + 57) / 120][Stage 162:===============================>                     (71 + 49) / 120][Stage 162:========================================>            (91 + 29) / 120][Stage 162:===============================================>    (110 + 10) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:===============================>                     (71 + 50) / 121][Stage 163:========================================>            (93 + 28) / 121][Stage 163:=================================================>   (112 + 9) / 121][Stage 163:====================================================>(119 + 2) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.515631158 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399654754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:=============================>                       (66 + 54) / 120][Stage 164:=================================>                   (76 + 44) / 120][Stage 164:==========================================>          (96 + 24) / 120][Stage 164:=================================================>   (112 + 8) / 120]                                                                                [Stage 165:============================>                        (64 + 57) / 121][Stage 165:===============================>                     (73 + 48) / 121][Stage 165:=========================================>           (95 + 26) / 121][Stage 165:===============================================>    (111 + 10) / 121][Stage 165:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.66711569 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=248", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=248,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372897465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===============================>                     (68 + 47) / 115][Stage 166:====================================>                (79 + 36) / 115][Stage 166:===========================================>         (94 + 21) / 115][Stage 166:=================================================>   (108 + 7) / 115]                                                                                [Stage 167:==================================>                  (76 + 40) / 116][Stage 167:===========================================>         (96 + 20) / 116][Stage 167:===============================================>    (106 + 10) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.763114471 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357379873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (73 + 45) / 118][Stage 168:===================================>                 (79 + 39) / 118][Stage 168:========================================>            (90 + 28) / 118][Stage 168:================================================>    (109 + 9) / 118]                                                                                [Stage 169:================================>                    (73 + 46) / 119][Stage 169:==================================>                  (77 + 42) / 119][Stage 169:======================================>              (87 + 32) / 119][Stage 169:==============================================>     (106 + 13) / 119][Stage 169:====================================================>(117 + 2) / 119][Stage 169:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.777902519 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378291084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=================================>                   (72 + 43) / 115][Stage 170:======================================>              (84 + 31) / 115][Stage 170:==============================================>     (103 + 12) / 115][Stage 170:====================================================>(113 + 2) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:==================================>                  (75 + 41) / 116][Stage 171:=========================================>           (91 + 25) / 116][Stage 171:===============================================>    (106 + 10) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.037776613 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37992207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:============================>                        (61 + 52) / 113][Stage 172:==================================>                  (74 + 39) / 113][Stage 172:===========================================>         (92 + 21) / 113][Stage 172:================================================>    (104 + 9) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:==================================>                  (75 + 39) / 114][Stage 173:==========================================>          (92 + 22) / 114][Stage 173:=================================================>   (107 + 7) / 114][Stage 173:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.402242253 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=160", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=160,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38265358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==============================>                      (66 + 49) / 115][Stage 174:===================================>                 (77 + 38) / 115][Stage 174:=========================================>           (90 + 25) / 115][Stage 174:===============================================>    (105 + 10) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:====================================>                (80 + 36) / 116][Stage 175:==========================================>          (92 + 24) / 116][Stage 175:===============================================>    (105 + 11) / 116][Stage 175:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.995783362 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355736329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (74 + 39) / 113][Stage 176:==========================================>          (91 + 22) / 113][Stage 176:==============================================>     (101 + 12) / 113][Stage 176:===================================================> (109 + 4) / 113][Stage 176:===================================================> (110 + 3) / 113][Stage 176:====================================================>(112 + 1) / 113]                                                                                [Stage 177:===================================>                 (77 + 37) / 114][Stage 177:========================================>            (87 + 27) / 114][Stage 177:==============================================>      (99 + 15) / 114][Stage 177:================================================>    (105 + 9) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.214084109 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334177037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:======================================>              (83 + 32) / 115][Stage 178:===========================================>         (95 + 20) / 115][Stage 178:===============================================>    (105 + 10) / 115][Stage 178:====================================================>(113 + 2) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:======================================>              (84 + 32) / 116][Stage 179:==========================================>          (94 + 22) / 116][Stage 179:================================================>    (107 + 9) / 116][Stage 179:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.063210981 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386099353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=============================>                       (63 + 50) / 113][Stage 180:==================================>                  (73 + 40) / 113][Stage 180:============================================>        (94 + 19) / 113][Stage 180:===================================================> (109 + 4) / 113]                                                                                [Stage 181:===========================>                         (59 + 55) / 114][Stage 181:=============================>                       (64 + 50) / 114][Stage 181:=====================================>               (80 + 34) / 114][Stage 181:==============================================>      (99 + 15) / 114][Stage 181:===================================================> (111 + 3) / 114][Stage 181:====================================================>(112 + 2) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.904968211 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368134453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (74 + 44) / 118][Stage 182:===================================>                 (80 + 38) / 118][Stage 182:========================================>            (91 + 27) / 118][Stage 182:==============================================>     (105 + 13) / 118]                                                                                [Stage 183:================================>                    (74 + 45) / 119][Stage 183:====================================>                (81 + 38) / 119][Stage 183:========================================>            (92 + 27) / 119][Stage 183:=============================================>      (104 + 15) / 119][Stage 183:===================================================> (116 + 3) / 119][Stage 183:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.613901207 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=40", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=40,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339049515 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=======================================>             (85 + 30) / 115][Stage 184:==========================================>          (93 + 22) / 115][Stage 184:=============================================>      (101 + 14) / 115][Stage 184:==================================================>  (110 + 5) / 115]                                                                                [Stage 185:=====================================>               (83 + 33) / 116][Stage 185:==========================================>          (94 + 22) / 116][Stage 185:=============================================>      (101 + 15) / 116][Stage 185:=================================================>   (108 + 8) / 116][Stage 185:===================================================> (112 + 4) / 116][Stage 185:===================================================> (113 + 3) / 116][Stage 185:====================================================>(114 + 2) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.479700239 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378533171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=============================>                       (62 + 51) / 113][Stage 186:=================================>                   (71 + 42) / 113][Stage 186:=======================================>             (85 + 28) / 113][Stage 186:=============================================>       (98 + 15) / 113][Stage 186:===================================================> (110 + 3) / 113]                                                                                [Stage 187:============================>                        (62 + 52) / 114][Stage 187:=================================>                   (72 + 42) / 114][Stage 187:=======================================>             (86 + 28) / 114][Stage 187:===============================================>    (104 + 10) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.255335534 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=206", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=206,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368781139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==============================>                      (67 + 48) / 115][Stage 188:=====================================>               (81 + 34) / 115][Stage 188:==========================================>          (93 + 22) / 115][Stage 188:===============================================>    (105 + 10) / 115]                                                                                [Stage 189:==============================>                      (66 + 50) / 116][Stage 189:===================================>                 (77 + 39) / 116][Stage 189:========================================>            (88 + 28) / 116][Stage 189:===============================================>    (106 + 10) / 116][Stage 189:==================================================>  (111 + 5) / 116][Stage 189:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.137000825 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380489139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (59 + 54) / 113][Stage 190:==============================>                      (64 + 49) / 113][Stage 190:=======================================>             (84 + 29) / 113][Stage 190:==============================================>     (102 + 11) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:===========================>                         (59 + 55) / 114][Stage 191:================================>                    (69 + 45) / 114][Stage 191:======================================>              (82 + 32) / 114][Stage 191:=============================================>       (98 + 16) / 114][Stage 191:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.407179913 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=93", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=93,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (58 + 55) / 113][Stage 192:=============================>                       (63 + 50) / 113][Stage 192:==================================>                  (73 + 40) / 113][Stage 192:==========================================>          (90 + 23) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:===========================>                         (59 + 55) / 114][Stage 193:=============================>                       (64 + 50) / 114][Stage 193:====================================>                (79 + 35) / 114][Stage 193:==============================================>     (102 + 12) / 114][Stage 193:====================================================>(112 + 2) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.435810076 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358442085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:=================================>                   (75 + 43) / 118][Stage 194:=========================================>           (92 + 26) / 118][Stage 194:==============================================>     (105 + 13) / 118][Stage 194:====================================================>(116 + 2) / 118]                                                                                [Stage 195:=================================>                   (76 + 43) / 119][Stage 195:==================================>                  (78 + 41) / 119][Stage 195:=========================================>           (94 + 25) / 119][Stage 195:================================================>    (110 + 9) / 119][Stage 195:====================================================>(117 + 2) / 119][Stage 195:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.845548702 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386100139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=================================>                   (74 + 44) / 118][Stage 196:==================================>                  (76 + 42) / 118][Stage 196:===================================>                 (79 + 39) / 118][Stage 196:======================================>              (86 + 32) / 118][Stage 196:============================================>       (102 + 16) / 118]                                                                                [Stage 197:================================>                    (74 + 45) / 119][Stage 197:=================================>                   (76 + 43) / 119][Stage 197:====================================>                (81 + 38) / 119][Stage 197:=======================================>             (89 + 30) / 119][Stage 197:============================================>       (102 + 17) / 119][Stage 197:==================================================>  (113 + 6) / 119][Stage 197:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.037895208 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368525201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (71 + 44) / 115][Stage 198:======================================>              (83 + 32) / 115][Stage 198:=============================================>      (101 + 14) / 115][Stage 198:=================================================>   (108 + 7) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:==============================>                      (67 + 49) / 116][Stage 199:====================================>                (79 + 37) / 116][Stage 199:=============================================>       (99 + 17) / 116][Stage 199:==================================================>  (110 + 6) / 116][Stage 199:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.071442249 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide77;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==============================>                      (67 + 48) / 115][Stage 200:===================================>                 (77 + 38) / 115][Stage 200:=========================================>           (89 + 26) / 115][Stage 200:===============================================>    (105 + 10) / 115][Stage 200:===================================================> (112 + 3) / 115]                                                                                [Stage 201:==================================>                  (76 + 40) / 116][Stage 201:==========================================>          (92 + 24) / 116][Stage 201:===============================================>    (105 + 11) / 116][Stage 201:================================================>    (107 + 9) / 116][Stage 201:===================================================> (112 + 4) / 116][Stage 201:====================================================>(114 + 2) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.203281293 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m31.361s
user	12m43.444s
sys	1m25.008s
