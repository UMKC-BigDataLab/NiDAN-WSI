Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 22:22:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:22:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:22:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:22:39 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 22:22:41 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:22:52 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531222241-0719).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.521992453 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======================>                               (50 + 65) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:======================>                                (47 + 69) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.493199503 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.779363179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:================>                                      (34 + 79) / 113][Stage 2:====================>                                  (43 + 70) / 113][Stage 2:===========================>                           (57 + 56) / 113][Stage 2:=============================>                         (60 + 53) / 113][Stage 2:==============================>                        (62 + 51) / 113][Stage 2:==================================>                    (70 + 43) / 113][Stage 2:========================================>              (83 + 30) / 113][Stage 2:==========================================>            (88 + 25) / 113][Stage 2:==============================================>        (96 + 17) / 113][Stage 2:=====================================================> (109 + 4) / 113]                                                                                [Stage 3:============================>                          (59 + 55) / 114][Stage 3:=============================>                         (62 + 52) / 114][Stage 3:==================================>                    (71 + 43) / 114][Stage 3:========================================>              (83 + 31) / 114][Stage 3:=============================================>         (95 + 19) / 114][Stage 3:=================================================>    (104 + 10) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.964172265 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=98", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=98,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.679623221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (70 + 48) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:=======================================>               (84 + 34) / 118][Stage 4:=========================================>             (89 + 29) / 118][Stage 4:===========================================>           (93 + 25) / 118][Stage 4:==============================================>       (102 + 16) / 118][Stage 4:====================================================>  (112 + 6) / 118][Stage 4:======================================================>(117 + 1) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:=====================================>                 (81 + 38) / 119][Stage 5:==========================================>            (93 + 26) / 119][Stage 5:==============================================>       (103 + 16) / 119][Stage 5:===============================================>      (105 + 14) / 119][Stage 5:====================================================>  (114 + 5) / 119]                                                                                Time elapsed: 4.393311148 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552847936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=====================================>                 (78 + 37) / 115][Stage 6:======================================>                (80 + 35) / 115][Stage 6:========================================>              (85 + 30) / 115][Stage 6:==============================================>        (98 + 17) / 115][Stage 6:================================================>     (104 + 11) / 115][Stage 6:===================================================>   (107 + 8) / 115][Stage 6:======================================================>(113 + 2) / 115]                                                                                [Stage 7:======================================>                (82 + 34) / 116][Stage 7:=========================================>             (87 + 29) / 116][Stage 7:===============================================>      (103 + 13) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.544455002 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=12", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=12,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.595522634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===============================>                       (65 + 50) / 115][Stage 8:==================================>                    (72 + 43) / 115][Stage 8:=========================================>             (86 + 29) / 115][Stage 8:============================================>          (94 + 21) / 115][Stage 8:=================================================>    (105 + 10) / 115][Stage 8:====================================================>  (109 + 6) / 115][Stage 8:=====================================================> (111 + 4) / 115]                                                                                [Stage 9:=================================>                     (71 + 45) / 116][Stage 9:=====================================>                 (80 + 36) / 116][Stage 9:=========================================>             (88 + 28) / 116][Stage 9:=============================================>         (96 + 20) / 116][Stage 9:==================================================>    (107 + 9) / 116][Stage 9:=====================================================> (112 + 4) / 116][Stage 9:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.41887885 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496518067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==================================>                   (73 + 40) / 113][Stage 10:=========================================>            (86 + 27) / 113][Stage 10:============================================>         (93 + 20) / 113][Stage 10:=============================================>        (95 + 18) / 113][Stage 10:==============================================>       (98 + 15) / 113][Stage 10:==================================================>   (106 + 7) / 113][Stage 10:====================================================> (110 + 3) / 113]                                                                                [Stage 11:=====================================>                (79 + 35) / 114][Stage 11:========================================>             (85 + 29) / 114][Stage 11:=============================================>        (96 + 18) / 114][Stage 11:==================================================>   (106 + 8) / 114][Stage 11:====================================================> (110 + 4) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.191724071 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=134", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=134,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:>                                                       (0 + 0) / 113][Stage 12:================================>                     (67 + 46) / 113][Stage 12:====================================>                 (76 + 37) / 113][Stage 12:======================================>               (80 + 33) / 113][Stage 12:========================================>             (85 + 28) / 113][Stage 12:=============================================>        (96 + 17) / 113][Stage 12:=================================================>    (104 + 9) / 113][Stage 12:====================================================> (110 + 3) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:=======================================>              (84 + 30) / 114][Stage 13:===========================================>          (92 + 22) / 114][Stage 13:===============================================>     (102 + 12) / 114][Stage 13:===================================================>  (108 + 6) / 114][Stage 13:====================================================> (111 + 3) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.192542975 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=123,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.522962241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=============================>                        (65 + 53) / 118][Stage 14:===============================>                      (69 + 49) / 118][Stage 14:=====================================>                (81 + 37) / 118][Stage 14:=========================================>            (90 + 28) / 118][Stage 14:=========================================>            (91 + 27) / 118][Stage 14:===========================================>          (94 + 24) / 118][Stage 14:===============================================>     (106 + 12) / 118][Stage 14:====================================================> (115 + 3) / 118]                                                                                [Stage 15:==================================>                   (75 + 44) / 119][Stage 15:===================================>                  (79 + 40) / 119][Stage 15:========================================>             (89 + 30) / 119][Stage 15:==============================================>      (105 + 14) / 119][Stage 15:==================================================>   (111 + 8) / 119][Stage 15:===================================================>  (113 + 6) / 119][Stage 15:===================================================>  (114 + 5) / 119][Stage 15:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.513718915 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.569829437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:===============================>                      (71 + 49) / 120][Stage 16:======================================>               (86 + 34) / 120][Stage 16:==============================================>      (105 + 15) / 120][Stage 16:====================================================> (116 + 4) / 120]                                                                                [Stage 17:===========================>                          (62 + 59) / 121][Stage 17:================================>                     (72 + 49) / 121][Stage 17:===========================================>          (97 + 24) / 121][Stage 17:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.302083289 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:===============================>                      (70 + 50) / 120][Stage 18:=======================================>              (88 + 32) / 120][Stage 18:===============================================>     (108 + 12) / 120][Stage 18:====================================================> (117 + 3) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:=============================>                        (66 + 55) / 121][Stage 19:=====================================>                (83 + 38) / 121][Stage 19:=============================================>       (105 + 16) / 121][Stage 19:===================================================>  (115 + 6) / 121][Stage 19:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.514907106 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=38", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=38,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53289721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (65 + 50) / 115][Stage 20:===================================>                  (75 + 40) / 115][Stage 20:============================================>         (94 + 21) / 115][Stage 20:================================================>    (105 + 10) / 115][Stage 20:===================================================>  (110 + 5) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:================================>                     (69 + 47) / 116][Stage 21:======================================>               (82 + 34) / 116][Stage 21:=============================================>        (98 + 18) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:==================================================>   (109 + 7) / 116][Stage 21:====================================================> (113 + 3) / 116][Stage 21:=====================================================>(114 + 2) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.310967653 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=79", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=79,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==================================>                   (73 + 42) / 115][Stage 22:===========================================>          (92 + 23) / 115][Stage 22:===============================================>     (103 + 12) / 115][Stage 22:==================================================>   (107 + 8) / 115][Stage 22:===================================================>  (110 + 5) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:====================================>                 (78 + 38) / 116][Stage 23:===========================================>          (93 + 23) / 116][Stage 23:=================================================>    (107 + 9) / 116][Stage 23:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.377061818 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501101159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==============================>                       (66 + 49) / 115][Stage 24:======================================>               (81 + 34) / 115][Stage 24:=========================================>            (88 + 27) / 115][Stage 24:===========================================>          (93 + 22) / 115][Stage 24:=================================================>    (106 + 9) / 115]                                                                                [Stage 25:================================>                     (70 + 46) / 116][Stage 25:========================================>             (86 + 30) / 116][Stage 25:=============================================>       (100 + 16) / 116][Stage 25:==================================================>   (108 + 8) / 116][Stage 25:===================================================>  (111 + 5) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.638184553 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449934474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:======================================>               (83 + 32) / 115][Stage 26:==========================================>           (90 + 25) / 115][Stage 26:===============================================>     (104 + 11) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:=====================================>                (80 + 36) / 116][Stage 27:=========================================>            (89 + 27) / 116][Stage 27:==================================================>   (108 + 8) / 116][Stage 27:====================================================> (113 + 3) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.13399884 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=237", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=237,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.536107048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 59) / 120][Stage 28:==============================>                       (67 + 53) / 120][Stage 28:======================================>               (85 + 35) / 120][Stage 28:===============================================>     (108 + 12) / 120][Stage 28:===================================================>  (115 + 5) / 120][Stage 28:=====================================================>(118 + 2) / 120][Stage 28:======================================================(120 + 0) / 120]                                                                                [Stage 29:==========================>                           (59 + 62) / 121][Stage 29:=============================>                        (66 + 55) / 121][Stage 29:=====================================>                (84 + 37) / 121][Stage 29:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.552398327 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=200", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=200,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486739381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=======================================>              (82 + 31) / 113][Stage 30:===========================================>          (92 + 21) / 113][Stage 30:===============================================>     (101 + 12) / 113][Stage 30:==================================================>   (106 + 7) / 113][Stage 30:===================================================>  (108 + 5) / 113]                                                                                [Stage 31:========================================>             (85 + 29) / 114][Stage 31:=============================================>        (97 + 17) / 114][Stage 31:===============================================>     (103 + 11) / 114][Stage 31:===================================================>  (108 + 6) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:====================================================> (111 + 3) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.687855782 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=94", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=94,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.553862348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:============================>                         (59 + 54) / 113][Stage 32:==============================>                       (64 + 49) / 113][Stage 32:=========================================>            (87 + 26) / 113][Stage 32:===============================================>     (102 + 11) / 113][Stage 32:==================================================>   (106 + 7) / 113][Stage 32:====================================================> (109 + 4) / 113]                                                                                [Stage 33:==============================>                       (64 + 50) / 114][Stage 33:=====================================>                (79 + 35) / 114][Stage 33:============================================>         (94 + 20) / 114][Stage 33:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.344721929 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=234", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=234,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48685799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:====================================>                 (77 + 36) / 113][Stage 34:==============================================>       (97 + 16) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:============================>                         (60 + 54) / 114][Stage 35:=============================>                        (63 + 51) / 114][Stage 35:=====================================>                (80 + 34) / 114][Stage 35:===============================================>     (102 + 12) / 114][Stage 35:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.134719773 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413701734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=====================================>                (80 + 35) / 115][Stage 36:=========================================>            (88 + 27) / 115][Stage 36:===============================================>     (103 + 12) / 115][Stage 36:=====================================================>(113 + 2) / 115]                                                                                [Stage 37:======================================>               (82 + 34) / 116][Stage 37:========================================>             (86 + 30) / 116][Stage 37:================================================>    (106 + 10) / 116][Stage 37:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.665997132 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=111", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=111,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476208443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:============================>                         (60 + 53) / 113][Stage 38:==================================>                   (73 + 40) / 113][Stage 38:===============================================>      (99 + 14) / 113][Stage 38:====================================================> (110 + 3) / 113]                                                                                [Stage 39:============================>                         (60 + 54) / 114][Stage 39:==================================>                   (72 + 42) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.129173645 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=4", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=4,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444374304 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==================================>                   (72 + 41) / 113][Stage 40:========================================>             (85 + 28) / 113][Stage 40:============================================>         (94 + 19) / 113][Stage 40:================================================>    (103 + 10) / 113][Stage 40:====================================================> (110 + 3) / 113][Stage 40:=====================================================>(112 + 1) / 113]                                                                                [Stage 41:=======================================>              (83 + 31) / 114][Stage 41:=============================================>        (96 + 18) / 114][Stage 41:================================================>    (104 + 10) / 114][Stage 41:===================================================>  (108 + 6) / 114][Stage 41:====================================================> (111 + 3) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.659874752 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=250", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=250 AND partitionZIndex<=250,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44035893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:======================================>               (80 + 33) / 113][Stage 42:===========================================>          (90 + 23) / 113][Stage 42:=================================================>    (104 + 9) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:=================================>                    (71 + 43) / 114][Stage 43:==========================================>           (90 + 24) / 114][Stage 43:==============================================>      (101 + 13) / 114][Stage 43:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.827577115 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=199", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=199,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454816466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=================================>                    (73 + 45) / 118][Stage 44:====================================>                 (80 + 38) / 118][Stage 44:===========================================>          (96 + 22) / 118][Stage 44:==================================================>   (111 + 7) / 118][Stage 44:===================================================>  (113 + 5) / 118]                                                                                [Stage 45:=================================>                    (74 + 45) / 119][Stage 45:=====================================>                (82 + 37) / 119][Stage 45:============================================>        (100 + 19) / 119][Stage 45:===================================================>  (114 + 5) / 119][Stage 45:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.539552475 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=248", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=248 AND partitionZIndex<=248,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456622289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=================================>                    (70 + 43) / 113][Stage 46:=========================================>            (87 + 26) / 113][Stage 46:============================================>         (93 + 20) / 113][Stage 46:=================================================>    (104 + 9) / 113][Stage 46:=====================================================>(111 + 2) / 113]                                                                                [Stage 47:=====================================>                (80 + 34) / 114][Stage 47:===========================================>          (91 + 23) / 114][Stage 47:===============================================>     (102 + 12) / 114][Stage 47:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.083493613 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=142", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=142,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421404691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (70 + 43) / 113][Stage 48:=======================================>              (83 + 30) / 113][Stage 48:============================================>         (94 + 19) / 113][Stage 48:==================================================>   (106 + 7) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:===================================>                  (74 + 40) / 114][Stage 49:========================================>             (85 + 29) / 114][Stage 49:==============================================>      (100 + 14) / 114][Stage 49:====================================================> (111 + 3) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.962117778 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=194", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=194,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48880716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:=============================>                        (65 + 55) / 120][Stage 50:==================================>                   (76 + 44) / 120][Stage 50:============================================>        (100 + 20) / 120][Stage 50:================================================>    (110 + 10) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:=============================>                        (67 + 54) / 121][Stage 51:====================================>                 (81 + 40) / 121][Stage 51:============================================>        (101 + 20) / 121][Stage 51:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.352440253 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439699609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (79 + 36) / 115][Stage 52:==============================================>       (98 + 17) / 115][Stage 52:===================================================>  (110 + 5) / 115]                                                                                [Stage 53:=================================>                    (73 + 43) / 116][Stage 53:==========================================>           (91 + 25) / 116][Stage 53:===============================================>     (103 + 13) / 116][Stage 53:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.74320919 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=213", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=213,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390213215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==================================>                   (72 + 41) / 113][Stage 54:========================================>             (84 + 29) / 113][Stage 54:============================================>         (93 + 20) / 113][Stage 54:==================================================>   (106 + 7) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:===================================>                  (74 + 40) / 114][Stage 55:========================================>             (86 + 28) / 114][Stage 55:==============================================>       (99 + 15) / 114][Stage 55:===================================================>  (108 + 6) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.974851862 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374073786 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (81 + 34) / 115][Stage 56:========================================>             (86 + 29) / 115][Stage 56:==================================================>   (107 + 8) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:=====================================>                (81 + 35) / 116][Stage 57:=======================================>              (85 + 31) / 116][Stage 57:===========================================>          (93 + 23) / 116][Stage 57:===============================================>     (105 + 11) / 116][Stage 57:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.78854269 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (82 + 33) / 115][Stage 58:============================================>         (95 + 20) / 115][Stage 58:==================================================>   (107 + 8) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:======================================>               (83 + 33) / 116][Stage 59:===========================================>          (93 + 23) / 116][Stage 59:===============================================>     (104 + 12) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.640454558 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=49", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=49,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (83 + 32) / 115][Stage 60:==========================================>           (91 + 24) / 115][Stage 60:=================================================>    (106 + 9) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:======================================>               (82 + 34) / 116][Stage 61:=========================================>            (90 + 26) / 116][Stage 61:===============================================>     (104 + 12) / 116][Stage 61:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.258953641 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=226", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=226,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (81 + 34) / 115][Stage 62:=========================================>            (88 + 27) / 115][Stage 62:===============================================>     (104 + 11) / 115][Stage 62:====================================================> (112 + 3) / 115]                                                                                [Stage 63:=======================================>              (84 + 32) / 116][Stage 63:===========================================>          (94 + 22) / 116][Stage 63:===============================================>     (103 + 13) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.597323937 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:======================================>               (82 + 33) / 115][Stage 64:==========================================>           (91 + 24) / 115][Stage 64:===================================================>  (109 + 6) / 115]                                                                                [Stage 65:========================================>             (86 + 30) / 116][Stage 65:============================================>         (95 + 21) / 116][Stage 65:===================================================>  (110 + 6) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.912324619 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=227", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=227,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4186662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:>                                                       (0 + 0) / 113][Stage 66:===================================>                  (75 + 38) / 113][Stage 66:========================================>             (85 + 28) / 113][Stage 66:==============================================>      (100 + 13) / 113][Stage 66:==================================================>   (106 + 7) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:==================================>                   (72 + 42) / 114][Stage 67:=========================================>            (87 + 27) / 114][Stage 67:==============================================>       (98 + 16) / 114][Stage 67:==================================================>   (106 + 8) / 114][Stage 67:====================================================> (110 + 4) / 114][Stage 67:====================================================> (111 + 3) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.397305316 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=83", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=83,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=================================>                    (70 + 43) / 113][Stage 68:=======================================>              (83 + 30) / 113][Stage 68:============================================>         (94 + 19) / 113][Stage 68:=================================================>    (104 + 9) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:=========================================>            (87 + 27) / 114][Stage 69:=============================================>        (96 + 18) / 114][Stage 69:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.767005444 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=152", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=152,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45925925 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (58 + 55) / 113][Stage 70:=============================>                        (61 + 52) / 113][Stage 70:=================================>                    (71 + 42) / 113][Stage 70:========================================>             (84 + 29) / 113][Stage 70:==================================================>   (105 + 8) / 113][Stage 70:====================================================> (110 + 3) / 113]                                                                                [Stage 71:=============================>                        (63 + 51) / 114][Stage 71:=====================================>                (79 + 35) / 114][Stage 71:=============================================>        (96 + 18) / 114]                                                                                Time elapsed: 3.130255056 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481991204 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 59) / 120][Stage 72:================================>                     (72 + 48) / 120][Stage 72:======================================>               (86 + 34) / 120][Stage 72:===============================================>     (107 + 13) / 120][Stage 72:=====================================================>(118 + 2) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:============================>                         (63 + 58) / 121][Stage 73:=======================================>              (88 + 33) / 121][Stage 73:==================================================>   (114 + 7) / 121][Stage 73:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.134393259 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430637769 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:============================>                         (59 + 54) / 113][Stage 74:===============================>                      (65 + 48) / 113][Stage 74:==================================>                   (72 + 41) / 113][Stage 74:=========================================>            (86 + 27) / 113][Stage 74:=================================================>    (104 + 9) / 113][Stage 74:=====================================================>(111 + 2) / 113]                                                                                [Stage 75:===========================>                          (59 + 55) / 114][Stage 75:=============================>                        (63 + 51) / 114][Stage 75:====================================>                 (77 + 37) / 114][Stage 75:============================================>         (94 + 20) / 114][Stage 75:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.125441628 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=29", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=29,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (58 + 55) / 113][Stage 76:==============================>                       (63 + 50) / 113][Stage 76:===================================>                  (75 + 38) / 113][Stage 76:==========================================>           (88 + 25) / 113][Stage 76:====================================================> (110 + 3) / 113]                                                                                [Stage 77:============================>                         (60 + 54) / 114][Stage 77:==============================>                       (65 + 49) / 114][Stage 77:========================================>             (85 + 29) / 114][Stage 77:==============================================>       (99 + 15) / 114][Stage 77:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.99903806 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=172", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=172,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459892724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (61 + 59) / 120][Stage 78:===============================>                      (70 + 50) / 120][Stage 78:===========================================>          (97 + 23) / 120][Stage 78:===================================================>  (114 + 6) / 120]                                                                                [Stage 79:===========================>                          (62 + 59) / 121][Stage 79:===============================>                      (71 + 50) / 121][Stage 79:=========================================>            (94 + 27) / 121][Stage 79:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.039523447 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=53", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=53,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395088092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:=================================>                    (73 + 45) / 118][Stage 80:=====================================>                (82 + 36) / 118][Stage 80:============================================>         (98 + 20) / 118][Stage 80:================================================>    (108 + 10) / 118][Stage 80:====================================================> (114 + 4) / 118][Stage 80:=====================================================>(117 + 1) / 118]                                                                                [Stage 81:=================================>                    (73 + 46) / 119][Stage 81:===================================>                  (79 + 40) / 119][Stage 81:=========================================>            (91 + 28) / 119][Stage 81:==============================================>      (105 + 14) / 119][Stage 81:===================================================>  (114 + 5) / 119][Stage 81:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.5560178 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=47", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=47,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458617932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:============================>                         (59 + 54) / 113][Stage 82:===================================>                  (74 + 39) / 113][Stage 82:=========================================>            (86 + 27) / 113][Stage 82:===============================================>     (102 + 11) / 113][Stage 82:=====================================================>(112 + 1) / 113]                                                                                [Stage 83:===========================>                          (59 + 55) / 114][Stage 83:==============================>                       (65 + 49) / 114][Stage 83:=====================================>                (79 + 35) / 114][Stage 83:==============================================>      (101 + 13) / 114][Stage 83:====================================================> (110 + 4) / 114][Stage 83:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.380815293 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=163", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=163,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422971469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (72 + 46) / 118][Stage 84:===================================>                  (78 + 40) / 118][Stage 84:=======================================>              (87 + 31) / 118][Stage 84:===========================================>          (96 + 22) / 118][Stage 84:================================================>    (108 + 10) / 118][Stage 84:=====================================================>(116 + 2) / 118][Stage 84:=====================================================>(117 + 1) / 118]                                                                                [Stage 85:=================================>                    (73 + 46) / 119][Stage 85:===================================>                  (79 + 40) / 119][Stage 85:=========================================>            (92 + 27) / 119][Stage 85:================================================>    (109 + 10) / 119][Stage 85:===================================================>  (113 + 6) / 119][Stage 85:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.569483554 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=78", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=78,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380556667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (82 + 33) / 115][Stage 86:==============================================>       (99 + 16) / 115][Stage 86:===================================================>  (110 + 5) / 115]                                                                                [Stage 87:========================================>             (86 + 30) / 116][Stage 87:============================================>         (96 + 20) / 116][Stage 87:===================================================>  (110 + 6) / 116][Stage 87:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.820844101 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=21", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=21,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389226227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=================================>                    (71 + 42) / 113][Stage 88:====================================>                 (77 + 36) / 113][Stage 88:===========================================>          (92 + 21) / 113][Stage 88:================================================>    (103 + 10) / 113][Stage 88:=====================================================>(111 + 2) / 113]                                                                                [Stage 89:====================================>                 (78 + 36) / 114][Stage 89:=========================================>            (88 + 26) / 114][Stage 89:=============================================>        (95 + 19) / 114][Stage 89:==================================================>   (106 + 8) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.070380377 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372782415 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:======================================>               (82 + 33) / 115][Stage 90:=========================================>            (89 + 26) / 115][Stage 90:===============================================>     (103 + 12) / 115][Stage 90:=====================================================>(114 + 1) / 115]                                                                                [Stage 91:======================================>               (82 + 34) / 116][Stage 91:==========================================>           (92 + 24) / 116][Stage 91:===============================================>     (103 + 13) / 116][Stage 91:====================================================> (113 + 3) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.73806211 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=======================================>              (84 + 31) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:==================================================>   (107 + 8) / 115]                                                                                [Stage 93:=======================================>              (85 + 31) / 116][Stage 93:============================================>         (95 + 21) / 116][Stage 93:===============================================>     (105 + 11) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.575221301 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43430686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:===============================>                      (65 + 48) / 113][Stage 94:=====================================>                (79 + 34) / 113][Stage 94:===============================================>      (99 + 14) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:============================>                         (60 + 54) / 114][Stage 95:==============================>                       (65 + 49) / 114][Stage 95:=========================================>            (88 + 26) / 114][Stage 95:===============================================>     (103 + 11) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.948647141 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395711555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (79 + 34) / 113][Stage 96:==========================================>           (88 + 25) / 113][Stage 96:===============================================>     (101 + 12) / 113][Stage 96:====================================================> (109 + 4) / 113]                                                                                [Stage 97:=====================================>                (80 + 34) / 114][Stage 97:===========================================>          (91 + 23) / 114][Stage 97:===============================================>     (102 + 12) / 114][Stage 97:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.075508104 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=198", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=198,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375811084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=======================================>              (83 + 30) / 113][Stage 98:===========================================>          (91 + 22) / 113][Stage 98:===============================================>     (102 + 11) / 113][Stage 98:=====================================================>(111 + 2) / 113]                                                                                [Stage 99:===================================>                  (74 + 40) / 114][Stage 99:========================================>             (85 + 29) / 114][Stage 99:============================================>         (93 + 21) / 114][Stage 99:==================================================>   (106 + 8) / 114][Stage 99:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.918914454 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=105", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=105,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421158373 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 59) / 120][Stage 100:================================>                    (73 + 47) / 120][Stage 100:=====================================>               (86 + 34) / 120][Stage 100:============================================>       (102 + 18) / 120][Stage 100:===================================================> (116 + 4) / 120][Stage 100:====================================================>(119 + 1) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:=============================>                       (67 + 54) / 121][Stage 101:===================================>                 (81 + 40) / 121][Stage 101:===============================================>    (110 + 11) / 121][Stage 101:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.505315042 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=252", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=252 AND partitionZIndex<=252,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.517750489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:=================================>                   (74 + 44) / 118][Stage 102:======================================>              (85 + 33) / 118][Stage 102:============================================>       (100 + 18) / 118][Stage 102:===================================================> (114 + 4) / 118]                                                                                [Stage 103:=================================>                   (75 + 44) / 119][Stage 103:======================================>              (86 + 33) / 119][Stage 103:=============================================>      (103 + 16) / 119][Stage 103:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.103836646 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=64", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=64,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436394636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (61 + 59) / 120][Stage 104:=================================>                   (76 + 44) / 120][Stage 104:========================================>            (91 + 29) / 120][Stage 104:=================================================>   (113 + 7) / 120][Stage 104:====================================================>(118 + 2) / 120]                                                                                [Stage 105:===========================>                         (62 + 59) / 121][Stage 105:============================>                        (66 + 55) / 121][Stage 105:========================================>            (92 + 29) / 121][Stage 105:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.034038829 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=220", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=220,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364497999 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=====================================>               (81 + 34) / 115][Stage 106:=========================================>           (89 + 26) / 115][Stage 106:==============================================>     (102 + 13) / 115][Stage 106:===================================================> (112 + 3) / 115]                                                                                [Stage 107:=======================================>             (87 + 29) / 116][Stage 107:===========================================>         (96 + 20) / 116][Stage 107:==================================================>  (110 + 6) / 116][Stage 107:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.745501029 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386952596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=======================================>             (84 + 29) / 113][Stage 108:=============================================>       (97 + 16) / 113][Stage 108:===============================================>    (103 + 10) / 113][Stage 108:===================================================> (110 + 3) / 113]                                                                                [Stage 109:===================================>                 (76 + 38) / 114][Stage 109:========================================>            (88 + 26) / 114][Stage 109:=============================================>       (97 + 17) / 114][Stage 109:=================================================>   (106 + 8) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.969572969 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427688948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:===========================>                         (62 + 58) / 120][Stage 110:====================================>                (82 + 38) / 120][Stage 110:============================================>       (103 + 17) / 120][Stage 110:====================================================>(119 + 1) / 120]                                                                                [Stage 111:============================>                        (65 + 56) / 121][Stage 111:====================================>                (84 + 37) / 121][Stage 111:=============================================>      (106 + 15) / 121][Stage 111:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.97293741 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=7", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=7,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415704314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:==============================>                      (70 + 50) / 120][Stage 112:=======================================>             (90 + 30) / 120][Stage 112:=================================================>   (111 + 9) / 120]                                                                                [Stage 113:===========================>                         (62 + 59) / 121][Stage 113:==============================>                      (69 + 52) / 121][Stage 113:======================================>              (87 + 34) / 121][Stage 113:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 2.93779232 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377996087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=================================>                   (72 + 41) / 113][Stage 114:=======================================>             (85 + 28) / 113][Stage 114:==============================================>      (99 + 14) / 113][Stage 114:==================================================>  (107 + 6) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:======================================>              (82 + 32) / 114][Stage 115:============================================>        (95 + 19) / 114][Stage 115:=================================================>   (107 + 7) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.898510791 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=73", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=73,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407248122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (59 + 54) / 113][Stage 116:============================>                        (61 + 52) / 113][Stage 116:=====================================>               (79 + 34) / 113][Stage 116:===============================================>    (103 + 10) / 113][Stage 116:====================================================>(111 + 2) / 113]                                                                                [Stage 117:===========================>                         (59 + 55) / 114][Stage 117:============================>                        (62 + 52) / 114][Stage 117:=====================================>               (80 + 34) / 114][Stage 117:==============================================>     (101 + 13) / 114][Stage 117:====================================================>(112 + 2) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.157900891 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=247", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=247,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404122985 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:============================>                        (60 + 53) / 113][Stage 118:===============================>                     (67 + 46) / 113][Stage 118:========================================>            (87 + 26) / 113][Stage 118:=================================================>   (106 + 7) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:==============================>                      (66 + 48) / 114][Stage 119:========================================>            (87 + 27) / 114][Stage 119:===============================================>    (104 + 10) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.085223791 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404033969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:============================>                        (61 + 52) / 113][Stage 120:================================>                    (69 + 44) / 113][Stage 120:==========================================>          (91 + 22) / 113][Stage 120:===================================================> (110 + 3) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:================================>                    (70 + 44) / 114][Stage 121:======================================>              (82 + 32) / 114][Stage 121:============================================>        (95 + 19) / 114]                                                                                Time elapsed: 3.012140089 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369687219 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (72 + 41) / 113][Stage 122:=======================================>             (84 + 29) / 113][Stage 122:============================================>        (94 + 19) / 113][Stage 122:===============================================>    (103 + 10) / 113][Stage 122:====================================================>(111 + 2) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:=======================================>             (85 + 29) / 114][Stage 123:==========================================>          (91 + 23) / 114][Stage 123:================================================>    (105 + 9) / 114][Stage 123:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.283659813 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=166", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=166,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397185296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (68 + 47) / 115][Stage 124:=======================================>             (85 + 30) / 115][Stage 124:=============================================>      (100 + 15) / 115][Stage 124:===================================================> (111 + 4) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:===============================>                     (70 + 46) / 116][Stage 125:=======================================>             (87 + 29) / 116][Stage 125:============================================>        (97 + 19) / 116][Stage 125:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.922499472 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=235", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=235,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422629254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (58 + 55) / 113][Stage 126:============================>                        (61 + 52) / 113][Stage 126:====================================>                (78 + 35) / 113][Stage 126:=============================================>       (97 + 16) / 113][Stage 126:===================================================> (110 + 3) / 113]                                                                                [Stage 127:============================>                        (62 + 52) / 114][Stage 127:====================================>                (78 + 36) / 114][Stage 127:=============================================>       (97 + 17) / 114][Stage 127:=================================================>   (106 + 8) / 114][Stage 127:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.157372387 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429407075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 59) / 120][Stage 128:============================>                        (65 + 55) / 120][Stage 128:====================================>                (83 + 37) / 120][Stage 128:============================================>       (102 + 18) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:=============================>                       (68 + 53) / 121][Stage 129:==========================================>          (97 + 24) / 121][Stage 129:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 2.989398282 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366074631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=================================>                   (72 + 41) / 113][Stage 130:=======================================>             (85 + 28) / 113][Stage 130:==============================================>     (101 + 12) / 113][Stage 130:=================================================>   (105 + 8) / 113]                                                                                [Stage 131:====================================>                (78 + 36) / 114][Stage 131:============================================>        (96 + 18) / 114][Stage 131:=================================================>   (107 + 7) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.860710787 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412391645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:==============================>                      (68 + 52) / 120][Stage 132:========================================>            (92 + 28) / 120][Stage 132:==================================================>  (115 + 5) / 120]                                                                                [Stage 133:===========================>                         (62 + 59) / 121][Stage 133:==================================>                  (78 + 43) / 121][Stage 133:============================================>       (104 + 17) / 121][Stage 133:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.044371096 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=135", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=135,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409423909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:===========================>                         (63 + 57) / 120][Stage 134:==================================>                  (77 + 43) / 120][Stage 134:=========================================>           (94 + 26) / 120][Stage 134:==================================================>  (115 + 5) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:============================>                        (65 + 56) / 121][Stage 135:====================================>                (83 + 38) / 121][Stage 135:=============================================>      (106 + 15) / 121][Stage 135:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.119040465 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351944722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (72 + 41) / 113][Stage 136:=======================================>             (84 + 29) / 113][Stage 136:=============================================>       (97 + 16) / 113][Stage 136:=================================================>   (105 + 8) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:=======================================>             (86 + 28) / 114][Stage 137:==============================================>      (99 + 15) / 114][Stage 137:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.735646749 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359996442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=================================>                   (72 + 41) / 113][Stage 138:=========================================>           (88 + 25) / 113][Stage 138:============================================>        (95 + 18) / 113][Stage 138:==================================================>  (108 + 5) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:====================================>                (78 + 36) / 114][Stage 139:=========================================>           (90 + 24) / 114][Stage 139:==============================================>      (99 + 15) / 114][Stage 139:===================================================> (110 + 4) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.003797906 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38559408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (58 + 55) / 113][Stage 140:============================>                        (61 + 52) / 113][Stage 140:======================================>              (82 + 31) / 113][Stage 140:==============================================>     (102 + 11) / 113][Stage 140:====================================================>(111 + 2) / 113]                                                                                [Stage 141:==============================>                      (65 + 49) / 114][Stage 141:====================================>                (79 + 35) / 114][Stage 141:==============================================>     (102 + 12) / 114]                                                                                Time elapsed: 2.962684514 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=240", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=240,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362544287 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===================================>                 (75 + 38) / 113][Stage 142:=======================================>             (84 + 29) / 113][Stage 142:============================================>        (95 + 18) / 113][Stage 142:==================================================>  (107 + 6) / 113]                                                                                [Stage 143:=====================================>               (80 + 34) / 114][Stage 143:=========================================>           (90 + 24) / 114][Stage 143:============================================>        (95 + 19) / 114][Stage 143:================================================>    (105 + 9) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.93078858 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382980406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (58 + 55) / 113][Stage 144:==============================>                      (64 + 49) / 113][Stage 144:===================================>                 (76 + 37) / 113][Stage 144:==============================================>      (99 + 14) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:=============================>                       (63 + 51) / 114][Stage 145:==================================>                  (75 + 39) / 114][Stage 145:============================================>        (96 + 18) / 114][Stage 145:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.012479829 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=33,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38374869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===============================>                     (68 + 47) / 115][Stage 146:====================================>                (79 + 36) / 115][Stage 146:============================================>        (97 + 18) / 115][Stage 146:===================================================> (112 + 3) / 115]                                                                                [Stage 147:====================================>                (80 + 36) / 116][Stage 147:==========================================>          (94 + 22) / 116][Stage 147:=================================================>   (109 + 7) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.133431635 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39692499 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 60) / 120][Stage 148:===========================>                         (63 + 57) / 120][Stage 148:=================================>                   (76 + 44) / 120][Stage 148:===========================================>         (98 + 22) / 120][Stage 148:===============================================>    (109 + 11) / 120]                                                                                [Stage 149:===========================>                         (62 + 59) / 121][Stage 149:==================================>                  (79 + 42) / 121][Stage 149:============================================>       (104 + 17) / 121][Stage 149:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.120414319 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:=============================>                       (67 + 53) / 120][Stage 150:======================================>              (88 + 32) / 120][Stage 150:=================================================>   (111 + 9) / 120][Stage 150:====================================================>(119 + 1) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:=============================>                       (68 + 53) / 121][Stage 151:=======================================>             (91 + 30) / 121][Stage 151:=============================================>      (107 + 14) / 121]                                                                                Time elapsed: 2.980894637 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344535002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=====================================>               (82 + 33) / 115][Stage 152:=========================================>           (91 + 24) / 115][Stage 152:=================================================>   (107 + 8) / 115][Stage 152:====================================================>(113 + 2) / 115]                                                                                [Stage 153:=====================================>               (82 + 34) / 116][Stage 153:=======================================>             (87 + 29) / 116][Stage 153:================================================>    (107 + 9) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.680083251 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=112", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=112,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355174123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:======================================>              (82 + 31) / 113][Stage 154:==========================================>          (91 + 22) / 113][Stage 154:==============================================>     (101 + 12) / 113][Stage 154:===================================================> (110 + 3) / 113]                                                                                [Stage 155:=====================================>               (81 + 33) / 114][Stage 155:============================================>        (96 + 18) / 114][Stage 155:=================================================>   (106 + 8) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.821870474 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=57", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=57,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===================================>                 (75 + 38) / 113][Stage 156:========================================>            (87 + 26) / 113][Stage 156:=============================================>       (96 + 17) / 113][Stage 156:===================================================> (110 + 3) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:======================================>              (83 + 31) / 114][Stage 157:===========================================>         (94 + 20) / 114][Stage 157:================================================>    (105 + 9) / 114][Stage 157:===================================================> (110 + 4) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.831383941 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=30,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406385323 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (61 + 59) / 120][Stage 158:============================>                        (65 + 55) / 120][Stage 158:=====================================>               (84 + 36) / 120][Stage 158:===========================================>        (101 + 19) / 120][Stage 158:====================================================>(119 + 1) / 120]                                                                                [Stage 159:==========================>                          (61 + 60) / 121][Stage 159:===============================>                     (71 + 50) / 121][Stage 159:====================================>                (84 + 37) / 121][Stage 159:============================================>       (103 + 18) / 121][Stage 159:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.066270157 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=251", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=251 AND partitionZIndex<=251,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367397009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 46) / 118][Stage 160:==================================>                  (77 + 41) / 118][Stage 160:========================================>            (90 + 28) / 118][Stage 160:=============================================>      (103 + 15) / 118][Stage 160:===================================================> (115 + 3) / 118]                                                                                [Stage 161:================================>                    (74 + 45) / 119][Stage 161:====================================>                (81 + 38) / 119][Stage 161:========================================>            (92 + 27) / 119][Stage 161:=============================================>      (104 + 15) / 119][Stage 161:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.088395477 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41257989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (63 + 57) / 120][Stage 162:==================================>                  (77 + 43) / 120][Stage 162:=============================================>      (104 + 16) / 120][Stage 162:====================================================>(118 + 2) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:================================>                    (75 + 46) / 121][Stage 163:=====================================>               (86 + 35) / 121][Stage 163:===============================================>    (110 + 11) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.874365154 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=203", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=203,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375238555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===============================>                     (69 + 46) / 115][Stage 164:======================================>              (83 + 32) / 115][Stage 164:============================================>        (97 + 18) / 115][Stage 164:=================================================>   (108 + 7) / 115][Stage 164:==================================================>  (110 + 5) / 115]                                                                                [Stage 165:=================================>                   (74 + 42) / 116][Stage 165:===========================================>         (96 + 20) / 116][Stage 165:==================================================>  (110 + 6) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.966906708 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=60", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=60,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390838016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=============================>                       (63 + 50) / 113][Stage 166:===================================>                 (75 + 38) / 113][Stage 166:============================================>        (94 + 19) / 113][Stage 166:===================================================> (110 + 3) / 113]                                                                                [Stage 167:===========================>                         (60 + 54) / 114][Stage 167:===============================>                     (67 + 47) / 114][Stage 167:=====================================>               (80 + 34) / 114][Stage 167:================================================>    (105 + 9) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.962266749 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=239", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=239,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399743658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (60 + 60) / 120][Stage 168:==============================>                      (69 + 51) / 120][Stage 168:======================================>              (87 + 33) / 120][Stage 168:===============================================>    (110 + 10) / 120]                                                                                [Stage 169:==========================>                          (61 + 60) / 121][Stage 169:==============================>                      (69 + 52) / 121][Stage 169:=====================================>               (86 + 35) / 121][Stage 169:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.913087451 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=143", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=143,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401523521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (62 + 58) / 120][Stage 170:===============================>                     (71 + 49) / 120][Stage 170:=========================================>           (94 + 26) / 120][Stage 170:===================================================> (117 + 3) / 120]                                                                                [Stage 171:===========================>                         (63 + 58) / 121][Stage 171:=================================>                   (76 + 45) / 121][Stage 171:===========================================>        (101 + 20) / 121][Stage 171:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.008942367 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399019284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (60 + 60) / 120][Stage 172:==============================>                      (68 + 52) / 120][Stage 172:==================================>                  (79 + 41) / 120][Stage 172:==================================================>  (114 + 6) / 120]                                                                                [Stage 173:==========================>                          (61 + 60) / 121][Stage 173:==============================>                      (70 + 51) / 121][Stage 173:===========================================>        (101 + 20) / 121][Stage 173:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.809840556 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=86", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=86,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417982466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 60) / 120][Stage 174:==============================>                      (69 + 51) / 120][Stage 174:=====================================>               (84 + 36) / 120][Stage 174:===============================================>    (109 + 11) / 120]                                                                                [Stage 175:==========================>                          (61 + 60) / 121][Stage 175:===============================>                     (73 + 48) / 121][Stage 175:=========================================>           (95 + 26) / 121][Stage 175:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.861993833 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=114", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=114,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38330111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (74 + 41) / 115][Stage 176:========================================>            (88 + 27) / 115][Stage 176:=================================================>   (107 + 8) / 115]                                                                                [Stage 177:=================================>                   (74 + 42) / 116][Stage 177:========================================>            (88 + 28) / 116][Stage 177:=============================================>      (101 + 15) / 116][Stage 177:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.712947436 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381168592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:============================>                        (60 + 53) / 113][Stage 178:================================>                    (69 + 44) / 113][Stage 178:========================================>            (86 + 27) / 113][Stage 178:==============================================>     (100 + 13) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:===========================>                         (59 + 55) / 114][Stage 179:==============================>                      (65 + 49) / 114][Stage 179:======================================>              (83 + 31) / 114][Stage 179:=============================================>      (100 + 14) / 114][Stage 179:==================================================>  (109 + 5) / 114][Stage 179:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.296055965 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405490035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:=============================>                       (66 + 54) / 120][Stage 180:==================================>                  (77 + 43) / 120][Stage 180:===========================================>        (101 + 19) / 120][Stage 180:===================================================> (117 + 3) / 120]                                                                                [Stage 181:===========================>                         (63 + 58) / 121][Stage 181:=================================>                   (76 + 45) / 121][Stage 181:==============================================>     (108 + 13) / 121][Stage 181:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.067658971 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=44", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=44,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386333338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (59 + 54) / 113][Stage 182:==============================>                      (66 + 47) / 113][Stage 182:===================================>                 (75 + 38) / 113][Stage 182:===========================================>         (92 + 21) / 113][Stage 182:=================================================>   (105 + 8) / 113]                                                                                [Stage 183:============================>                        (62 + 52) / 114][Stage 183:===================================>                 (77 + 37) / 114][Stage 183:=============================================>       (98 + 16) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.170748673 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=63,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37324434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:==================================>                  (76 + 42) / 118][Stage 184:=======================================>             (89 + 29) / 118][Stage 184:============================================>       (102 + 16) / 118][Stage 184:===================================================> (115 + 3) / 118]                                                                                [Stage 185:=================================>                   (76 + 43) / 119][Stage 185:======================================>              (87 + 32) / 119][Stage 185:============================================>        (99 + 20) / 119][Stage 185:================================================>    (110 + 9) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.176085276 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402686623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:===========================>                         (63 + 57) / 120][Stage 186:=================================>                   (76 + 44) / 120][Stage 186:=============================================>      (104 + 16) / 120][Stage 186:====================================================>(118 + 2) / 120]                                                                                [Stage 187:============================>                        (66 + 55) / 121][Stage 187:===================================>                 (82 + 39) / 121][Stage 187:============================================>       (103 + 18) / 121][Stage 187:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.043535936 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383998027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:============================>                        (61 + 52) / 113][Stage 188:==================================>                  (74 + 39) / 113][Stage 188:==============================================>      (99 + 14) / 113][Stage 188:====================================================>(111 + 2) / 113]                                                                                [Stage 189:============================>                        (61 + 53) / 114][Stage 189:==================================>                  (75 + 39) / 114][Stage 189:==========================================>          (92 + 22) / 114][Stage 189:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.005973797 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=236,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345698028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (81 + 34) / 115][Stage 190:============================================>        (96 + 19) / 115][Stage 190:==================================================>  (109 + 6) / 115]                                                                                [Stage 191:======================================>              (84 + 32) / 116][Stage 191:=============================================>       (99 + 17) / 116][Stage 191:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.534436844 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=80", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=80,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387741291 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:=============================>                       (62 + 51) / 113][Stage 192:==================================>                  (73 + 40) / 113][Stage 192:==========================================>          (90 + 23) / 113][Stage 192:===================================================> (110 + 3) / 113]                                                                                [Stage 193:===========================>                         (59 + 55) / 114][Stage 193:==============================>                      (65 + 49) / 114][Stage 193:=========================================>           (90 + 24) / 114][Stage 193:==============================================>     (103 + 11) / 114][Stage 193:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.960645695 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=238", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=238,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383308934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:============================>                        (61 + 52) / 113][Stage 194:=================================>                   (71 + 42) / 113][Stage 194:===========================================>         (93 + 20) / 113][Stage 194:==================================================>  (108 + 5) / 113]                                                                                [Stage 195:============================>                        (62 + 52) / 114][Stage 195:================================>                    (70 + 44) / 114][Stage 195:========================================>            (88 + 26) / 114][Stage 195:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.026202457 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=193", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=193,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376165016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===============================>                     (69 + 46) / 115][Stage 196:=====================================>               (81 + 34) / 115][Stage 196:===========================================>         (95 + 20) / 115][Stage 196:==================================================>  (109 + 6) / 115]                                                                                [Stage 197:===================================>                 (77 + 39) / 116][Stage 197:==========================================>          (94 + 22) / 116][Stage 197:=================================================>   (109 + 7) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.870486631 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396048059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (71 + 44) / 115][Stage 198:======================================>              (84 + 31) / 115][Stage 198:==============================================>     (103 + 12) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:===============================>                     (70 + 46) / 116][Stage 199:===================================>                 (77 + 39) / 116][Stage 199:===========================================>         (95 + 21) / 116][Stage 199:=================================================>   (108 + 8) / 116][Stage 199:====================================================>(114 + 2) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.066741581 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=113,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376922461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (58 + 55) / 113][Stage 200:==============================>                      (65 + 48) / 113][Stage 200:======================================>              (82 + 31) / 113][Stage 200:==============================================>      (99 + 14) / 113]                                                                                [Stage 201:===========================>                         (59 + 55) / 114][Stage 201:=============================>                       (64 + 50) / 114][Stage 201:=======================================>             (85 + 29) / 114][Stage 201:==============================================>      (99 + 15) / 114][Stage 201:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.069969202 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/31 22:32:09 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:37154) dropped. RpcEnv already stopped.
17/05/31 22:32:09 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:37154) dropped. RpcEnv already stopped.

real	9m47.613s
user	11m28.020s
sys	0m28.364s
