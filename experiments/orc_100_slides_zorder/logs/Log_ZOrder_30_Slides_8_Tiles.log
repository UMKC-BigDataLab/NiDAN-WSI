Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 00:17:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:17:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:17:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:17:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 00:17:42 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 00:17:53 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601001742-0730).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.39608891 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=========================>                             (53 + 62) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:=============================>                         (62 + 54) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.404613895 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.724349058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:========================>                              (51 + 62) / 113][Stage 2:===========================>                           (56 + 57) / 113][Stage 2:================================>                      (66 + 47) / 113][Stage 2:==================================>                    (70 + 43) / 113][Stage 2:====================================>                  (76 + 37) / 113][Stage 2:========================================>              (83 + 30) / 113][Stage 2:============================================>          (92 + 21) / 113][Stage 2:==============================================>        (96 + 17) / 113][Stage 2:================================================>     (102 + 11) / 113][Stage 2:=====================================================> (110 + 3) / 113]                                                                                [Stage 3:==================================>                    (71 + 43) / 114][Stage 3:====================================>                  (75 + 39) / 114][Stage 3:======================================>                (79 + 35) / 114][Stage 3:===========================================>           (90 + 24) / 114][Stage 3:=============================================>         (95 + 19) / 114][Stage 3:=================================================>    (104 + 10) / 114][Stage 3:====================================================>  (109 + 5) / 114][Stage 3:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 5.037339499 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.737717852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (56 + 57) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:=================================>                     (68 + 45) / 113][Stage 4:===================================>                   (72 + 41) / 113][Stage 4:======================================>                (80 + 33) / 113][Stage 4:============================================>          (92 + 21) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:====================================================>  (108 + 5) / 113][Stage 4:=====================================================> (109 + 4) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:==============================>                        (63 + 51) / 114][Stage 5:===================================>                   (73 + 41) / 114][Stage 5:========================================>              (83 + 31) / 114][Stage 5:===============================================>       (99 + 15) / 114][Stage 5:====================================================>  (109 + 5) / 114][Stage 5:======================================================>(112 + 2) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.59058615 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563078614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:=============================================>         (96 + 19) / 115][Stage 6:==================================================>    (106 + 9) / 115][Stage 6:====================================================>  (110 + 5) / 115][Stage 6:======================================================>(113 + 2) / 115]                                                                                [Stage 7:=====================================>                 (80 + 36) / 116][Stage 7:========================================>              (86 + 30) / 116][Stage 7:============================================>          (94 + 22) / 116][Stage 7:================================================>     (104 + 12) / 116][Stage 7:====================================================>  (110 + 6) / 116][Stage 7:====================================================>  (111 + 5) / 116]                                                                                Time elapsed: 4.183829 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.59951758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (58 + 55) / 113][Stage 8:=============================>                         (60 + 53) / 113][Stage 8:=================================>                     (68 + 45) / 113][Stage 8:========================================>              (84 + 29) / 113][Stage 8:=============================================>         (94 + 19) / 113][Stage 8:================================================>     (101 + 12) / 113][Stage 8:===================================================>   (105 + 8) / 113]                                                                                [Stage 9:============================>                          (59 + 55) / 114][Stage 9:===============================>                       (66 + 48) / 114][Stage 9:======================================>                (80 + 34) / 114][Stage 9:===========================================>           (91 + 23) / 114][Stage 9:===============================================>       (98 + 16) / 114][Stage 9:================================================>     (102 + 12) / 114][Stage 9:====================================================>  (109 + 5) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.151277021 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.553206976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (58 + 55) / 113][Stage 10:=============================>                        (61 + 52) / 113][Stage 10:=================================>                    (70 + 43) / 113][Stage 10:======================================>               (81 + 32) / 113][Stage 10:=============================================>        (95 + 18) / 113][Stage 10:===================================================>  (108 + 5) / 113][Stage 10:=====================================================>(111 + 2) / 113]                                                                                [Stage 11:============================>                         (60 + 54) / 114][Stage 11:==================================>                   (72 + 42) / 114][Stage 11:=============================================>        (95 + 19) / 114][Stage 11:=================================================>    (105 + 9) / 114][Stage 11:=====================================================>(112 + 2) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.62413398 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=85", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=85,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.61187741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (59 + 61) / 120][Stage 12:===========================>                          (60 + 60) / 120][Stage 12:===============================>                      (70 + 50) / 120][Stage 12:======================================>               (86 + 34) / 120][Stage 12:============================================>         (99 + 21) / 120][Stage 12:==================================================>   (113 + 7) / 120][Stage 12:=====================================================>(119 + 1) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:=============================>                        (66 + 55) / 121][Stage 13:===================================>                  (80 + 41) / 121][Stage 13:=============================================>       (103 + 18) / 121][Stage 13:==================================================>   (114 + 7) / 121][Stage 13:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.401098193 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547086833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (60 + 60) / 120][Stage 14:===========================>                          (61 + 59) / 120][Stage 14:==============================>                       (68 + 52) / 120][Stage 14:========================================>             (91 + 29) / 120][Stage 14:==============================================>      (105 + 15) / 120][Stage 14:===================================================>  (114 + 6) / 120][Stage 14:=====================================================>(118 + 2) / 120]                                                                                [Stage 15:===========================>                          (61 + 60) / 121][Stage 15:===========================>                          (62 + 59) / 121][Stage 15:================================>                     (72 + 49) / 121][Stage 15:============================================>         (99 + 22) / 121][Stage 15:===================================================>  (115 + 6) / 121][Stage 15:====================================================> (118 + 3) / 121][Stage 15:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.19946667 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504114127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:>                                                       (0 + 0) / 113][Stage 16:===================================>                  (74 + 39) / 113][Stage 16:=====================================>                (79 + 34) / 113][Stage 16:============================================>         (93 + 20) / 113][Stage 16:===============================================>     (101 + 12) / 113][Stage 16:=================================================>    (104 + 9) / 113][Stage 16:==================================================>   (105 + 8) / 113]                                                                                [Stage 17:===================================>                  (74 + 40) / 114][Stage 17:=========================================>            (87 + 27) / 114][Stage 17:=============================================>        (96 + 18) / 114][Stage 17:===============================================>     (103 + 11) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.735956892 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.54325353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:============================>                         (64 + 56) / 120][Stage 18:=================================>                    (75 + 45) / 120][Stage 18:==========================================>           (95 + 25) / 120][Stage 18:===============================================>     (108 + 12) / 120][Stage 18:===================================================>  (115 + 5) / 120][Stage 18:=====================================================>(118 + 2) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:===========================>                          (62 + 59) / 121][Stage 19:==================================>                   (77 + 44) / 121][Stage 19:=======================================>              (88 + 33) / 121][Stage 19:=============================================>       (104 + 17) / 121][Stage 19:==================================================>   (114 + 7) / 121][Stage 19:====================================================> (118 + 3) / 121][Stage 19:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.268505213 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494573392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (72 + 46) / 118][Stage 20:==================================>                   (75 + 43) / 118][Stage 20:=========================================>            (90 + 28) / 118][Stage 20:==============================================>      (103 + 15) / 118][Stage 20:====================================================> (114 + 4) / 118]                                                                                [Stage 21:=================================>                    (73 + 46) / 119][Stage 21:==================================>                   (77 + 42) / 119][Stage 21:===========================================>          (96 + 23) / 119][Stage 21:===================================================>  (114 + 5) / 119][Stage 21:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.75393676 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446379795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==================================>                   (72 + 41) / 113][Stage 22:=====================================>                (79 + 34) / 113][Stage 22:===========================================>          (90 + 23) / 113][Stage 22:================================================>    (103 + 10) / 113][Stage 22:====================================================> (110 + 3) / 113]                                                                                [Stage 23:====================================>                 (78 + 36) / 114][Stage 23:=========================================>            (88 + 26) / 114][Stage 23:==============================================>      (101 + 13) / 114][Stage 23:===================================================>  (108 + 6) / 114][Stage 23:===================================================>  (109 + 5) / 114][Stage 23:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.288905757 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=196", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=196,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (78 + 35) / 113][Stage 24:===========================================>          (90 + 23) / 113][Stage 24:=============================================>        (96 + 17) / 113][Stage 24:==============================================>       (98 + 15) / 113][Stage 24:===================================================>  (108 + 5) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===================================>                  (75 + 39) / 114][Stage 25:=========================================>            (88 + 26) / 114][Stage 25:==============================================>      (101 + 13) / 114][Stage 25:==================================================>   (107 + 7) / 114][Stage 25:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.2997916 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469491935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:====================================>                 (79 + 39) / 118][Stage 26:=======================================>              (86 + 32) / 118][Stage 26:=============================================>        (99 + 19) / 118][Stage 26:===============================================>     (106 + 12) / 118][Stage 26:=================================================>    (109 + 9) / 118][Stage 26:====================================================> (115 + 3) / 118][Stage 26:=====================================================>(117 + 1) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:====================================>                 (81 + 38) / 119][Stage 27:=========================================>            (91 + 28) / 119][Stage 27:==============================================>      (104 + 15) / 119][Stage 27:==================================================>   (111 + 8) / 119][Stage 27:====================================================> (115 + 4) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.255542435 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.507317096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:=============================>                        (65 + 55) / 120][Stage 28:======================================>               (86 + 34) / 120][Stage 28:===============================================>     (108 + 12) / 120][Stage 28:=====================================================>(118 + 2) / 120]                                                                                [Stage 29:==========================>                           (59 + 62) / 121][Stage 29:=================================>                    (75 + 46) / 121][Stage 29:============================================>         (99 + 22) / 121][Stage 29:================================================>    (110 + 11) / 121][Stage 29:====================================================> (118 + 3) / 121][Stage 29:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.946161757 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443050365 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (71 + 47) / 118][Stage 30:==================================>                   (76 + 42) / 118][Stage 30:======================================>               (85 + 33) / 118][Stage 30:==============================================>      (103 + 15) / 118][Stage 30:=====================================================>(117 + 1) / 118]                                                                                [Stage 31:=================================>                    (73 + 46) / 119][Stage 31:==================================>                   (77 + 42) / 119][Stage 31:========================================>             (90 + 29) / 119][Stage 31:==================================================>   (111 + 8) / 119][Stage 31:=====================================================>(117 + 2) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.615126664 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461359395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (65 + 50) / 115][Stage 32:==================================>                   (74 + 41) / 115][Stage 32:=========================================>            (89 + 26) / 115][Stage 32:===============================================>     (102 + 13) / 115][Stage 32:===================================================>  (109 + 6) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:===============================>                      (67 + 49) / 116][Stage 33:===================================>                  (77 + 39) / 116][Stage 33:============================================>         (96 + 20) / 116][Stage 33:===============================================>     (104 + 12) / 116][Stage 33:==================================================>   (109 + 7) / 116][Stage 33:=====================================================>(114 + 2) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.603906055 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47688615 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:=======================================>              (83 + 30) / 113][Stage 34:===============================================>     (102 + 11) / 113][Stage 34:=====================================================>(111 + 2) / 113]                                                                                [Stage 35:===========================>                          (59 + 55) / 114][Stage 35:===============================>                      (66 + 48) / 114][Stage 35:====================================>                 (77 + 37) / 114][Stage 35:=============================================>        (95 + 19) / 114][Stage 35:==================================================>   (106 + 8) / 114][Stage 35:===================================================>  (109 + 5) / 114][Stage 35:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.431078866 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450749744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==================================>                   (72 + 41) / 113][Stage 36:=========================================>            (86 + 27) / 113][Stage 36:=============================================>        (95 + 18) / 113][Stage 36:===================================================>  (107 + 6) / 113][Stage 36:=====================================================>(111 + 2) / 113]                                                                                [Stage 37:=====================================>                (79 + 35) / 114][Stage 37:===========================================>          (91 + 23) / 114][Stage 37:=============================================>        (97 + 17) / 114][Stage 37:==================================================>   (106 + 8) / 114][Stage 37:===================================================>  (108 + 6) / 114][Stage 37:====================================================> (111 + 3) / 114][Stage 37:=====================================================>(112 + 2) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.389112139 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=251", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=251,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448065782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (72 + 46) / 118][Stage 38:==================================>                   (75 + 43) / 118][Stage 38:======================================>               (84 + 34) / 118][Stage 38:============================================>         (97 + 21) / 118][Stage 38:=================================================>    (109 + 9) / 118][Stage 38:=====================================================>(117 + 1) / 118]                                                                                [Stage 39:==================================>                   (75 + 44) / 119][Stage 39:===================================>                  (78 + 41) / 119][Stage 39:==========================================>           (94 + 25) / 119][Stage 39:==================================================>   (111 + 8) / 119][Stage 39:====================================================> (116 + 3) / 119][Stage 39:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.989480531 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:===================================>                  (78 + 40) / 118][Stage 40:=========================================>            (91 + 27) / 118][Stage 40:=============================================>       (102 + 16) / 118][Stage 40:================================================>    (108 + 10) / 118][Stage 40:=====================================================>(116 + 2) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:===================================>                  (79 + 40) / 119][Stage 41:=======================================>              (87 + 32) / 119][Stage 41:============================================>        (100 + 19) / 119][Stage 41:==================================================>   (112 + 7) / 119][Stage 41:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.47056901 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491169911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:======================================>               (84 + 34) / 118][Stage 42:===========================================>          (94 + 24) / 118][Stage 42:==================================================>   (110 + 8) / 118]                                                                                [Stage 43:=================================>                    (74 + 45) / 119][Stage 43:=======================================>              (86 + 33) / 119][Stage 43:=============================================>       (102 + 17) / 119][Stage 43:====================================================> (115 + 4) / 119][Stage 43:=====================================================>(117 + 2) / 119][Stage 43:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.867605489 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=79", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=79,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46305969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (70 + 45) / 115][Stage 44:======================================>               (81 + 34) / 115][Stage 44:=============================================>        (97 + 18) / 115][Stage 44:==================================================>   (107 + 8) / 115][Stage 44:====================================================> (112 + 3) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:================================>                     (70 + 46) / 116][Stage 45:=====================================>                (81 + 35) / 116][Stage 45:==============================================>      (101 + 15) / 116][Stage 45:===================================================>  (110 + 6) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.202662557 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432906552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (72 + 46) / 118][Stage 46:===================================>                  (77 + 41) / 118][Stage 46:=========================================>            (90 + 28) / 118][Stage 46:=============================================>       (102 + 16) / 118][Stage 46:================================================>    (108 + 10) / 118][Stage 46:====================================================> (115 + 3) / 118][Stage 46:=====================================================>(117 + 1) / 118]                                                                                [Stage 47:=================================>                    (73 + 46) / 119][Stage 47:===================================>                  (79 + 40) / 119][Stage 47:=======================================>              (87 + 32) / 119][Stage 47:============================================>         (98 + 21) / 119][Stage 47:==================================================>   (111 + 8) / 119][Stage 47:====================================================> (115 + 4) / 119][Stage 47:=====================================================>(117 + 2) / 119][Stage 47:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.456336032 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=191,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.540159627 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:===========================>                          (61 + 59) / 120][Stage 48:=================================>                    (75 + 45) / 120][Stage 48:==========================================>           (94 + 26) / 120][Stage 48:==================================================>   (113 + 7) / 120]                                                                                [Stage 49:============================>                         (64 + 57) / 121][Stage 49:=================================>                    (76 + 45) / 121][Stage 49:=========================================>            (93 + 28) / 121][Stage 49:==================================================>   (113 + 8) / 121][Stage 49:=====================================================>(119 + 2) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.697539164 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=59", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=59,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447282023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (59 + 54) / 113][Stage 50:================================>                     (69 + 44) / 113][Stage 50:=========================================>            (86 + 27) / 113][Stage 50:=================================================>    (104 + 9) / 113][Stage 50:=====================================================>(112 + 1) / 113]                                                                                [Stage 51:============================>                         (60 + 54) / 114][Stage 51:================================>                     (68 + 46) / 114][Stage 51:=======================================>              (84 + 30) / 114][Stage 51:===========================================>          (91 + 23) / 114][Stage 51:==================================================>   (107 + 7) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.888550371 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404167885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=================================>                    (73 + 45) / 118][Stage 52:=====================================>                (82 + 36) / 118][Stage 52:============================================>         (97 + 21) / 118][Stage 52:==================================================>   (111 + 7) / 118][Stage 52:=====================================================>(117 + 1) / 118]                                                                                [Stage 53:==================================>                   (76 + 43) / 119][Stage 53:======================================>               (85 + 34) / 119][Stage 53:===========================================>          (96 + 23) / 119][Stage 53:===============================================>     (107 + 12) / 119][Stage 53:====================================================> (115 + 4) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.037034392 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=232", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=232,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440198308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (72 + 46) / 118][Stage 54:====================================>                 (79 + 39) / 118][Stage 54:=========================================>            (91 + 27) / 118][Stage 54:===============================================>     (105 + 13) / 118][Stage 54:====================================================> (115 + 3) / 118]                                                                                [Stage 55:==================================>                   (75 + 44) / 119][Stage 55:=====================================>                (82 + 37) / 119][Stage 55:===========================================>          (95 + 24) / 119][Stage 55:==============================================>      (104 + 15) / 119][Stage 55:====================================================> (115 + 4) / 119][Stage 55:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.906936063 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394200935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (82 + 33) / 115][Stage 56:========================================>             (87 + 28) / 115][Stage 56:===============================================>     (102 + 13) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:=======================================>              (85 + 31) / 116][Stage 57:===========================================>          (93 + 23) / 116][Stage 57:==================================================>   (108 + 8) / 116][Stage 57:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.947169554 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434320611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:============================>                         (59 + 54) / 113][Stage 58:=================================>                    (70 + 43) / 113][Stage 58:===========================================>          (91 + 22) / 113][Stage 58:================================================>    (103 + 10) / 113]                                                                                [Stage 59:=============================>                        (62 + 52) / 114][Stage 59:=================================>                    (71 + 43) / 114][Stage 59:======================================>               (81 + 33) / 114][Stage 59:===========================================>          (91 + 23) / 114][Stage 59:=================================================>    (105 + 9) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.01050399 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449243145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:==============================>                       (64 + 49) / 113][Stage 60:=========================================>            (86 + 27) / 113][Stage 60:==============================================>      (100 + 13) / 113][Stage 60:====================================================> (109 + 4) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:================================>                     (69 + 45) / 114][Stage 61:=====================================>                (79 + 35) / 114][Stage 61:==============================================>       (99 + 15) / 114][Stage 61:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.750796346 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:============================>                         (60 + 53) / 113][Stage 62:=================================>                    (70 + 43) / 113][Stage 62:============================================>         (93 + 20) / 113][Stage 62:=====================================================>(111 + 2) / 113]                                                                                [Stage 63:============================>                         (60 + 54) / 114][Stage 63:===============================>                      (67 + 47) / 114][Stage 63:======================================>               (81 + 33) / 114][Stage 63:=============================================>        (97 + 17) / 114][Stage 63:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 4.291542417 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450512777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (58 + 55) / 113][Stage 64:================================>                     (67 + 46) / 113][Stage 64:===================================>                  (75 + 38) / 113][Stage 64:===============================================>     (101 + 12) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:===========================>                          (59 + 55) / 114][Stage 65:==============================>                       (65 + 49) / 114][Stage 65:======================================>               (81 + 33) / 114][Stage 65:==============================================>      (101 + 13) / 114][Stage 65:===================================================>  (109 + 5) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.564669805 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400035873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:=================================>                    (73 + 45) / 118][Stage 66:=====================================>                (83 + 35) / 118][Stage 66:=============================================>       (101 + 17) / 118][Stage 66:====================================================> (115 + 3) / 118]                                                                                [Stage 67:==================================>                   (75 + 44) / 119][Stage 67:========================================>             (89 + 30) / 119][Stage 67:=============================================>       (102 + 17) / 119][Stage 67:================================================>    (109 + 10) / 119][Stage 67:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.793936083 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38714271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=================================>                    (70 + 43) / 113][Stage 68:=======================================>              (82 + 31) / 113][Stage 68:===========================================>          (92 + 21) / 113][Stage 68:================================================>    (103 + 10) / 113][Stage 68:====================================================> (110 + 3) / 113]                                                                                [Stage 69:======================================>               (81 + 33) / 114][Stage 69:==========================================>           (90 + 24) / 114][Stage 69:=================================================>    (105 + 9) / 114][Stage 69:====================================================> (111 + 3) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.315797214 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413741806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:==================================>                   (76 + 42) / 118][Stage 70:========================================>             (89 + 29) / 118][Stage 70:=============================================>       (102 + 16) / 118][Stage 70:=====================================================>(116 + 2) / 118]                                                                                [Stage 71:==================================>                   (77 + 42) / 119][Stage 71:=====================================>                (83 + 36) / 119][Stage 71:==============================================>      (104 + 15) / 119][Stage 71:====================================================> (116 + 3) / 119][Stage 71:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.537002084 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=144", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=144,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404958918 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===============================>                      (67 + 48) / 115][Stage 72:=========================================>            (88 + 27) / 115][Stage 72:================================================>    (105 + 10) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:==================================>                   (75 + 41) / 116][Stage 73:===========================================>          (93 + 23) / 116][Stage 73:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.747324218 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390652919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (81 + 34) / 115][Stage 74:=======================================>              (85 + 30) / 115][Stage 74:==============================================>       (98 + 17) / 115][Stage 74:===================================================>  (109 + 6) / 115]                                                                                [Stage 75:=======================================>              (85 + 31) / 116][Stage 75:=========================================>            (90 + 26) / 116][Stage 75:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.68047813 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435504766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=============================>                        (62 + 51) / 113][Stage 76:=================================>                    (70 + 43) / 113][Stage 76:=========================================>            (86 + 27) / 113][Stage 76:===============================================>     (102 + 11) / 113]                                                                                [Stage 77:=============================>                        (63 + 51) / 114][Stage 77:===================================>                  (74 + 40) / 114][Stage 77:==============================================>       (99 + 15) / 114][Stage 77:====================================================> (111 + 3) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.555395918 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377446695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:====================================>                 (76 + 37) / 113][Stage 78:===========================================>          (91 + 22) / 113][Stage 78:==============================================>      (100 + 13) / 113][Stage 78:==================================================>   (105 + 8) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:====================================>                 (78 + 36) / 114][Stage 79:========================================>             (85 + 29) / 114][Stage 79:=============================================>        (95 + 19) / 114][Stage 79:==================================================>   (106 + 8) / 114][Stage 79:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.232711015 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=======================================>              (83 + 30) / 113][Stage 80:=============================================>        (96 + 17) / 113][Stage 80:===============================================>     (102 + 11) / 113][Stage 80:====================================================> (110 + 3) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:===================================>                  (75 + 39) / 114][Stage 81:=======================================>              (83 + 31) / 114][Stage 81:=============================================>        (95 + 19) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.075419451 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407871743 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:====================================>                 (77 + 36) / 113][Stage 82:========================================>             (85 + 28) / 113][Stage 82:=============================================>        (95 + 18) / 113][Stage 82:================================================>    (103 + 10) / 113][Stage 82:=====================================================>(112 + 1) / 113]                                                                                [Stage 83:=======================================>              (84 + 30) / 114][Stage 83:============================================>         (94 + 20) / 114][Stage 83:================================================>    (104 + 10) / 114][Stage 83:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.040511171 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369355622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:====================================>                 (77 + 36) / 113][Stage 84:=========================================>            (86 + 27) / 113][Stage 84:=============================================>        (95 + 18) / 113][Stage 84:====================================================> (109 + 4) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:====================================>                 (77 + 37) / 114][Stage 85:========================================>             (85 + 29) / 114][Stage 85:=============================================>        (95 + 19) / 114][Stage 85:=================================================>    (105 + 9) / 114][Stage 85:====================================================> (110 + 4) / 114][Stage 85:====================================================> (111 + 3) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.080876848 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=117", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=117,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (70 + 43) / 113][Stage 86:=====================================>                (78 + 35) / 113][Stage 86:===========================================>          (91 + 22) / 113][Stage 86:================================================>    (103 + 10) / 113][Stage 86:===================================================>  (108 + 5) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:==================================>                   (73 + 41) / 114][Stage 87:=======================================>              (83 + 31) / 114][Stage 87:============================================>         (94 + 20) / 114][Stage 87:==================================================>   (106 + 8) / 114][Stage 87:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.174561818 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390985603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=================================>                    (71 + 44) / 115][Stage 88:========================================>             (86 + 29) / 115][Stage 88:=============================================>        (97 + 18) / 115][Stage 88:===================================================>  (109 + 6) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=====================================>                (80 + 36) / 116][Stage 89:===========================================>          (93 + 23) / 116][Stage 89:=================================================>    (107 + 9) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.026031604 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488357222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===============================>                      (67 + 48) / 115][Stage 90:======================================>               (82 + 33) / 115][Stage 90:=============================================>        (96 + 19) / 115][Stage 90:===============================================>     (104 + 11) / 115][Stage 90:===================================================>  (109 + 6) / 115][Stage 90:===================================================>  (110 + 5) / 115][Stage 90:=====================================================>(113 + 2) / 115]                                                                                [Stage 91:=================================>                    (73 + 43) / 116][Stage 91:==========================================>           (92 + 24) / 116][Stage 91:===============================================>     (103 + 13) / 116][Stage 91:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.391695529 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38991244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==================================>                   (74 + 41) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:====================================================> (111 + 4) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:=================================>                    (73 + 43) / 116][Stage 93:=======================================>              (84 + 32) / 116][Stage 93:==============================================>       (99 + 17) / 116][Stage 93:===================================================>  (110 + 6) / 116][Stage 93:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.1665911 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (71 + 44) / 115][Stage 94:=========================================>            (88 + 27) / 115][Stage 94:==============================================>      (101 + 14) / 115][Stage 94:====================================================> (111 + 4) / 115]                                                                                [Stage 95:====================================>                 (78 + 38) / 116][Stage 95:==========================================>           (92 + 24) / 116][Stage 95:==============================================>      (101 + 15) / 116][Stage 95:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.957870688 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373142325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===================================>                  (74 + 39) / 113][Stage 96:========================================>             (84 + 29) / 113][Stage 96:=============================================>        (96 + 17) / 113][Stage 96:==================================================>   (105 + 8) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:===================================>                  (75 + 39) / 114][Stage 97:=========================================>            (88 + 26) / 114][Stage 97:==============================================>       (99 + 15) / 114][Stage 97:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.874479551 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347694765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:======================================>               (81 + 34) / 115][Stage 98:==========================================>           (91 + 24) / 115][Stage 98:===============================================>     (103 + 12) / 115]                                                                                [Stage 99:=======================================>              (85 + 31) / 116][Stage 99:===========================================>          (94 + 22) / 116][Stage 99:===============================================>     (105 + 11) / 116][Stage 99:====================================================> (112 + 4) / 116][Stage 99:====================================================> (113 + 3) / 116][Stage 99:=====================================================>(114 + 2) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.268132544 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349466639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=====================================>               (81 + 34) / 115][Stage 100:========================================>            (88 + 27) / 115][Stage 100:===============================================>    (104 + 11) / 115]                                                                                [Stage 101:=====================================>               (83 + 33) / 116][Stage 101:=========================================>           (90 + 26) / 116][Stage 101:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.510527159 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427219868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 60) / 120][Stage 102:===========================>                         (62 + 58) / 120][Stage 102:====================================>                (82 + 38) / 120][Stage 102:=============================================>      (106 + 14) / 120][Stage 102:===================================================> (117 + 3) / 120]                                                                                [Stage 103:===========================>                         (63 + 58) / 121][Stage 103:================================>                    (74 + 47) / 121][Stage 103:==========================================>          (96 + 25) / 121][Stage 103:===============================================>    (110 + 11) / 121][Stage 103:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.960992224 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360310676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:======================================>              (84 + 31) / 115][Stage 104:===========================================>         (95 + 20) / 115][Stage 104:===================================================> (111 + 4) / 115]                                                                                [Stage 105:=======================================>             (86 + 30) / 116][Stage 105:===========================================>         (96 + 20) / 116][Stage 105:===============================================>    (106 + 10) / 116][Stage 105:===================================================> (112 + 4) / 116][Stage 105:====================================================>(114 + 2) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.22161592 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41010275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (58 + 55) / 113][Stage 106:=============================>                       (63 + 50) / 113][Stage 106:================================>                    (70 + 43) / 113][Stage 106:=============================================>       (97 + 16) / 113][Stage 106:====================================================>(111 + 2) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:================================>                    (70 + 44) / 114][Stage 107:======================================>              (82 + 32) / 114][Stage 107:==============================================>     (101 + 13) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.814510233 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386985427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (72 + 46) / 118][Stage 108:==================================>                  (76 + 42) / 118][Stage 108:=======================================>             (87 + 31) / 118][Stage 108:============================================>        (99 + 19) / 118][Stage 108:===================================================> (115 + 3) / 118]                                                                                [Stage 109:================================>                    (73 + 46) / 119][Stage 109:=================================>                   (76 + 43) / 119][Stage 109:===================================>                 (80 + 39) / 119][Stage 109:==========================================>          (96 + 23) / 119][Stage 109:==============================================>     (106 + 13) / 119][Stage 109:==================================================>  (114 + 5) / 119][Stage 109:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.718281114 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=57", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=57,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370909472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:======================================>              (83 + 32) / 115][Stage 110:==========================================>          (92 + 23) / 115][Stage 110:==============================================>     (102 + 13) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:=========================================>           (90 + 26) / 116][Stage 111:=============================================>       (99 + 17) / 116][Stage 111:================================================>    (107 + 9) / 116][Stage 111:===================================================> (113 + 3) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.006933464 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350541943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (81 + 34) / 115][Stage 112:========================================>            (87 + 28) / 115][Stage 112:=============================================>      (100 + 15) / 115][Stage 112:=================================================>   (108 + 7) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:=====================================>               (83 + 33) / 116][Stage 113:==========================================>          (92 + 24) / 116][Stage 113:=============================================>      (101 + 15) / 116][Stage 113:=================================================>   (109 + 7) / 116][Stage 113:==================================================>  (110 + 6) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.444194438 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414477032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (63 + 57) / 120][Stage 114:===============================>                     (72 + 48) / 120][Stage 114:=========================================>           (95 + 25) / 120][Stage 114:===================================================> (116 + 4) / 120]                                                                                [Stage 115:============================>                        (64 + 57) / 121][Stage 115:=================================>                   (77 + 44) / 121][Stage 115:==========================================>          (98 + 23) / 121][Stage 115:==================================================>  (115 + 6) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.75736435 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:===============================>                     (72 + 48) / 120][Stage 116:=========================================>           (93 + 27) / 120][Stage 116:===============================================>    (110 + 10) / 120]                                                                                [Stage 117:===========================>                         (62 + 59) / 121][Stage 117:================================>                    (75 + 46) / 121][Stage 117:==========================================>          (97 + 24) / 121][Stage 117:===============================================>    (111 + 10) / 121][Stage 117:==================================================>  (115 + 6) / 121][Stage 117:===================================================> (117 + 4) / 121][Stage 117:===================================================> (118 + 3) / 121][Stage 117:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 6.323406477 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40038701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==================================>                  (75 + 40) / 115][Stage 118:==========================================>          (93 + 22) / 115][Stage 118:===============================================>    (104 + 11) / 115][Stage 118:==================================================>  (110 + 5) / 115]                                                                                [Stage 119:===============================>                     (68 + 48) / 116][Stage 119:=======================================>             (86 + 30) / 116][Stage 119:=============================================>      (102 + 14) / 116][Stage 119:===================================================> (113 + 3) / 116][Stage 119:====================================================>(114 + 2) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.320087735 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=222", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=222,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350453075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=======================================>             (86 + 29) / 115][Stage 120:=============================================>      (101 + 14) / 115][Stage 120:=================================================>   (108 + 7) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:=====================================>               (81 + 35) / 116][Stage 121:==========================================>          (94 + 22) / 116][Stage 121:==============================================>     (104 + 12) / 116][Stage 121:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.82268846 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402352684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:==============================>                      (65 + 48) / 113][Stage 122:======================================>              (82 + 31) / 113][Stage 122:=============================================>       (98 + 15) / 113][Stage 122:==================================================>  (107 + 6) / 113]                                                                                [Stage 123:============================>                        (61 + 53) / 114][Stage 123:==================================>                  (75 + 39) / 114][Stage 123:==========================================>          (92 + 22) / 114][Stage 123:==================================================>  (109 + 5) / 114][Stage 123:====================================================>(112 + 2) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.856827313 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411597085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==============================>                      (67 + 48) / 115][Stage 124:======================================>              (83 + 32) / 115][Stage 124:=============================================>      (100 + 15) / 115][Stage 124:=================================================>   (108 + 7) / 115][Stage 124:==================================================>  (110 + 5) / 115][Stage 124:====================================================>(114 + 1) / 115]                                                                                [Stage 125:================================>                    (71 + 45) / 116][Stage 125:======================================>              (85 + 31) / 116][Stage 125:=============================================>      (101 + 15) / 116][Stage 125:==================================================>  (110 + 6) / 116][Stage 125:==================================================>  (111 + 5) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.822351912 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=213", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=213,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371543212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=====================================>               (80 + 33) / 113][Stage 126:===========================================>         (92 + 21) / 113][Stage 126:==============================================>     (102 + 11) / 113][Stage 126:=================================================>   (105 + 8) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:==================================>                  (75 + 39) / 114][Stage 127:=======================================>             (85 + 29) / 114][Stage 127:============================================>        (96 + 18) / 114][Stage 127:================================================>    (105 + 9) / 114][Stage 127:==================================================>  (108 + 6) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.230287626 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344416598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:======================================>              (83 + 32) / 115][Stage 128:==========================================>          (92 + 23) / 115][Stage 128:==============================================>     (102 + 13) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:=====================================>               (83 + 33) / 116][Stage 129:==========================================>          (93 + 23) / 116][Stage 129:================================================>    (107 + 9) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.759460314 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398370842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 60) / 120][Stage 130:==============================>                      (69 + 51) / 120][Stage 130:================================>                    (73 + 47) / 120][Stage 130:========================================>            (91 + 29) / 120][Stage 130:===============================================>    (109 + 11) / 120]                                                                                [Stage 131:===========================>                         (63 + 58) / 121][Stage 131:================================>                    (75 + 46) / 121][Stage 131:===========================================>         (99 + 22) / 121][Stage 131:=================================================>   (114 + 7) / 121][Stage 131:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.47643641 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397564281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (61 + 59) / 120][Stage 132:==============================>                      (68 + 52) / 120][Stage 132:=====================================>               (85 + 35) / 120][Stage 132:=================================================>   (113 + 7) / 120]                                                                                [Stage 133:===========================>                         (62 + 59) / 121][Stage 133:==============================>                      (69 + 52) / 121][Stage 133:======================================>              (89 + 32) / 121][Stage 133:===============================================>    (110 + 11) / 121][Stage 133:===================================================> (117 + 4) / 121][Stage 133:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.036363256 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379022912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==============================>                      (66 + 49) / 115][Stage 134:==================================>                  (74 + 41) / 115][Stage 134:=========================================>           (91 + 24) / 115][Stage 134:=============================================>      (101 + 14) / 115][Stage 134:==================================================>  (109 + 6) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:================================>                    (71 + 45) / 116][Stage 135:=====================================>               (82 + 34) / 116][Stage 135:============================================>        (98 + 18) / 116][Stage 135:===============================================>    (106 + 10) / 116][Stage 135:=================================================>   (109 + 7) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.310332597 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360988421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===============================>                     (71 + 47) / 118][Stage 136:=================================>                   (74 + 44) / 118][Stage 136:======================================>              (86 + 32) / 118][Stage 136:============================================>       (102 + 16) / 118][Stage 136:===================================================> (114 + 4) / 118][Stage 136:===================================================> (115 + 3) / 118]                                                                                [Stage 137:=================================>                   (75 + 44) / 119][Stage 137:====================================>                (82 + 37) / 119][Stage 137:============================================>       (101 + 18) / 119][Stage 137:=================================================>   (112 + 7) / 119][Stage 137:===================================================> (115 + 4) / 119][Stage 137:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.081749335 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=108", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=108,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384799117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (58 + 55) / 113][Stage 138:============================>                        (60 + 53) / 113][Stage 138:=================================>                   (72 + 41) / 113][Stage 138:=========================================>           (88 + 25) / 113][Stage 138:===================================================> (110 + 3) / 113]                                                                                [Stage 139:===========================>                         (59 + 55) / 114][Stage 139:===============================>                     (68 + 46) / 114][Stage 139:=========================================>           (90 + 24) / 114][Stage 139:=================================================>   (107 + 7) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.560354299 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391360144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (59 + 54) / 113][Stage 140:===================================>                 (75 + 38) / 113][Stage 140:=============================================>       (98 + 15) / 113][Stage 140:==================================================>  (107 + 6) / 113]                                                                                [Stage 141:============================>                        (61 + 53) / 114][Stage 141:=================================>                   (71 + 43) / 114][Stage 141:========================================>            (87 + 27) / 114][Stage 141:==============================================>     (103 + 11) / 114][Stage 141:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.529369077 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360098998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:====================================>                (77 + 36) / 113][Stage 142:=======================================>             (85 + 28) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:=================================================>   (106 + 7) / 113][Stage 142:====================================================>(112 + 1) / 113]                                                                                [Stage 143:===================================>                 (76 + 38) / 114][Stage 143:==========================================>          (91 + 23) / 114][Stage 143:=============================================>      (100 + 14) / 114][Stage 143:====================================================>(112 + 2) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.190999804 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334287562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=====================================>               (81 + 34) / 115][Stage 144:=========================================>           (89 + 26) / 115][Stage 144:=============================================>       (98 + 17) / 115][Stage 144:==================================================>  (109 + 6) / 115]                                                                                [Stage 145:=====================================>               (83 + 33) / 116][Stage 145:==========================================>          (93 + 23) / 116][Stage 145:=================================================>   (108 + 8) / 116][Stage 145:==================================================>  (111 + 5) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.925758885 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:======================================>              (84 + 31) / 115][Stage 146:=========================================>           (91 + 24) / 115][Stage 146:=============================================>      (101 + 14) / 115][Stage 146:==================================================>  (109 + 6) / 115]                                                                                [Stage 147:=====================================>               (82 + 34) / 116][Stage 147:==========================================>          (94 + 22) / 116][Stage 147:==============================================>     (104 + 12) / 116][Stage 147:===================================================> (112 + 4) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.008238585 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337187894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:====================================>                (80 + 35) / 115][Stage 148:==========================================>          (93 + 22) / 115][Stage 148:=================================================>   (108 + 7) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:======================================>              (85 + 31) / 116][Stage 149:=========================================>           (91 + 25) / 116][Stage 149:=============================================>       (99 + 17) / 116][Stage 149:==================================================>  (110 + 6) / 116][Stage 149:===================================================> (113 + 3) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.61538128 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=32", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=32,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361901648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (78 + 35) / 113][Stage 150:=========================================>           (88 + 25) / 113][Stage 150:=============================================>       (96 + 17) / 113][Stage 150:==================================================>  (107 + 6) / 113][Stage 150:====================================================>(112 + 1) / 113]                                                                                [Stage 151:==================================>                  (75 + 39) / 114][Stage 151:=========================================>           (90 + 24) / 114][Stage 151:============================================>        (95 + 19) / 114][Stage 151:==============================================>     (102 + 12) / 114][Stage 151:================================================>    (105 + 9) / 114][Stage 151:==================================================>  (108 + 6) / 114][Stage 151:===================================================> (110 + 4) / 114][Stage 151:====================================================>(112 + 2) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.001898186 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:======================================>              (83 + 30) / 113][Stage 152:=============================================>       (96 + 17) / 113][Stage 152:==============================================>     (100 + 13) / 113][Stage 152:==================================================>  (108 + 5) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:==================================>                  (74 + 40) / 114][Stage 153:======================================>              (82 + 32) / 114][Stage 153:=============================================>       (97 + 17) / 114][Stage 153:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.02259666 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=71", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=71,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359893087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=====================================>               (79 + 34) / 113][Stage 154:=========================================>           (88 + 25) / 113][Stage 154:==============================================>     (100 + 13) / 113][Stage 154:=================================================>   (106 + 7) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:======================================>              (82 + 32) / 114][Stage 155:==========================================>          (92 + 22) / 114][Stage 155:===============================================>    (104 + 10) / 114][Stage 155:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.167295725 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395304041 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:===============================>                     (71 + 49) / 120][Stage 156:====================================>                (83 + 37) / 120][Stage 156:============================================>       (102 + 18) / 120]                                                                                [Stage 157:==========================>                          (61 + 60) / 121][Stage 157:================================>                    (74 + 47) / 121][Stage 157:===================================>                 (81 + 40) / 121][Stage 157:============================================>       (104 + 17) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.470930035 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412473348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:=============================>                       (67 + 53) / 120][Stage 158:=====================================>               (85 + 35) / 120][Stage 158:=============================================>      (104 + 16) / 120][Stage 158:===================================================> (117 + 3) / 120]                                                                                [Stage 159:==========================>                          (61 + 60) / 121][Stage 159:============================>                        (66 + 55) / 121][Stage 159:===================================>                 (82 + 39) / 121][Stage 159:===========================================>         (99 + 22) / 121][Stage 159:=================================================>   (114 + 7) / 121][Stage 159:====================================================>(119 + 2) / 121][Stage 159:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.687311004 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=230", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=230,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390411346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:============================>                        (64 + 56) / 120][Stage 160:==================================>                  (79 + 41) / 120][Stage 160:============================================>       (103 + 17) / 120][Stage 160:====================================================>(118 + 2) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:=============================>                       (67 + 54) / 121][Stage 161:===================================>                 (81 + 40) / 121][Stage 161:===========================================>         (99 + 22) / 121][Stage 161:==================================================>  (116 + 5) / 121][Stage 161:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.997997016 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=172", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=172,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373676574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (73 + 45) / 118][Stage 162:==================================>                  (76 + 42) / 118][Stage 162:==========================================>          (95 + 23) / 118][Stage 162:===============================================>    (107 + 11) / 118][Stage 162:===================================================> (115 + 3) / 118]                                                                                [Stage 163:=================================>                   (75 + 44) / 119][Stage 163:====================================>                (82 + 37) / 119][Stage 163:========================================>            (91 + 28) / 119][Stage 163:==============================================>     (106 + 13) / 119][Stage 163:===================================================> (116 + 3) / 119][Stage 163:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.727725833 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=91", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=91,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420743826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (58 + 55) / 113][Stage 164:=============================>                       (62 + 51) / 113][Stage 164:===================================>                 (75 + 38) / 113][Stage 164:=============================================>       (97 + 16) / 113][Stage 164:===================================================> (110 + 3) / 113]                                                                                [Stage 165:=============================>                       (64 + 50) / 114][Stage 165:====================================>                (78 + 36) / 114][Stage 165:=============================================>      (100 + 14) / 114][Stage 165:===================================================> (111 + 3) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.73668506 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===========================>                         (58 + 55) / 113][Stage 166:==============================>                      (66 + 47) / 113][Stage 166:========================================>            (86 + 27) / 113][Stage 166:==============================================>     (101 + 12) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:===========================>                         (59 + 55) / 114][Stage 167:==============================>                      (65 + 49) / 114][Stage 167:======================================>              (82 + 32) / 114][Stage 167:=============================================>       (97 + 17) / 114][Stage 167:==================================================>  (109 + 5) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.70088564 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346961299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=======================================>             (86 + 29) / 115][Stage 168:===========================================>         (94 + 21) / 115][Stage 168:=================================================>   (107 + 8) / 115]                                                                                [Stage 169:=====================================>               (82 + 34) / 116][Stage 169:=======================================>             (87 + 29) / 116][Stage 169:==============================================>     (104 + 12) / 116][Stage 169:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.78245853 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395512348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:==============================>                      (68 + 52) / 120][Stage 170:======================================>              (87 + 33) / 120][Stage 170:=================================================>   (113 + 7) / 120][Stage 170:====================================================>(119 + 1) / 120]                                                                                [Stage 171:============================>                        (66 + 55) / 121][Stage 171:=================================>                   (76 + 45) / 121][Stage 171:=========================================>           (94 + 27) / 121][Stage 171:=================================================>   (113 + 8) / 121][Stage 171:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.921750544 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=80", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=80,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33382658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:======================================>              (83 + 32) / 115][Stage 172:============================================>        (97 + 18) / 115][Stage 172:==================================================>  (110 + 5) / 115][Stage 172:====================================================>(114 + 1) / 115]                                                                                [Stage 173:=====================================>               (83 + 33) / 116][Stage 173:==========================================>          (93 + 23) / 116][Stage 173:===============================================>    (106 + 10) / 116][Stage 173:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.66788016 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375420521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==============================>                      (67 + 48) / 115][Stage 174:===================================>                 (78 + 37) / 115][Stage 174:============================================>        (96 + 19) / 115][Stage 174:===================================================> (111 + 4) / 115]                                                                                [Stage 175:==================================>                  (75 + 41) / 116][Stage 175:===========================================>         (96 + 20) / 116][Stage 175:===============================================>    (106 + 10) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.659821324 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365326019 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:====================================>                (82 + 36) / 118][Stage 176:=========================================>           (92 + 26) / 118][Stage 176:=============================================>      (103 + 15) / 118][Stage 176:===================================================> (114 + 4) / 118]                                                                                [Stage 177:================================>                    (73 + 46) / 119][Stage 177:==================================>                  (78 + 41) / 119][Stage 177:=======================================>             (89 + 30) / 119][Stage 177:============================================>        (99 + 20) / 119][Stage 177:===================================================> (116 + 3) / 119][Stage 177:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.72218277 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=199", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=199,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367864192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (70 + 45) / 115][Stage 178:========================================>            (87 + 28) / 115][Stage 178:=================================================>   (108 + 7) / 115][Stage 178:===================================================> (112 + 3) / 115]                                                                                [Stage 179:====================================>                (79 + 37) / 116][Stage 179:===========================================>         (95 + 21) / 116][Stage 179:==================================================>  (110 + 6) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.782565693 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367751431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===============================>                     (68 + 47) / 115][Stage 180:=====================================>               (82 + 33) / 115][Stage 180:=============================================>       (99 + 16) / 115][Stage 180:===============================================>    (104 + 11) / 115][Stage 180:====================================================>(113 + 2) / 115]                                                                                [Stage 181:===============================>                     (68 + 48) / 116][Stage 181:=======================================>             (86 + 30) / 116][Stage 181:=============================================>      (101 + 15) / 116][Stage 181:==================================================>  (111 + 5) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.06665609 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360979223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (72 + 46) / 118][Stage 182:===================================>                 (79 + 39) / 118][Stage 182:======================================>              (85 + 33) / 118][Stage 182:=============================================>      (104 + 14) / 118][Stage 182:===================================================> (114 + 4) / 118]                                                                                [Stage 183:================================>                    (73 + 46) / 119][Stage 183:==================================>                  (78 + 41) / 119][Stage 183:=====================================>               (85 + 34) / 119][Stage 183:============================================>       (102 + 17) / 119][Stage 183:===================================================> (115 + 4) / 119][Stage 183:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.157212546 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359423004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:=================================>                   (75 + 43) / 118][Stage 184:==========================================>          (94 + 24) / 118][Stage 184:=================================================>   (110 + 8) / 118]                                                                                [Stage 185:================================>                    (73 + 46) / 119][Stage 185:===================================>                 (79 + 40) / 119][Stage 185:=========================================>           (94 + 25) / 119][Stage 185:=================================================>   (112 + 7) / 119][Stage 185:====================================================>(117 + 2) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.593345031 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=101", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=101,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331900294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:=========================================>           (89 + 26) / 115][Stage 186:===============================================>    (105 + 10) / 115]                                                                                [Stage 187:=====================================>               (82 + 34) / 116][Stage 187:===========================================>         (96 + 20) / 116][Stage 187:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.393362962 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379962722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (58 + 55) / 113][Stage 188:============================>                        (61 + 52) / 113][Stage 188:=====================================>               (81 + 32) / 113][Stage 188:===========================================>         (92 + 21) / 113][Stage 188:===================================================> (109 + 4) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:===========================>                         (60 + 54) / 114][Stage 189:===============================>                     (67 + 47) / 114][Stage 189:=====================================>               (80 + 34) / 114][Stage 189:=========================================>           (89 + 25) / 114][Stage 189:===============================================>    (104 + 10) / 114][Stage 189:===================================================> (110 + 4) / 114][Stage 189:====================================================>(112 + 2) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.138356752 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372838954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===================================>                 (78 + 37) / 115][Stage 190:========================================>            (87 + 28) / 115][Stage 190:=============================================>      (100 + 15) / 115][Stage 190:=================================================>   (108 + 7) / 115][Stage 190:===================================================> (111 + 4) / 115]                                                                                [Stage 191:==================================>                  (76 + 40) / 116][Stage 191:==========================================>          (94 + 22) / 116][Stage 191:===============================================>    (105 + 11) / 116][Stage 191:=================================================>   (109 + 7) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.213762987 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381525376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===============================>                     (69 + 46) / 115][Stage 192:======================================>              (84 + 31) / 115][Stage 192:==============================================>     (103 + 12) / 115][Stage 192:====================================================>(113 + 2) / 115]                                                                                [Stage 193:================================>                    (72 + 44) / 116][Stage 193:========================================>            (89 + 27) / 116][Stage 193:=============================================>      (102 + 14) / 116][Stage 193:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.614357373 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===============================>                     (68 + 47) / 115][Stage 194:========================================>            (87 + 28) / 115][Stage 194:=============================================>      (100 + 15) / 115][Stage 194:=================================================>   (108 + 7) / 115]                                                                                [Stage 195:==================================>                  (75 + 41) / 116][Stage 195:============================================>        (97 + 19) / 116][Stage 195:=================================================>   (109 + 7) / 116][Stage 195:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.844122267 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359443495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (72 + 46) / 118][Stage 196:================================>                    (73 + 45) / 118][Stage 196:====================================>                (82 + 36) / 118][Stage 196:==========================================>          (94 + 24) / 118][Stage 196:================================================>    (109 + 9) / 118]                                                                                [Stage 197:=================================>                   (75 + 44) / 119][Stage 197:===================================>                 (80 + 39) / 119][Stage 197:=======================================>             (88 + 31) / 119][Stage 197:=============================================>      (104 + 15) / 119][Stage 197:===================================================> (115 + 4) / 119][Stage 197:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.201625727 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=152", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=152,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495000074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (58 + 55) / 113][Stage 198:==============================>                      (65 + 48) / 113][Stage 198:======================================>              (82 + 31) / 113][Stage 198:================================================>    (104 + 9) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:============================>                        (61 + 53) / 114][Stage 199:==================================>                  (75 + 39) / 114][Stage 199:==========================================>          (92 + 22) / 114][Stage 199:==============================================>     (101 + 13) / 114][Stage 199:===================================================> (110 + 4) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.806837942 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349111931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=======================================>             (85 + 30) / 115][Stage 200:=============================================>       (98 + 17) / 115][Stage 200:================================================>    (106 + 9) / 115][Stage 200:===================================================> (112 + 3) / 115]                                                                                [Stage 201:=====================================>               (82 + 34) / 116][Stage 201:======================================>              (84 + 32) / 116][Stage 201:============================================>        (97 + 19) / 116][Stage 201:=================================================>   (108 + 8) / 116][Stage 201:====================================================>(114 + 2) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.328249345 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m7.232s
user	11m55.800s
sys	1m14.320s
