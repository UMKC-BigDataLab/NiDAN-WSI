Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 22:52:42 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:52:56 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:52:56 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:52:57 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 22:52:59 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 22:53:09 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531225259-0722).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.379023796 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (47 + 68) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(113 + 2) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:========================>                              (51 + 65) / 116][Stage 1:===========================>                           (59 + 57) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.462181657 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.754473966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (37 + 76) / 113][Stage 2:====================>                                  (42 + 71) / 113][Stage 2:==========================>                            (54 + 59) / 113][Stage 2:=============================>                         (61 + 52) / 113][Stage 2:==============================>                        (63 + 50) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:========================================>              (83 + 30) / 113][Stage 2:=============================================>         (93 + 20) / 113][Stage 2:===================================================>   (105 + 8) / 113][Stage 2:====================================================>  (108 + 5) / 113][Stage 2:======================================================>(111 + 2) / 113]                                                                                [Stage 3:===========================>                           (57 + 57) / 114][Stage 3:===========================>                           (58 + 56) / 114][Stage 3:============================>                          (59 + 55) / 114][Stage 3:================================>                      (68 + 46) / 114][Stage 3:=====================================>                 (78 + 36) / 114][Stage 3:=============================================>         (94 + 20) / 114][Stage 3:==================================================>    (105 + 9) / 114][Stage 3:======================================================>(112 + 2) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.429101081 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (57 + 56) / 113][Stage 4:============================>                          (58 + 55) / 113][Stage 4:=============================>                         (61 + 52) / 113][Stage 4:===================================>                   (72 + 41) / 113][Stage 4:=========================================>             (85 + 28) / 113][Stage 4:==============================================>        (95 + 18) / 113][Stage 4:=================================================>    (103 + 10) / 113][Stage 4:====================================================>  (107 + 6) / 113]                                                                                [Stage 5:============================>                          (59 + 55) / 114][Stage 5:==============================>                        (63 + 51) / 114][Stage 5:=================================>                     (70 + 44) / 114][Stage 5:========================================>              (84 + 30) / 114][Stage 5:=============================================>         (94 + 20) / 114][Stage 5:================================================>     (102 + 12) / 114][Stage 5:=================================================>    (104 + 10) / 114][Stage 5:=====================================================> (110 + 4) / 114][Stage 5:=====================================================> (111 + 3) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.449354381 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (52 + 61) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:==============================>                        (63 + 50) / 113][Stage 6:===================================>                   (73 + 40) / 113][Stage 6:=========================================>             (86 + 27) / 113][Stage 6:===============================================>       (97 + 16) / 113][Stage 6:=================================================>    (103 + 10) / 113][Stage 6:======================================================>(112 + 1) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:============================>                          (59 + 55) / 114][Stage 7:===============================>                       (65 + 49) / 114][Stage 7:======================================>                (80 + 34) / 114][Stage 7:==========================================>            (88 + 26) / 114][Stage 7:===============================================>       (99 + 15) / 114][Stage 7:===================================================>   (107 + 7) / 114][Stage 7:======================================================>(112 + 2) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.336263189 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=254", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=247 AND partitionZIndex<=254,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (58 + 55) / 113][Stage 8:=============================>                         (61 + 52) / 113][Stage 8:====================================>                  (74 + 39) / 113][Stage 8:==========================================>            (87 + 26) / 113][Stage 8:==============================================>        (96 + 17) / 113][Stage 8:=================================================>    (103 + 10) / 113]                                                                                [Stage 9:===========================>                           (58 + 56) / 114][Stage 9:==============================>                        (63 + 51) / 114][Stage 9:=====================================>                 (77 + 37) / 114][Stage 9:===========================================>           (91 + 23) / 114][Stage 9:================================================>     (102 + 12) / 114][Stage 9:===================================================>   (107 + 7) / 114][Stage 9:======================================================>(112 + 2) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.604007307 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.616070995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (57 + 56) / 113][Stage 10:===========================>                          (58 + 55) / 113][Stage 10:===============================>                      (65 + 48) / 113][Stage 10:=====================================>                (79 + 34) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:===============================================>      (99 + 14) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:===========================>                          (58 + 56) / 114][Stage 11:=============================>                        (63 + 51) / 114][Stage 11:====================================>                 (78 + 36) / 114][Stage 11:============================================>         (93 + 21) / 114][Stage 11:=============================================>        (97 + 17) / 114][Stage 11:====================================================> (111 + 3) / 114][Stage 11:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.601001845 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.575445709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=============================>                        (62 + 53) / 115][Stage 12:================================>                     (69 + 46) / 115][Stage 12:=====================================>                (80 + 35) / 115][Stage 12:==============================================>      (101 + 14) / 115][Stage 12:==================================================>   (107 + 8) / 115][Stage 12:===================================================>  (109 + 6) / 115][Stage 12:====================================================> (112 + 3) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:================================>                     (69 + 47) / 116][Stage 13:====================================>                 (78 + 38) / 116][Stage 13:=========================================>            (90 + 26) / 116][Stage 13:==============================================>      (102 + 14) / 116][Stage 13:===================================================>  (110 + 6) / 116][Stage 13:====================================================> (113 + 3) / 116][Stage 13:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.109811673 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.576308061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (58 + 55) / 113][Stage 14:============================>                         (59 + 54) / 113][Stage 14:================================>                     (69 + 44) / 113][Stage 14:======================================>               (80 + 33) / 113][Stage 14:==============================================>       (97 + 16) / 113][Stage 14:==================================================>   (105 + 8) / 113]                                                                                [Stage 15:============================>                         (60 + 54) / 114][Stage 15:=================================>                    (71 + 43) / 114][Stage 15:========================================>             (86 + 28) / 114][Stage 15:==============================================>       (98 + 16) / 114][Stage 15:===================================================>  (109 + 5) / 114][Stage 15:=====================================================>(112 + 2) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.469514779 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49942889 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=================================>                    (70 + 43) / 113][Stage 16:=====================================>                (79 + 34) / 113][Stage 16:=========================================>            (87 + 26) / 113][Stage 16:===============================================>      (99 + 14) / 113][Stage 16:=================================================>    (104 + 9) / 113][Stage 16:====================================================> (109 + 4) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:=======================================>              (84 + 30) / 114][Stage 17:=============================================>        (96 + 18) / 114][Stage 17:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.289866461 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539620045 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:======================================>               (84 + 34) / 118][Stage 18:===========================================>          (96 + 22) / 118][Stage 18:=================================================>    (109 + 9) / 118][Stage 18:=====================================================>(117 + 1) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:===================================>                  (78 + 41) / 119][Stage 19:========================================>             (90 + 29) / 119][Stage 19:===========================================>          (96 + 23) / 119][Stage 19:============================================>        (101 + 18) / 119][Stage 19:================================================>    (109 + 10) / 119][Stage 19:===================================================>  (114 + 5) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.456884277 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.534723678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (58 + 55) / 113][Stage 20:================================>                     (69 + 44) / 113][Stage 20:=========================================>            (86 + 27) / 113][Stage 20:================================================>    (103 + 10) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:============================>                         (60 + 54) / 114][Stage 21:============================>                         (61 + 53) / 114][Stage 21:=================================>                    (70 + 44) / 114][Stage 21:==========================================>           (90 + 24) / 114][Stage 21:==============================================>      (100 + 14) / 114][Stage 21:==================================================>   (107 + 7) / 114][Stage 21:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.913753619 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.568854764 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:============================>                         (64 + 56) / 120][Stage 22:====================================>                 (82 + 38) / 120][Stage 22:=============================================>       (104 + 16) / 120]                                                                                [Stage 23:===========================>                          (62 + 59) / 121][Stage 23:=============================>                        (67 + 54) / 121][Stage 23:=====================================>                (83 + 38) / 121][Stage 23:=============================================>       (104 + 17) / 121][Stage 23:===================================================>  (115 + 6) / 121][Stage 23:=====================================================>(119 + 2) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 6.374809939 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=121", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=121,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448172259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:======================================>               (81 + 34) / 115][Stage 24:==========================================>           (91 + 24) / 115][Stage 24:===============================================>     (102 + 13) / 115][Stage 24:====================================================> (111 + 4) / 115]                                                                                [Stage 25:======================================>               (83 + 33) / 116][Stage 25:=============================================>        (98 + 18) / 116][Stage 25:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.777997941 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.581987643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (61 + 59) / 120][Stage 26:===============================>                      (69 + 51) / 120][Stage 26:=====================================>                (83 + 37) / 120][Stage 26:=============================================>       (103 + 17) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:===============================>                      (71 + 50) / 121][Stage 27:======================================>               (86 + 35) / 121][Stage 27:================================================>    (111 + 10) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.535826893 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521391234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 59) / 120][Stage 28:================================>                     (72 + 48) / 120][Stage 28:==========================================>           (94 + 26) / 120][Stage 28:===================================================>  (114 + 6) / 120][Stage 28:=====================================================>(118 + 2) / 120]                                                                                [Stage 29:===========================>                          (61 + 60) / 121][Stage 29:=============================>                        (67 + 54) / 121][Stage 29:======================================>               (87 + 34) / 121][Stage 29:===============================================>     (108 + 13) / 121][Stage 29:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.493325835 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452486014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=================================>                    (71 + 42) / 113][Stage 30:=======================================>              (82 + 31) / 113][Stage 30:=============================================>        (96 + 17) / 113][Stage 30:===================================================>  (108 + 5) / 113]                                                                                [Stage 31:====================================>                 (77 + 37) / 114][Stage 31:========================================>             (85 + 29) / 114][Stage 31:==============================================>       (98 + 16) / 114][Stage 31:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.845640531 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.534701724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (65 + 50) / 115][Stage 32:====================================>                 (77 + 38) / 115][Stage 32:============================================>         (94 + 21) / 115][Stage 32:================================================>    (105 + 10) / 115][Stage 32:==================================================>   (108 + 7) / 115][Stage 32:===================================================>  (110 + 5) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:===============================>                      (67 + 49) / 116][Stage 33:======================================>               (82 + 34) / 116][Stage 33:===========================================>          (94 + 22) / 116][Stage 33:==================================================>   (108 + 8) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(114 + 2) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.903024426 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=188", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=188,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497695925 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=========================>                            (53 + 60) / 113][Stage 34:===============================>                      (66 + 47) / 113][Stage 34:======================================>               (81 + 32) / 113][Stage 34:============================================>         (94 + 19) / 113][Stage 34:===================================================>  (107 + 6) / 113][Stage 34:====================================================> (109 + 4) / 113]                                                                                [Stage 35:============================>                         (61 + 53) / 114][Stage 35:==================================>                   (72 + 42) / 114][Stage 35:==========================================>           (90 + 24) / 114][Stage 35:===================================================>  (108 + 6) / 114][Stage 35:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.527867026 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486454826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (57 + 56) / 113][Stage 36:============================>                         (59 + 54) / 113][Stage 36:===================================>                  (75 + 38) / 113][Stage 36:===========================================>          (92 + 21) / 113][Stage 36:=====================================================>(112 + 1) / 113]                                                                                [Stage 37:============================>                         (60 + 54) / 114][Stage 37:===============================>                      (67 + 47) / 114][Stage 37:====================================>                 (78 + 36) / 114][Stage 37:=============================================>        (97 + 17) / 114][Stage 37:===================================================>  (109 + 5) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.275214669 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493284572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:=============================>                        (65 + 55) / 120][Stage 38:=================================>                    (74 + 46) / 120][Stage 38:========================================>             (91 + 29) / 120][Stage 38:====================================================> (116 + 4) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:===============================>                      (71 + 50) / 121][Stage 39:=====================================>                (84 + 37) / 121][Stage 39:===============================================>     (108 + 13) / 121][Stage 39:====================================================> (117 + 4) / 121][Stage 39:=====================================================>(119 + 2) / 121][Stage 39:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.970436046 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469930478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:===================================>                  (77 + 41) / 118][Stage 40:=====================================>                (83 + 35) / 118][Stage 40:============================================>         (98 + 20) / 118][Stage 40:===============================================>     (106 + 12) / 118][Stage 40:=====================================================>(116 + 2) / 118][Stage 40:=====================================================>(117 + 1) / 118]                                                                                [Stage 41:=================================>                    (74 + 45) / 119][Stage 41:=====================================>                (83 + 36) / 119][Stage 41:===========================================>          (96 + 23) / 119][Stage 41:===============================================>     (106 + 13) / 119][Stage 41:====================================================> (115 + 4) / 119][Stage 41:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.111375271 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528771235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=================================>                    (71 + 44) / 115][Stage 42:==========================================>           (91 + 24) / 115][Stage 42:=================================================>    (106 + 9) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:===============================>                      (68 + 48) / 116][Stage 43:===================================>                  (76 + 40) / 116][Stage 43:=========================================>            (89 + 27) / 116][Stage 43:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.793536806 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499250438 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:================================>                     (72 + 48) / 120][Stage 44:==========================================>           (94 + 26) / 120][Stage 44:================================================>    (110 + 10) / 120]                                                                                [Stage 45:============================>                         (63 + 58) / 121][Stage 45:================================>                     (73 + 48) / 121][Stage 45:=========================================>            (93 + 28) / 121][Stage 45:=============================================>       (104 + 17) / 121][Stage 45:====================================================> (118 + 3) / 121][Stage 45:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.010537724 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45183419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=====================================>                (79 + 34) / 113][Stage 46:=========================================>            (87 + 26) / 113][Stage 46:==============================================>      (100 + 13) / 113][Stage 46:=====================================================>(111 + 2) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:===================================>                  (75 + 39) / 114][Stage 47:========================================>             (86 + 28) / 114][Stage 47:=============================================>        (95 + 19) / 114][Stage 47:================================================>    (104 + 10) / 114][Stage 47:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.05706417 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401295209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=====================================>                (80 + 35) / 115][Stage 48:=======================================>              (84 + 31) / 115][Stage 48:==============================================>      (101 + 14) / 115][Stage 48:===================================================>  (110 + 5) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:=====================================>                (81 + 35) / 116][Stage 49:========================================>             (88 + 28) / 116][Stage 49:===============================================>     (104 + 12) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:====================================================> (112 + 4) / 116][Stage 49:====================================================> (113 + 3) / 116][Stage 49:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 9.43558623 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438447777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==============================>                       (66 + 49) / 115][Stage 50:====================================>                 (77 + 38) / 115][Stage 50:===========================================>          (92 + 23) / 115][Stage 50:==================================================>   (107 + 8) / 115][Stage 50:===================================================>  (110 + 5) / 115]                                                                                [Stage 51:=================================>                    (71 + 45) / 116][Stage 51:=======================================>              (85 + 31) / 116][Stage 51:============================================>         (96 + 20) / 116][Stage 51:=============================================>       (100 + 16) / 116][Stage 51:==================================================>   (109 + 7) / 116][Stage 51:====================================================> (113 + 3) / 116][Stage 51:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 11.465160048 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439785206 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:=============================>                        (62 + 51) / 113][Stage 52:=====================================>                (79 + 34) / 113][Stage 52:=============================================>        (95 + 18) / 113][Stage 52:==================================================>   (105 + 8) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:============================>                         (61 + 53) / 114][Stage 53:=================================>                    (70 + 44) / 114][Stage 53:========================================>             (85 + 29) / 114][Stage 53:===============================================>     (103 + 11) / 114][Stage 53:===================================================>  (108 + 6) / 114][Stage 53:====================================================> (111 + 3) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.940428888 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406604229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:=================================>                    (71 + 42) / 113][Stage 54:========================================>             (85 + 28) / 113][Stage 54:=============================================>        (96 + 17) / 113][Stage 54:================================================>    (103 + 10) / 113][Stage 54:====================================================> (110 + 3) / 113]                                                                                [Stage 55:=======================================>              (83 + 31) / 114][Stage 55:============================================>         (93 + 21) / 114][Stage 55:==============================================>       (99 + 15) / 114][Stage 55:===================================================>  (108 + 6) / 114][Stage 55:===================================================>  (109 + 5) / 114][Stage 55:====================================================> (111 + 3) / 114][Stage 55:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 9.678500553 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464190498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:============================>                         (59 + 54) / 113][Stage 56:==================================>                   (73 + 40) / 113][Stage 56:===========================================>          (91 + 22) / 113][Stage 56:================================================>    (103 + 10) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:============================>                         (60 + 54) / 114][Stage 57:============================>                         (61 + 53) / 114][Stage 57:===================================>                  (75 + 39) / 114][Stage 57:============================================>         (93 + 21) / 114][Stage 57:===================================================>  (108 + 6) / 114][Stage 57:====================================================> (111 + 3) / 114][Stage 57:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.232128886 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411153729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (72 + 46) / 118][Stage 58:====================================>                 (79 + 39) / 118][Stage 58:===========================================>          (94 + 24) / 118][Stage 58:=================================================>    (109 + 9) / 118][Stage 58:=====================================================>(116 + 2) / 118]                                                                                [Stage 59:=================================>                    (73 + 46) / 119][Stage 59:==================================>                   (76 + 43) / 119][Stage 59:======================================>               (85 + 34) / 119][Stage 59:============================================>         (97 + 22) / 119][Stage 59:=================================================>    (110 + 9) / 119][Stage 59:====================================================> (116 + 3) / 119][Stage 59:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.395290444 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451679709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:=================================>                    (70 + 43) / 113][Stage 60:=========================================>            (86 + 27) / 113][Stage 60:===================================================>  (107 + 6) / 113][Stage 60:====================================================> (109 + 4) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:=================================>                    (70 + 44) / 114][Stage 61:===========================================>          (91 + 23) / 114][Stage 61:===============================================>     (103 + 11) / 114][Stage 61:====================================================> (110 + 4) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.019624894 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449252009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (60 + 60) / 120][Stage 62:===============================>                      (70 + 50) / 120][Stage 62:=======================================>              (88 + 32) / 120][Stage 62:================================================>    (110 + 10) / 120][Stage 62:=====================================================>(119 + 1) / 120]                                                                                [Stage 63:===========================>                          (61 + 60) / 121][Stage 63:=============================>                        (65 + 56) / 121][Stage 63:===================================>                  (79 + 42) / 121][Stage 63:=============================================>       (103 + 18) / 121][Stage 63:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 6.276838372 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=120", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=120,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390248325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=================================>                    (71 + 42) / 113][Stage 64:=======================================>              (82 + 31) / 113][Stage 64:==========================================>           (88 + 25) / 113][Stage 64:==================================================>   (106 + 7) / 113][Stage 64:====================================================> (110 + 3) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:===================================>                  (75 + 39) / 114][Stage 65:=========================================>            (88 + 26) / 114][Stage 65:==============================================>       (98 + 16) / 114][Stage 65:===================================================>  (108 + 6) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.128422712 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367822245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:======================================>               (83 + 32) / 115][Stage 66:==============================================>       (99 + 16) / 115][Stage 66:================================================>    (105 + 10) / 115]                                                                                [Stage 67:=======================================>              (85 + 31) / 116][Stage 67:============================================>         (95 + 21) / 116][Stage 67:================================================>    (106 + 10) / 116][Stage 67:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.65817093 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (83 + 32) / 115][Stage 68:============================================>         (95 + 20) / 115][Stage 68:===================================================>  (109 + 6) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:======================================>               (82 + 34) / 116][Stage 69:========================================>             (86 + 30) / 116][Stage 69:==============================================>      (102 + 14) / 116][Stage 69:====================================================> (112 + 4) / 116][Stage 69:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.911959179 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405945098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:====================================>                 (77 + 36) / 113][Stage 70:===========================================>          (90 + 23) / 113][Stage 70:===============================================>     (102 + 11) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:=====================================>                (80 + 34) / 114][Stage 71:==========================================>           (89 + 25) / 114][Stage 71:==============================================>      (100 + 14) / 114][Stage 71:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.793248207 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=126", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=126,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45067811 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (60 + 60) / 120][Stage 72:==============================>                       (67 + 53) / 120][Stage 72:====================================>                 (80 + 40) / 120][Stage 72:===============================================>     (108 + 12) / 120][Stage 72:=====================================================>(119 + 1) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:==============================>                       (68 + 53) / 121][Stage 73:======================================>               (87 + 34) / 121][Stage 73:=============================================>       (105 + 16) / 121][Stage 73:=====================================================>(119 + 2) / 121][Stage 73:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.983102685 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41790554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:====================================>                 (78 + 37) / 115][Stage 74:========================================>             (87 + 28) / 115][Stage 74:==============================================>      (101 + 14) / 115][Stage 74:===================================================>  (109 + 6) / 115][Stage 74:=====================================================>(114 + 1) / 115]                                                                                [Stage 75:=====================================>                (81 + 35) / 116][Stage 75:=============================================>       (100 + 16) / 116][Stage 75:=================================================>    (107 + 9) / 116][Stage 75:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.057359826 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445897098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (60 + 60) / 120][Stage 76:===========================>                          (62 + 58) / 120][Stage 76:===================================>                  (78 + 42) / 120][Stage 76:===========================================>          (96 + 24) / 120][Stage 76:=====================================================>(119 + 1) / 120]                                                                                [Stage 77:===========================>                          (62 + 59) / 121][Stage 77:===============================>                      (71 + 50) / 121][Stage 77:========================================>             (90 + 31) / 121][Stage 77:==================================================>   (113 + 8) / 121][Stage 77:====================================================> (117 + 4) / 121][Stage 77:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.74061951 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421647444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===================================>                  (76 + 39) / 115][Stage 78:========================================>             (86 + 29) / 115][Stage 78:================================================>    (105 + 10) / 115][Stage 78:=====================================================>(113 + 2) / 115]                                                                                [Stage 79:=====================================>                (80 + 36) / 116][Stage 79:=============================================>       (100 + 16) / 116][Stage 79:================================================>    (106 + 10) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.936742479 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423914976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:=============================>                        (61 + 52) / 113][Stage 80:==================================>                   (73 + 40) / 113][Stage 80:============================================>         (93 + 20) / 113][Stage 80:================================================>    (103 + 10) / 113]                                                                                [Stage 81:===========================>                          (59 + 55) / 114][Stage 81:===============================>                      (66 + 48) / 114][Stage 81:==========================================>           (89 + 25) / 114][Stage 81:=================================================>    (105 + 9) / 114][Stage 81:====================================================> (110 + 4) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.387551156 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 1.523264421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (58 + 55) / 113][Stage 82:==============================>                       (64 + 49) / 113][Stage 82:=====================================>                (78 + 35) / 113][Stage 82:============================================>         (94 + 19) / 113][Stage 82:==================================================>   (106 + 7) / 113]                                                                                [Stage 83:==============================>                       (64 + 50) / 114][Stage 83:==================================>                   (72 + 42) / 114][Stage 83:===========================================>          (92 + 22) / 114][Stage 83:====================================================> (110 + 4) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.590785774 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411731462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (58 + 55) / 113][Stage 84:=============================>                        (62 + 51) / 113][Stage 84:===================================>                  (75 + 38) / 113][Stage 84:===============================================>      (99 + 14) / 113][Stage 84:==================================================>   (106 + 7) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:============================>                         (61 + 53) / 114][Stage 85:===============================>                      (66 + 48) / 114][Stage 85:===========================================>          (91 + 23) / 114][Stage 85:==================================================>   (107 + 7) / 114][Stage 85:====================================================> (110 + 4) / 114][Stage 85:====================================================> (111 + 3) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.353748947 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396164473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:====================================>                 (77 + 36) / 113][Stage 86:========================================>             (85 + 28) / 113][Stage 86:===============================================>     (101 + 12) / 113][Stage 86:====================================================> (109 + 4) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:====================================>                 (76 + 38) / 114][Stage 87:=========================================>            (87 + 27) / 114][Stage 87:==============================================>      (100 + 14) / 114][Stage 87:====================================================> (110 + 4) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.086919288 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386830749 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=================================>                    (73 + 45) / 118][Stage 88:===================================>                  (78 + 40) / 118][Stage 88:=======================================>              (87 + 31) / 118][Stage 88:===============================================>     (106 + 12) / 118][Stage 88:===================================================>  (113 + 5) / 118][Stage 88:=====================================================>(117 + 1) / 118]                                                                                [Stage 89:=================================>                    (73 + 46) / 119][Stage 89:===================================>                  (78 + 41) / 119][Stage 89:=========================================>            (92 + 27) / 119][Stage 89:==============================================>      (104 + 15) / 119][Stage 89:==================================================>   (111 + 8) / 119][Stage 89:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.378997926 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=77", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=77,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408752611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:============================>                         (59 + 54) / 113][Stage 90:================================>                     (69 + 44) / 113][Stage 90:===========================================>          (91 + 22) / 113][Stage 90:==================================================>   (105 + 8) / 113]                                                                                [Stage 91:============================>                         (61 + 53) / 114][Stage 91:==================================>                   (73 + 41) / 114][Stage 91:===========================================>          (91 + 23) / 114][Stage 91:===================================================>  (108 + 6) / 114][Stage 91:====================================================> (111 + 3) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.398621015 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433795499 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (60 + 60) / 120][Stage 92:==============================>                       (67 + 53) / 120][Stage 92:==========================================>           (94 + 26) / 120][Stage 92:==================================================>   (113 + 7) / 120]                                                                                [Stage 93:============================>                         (64 + 57) / 121][Stage 93:=================================>                    (75 + 46) / 121][Stage 93:==========================================>           (95 + 26) / 121][Stage 93:=================================================>    (112 + 9) / 121][Stage 93:====================================================> (118 + 3) / 121][Stage 93:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 5.399986169 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382395889 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (70 + 43) / 113][Stage 94:========================================>             (84 + 29) / 113][Stage 94:============================================>         (94 + 19) / 113][Stage 94:===================================================>  (108 + 5) / 113][Stage 94:=====================================================>(112 + 1) / 113]                                                                                [Stage 95:=====================================>                (79 + 35) / 114][Stage 95:=============================================>        (97 + 17) / 114][Stage 95:===============================================>     (103 + 11) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.913544533 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422424405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (61 + 59) / 120][Stage 96:===================================>                  (78 + 42) / 120][Stage 96:========================================>             (91 + 29) / 120][Stage 96:===================================================>  (115 + 5) / 120]                                                                                [Stage 97:===========================>                          (61 + 60) / 121][Stage 97:============================>                         (63 + 58) / 121][Stage 97:====================================>                 (82 + 39) / 121][Stage 97:===========================================>          (98 + 23) / 121][Stage 97:==================================================>   (114 + 7) / 121][Stage 97:====================================================> (118 + 3) / 121][Stage 97:=====================================================>(119 + 2) / 121][Stage 97:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 6.425281954 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367693955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=================================>                    (71 + 42) / 113][Stage 98:========================================>             (85 + 28) / 113][Stage 98:==============================================>       (97 + 16) / 113][Stage 98:===================================================>  (108 + 5) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:=======================================>              (84 + 30) / 114][Stage 99:===========================================>          (91 + 23) / 114][Stage 99:==============================================>       (99 + 15) / 114][Stage 99:==============================================>      (100 + 14) / 114][Stage 99:====================================================> (110 + 4) / 114][Stage 99:=====================================================>(112 + 2) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 10.661376979 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=84", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=84,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (71 + 42) / 113][Stage 100:======================================>              (82 + 31) / 113][Stage 100:===========================================>         (93 + 20) / 113][Stage 100:==============================================>     (102 + 11) / 113][Stage 100:===================================================> (110 + 3) / 113]                                                                                [Stage 101:=======================================>             (84 + 30) / 114][Stage 101:============================================>        (96 + 18) / 114][Stage 101:==================================================>  (108 + 6) / 114][Stage 101:====================================================>(112 + 2) / 114][Stage 101:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.077599844 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365456185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=====================================>               (82 + 33) / 115][Stage 102:========================================>            (87 + 28) / 115][Stage 102:============================================>        (96 + 19) / 115][Stage 102:===================================================> (112 + 3) / 115]                                                                                [Stage 103:=====================================>               (81 + 35) / 116][Stage 103:=========================================>           (90 + 26) / 116][Stage 103:==============================================>     (104 + 12) / 116]                                                                                Time elapsed: 2.459677426 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=151", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=151,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409750637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:===================================>                 (77 + 38) / 115][Stage 104:==========================================>          (93 + 22) / 115][Stage 104:==================================================>  (109 + 6) / 115]                                                                                [Stage 105:================================>                    (71 + 45) / 116][Stage 105:======================================>              (85 + 31) / 116][Stage 105:==============================================>     (103 + 13) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.726742369 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427104231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (58 + 55) / 113][Stage 106:===============================>                     (67 + 46) / 113][Stage 106:=======================================>             (84 + 29) / 113][Stage 106:==================================================>  (108 + 5) / 113]                                                                                [Stage 107:=============================>                       (63 + 51) / 114][Stage 107:===================================>                 (76 + 38) / 114][Stage 107:===========================================>         (93 + 21) / 114][Stage 107:==================================================>  (109 + 5) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.824169585 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=253", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=253,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360717104 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:========================================>            (86 + 27) / 113][Stage 108:=============================================>       (97 + 16) / 113][Stage 108:=================================================>   (105 + 8) / 113][Stage 108:====================================================>(112 + 1) / 113]                                                                                [Stage 109:=======================================>             (85 + 29) / 114][Stage 109:============================================>        (95 + 19) / 114][Stage 109:==================================================>  (109 + 5) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.965929077 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367478951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===================================>                 (76 + 37) / 113][Stage 110:==========================================>          (91 + 22) / 113][Stage 110:==============================================>     (101 + 12) / 113][Stage 110:===================================================> (110 + 3) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:==================================>                  (75 + 39) / 114][Stage 111:=======================================>             (86 + 28) / 114][Stage 111:==============================================>     (103 + 11) / 114][Stage 111:===================================================> (110 + 4) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.033989625 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=28", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=28,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423544129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:==============================>                      (69 + 51) / 120][Stage 112:=======================================>             (89 + 31) / 120][Stage 112:==============================================>     (107 + 13) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:==============================>                      (69 + 52) / 121][Stage 113:=====================================>               (86 + 35) / 121][Stage 113:=================================================>   (113 + 8) / 121][Stage 113:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.818980948 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370201146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=================================>                   (71 + 42) / 113][Stage 114:======================================>              (83 + 30) / 113][Stage 114:=============================================>       (97 + 16) / 113][Stage 114:===============================================>    (103 + 10) / 113][Stage 114:===================================================> (110 + 3) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:=================================>                   (73 + 41) / 114][Stage 115:=======================================>             (85 + 29) / 114][Stage 115:==========================================>          (92 + 22) / 114][Stage 115:============================================>        (95 + 19) / 114][Stage 115:=================================================>   (106 + 8) / 114][Stage 115:=================================================>   (107 + 7) / 114][Stage 115:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 11.832882235 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410780874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (59 + 54) / 113][Stage 116:===============================>                     (67 + 46) / 113][Stage 116:========================================>            (87 + 26) / 113][Stage 116:==============================================>     (102 + 11) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:===========================>                         (60 + 54) / 114][Stage 117:===============================>                     (67 + 47) / 114][Stage 117:=======================================>             (85 + 29) / 114][Stage 117:==============================================>     (102 + 12) / 114][Stage 117:===================================================> (111 + 3) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.481379005 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368729095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:====================================>                (78 + 35) / 113][Stage 118:===========================================>         (92 + 21) / 113][Stage 118:==============================================>     (102 + 11) / 113][Stage 118:====================================================>(111 + 2) / 113]                                                                                [Stage 119:=====================================>               (80 + 34) / 114][Stage 119:===========================================>         (93 + 21) / 114][Stage 119:=============================================>      (100 + 14) / 114][Stage 119:===================================================> (111 + 3) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.736783568 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=70,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422760536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (58 + 55) / 113][Stage 120:=============================>                       (62 + 51) / 113][Stage 120:====================================>                (77 + 36) / 113][Stage 120:==============================================>     (101 + 12) / 113][Stage 120:===================================================> (110 + 3) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===========================>                         (59 + 55) / 114][Stage 121:===============================>                     (67 + 47) / 114][Stage 121:========================================>            (87 + 27) / 114][Stage 121:===============================================>    (104 + 10) / 114][Stage 121:===================================================> (110 + 4) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.927017871 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:===========================>                         (59 + 54) / 113][Stage 122:==================================>                  (74 + 39) / 113][Stage 122:==========================================>          (91 + 22) / 113][Stage 122:=================================================>   (105 + 8) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:===========================>                         (59 + 55) / 114][Stage 123:================================>                    (69 + 45) / 114][Stage 123:=====================================>               (81 + 33) / 114][Stage 123:==============================================>     (102 + 12) / 114][Stage 123:===================================================> (111 + 3) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.609077507 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (58 + 55) / 113][Stage 124:===============================>                     (67 + 46) / 113][Stage 124:=====================================>               (80 + 33) / 113][Stage 124:==============================================>     (100 + 13) / 113][Stage 124:===================================================> (109 + 4) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:===========================>                         (60 + 54) / 114][Stage 125:==============================>                      (65 + 49) / 114][Stage 125:======================================>              (82 + 32) / 114][Stage 125:==============================================>     (103 + 11) / 114][Stage 125:====================================================>(112 + 2) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.146955152 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379365059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==================================>                  (74 + 39) / 113][Stage 126:=======================================>             (85 + 28) / 113][Stage 126:============================================>        (95 + 18) / 113][Stage 126:=================================================>   (105 + 8) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:=====================================>               (80 + 34) / 114][Stage 127:=========================================>           (89 + 25) / 114][Stage 127:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 2.855050502 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355846992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (77 + 36) / 113][Stage 128:==========================================>          (90 + 23) / 113][Stage 128:==============================================>     (100 + 13) / 113][Stage 128:==================================================>  (108 + 5) / 113]                                                                                [Stage 129:====================================>                (79 + 35) / 114][Stage 129:=========================================>           (89 + 25) / 114][Stage 129:==============================================>     (103 + 11) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.814282989 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395948794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 60) / 120][Stage 130:===========================>                         (62 + 58) / 120][Stage 130:=================================>                   (75 + 45) / 120][Stage 130:=========================================>           (93 + 27) / 120][Stage 130:=================================================>   (112 + 8) / 120]                                                                                [Stage 131:===========================>                         (63 + 58) / 121][Stage 131:================================>                    (75 + 46) / 121][Stage 131:=======================================>             (91 + 30) / 121][Stage 131:=================================================>   (113 + 8) / 121][Stage 131:===================================================> (117 + 4) / 121][Stage 131:===================================================> (118 + 3) / 121][Stage 131:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 7.415300304 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38063049 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===========================>                         (59 + 54) / 113][Stage 132:===================================>                 (76 + 37) / 113][Stage 132:============================================>        (94 + 19) / 113][Stage 132:===================================================> (109 + 4) / 113]                                                                                [Stage 133:===========================>                         (60 + 54) / 114][Stage 133:================================>                    (70 + 44) / 114][Stage 133:========================================>            (87 + 27) / 114][Stage 133:==========================================>          (92 + 22) / 114][Stage 133:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.829669496 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393541639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=============================>                       (63 + 50) / 113][Stage 134:===================================>                 (75 + 38) / 113][Stage 134:==========================================>          (91 + 22) / 113][Stage 134:=================================================>   (106 + 7) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:===========================>                         (59 + 55) / 114][Stage 135:================================>                    (69 + 45) / 114][Stage 135:=========================================>           (89 + 25) / 114][Stage 135:=============================================>      (100 + 14) / 114][Stage 135:==================================================>  (108 + 6) / 114][Stage 135:====================================================>(112 + 2) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.645745045 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=248", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=248,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389533283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (58 + 55) / 113][Stage 136:==============================>                      (64 + 49) / 113][Stage 136:====================================>                (77 + 36) / 113][Stage 136:=============================================>       (97 + 16) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:============================>                        (61 + 53) / 114][Stage 137:===============================>                     (68 + 46) / 114][Stage 137:========================================>            (87 + 27) / 114][Stage 137:=================================================>   (106 + 8) / 114][Stage 137:===================================================> (111 + 3) / 114][Stage 137:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.386245546 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37023173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (70 + 45) / 115][Stage 138:========================================>            (87 + 28) / 115][Stage 138:===============================================>    (105 + 10) / 115][Stage 138:==================================================>  (110 + 5) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:==================================>                  (76 + 40) / 116][Stage 139:========================================>            (88 + 28) / 116][Stage 139:=============================================>      (102 + 14) / 116][Stage 139:=================================================>   (108 + 8) / 116][Stage 139:==================================================>  (110 + 6) / 116][Stage 139:==================================================>  (111 + 5) / 116][Stage 139:===================================================> (112 + 4) / 116][Stage 139:====================================================>(114 + 2) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 11.335834534 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369204339 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===================================>                 (75 + 38) / 113][Stage 140:========================================>            (87 + 26) / 113][Stage 140:=============================================>       (97 + 16) / 113][Stage 140:================================================>    (104 + 9) / 113]                                                                                [Stage 141:==================================>                  (74 + 40) / 114][Stage 141:========================================>            (88 + 26) / 114][Stage 141:============================================>        (96 + 18) / 114][Stage 141:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.883053361 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365500106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:>                                                      (0 + 0) / 113][Stage 142:====================================>                (78 + 35) / 113][Stage 142:==========================================>          (90 + 23) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:===================================================> (109 + 4) / 113]                                                                                [Stage 143:======================================>              (82 + 32) / 114][Stage 143:===========================================>         (93 + 21) / 114][Stage 143:===============================================>    (104 + 10) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.849129119 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413215614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===========================>                         (62 + 58) / 120][Stage 144:==============================>                      (68 + 52) / 120][Stage 144:========================================>            (91 + 29) / 120][Stage 144:===============================================>    (110 + 10) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:=============================>                       (68 + 53) / 121][Stage 145:========================================>            (92 + 29) / 121][Stage 145:===============================================>    (111 + 10) / 121][Stage 145:====================================================>(119 + 2) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.744061646 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387372052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==============================>                      (67 + 48) / 115][Stage 146:======================================>              (83 + 32) / 115][Stage 146:============================================>        (97 + 18) / 115][Stage 146:==================================================>  (109 + 6) / 115]                                                                                [Stage 147:=================================>                   (74 + 42) / 116][Stage 147:==========================================>          (93 + 23) / 116][Stage 147:=================================================>   (108 + 8) / 116][Stage 147:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.713768681 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=144", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=144,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339425933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=====================================>               (81 + 34) / 115][Stage 148:==========================================>          (93 + 22) / 115][Stage 148:==============================================>     (102 + 13) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:=====================================>               (82 + 34) / 116][Stage 149:========================================>            (88 + 28) / 116][Stage 149:===============================================>    (105 + 11) / 116]                                                                                Time elapsed: 2.456553617 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376705754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==============================>                      (67 + 48) / 115][Stage 150:=====================================>               (81 + 34) / 115][Stage 150:===========================================>         (94 + 21) / 115][Stage 150:================================================>    (106 + 9) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:================================>                    (71 + 45) / 116][Stage 151:=======================================>             (86 + 30) / 116][Stage 151:=============================================>       (99 + 17) / 116][Stage 151:====================================================>(114 + 2) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.013934356 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=140", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=140,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389044487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:============================>                        (61 + 52) / 113][Stage 152:==================================>                  (74 + 39) / 113][Stage 152:===========================================>         (93 + 20) / 113][Stage 152:================================================>    (104 + 9) / 113]                                                                                [Stage 153:===========================>                         (60 + 54) / 114][Stage 153:==================================>                  (75 + 39) / 114][Stage 153:=======================================>             (85 + 29) / 114][Stage 153:================================================>    (105 + 9) / 114][Stage 153:===================================================> (111 + 3) / 114][Stage 153:====================================================>(112 + 2) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.61816988 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388866507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:==============================>                      (69 + 51) / 120][Stage 154:======================================>              (87 + 33) / 120][Stage 154:==============================================>     (107 + 13) / 120][Stage 154:====================================================>(119 + 1) / 120]                                                                                [Stage 155:==========================>                          (61 + 60) / 121][Stage 155:=============================>                       (67 + 54) / 121][Stage 155:=====================================>               (86 + 35) / 121][Stage 155:=============================================>      (106 + 15) / 121][Stage 155:====================================================>(119 + 2) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.647135356 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362405235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=================================>                   (75 + 43) / 118][Stage 156:=====================================>               (84 + 34) / 118][Stage 156:===========================================>         (97 + 21) / 118][Stage 156:==============================================>     (106 + 12) / 118][Stage 156:=====================================================(118 + 0) / 118]                                                                                [Stage 157:================================>                    (74 + 45) / 119][Stage 157:====================================>                (83 + 36) / 119][Stage 157:========================================>            (92 + 27) / 119][Stage 157:==============================================>     (107 + 12) / 119][Stage 157:==================================================>  (114 + 5) / 119][Stage 157:====================================================>(117 + 2) / 119][Stage 157:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.584813359 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=141", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=141,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392648994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===========================>                         (58 + 55) / 113][Stage 158:==============================>                      (64 + 49) / 113][Stage 158:======================================>              (83 + 30) / 113][Stage 158:=================================================>   (106 + 7) / 113]                                                                                [Stage 159:=============================>                       (63 + 51) / 114][Stage 159:=====================================>               (80 + 34) / 114][Stage 159:============================================>        (96 + 18) / 114][Stage 159:=================================================>   (107 + 7) / 114][Stage 159:====================================================>(112 + 2) / 114][Stage 159:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.225157778 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384748436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (69 + 46) / 115][Stage 160:============================================>        (96 + 19) / 115][Stage 160:================================================>    (106 + 9) / 115][Stage 160:====================================================>(113 + 2) / 115]                                                                                [Stage 161:=================================>                   (74 + 42) / 116][Stage 161:==========================================>          (94 + 22) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.909950649 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409835973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:==============================>                      (68 + 52) / 120][Stage 162:========================================>            (91 + 29) / 120][Stage 162:=============================================>      (105 + 15) / 120]                                                                                [Stage 163:===========================>                         (63 + 58) / 121][Stage 163:===============================>                     (72 + 49) / 121][Stage 163:=======================================>             (91 + 30) / 121][Stage 163:==============================================>     (109 + 12) / 121][Stage 163:===================================================> (118 + 3) / 121][Stage 163:====================================================>(119 + 2) / 121][Stage 163:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 7.827229464 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367792698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (77 + 36) / 113][Stage 164:=========================================>           (88 + 25) / 113][Stage 164:=============================================>       (98 + 15) / 113][Stage 164:=================================================>   (105 + 8) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:===================================>                 (76 + 38) / 114][Stage 165:==========================================>          (92 + 22) / 114][Stage 165:=============================================>      (100 + 14) / 114][Stage 165:==================================================>  (108 + 6) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.086366141 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334985106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:>                                                      (0 + 0) / 115][Stage 166:=====================================>               (82 + 33) / 115][Stage 166:===========================================>         (94 + 21) / 115][Stage 166:=================================================>   (107 + 8) / 115]                                                                                [Stage 167:======================================>              (84 + 32) / 116][Stage 167:==========================================>          (93 + 23) / 116][Stage 167:===============================================>    (106 + 10) / 116][Stage 167:==================================================>  (111 + 5) / 116][Stage 167:===================================================> (113 + 3) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.483417855 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390127757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:============================>                        (61 + 52) / 113][Stage 168:=================================>                   (72 + 41) / 113][Stage 168:==========================================>          (91 + 22) / 113][Stage 168:==================================================>  (107 + 6) / 113]                                                                                [Stage 169:===========================>                         (60 + 54) / 114][Stage 169:===============================>                     (67 + 47) / 114][Stage 169:====================================>                (78 + 36) / 114][Stage 169:=============================================>       (98 + 16) / 114][Stage 169:==================================================>  (109 + 5) / 114][Stage 169:====================================================>(112 + 2) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.803065931 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392995589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (59 + 54) / 113][Stage 170:=================================>                   (72 + 41) / 113][Stage 170:=========================================>           (88 + 25) / 113][Stage 170:================================================>    (104 + 9) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:===========================>                         (59 + 55) / 114][Stage 171:==============================>                      (65 + 49) / 114][Stage 171:=======================================>             (85 + 29) / 114][Stage 171:==============================================>     (102 + 12) / 114][Stage 171:==================================================>  (108 + 6) / 114][Stage 171:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.766638457 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384421329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (71 + 44) / 115][Stage 172:========================================>            (88 + 27) / 115][Stage 172:==============================================>     (103 + 12) / 115][Stage 172:===================================================> (111 + 4) / 115][Stage 172:====================================================>(114 + 1) / 115]                                                                                [Stage 173:===============================>                     (70 + 46) / 116][Stage 173:=======================================>             (86 + 30) / 116][Stage 173:============================================>        (98 + 18) / 116][Stage 173:==================================================>  (110 + 6) / 116][Stage 173:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.099929659 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354336805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (70 + 43) / 113][Stage 174:======================================>              (83 + 30) / 113][Stage 174:=========================================>           (89 + 24) / 113][Stage 174:================================================>    (104 + 9) / 113][Stage 174:====================================================>(111 + 2) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:==================================>                  (74 + 40) / 114][Stage 175:=======================================>             (85 + 29) / 114][Stage 175:============================================>        (95 + 19) / 114][Stage 175:===============================================>    (104 + 10) / 114][Stage 175:===================================================> (111 + 3) / 114][Stage 175:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 6.590261707 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400692785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (59 + 54) / 113][Stage 176:============================>                        (60 + 53) / 113][Stage 176:==================================>                  (73 + 40) / 113][Stage 176:==============================================>      (99 + 14) / 113][Stage 176:==================================================>  (108 + 5) / 113]                                                                                [Stage 177:============================>                        (62 + 52) / 114][Stage 177:================================>                    (69 + 45) / 114][Stage 177:=========================================>           (89 + 25) / 114][Stage 177:=================================================>   (106 + 8) / 114][Stage 177:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.679987274 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387706983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:==============================>                      (66 + 47) / 113][Stage 178:===================================>                 (75 + 38) / 113][Stage 178:==============================================>      (99 + 14) / 113][Stage 178:===================================================> (109 + 4) / 113]                                                                                [Stage 179:=============================>                       (63 + 51) / 114][Stage 179:===================================>                 (76 + 38) / 114][Stage 179:============================================>        (95 + 19) / 114][Stage 179:=================================================>   (107 + 7) / 114][Stage 179:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.495565491 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385592885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:==============================>                      (68 + 52) / 120][Stage 180:====================================>                (82 + 38) / 120][Stage 180:===========================================>        (101 + 19) / 120][Stage 180:====================================================>(118 + 2) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:=============================>                       (68 + 53) / 121][Stage 181:=====================================>               (85 + 36) / 121][Stage 181:===========================================>        (101 + 20) / 121][Stage 181:==================================================>  (116 + 5) / 121][Stage 181:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.351710235 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=94", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=94,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396223141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:==============================>                      (70 + 50) / 120][Stage 182:=======================================>             (90 + 30) / 120][Stage 182:===============================================>    (109 + 11) / 120]                                                                                [Stage 183:==========================>                          (61 + 60) / 121][Stage 183:===================================>                 (80 + 41) / 121][Stage 183:==========================================>          (97 + 24) / 121][Stage 183:=================================================>   (112 + 9) / 121][Stage 183:===================================================> (118 + 3) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.589685169 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39355179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:================================>                    (69 + 44) / 113][Stage 184:=======================================>             (84 + 29) / 113][Stage 184:==============================================>     (101 + 12) / 113][Stage 184:==================================================>  (108 + 5) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:===========================>                         (59 + 55) / 114][Stage 185:==============================>                      (66 + 48) / 114][Stage 185:======================================>              (82 + 32) / 114][Stage 185:==============================================>     (102 + 12) / 114][Stage 185:==================================================>  (109 + 5) / 114][Stage 185:====================================================>(112 + 2) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.473096625 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41029464 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:================================>                    (69 + 44) / 113][Stage 186:=======================================>             (85 + 28) / 113][Stage 186:==============================================>     (101 + 12) / 113][Stage 186:===================================================> (110 + 3) / 113]                                                                                [Stage 187:=============================>                       (63 + 51) / 114][Stage 187:===================================>                 (77 + 37) / 114][Stage 187:============================================>        (95 + 19) / 114][Stage 187:==============================================>     (103 + 11) / 114][Stage 187:===================================================> (111 + 3) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.643241482 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385227777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:============================>                        (65 + 55) / 120][Stage 188:=====================================>               (85 + 35) / 120][Stage 188:============================================>       (103 + 17) / 120][Stage 188:====================================================>(118 + 2) / 120]                                                                                [Stage 189:=============================>                       (67 + 54) / 121][Stage 189:==================================>                  (78 + 43) / 121][Stage 189:==========================================>         (100 + 21) / 121][Stage 189:=================================================>   (112 + 9) / 121][Stage 189:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.364596738 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404190538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (62 + 58) / 120][Stage 190:=================================>                   (76 + 44) / 120][Stage 190:========================================>            (91 + 29) / 120][Stage 190:=================================================>   (112 + 8) / 120]                                                                                [Stage 191:==========================>                          (61 + 60) / 121][Stage 191:===============================>                     (72 + 49) / 121][Stage 191:======================================>              (89 + 32) / 121][Stage 191:============================================>       (103 + 18) / 121][Stage 191:===================================================> (118 + 3) / 121][Stage 191:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.145351239 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397373347 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:============================>                        (60 + 53) / 113][Stage 192:===============================>                     (68 + 45) / 113][Stage 192:======================================>              (82 + 31) / 113][Stage 192:==============================================>     (101 + 12) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:=============================>                       (64 + 50) / 114][Stage 193:=================================>                   (73 + 41) / 114][Stage 193:============================================>        (96 + 18) / 114][Stage 193:==================================================>  (108 + 6) / 114][Stage 193:===================================================> (111 + 3) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.00372612 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395855485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 60) / 120][Stage 194:==============================>                      (70 + 50) / 120][Stage 194:==========================================>          (96 + 24) / 120][Stage 194:=================================================>   (112 + 8) / 120][Stage 194:====================================================>(119 + 1) / 120]                                                                                [Stage 195:==========================>                          (61 + 60) / 121][Stage 195:============================>                        (66 + 55) / 121][Stage 195:==================================>                  (79 + 42) / 121][Stage 195:===========================================>         (99 + 22) / 121][Stage 195:==================================================>  (116 + 5) / 121][Stage 195:====================================================>(119 + 2) / 121][Stage 195:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.958284059 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=249", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=249,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365240528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===================================>                 (76 + 37) / 113][Stage 196:=======================================>             (84 + 29) / 113][Stage 196:==============================================>      (99 + 14) / 113][Stage 196:===================================================> (109 + 4) / 113]                                                                                [Stage 197:======================================>              (83 + 31) / 114][Stage 197:============================================>        (95 + 19) / 114][Stage 197:==============================================>     (101 + 13) / 114][Stage 197:====================================================>(112 + 2) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.913325521 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=25", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=25,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359306853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (81 + 34) / 115][Stage 198:=========================================>           (89 + 26) / 115][Stage 198:==============================================>     (102 + 13) / 115][Stage 198:===================================================> (112 + 3) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:=====================================>               (82 + 34) / 116][Stage 199:========================================>            (89 + 27) / 116][Stage 199:=============================================>      (102 + 14) / 116][Stage 199:=================================================>   (109 + 7) / 116][Stage 199:==================================================>  (111 + 5) / 116][Stage 199:===================================================> (113 + 3) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.387189496 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373665873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (58 + 55) / 113][Stage 200:=============================>                       (62 + 51) / 113][Stage 200:=================================>                   (72 + 41) / 113][Stage 200:=============================================>       (98 + 15) / 113][Stage 200:=================================================>   (106 + 7) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:===========================>                         (59 + 55) / 114][Stage 201:============================>                        (62 + 52) / 114][Stage 201:===================================>                 (76 + 38) / 114][Stage 201:==============================================>     (101 + 13) / 114][Stage 201:===================================================> (110 + 4) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.114796463 seconds
res203: Int = 0

scala> 

scala> :quit

real	12m40.240s
user	12m43.540s
sys	3m39.020s
